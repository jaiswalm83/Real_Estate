using ODHDEVELOPERS.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using CrystalDecisions.CrystalReports.Engine;
using System.Globalization;
using System.Drawing.Imaging;
using System.Drawing;
using System.Data.Objects;
using System.Web.Helpers;
//using System.Data.Entity.Core.Objects;
using System.Data.Entity;
using Newtonsoft.Json;

namespace ODHDEVELOPERS.Controllers
{
    public class AdminController : Controller
    {
        public AdminController()
        {
            mrg = db.Members.Single(d => d.Id == 1);
             cg = db.CompanyInfos.Single(d => d.Id == 1);
        }

        #region Public Variable Start Here

        SqlConnection con = new SqlConnection();
        UsersContext db = new UsersContext();
        public static int plancode = 0, PId, pplancode;
        public static string NewBondid, typ;
        public static string NewAgentid, Branchcode, OperatorId, newaccountid, NewMemberid, block, bblock;
        public static int paymentno = 0, vmonth = 0, vvyear = 0, scss = 0, ecss, check = 0, sfilter = 0, Ttype = 0, Mon = 0, Yr = 0 ,pphaseid=0;
        public static string vnewagentid = string.Empty, opid = string.Empty, newbond = string.Empty;
        public static string ptype, shead;
        public static double bamt = 0, bussinessamt = 0;
        public static DateTime stdate = DateTime.Now.Date, enddate = DateTime.Now.Date, pdate = DateTime.Now.Date;
        public static DateTime ab = DateTime.Now.Date, b = DateTime.Now.Date;
        private static DateTime edate1 = DateTime.ParseExact("10/14/1774 12:00:00 AM", "MM/dd/yyyy hh:mm:ss tt", System.Globalization.CultureInfo.InvariantCulture);
        private static DateTime sdate1 = DateTime.ParseExact("10/14/1774 12:00:00 AM", "MM/dd/yyyy hh:mm:ss tt", System.Globalization.CultureInfo.InvariantCulture);

        //private static DateTime sdate1 = Convert.ParseExact("10/14/1774 12:00:00 AM");
        public static string bcodee = string.Empty;
        Double Per = 0;
        Member mrg = new Member();
        CompanyInfo cg = new CompanyInfo();
        #endregion
       
        #region Public Class Start Here
        public int authen()
        {
            if (!User.Identity.IsAuthenticated)
            {
                return 0;
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && (log.type == "Admin" || log.type == "Subadmin"))
                    {

                        return 1;
                    }
                    else
                    {
                        return 0;
                    }
                }
                else
                {
                    return 0;
                }
            }
        }
        string gidref()
        {

            long i = 1;
            foreach (byte b in Guid.NewGuid().ToByteArray())
            {

                i *= ((int)b + 1);
            }


            if (i < 0)
            {
                i = -i;
            }
            string s = i.ToString();
            return s.Substring(0, 4);


        }
        public void SaveVoucher(Voucher_Report vt, string newagentid, int month, int year, DateTime paymentdate, string chkimg, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string ddamount, string ddno, string cashamount)
        {
            UsersContext db = new UsersContext();
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month) + "," + year;
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
            var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
            var mon = mn.numbertomonthname(month);

            List<plan> pclist = new List<plan>();
            List<require> rlist = new List<require>();
            var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }
            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = year.ToString();

            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
            //------Inserting self voucher------------
            var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
            foreach (var p in spclist.ToList())
            {
                pclist.Add(new plan { planname = p.planname });
            }

            foreach (var pc in pclist)
            {
                var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                foreach (var spy in spylist.ToList())
                {

                    var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                    var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                    if (business > 0)
                    {
                        var percentage = (commission / business) * 100;
                        rlist.Add(new require { agentid = br.agencycode, newagentid = newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                    }
                }
            }

            //------End Inserting self voucher----------------

            //----------selecting team business and commission of selected month---------------

            var arlist = (from a in db.BrokerCommLists where a.newintroducerid == newagentid && a.month == mon && a.Year == year select a).ToList();
            List<agents> alist = new List<agents>();
            foreach (var aar in arlist)
            {
                alist.Add(new agents { agentcode = aar.agencycode });
            }

            foreach (var a in alist)
            {
                List<teamagents> tlist = new List<teamagents>();
                List<trequire> trlist = new List<trequire>();
                var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                int rcount = 0;
                rcount = rcount + 1;
                tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                var maxsragent = tlist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = tlist.Where(t => t.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = tlist.Count;
                }

                foreach (var tt in tlist)
                {
                    var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == year);
                    var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                    foreach (var nctr in nctrlist)
                    {
                        trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, plancode = nctr.plancode, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                    }

                }

                var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == year);
                var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                foreach (var dpc in dpclist)
                {
                    var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                    foreach (var dpy in dpylist)
                    {
                        var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                        var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                        if (tbusiness > 0)
                        {
                            var tpercentage = (tcommission / tbusiness) * 100;
                            rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                        }
                    }
                }

            }


            //----------End selecting team business and commission of selected month---------------

            var gbusiness = rlist.Sum(tr => tr.business);
            var gcommission = rlist.Sum(tr => tr.commission);
            var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
            var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);

            DateTime sdt, edt;
            string sdate = string.Empty;
            //----------End selecting team business and commission of selected month---------------
            if (month < 10)
            {
                sdate = "0" + month.ToString() + "/01/" + year.ToString();
            }
            else if (month >= 10)
            {
                sdate = month.ToString() + "/01/" + year.ToString();
            }
            sdt = Convert.ToDateTime(sdate);
            edt = sdt.AddMonths(1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);

            Voucher_Report vob = new Voucher_Report();
            vob.agentid = br.agencycode;
            vob.bussiness = gbusiness;
            vob.commission = gcommission;
            vob.tds = lesstds;
            vob.netamount = netamount;
            vob.sdate = sdt.Date;
            vob.edate = edt.Date;
            vob.date = paymentdate.Date;
            vob.month = month;
            vob.year = year.ToString();
            vob.branchcode = br.branchcode;
            vob.Operatorid = cr.AdminId;
            /////---------paymethod------------
            vob.paymethod = vt.paymethod;
            if (vt.paymethod == "Cheque")
            {
                vob.bank = vt.bank;
                vob.Account = vt.Account;
                vob.chequeno = vt.chequeno;
                vob.ACholdername = vt.ACholdername;
                vob.Branch = vt.Branch;
                vob.IFSCCode = vt.IFSCCode;
                vob.ChequeAmount = vt.ChequeAmount;
                vob.Chequedate = vt.Chequedate;
                vob.transactiontype = "NA";
                vob.Chequeimage = chkimg;
            }
            else if (vob.paymethod == "banktransaction")
            {
                vob.bank = trbank;
                vob.Account = holderacno;
                vob.chequeno = transactionid;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = tramount;
                vob.Chequedate = Convert.ToDateTime(transactiondate);
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = vt.transactiontype;
            }
            else if (vob.paymethod == "DD")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = ddno;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = ddamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            else if (vob.paymethod == "Cash")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = "NA";
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = cashamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            db.Voucher_Reports.Add(vob);
            db.SaveChanges();

            Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
            Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
            Double total = credit - debit;

            var pr = db.AppSettingTabs.Single(a => a.status == 1);
            if (pr.status == 1)
            {
                WalletBalance objWB = new WalletBalance();
                objWB.username = br.newagentid;
                objWB.mobile = br.mobile;
                objWB.customer_name = br.name;
                objWB.transactionid = db.Database.SqlQuery<string>("exec AutoGenerateWalletId").FirstOrDefault();
                objWB.transactiondate = DateTime.Now;
                objWB.amount = netamount;
                objWB.type = "Credit";
                objWB.referenceno = objWB.transactionid;
                objWB.txn_status = 1;
                objWB.trxnmessage = "Rs. " + netamount + " /- will be credited in your wallet";
                db.WalletBalances.Add(objWB);
                db.SaveChanges();
            }

            MyClass.Sendmsg(br.mobile, "Dear " + br.name + ", Your Voucher for " + monthname + " has been paid of amount:" + netamount + " on dated:" + DateTime.Now.ToString("dd/MM/yyyy") + " by Admin");

        }

        public void BWSaveVoucher(Voucher_Report vt, string newagentid, int month, int year, DateTime paymentdate, string chkimg, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string ddamount, string ddno, string cashamount)
        {

            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month) + "," + year;

            List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
            List<AgentDetail> blist = new List<AgentDetail>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(m => m.Id == 1);
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            var mon = mn.numbertomonthname(month);
            var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }


            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;

            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = year.ToString();
            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
            var commlist = (from co in db.commission_tabs where co.newagentid == newagentid && co.date.Month == month && co.date.Year == year select co).ToList();
            foreach (var com in commlist)
            {
                var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
            }

            var gbusiness = bwvlist.Sum(tr => tr.business);
            var gcommission = bwvlist.Sum(tr => tr.commission);
            var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
            var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);

            DateTime sdt, edt;
            string sdate = string.Empty;
            //----------End selecting team business and commission of selected month---------------
            if (month < 10)
            {
                sdate = "0" + month.ToString() + "/01/" + year.ToString();
            }
            else if (month >= 10)
            {
                sdate = month.ToString() + "/01/" + year.ToString();
            }
            sdt = Convert.ToDateTime(sdate);
            edt = sdt.AddMonths(1);


            Voucher_Report vob = new Voucher_Report();
            vob.agentid = br.agencycode;
            vob.bussiness = gbusiness;
            vob.commission = gcommission;
            vob.tds = lesstds;
            vob.netamount = netamount;
            vob.sdate = sdt.Date;
            vob.edate = edt.Date;
            vob.date = paymentdate;
            vob.month = month;
            vob.year = year.ToString();
            vob.branchcode = br.branchcode;
            vob.Operatorid = User.Identity.Name;
            /////---------paymethod------------
            vob.paymethod = vt.paymethod;
            if (vt.paymethod == "Cheque")
            {
                vob.bank = vt.bank;
                vob.Account = vt.Account;
                vob.chequeno = vt.chequeno;
                vob.ACholdername = vt.ACholdername;
                vob.Branch = vt.Branch;
                vob.IFSCCode = vt.IFSCCode;
                vob.ChequeAmount = vt.ChequeAmount;
                vob.Chequedate = vt.Chequedate;
                vob.transactiontype = "NA";
                vob.Chequeimage = chkimg;
            }
            else if (vob.paymethod == "banktransaction")
            {
                vob.bank = trbank;
                vob.Account = holderacno;
                vob.chequeno = transactionid;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = tramount;
                vob.Chequedate = Convert.ToDateTime(transactiondate);
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = vt.transactiontype;
            }
            else if (vob.paymethod == "DD")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = ddno;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = ddamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            else if (vob.paymethod == "Cash")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = "NA";
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = cashamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            db.Voucher_Reports.Add(vob);
            db.SaveChanges();

            Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
            Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
            Double total = credit - debit;

            var pr = db.AppSettingTabs.Single(a => a.status == 1);
            if (pr.status == 1)
            {
                WalletBalance objWB = new WalletBalance();
                objWB.username = br.newagentid;
                objWB.mobile = br.mobile;
                objWB.customer_name = br.name;
                objWB.transactionid = db.Database.SqlQuery<string>("exec AutoGenerateWalletId").FirstOrDefault();
                objWB.transactiondate = DateTime.Now;
                objWB.amount = netamount;
                objWB.type = "Credit";
                objWB.referenceno = objWB.transactionid;
                objWB.txn_status = 1;
                objWB.trxnmessage = "Rs. " + netamount + " /- will be credited in your wallet";
                db.WalletBalances.Add(objWB);
                db.SaveChanges();
            }

            MyClass.Sendmsg(br.mobile, "Dear " + br.name + ", Your Voucher for " + monthname + "  has been paid of amount:" + netamount + " on dated:" + DateTime.Now.ToString("dd/MM/yyyy") + " by Admin");

        }

        public void CCSaveVoucher(Voucher_Report vt, string newagentid, int month, int year, DateTime paymentdate, string chkimg, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string ddamount, string ddno, string cashamount)
        {

            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month) + "," + year;
            var mon = mn.numbertomonthname(month);
            #region Selecting Complete Chain Start Here

            int rcount = 0;
            List<BrokerChain> bclist = new List<BrokerChain>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(m => m.Id == 1);
            var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }

            bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name });
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.BrokerCommLists where al.newintroducerid == newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

            }

            #endregion

            #region Selecting CC Voucher Start Here

            List<require> rlist = new List<require>();
            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;
            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = year.ToString();
            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();

            foreach (var bc in bclist)
            {

                var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == year);
                List<plan> pclist = new List<plan>();

                //------Inserting self voucher------------
                var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                foreach (var p in spclist.ToList())
                {
                    pclist.Add(new plan { planname = p.planname });
                }

                foreach (var pc in pclist)
                {
                    var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                    foreach (var spy in spylist.ToList())
                    {

                        var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                        var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                        if (business > 0)
                        {
                            var percentage = (commission / business) * 100;
                            rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                        }
                    }
                }

                //------End Inserting self voucher----------------

            }
            var gbusiness = rlist.Sum(tr => tr.business);
            var gcommission = rlist.Sum(tr => tr.commission);
            var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
            var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);


            #endregion

            DateTime sdt, edt;
            string sdate = string.Empty;
            //----------End selecting team business and commission of selected month---------------
            if (month < 10)
            {
                sdate = "0" + month.ToString() + "/01/" + year.ToString();
            }
            else if (month >= 10)
            {
                sdate = month.ToString() + "/01/" + year.ToString();
            }
            sdt = Convert.ToDateTime(sdate);
            edt = sdt.AddMonths(1);


            Voucher_Report vob = new Voucher_Report();
            vob.agentid = br.agencycode;
            vob.bussiness = gbusiness;
            vob.commission = gcommission;
            vob.tds = lesstds;
            vob.netamount = netamount;
            vob.sdate = sdt.Date;
            vob.edate = edt.Date;
            vob.date = paymentdate;
            vob.month = month;
            vob.year = year.ToString();
            vob.branchcode = br.branchcode;
            vob.Operatorid = User.Identity.Name;
            /////---------paymethod------------
            vob.paymethod = vt.paymethod;
            if (vt.paymethod == "Cheque")
            {
                vob.bank = vt.bank;
                vob.Account = vt.Account;
                vob.chequeno = vt.chequeno;
                vob.ACholdername = vt.ACholdername;
                vob.Branch = vt.Branch;
                vob.IFSCCode = vt.IFSCCode;
                vob.ChequeAmount = vt.ChequeAmount;
                vob.Chequedate = vt.Chequedate;
                vob.transactiontype = "NA";
                vob.Chequeimage = chkimg;
            }
            else if (vob.paymethod == "banktransaction")
            {
                vob.bank = trbank;
                vob.Account = holderacno;
                vob.chequeno = transactionid;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = tramount;
                vob.Chequedate = Convert.ToDateTime(transactiondate);
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = vt.transactiontype;
            }
            else if (vob.paymethod == "DD")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = ddno;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = ddamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            else if (vob.paymethod == "Cash")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = "NA";
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = cashamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            db.Voucher_Reports.Add(vob);
            db.SaveChanges();
            Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
            Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
            Double total = credit - debit;

            var pr = db.AppSettingTabs.Single(a => a.status == 1);
            if (pr.status == 1)
            {
                WalletBalance objWB = new WalletBalance();
                objWB.username = br.newagentid;
                objWB.mobile = br.mobile;
                objWB.customer_name = br.name;
                objWB.transactionid = db.Database.SqlQuery<string>("exec AutoGenerateWalletId").FirstOrDefault();
                objWB.transactiondate = DateTime.Now;
                objWB.amount = netamount;
                objWB.type = "Credit";
                objWB.referenceno = objWB.transactionid;
                objWB.txn_status = 1;
                objWB.trxnmessage = "Rs. " + netamount + " /- will be credited in your wallet";
                db.WalletBalances.Add(objWB);
                db.SaveChanges();
            }

            MyClass.Sendmsg(br.mobile, "Dear " + br.name + ", Your Voucher for " + monthname + "  has been paid of amount:" + netamount + " on dated:" + DateTime.Now.ToString("dd/MM/yyyy") + " by Admin");

        }

        string gid()
        {

            long i = 1;
            foreach (byte b in Guid.NewGuid().ToByteArray())
            {

                i *= ((int)b + 1);
            }


            if (i < 0)
            {
                i = -i;
            }
            string s = i.ToString();
            return s.Substring(0, 10);


        }

        #endregion

        #region Json Method Start Here
        //public JsonResult GetPlotList(string block, int projectid)
        //{
        //    var br = db.BlockTabs.Single(p => p.block == block && p.Plancode == projectid);
        //    int min = br.min;
        //    int max = br.max;
        //    List<plotlist> plist = new List<plotlist>();
        //    var blockid = db.BlockTabs.Single(a => a.Plancode == projectid && a.block == block);
        //    var chelist = (from sp in db.tempappltabs where sp.PYN != "N" && sp.block == block && sp.projectid == projectid && sp.status == 1 select new { sp.plotno }).Distinct().ToList();
        //    var splist = (from sp in db.appltabs where sp.block == block && sp.projectid == projectid && sp.status != 4 && sp.status != 2 select new { sp.plotno }).Distinct().ToList();
        //    var hplist = (from sp in db.HoldingPlots where sp.holdblock == blockid.Id && sp.holdprojectid == projectid select new { sp.holdplotno }).Distinct().ToList();
        //    var holdlist = (from sp in db.HoldingPlots where sp.holdblock == blockid.Id && sp.holdprojectid == projectid && sp.holdstatus == 1 select new { sp.holdplotno }).Distinct().ToList();
        //    while (min <= max)
        //    {
        //        plist.Add(new plotlist { plotno = min });
        //        min = min + 1;

        //    }
        //    foreach (var p in splist)
        //    {
        //        plist.Remove(plist.Single(rr => rr.plotno == p.plotno));

        //    }

        //    foreach (var h in hplist)
        //    {
        //        plist.Remove(plist.Single(rr => rr.plotno == h.holdplotno));
        //    }
        //    foreach (var l in holdlist)
        //    {
        //        plist.Add(new plotlist { plotno = l.holdplotno });
        //    }
        //    foreach (var c in chelist)
        //    {
        //        plist.Remove(plist.Single(rr => rr.plotno == c.plotno));
        //    }
        //    return Json(plist.OrderBy(a => a.plotno), JsonRequestBehavior.AllowGet);
        //}

      
        public JsonResult AutoCompletetempRenewalBondId(string term)
        {
            var mlist = db.appltabs.Where(g => g.status == 1).ToList();
            //var mlist =(from a in db.appltabs where aa.Contains(a.newbondid) select a).ToList();

            var list = (from r in mlist where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public JsonResult AutoCompletetempBondId(string term)
        {
            var list = (from r in db.tempappltabs where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SelectRankName(string intro)
        {
            var list = (from o in db.AgentDetails where o.NewAgentId == intro select new { o.RankName });
            return Json(list, JsonRequestBehavior.AllowGet);

        }

        public JsonResult SelectIntroName(string intro)
        {
            var list = (from o in db.AgentDetails where o.NewAgentId == intro select new { o.name, o.Father });
            return Json(list, JsonRequestBehavior.AllowGet);

        }

        public JsonResult checkintrankadmin(string intcode, string rank)
        {
            string msg = string.Empty;
            List<DisplayMsg> msglist = new List<DisplayMsg>();
            var ar = db.AgentDetails.Single(pl => pl.NewAgentId == intcode);
            var rn = db.Ranktabs.Single(r => r.RankName == rank);
            if (ar.RankCode < rn.RankCode)
            {
                msg = "Please,select less or equal to introducer rank";
                msglist.Add(new DisplayMsg { msg = msg, type = 0 });
            }
            else
            {
                msg = "Ok";
                msglist.Add(new DisplayMsg { msg = msg, type = 1 });
            }
            return Json(msglist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteRelations(string term)
        {

            var list = (from r in db.relations where r.relations.ToLower().Contains(term.ToLower()) select new { r.relations }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteState(string term)
        {

            var list = (from r in db.CityStateTabs where r.state.ToLower().Contains(term.ToLower()) select new { r.state }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteBrachcode(string term)
        {

            var list = (from r in db.Branchtabs where r.BranchCode.ToLower().Contains(term.ToLower()) || r.BranchName.ToLower().Contains(term.ToLower()) select new { r.BranchCode, r.BranchName }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteExpenseBrachcode(string term)
        {
            var list = (from r in db.Expenses where r.branchcode.ToLower().Contains(term.ToLower()) select new { r.branchcode }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteAgentid(string term)
        {

            var list = (from r in db.AgentDetails where r.NewAgentId.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.NewAgentId, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteCommid(string term)
        {

            var list = (from r in db.BrokerCommLists where r.newagentid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newagentid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteNewPlan(string term)
        {

            var list = (from r in db.NewPlans where r.Planname.ToLower().Contains(term.ToLower()) select new { r.Planname }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteplan(string term)
        {

            var list = (from r in db.ProTerms
                        where r.projectname.ToLower().Contains(term.ToLower()) && r.status == 1
                        select new
                        {
                            projectname = r.projectname + " Term: " + r.term,
                            Id = r.Id
                        }).Distinct();

            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompletenEditplan(string term)
        {

            var list = (from r in db.Plan_Tabs where r.Planname.ToLower().Contains(term.ToLower()) select new { r.Planname, r.Plancode }).Distinct();

            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public JsonResult AutoCompletenPlan(string term)
        {

            var list = (from r in db.ProTerms where r.projectname.ToLower().Contains(term.ToLower()) && r.status == 1 select new { r.projectid, r.projectname }).Distinct();

            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteNFPlan(string term)
        {

            var list = (from r in db.MIPP_tabs where r.planname.ToLower().Contains(term.ToLower()) select new { r.planname, r.plancode }).Distinct();

            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompletePPPlan(string term)
        {

            var list = (from r in db.Pension_Tabs where r.Planname.ToLower().Contains(term.ToLower()) select new { r.Planname, r.Plancode }).Distinct();

            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompletenEditfplan(string term)
        {

            var list = (from r in db.Fixed_Tabs where r.Planname.ToLower().Contains(term.ToLower()) select new { r.Planname, r.Plancode }).Distinct();

            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleterdplan(string term)
        {

            var list = (from r in db.PlanTabs where r.Planname.ToLower().Contains(term.ToLower()) && r.Type == "RD" select new { r.Planname, r.Plancode }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompletefdplan(string term)
        {

            var list = (from r in db.PlanTabs where r.Planname.ToLower().Contains(term.ToLower()) && r.Type == "FD" select new { r.Planname, r.Plancode }).Distinct();

            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteBranch(string term)
        {
            var list = (from r in db.AgentDetails where (r.BranchCode.ToLower().Contains(term.ToLower()) && r.Status == 1) select new { r.BranchCode }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteBranchAppl(string term)
        {
            var list = (from r in db.appltabs where (r.branchcode.ToLower().Contains(term.ToLower()) && r.status == 1) select new { r.branchcode }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteOpId(string term)
        {
            var list = (from r in db.Operators where r.OperatorId.ToLower().Contains(term.ToLower()) || r.OperatorName.ToLower().Contains(term.ToLower()) select new { r.OperatorId, r.OperatorName }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteHRId(string term)
        {
            var list = (from r in db.HRTabs where r.HRId.ToLower().Contains(term.ToLower()) || r.HRName.ToLower().Contains(term.ToLower()) select new { r.HRId, r.HRName }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteBondId(string term)
        {
            
            var list = (from r in db.appltabs where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);

        }

        public JsonResult AutoCompleteBondAppl(string term)
        {
            var list = (from r in db.appltabs where ((r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower())) && (r.status == 1)) select new { r.newbondid }).Take(100).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectcssnoOperator(DateTime date, string opid)
        {
            var cssnolist = (from ins in db.Installmenttabs where ins.paymentdate == date && ins.opid == opid orderby ins.cssno select new { ins.cssno }).Distinct();
            return Json(cssnolist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectcssnoBranch(DateTime date, string bcode)
        {
            var cssnolist = (from ins in db.Installmenttabs where ins.paymentdate == date && ins.branch == bcode orderby ins.cssno select new { ins.cssno }).Distinct();
            return Json(cssnolist, JsonRequestBehavior.AllowGet);
        }

        public String GenerateImageTag(HttpPostedFileBase up)
        {
            String image = "";
            var imgtemp = Guid.NewGuid().ToString();
            if (up != null)
            {

                var chfl = true;
                while (chfl)
                {
                    image = "/images/original/" + imgtemp + ".jpg";
                    FileInfo fl = new FileInfo(Server.MapPath(image));
                    chfl = fl.Exists;
                    imgtemp = Guid.NewGuid().ToString();
                }
                Image im = Image.FromStream(up.InputStream);
                im.Save(Server.MapPath(image), ImageFormat.Jpeg);
            }
            return image;
        }
        public DateTime GetCleanDate(string date)
        {
            DateTime dt = new DateTime(1990, 1, 1);
            DateTime.TryParse(date, out dt);
            return dt;
        }
        #endregion

        #region Menu Start Here
        [HttpGet]
        public ActionResult AppMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }

        [HttpGet]
        public ActionResult PaymentMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpGet]
        public ActionResult MaturityMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Index()
        {
            List<Branchtab> br = new List<Branchtab>();
            //if (!IsLoggedIn())
            //{
            //    return RedirectToAction("Logout", "Admin");
            //}
            //else
            //{
                var ba = (from pass in db.Branchtabs select pass).ToList();
                return View(ba);

        //    }
        }

        [HttpGet]
        public ActionResult Create()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Adjustment()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Duplicate()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Voucher()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Update()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult CompleteReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult BranchReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult OperatorReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Setting()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Delete()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult SearchMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }


        #endregion

        #region Create Menu Start Here

        [HttpGet]
        public ActionResult CreateBranch()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }

            var data = db.Branchtabs.ToList();
                return View(data);
            
        }
        [HttpPost]
        public ActionResult CreateBranch(Branchtab model)
        {
            string pass = gid();
            var ci = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(m => m.Id == 1);
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var row = (from ob in db.Branchtabs where ob.BranchCode == model.BranchCode select ob).ToList();
                if (row.Count > 0)
                {
                    ViewBag.msg = "This Branch already exists";
                }
                else
                {
                    if (ModelState.IsValid)
                    {


                        con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "insertbranch";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Connection = con;

                        cmd.Parameters.AddWithValue("@prefix", model.prefix);
                        cmd.Parameters.AddWithValue("@branchname", model.BranchName);
                        cmd.Parameters.AddWithValue("@branchcode", model.BranchCode);
                        cmd.Parameters.AddWithValue("@branchaddress", model.branchaddress);
                        cmd.Parameters.AddWithValue("@mobile", model.mobile);
                        cmd.Parameters.AddWithValue("@district", model.BranchDistrict);
                        cmd.Parameters.AddWithValue("@password", pass);
                        cmd.Parameters.AddWithValue("@adminid", User.Identity.Name);

                        try
                        {
                            con.Open();
                            cmd.ExecuteNonQuery();
                            MyClass.Sendmsg(model.mobile, mr.branchname + " " + model.BranchName + " Created Successfully, UserId: " + model.BranchCode + " and Password: " + pass + " Please Visit "+cg.HeadOffice);
                            ViewBag.msg = mr.branchname + " Created Successfully....";

                        }

                        catch (Exception e)
                        {
                            ViewBag.msg = e.Message;
                        }
                        finally
                        {
                            con.Close();
                        }
                    }
                }
            }
            return View();

        }

        [HttpGet]
        public ActionResult CreateOperator()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult CreateOperator(Operator model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var row = (from ob in db.Operators where ob.OperatorId == model.OperatorId select ob).ToList();
                if (row.Count > 0)
                {
                    ViewBag.msg = "This Collection Point already exists";
                }
                else
                {
                    if (ModelState.IsValid)
                    {
                        string pass = gid();
                        var ci = db.CompanyInfos.Single(c => c.Id == 1);
                        con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                        SqlCommand cmd = new SqlCommand();
                        cmd.CommandText = "createoperator";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Connection = con;
                        cmd.Parameters.AddWithValue("@opid", model.OperatorId);
                        cmd.Parameters.AddWithValue("@opname", model.OperatorName);
                        cmd.Parameters.AddWithValue("@opmobileno", model.OperatorMobile);
                        cmd.Parameters.AddWithValue("@opaddress", model.OperatorAddress);
                        cmd.Parameters.AddWithValue("@opemailid", model.Operator_Mail);
                        cmd.Parameters.AddWithValue("@BranchCode", model.BranchCode);
                        cmd.Parameters.AddWithValue("@pass", pass);
                        cmd.Parameters.AddWithValue("@date", model.Cdate);

                        try
                        {
                            con.Open();
                            cmd.ExecuteNonQuery();
                            MyClass.Sendmsg(model.OperatorMobile, "Dear " + model.OperatorName + " Welcome to joining " + ci.CompanyName + ", your UserId is " + model.OperatorId + " and Password: " + pass + " Please Visit "+cg.HeadOffice);
                            ViewBag.msg = "Collection Point Created Successfully....";
                        }

                        catch (Exception e)
                        {
                            ViewBag.msg = e.Message;
                        }
                        finally
                        {
                            con.Close();
                        }

                    }
                }
            }
            return View(model);
        }

        [HttpGet]
        public ActionResult CreateHr()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult CreateHr(HRTab model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var row = (from ob in db.HRTabs where ob.HRId == model.HRId select ob).ToList();
                if (row.Count > 0)
                {
                    ViewBag.msg = "This HR already exists";
                }
                else
                {

                    var ci = db.CompanyInfos.Single(c => c.Id == 1);
                    string pass = gid();
                    HRTab hr = new HRTab();
                    hr.BranchCode = model.BranchCode;
                    hr.HRName = model.HRName;
                    hr.HRId = model.HRId;
                    hr.Mobile = model.Mobile;
                    hr.Address = model.Address;
                    hr.emailid = model.emailid;
                    hr.date = model.date;
                    hr.Password = pass;
                    hr.Type = "HR";
                    hr.Status = 1;
                    hr.companyid = ci.AdminId;

                    NewLogin nl = new NewLogin();
                    nl.UserName = model.HRId;
                    nl.Password = pass;
                    nl.Mobile = model.Mobile;
                    nl.type = "HR";
                    nl.status = 1;
                    nl.loginstatus = 0;
                    db.HRTabs.Add(hr);
                    db.NewLogins.Add(nl);
                    db.SaveChanges();

                    MyClass.Sendmsg(model.Mobile, "Dear " + model.HRName + " Welcome to joining " + ci.CompanyName + ", your UserId is " + model.HRId + " and Password: " + pass + " Please Visit "+cg.HeadOffice);
                    ViewBag.msg = "HR Created Successfully....";

                }
            }
            return View();
        }

        [HttpGet]
        public ActionResult CreatePlan()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult CreatePlan(Plan ob)
        {

            var Duplicate = (from o in db.Plans where o.Planname == ob.Planname || o.shortcutname == ob.shortcutname select o).ToList();

            if (Duplicate.Count > 0)
            {
                Response.Write("<script>alert('This Plan Already exist ')</script>");
            }

            else
            {
                if (ModelState.IsValid)
                {
                    Plan ph = new Plan();
                    ph.Planname = ob.Planname;
                    ph.shortcutname = ob.shortcutname;
                    ph.type = ob.type;
                    ph.status = 1;
                    db.Plans.Add(ph);
                    db.SaveChanges();
                    var pr = db.Plans.Single(p => p.shortcutname == ob.shortcutname);

                    PlotLimit pl = new PlotLimit();
                    pl.projectid = pr.Plancode;
                    pl.projectname = pr.Planname;
                    pl.minvalue = 0;
                    pl.maxvalue = 0;
                    pl.status = 1;
                    db.PlotLimits.Add(pl);
                    db.SaveChanges();

                    Response.Write("<script>alert('Plan Added successfully ')</script>");
                }
            }
            return View();

        }

        [HttpGet]
        public ActionResult CreatePhase()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult CreatePhase(PhaseTab ob)
        {

            var Duplicate = (from o in db.PhaseTabs where o.projectid == ob.projectid && o.Phase == ob.Phase select o).ToList();

            if (Duplicate.Count > 0)
            {
                Response.Write("<script>alert('This Phase Already exist ')</script>");
            }

            else
            {
                if (ModelState.IsValid)
                {
                    PhaseTab pl = new PhaseTab();
                    pl.projectid = ob.projectid;
                    pl.Phase = ob.Phase;
                    pl.status = 1;
                    db.PhaseTabs.Add(pl);
                    db.SaveChanges();
                    Response.Write("<script>alert('Phase Added successfully ')</script>");
                }
            }
            return View();

        }

        [HttpGet]
        public ActionResult CreateBlock()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult CreateBlock(BlockTab ob)
        {

            var Duplicate = (from o in db.BlockTabs where o.block == ob.block && o.Plancode == ob.Plancode && o.phaseid == ob.phaseid select o).ToList();

            if (Duplicate.Count > 0)
            {
                Response.Write("<script>alert('This Block Already exist ')</script>");
            }

            else
            {
                if (ModelState.IsValid)
                {
                    BlockTab pl = new BlockTab();
                    var pname = db.Plans.Single(a => a.Plancode == ob.Plancode).Planname;
                    pl.phaseid = ob.phaseid;
                    pl.Plancode = ob.Plancode;
                    pl.Planname = pname;
                    pl.block = ob.block;
                    pl.min = ob.min;
                    pl.max = ob.max;
                    pl.createdate = DateTime.Now.Date;
                    pl.status = 1;
                    db.BlockTabs.Add(pl);
                    db.SaveChanges();
                    Response.Write("<script>alert('Block Added successfully ')</script>");
                }
            }
            return View();

        }

        [HttpGet]
        public ActionResult ProjectTerm()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }

        }
        [HttpPost]
        public ActionResult ProjectTerm(ProTerm model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var count = db.ProTerms.Where(c => c.projectid == model.projectid && c.term == model.term).Count();
                var pr = db.Plans.Single(p => p.Plancode == model.projectid);
                if (count == 0)
                {
                    ProTerm pt = new ProTerm();
                    pt.projectid = model.projectid;
                    pt.projectname = pr.Planname;
                    pt.term = model.term;
                    pt.status = 1;
                    db.ProTerms.Add(pt);
                    db.SaveChanges();

                    RateTab rt = new RateTab();
                    rt.projectid = model.projectid;
                    rt.projectname = pr.Planname;
                    rt.shortcutname = pr.shortcutname;
                    rt.term = model.term;
                    rt.plotcost = 0;
                    rt.plotsize = 50;
                    rt.quotaper = 0;
                    rt.status = 1;
                    rt.noi = Convert.ToInt32(model.term) * 12;
                    db.RateTabs.Add(rt);
                    db.SaveChanges();

                    var mr = db.ProTerms.Single(np => np.projectname == pr.Planname && np.term == model.term);
                    var ranklist = (from p in db.Ranktabs select p).ToList();
                    foreach (var rank in ranklist)
                    {
                        for (int i = 1; i <= 5; i++)
                        {
                            comm_tab com = new comm_tab();
                            com.rankcode = rank.RankCode;
                            com.plancode = mr.Id;
                            com.year = i;
                            com.commission = 0;
                            db.comm_tabs.Add(com);
                            db.SaveChanges();
                        }

                        spotcomm_tab scom = new spotcomm_tab();
                        scom.rankcode = rank.RankCode;
                        scom.plancode = mr.Id;
                        scom.year = 1;
                        scom.commission = 0;
                        db.spotcomm_tabs.Add(scom);
                        db.SaveChanges();

                    }



                    Response.Write("<script>alert('Project Created Successfully')</script>");
                }
                else
                {
                    Response.Write("<script>alert('This Project Is Already Added')</script>");
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult Planname()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }

        }
        [HttpPost]
        public ActionResult Planname(NewPlan model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var count = db.NewPlans.Where(c => c.Planname == model.Planname).Count();

                if (count == 0)
                {
                    db.NewPlans.Add(model);
                    db.SaveChanges();
                    Response.Write("<script>alert('Plan Created Successfully')</script>");
                }
                else
                {
                    Response.Write("<script>alert('This Plan Is Already Added')</script>");
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult RdPlan()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult RdPlan(Plan_Tab model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var count = db.Plan_Tabs.Where(o => o.Amount == model.Amount && o.Plancode == model.Plancode).Count();

                if (count == 0)
                {
                    var row = db.NewPlans.Single(d => d.Plancode == model.Plancode);
                    Plan_Tab pt = new Plan_Tab();
                    pt.Plancode = row.Plancode;
                    pt.Term = row.Term;
                    pt.Planname = row.Planname;
                    pt.Plotsize = model.Plotsize;
                    pt.Amount = model.Amount;
                    pt.Monthly = model.Monthly;
                    pt.Quarterly = model.Quarterly;
                    pt.Halfyearly = model.Halfyearly;
                    pt.Yearly = model.Yearly;
                    pt.EstimatedValue = model.EstimatedValue;
                    pt.Accidental = model.Accidental;
                    pt.type = row.Type;

                    db.Plan_Tabs.Add(pt);
                    db.SaveChanges();
                    Response.Write("<script>alert('Plan Added Successfully')</script>");
                }
                else
                {
                    Response.Write("<script>alert('This Plan Is Already Added. Make Sure You are adding a New Plan')</script>");
                }
                return View();


            }
        }

        [HttpGet]
        public ActionResult FdPlan()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult FdPlan(Fixed_Tab model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var count = db.Fixed_Tabs.Where(o => o.Amount == model.Amount && o.Plancode == model.Plancode).Count();

                if (count == 0)
                {
                    var row = db.NewPlans.Single(d => d.Plancode == model.Plancode);
                    Fixed_Tab pt = new Fixed_Tab();

                    pt.Plancode = row.Plancode;
                    pt.Planname = row.Planname;
                    pt.Term = row.Term;
                    pt.Plotsize = model.Plotsize;
                    pt.Amount = model.Amount;
                    pt.EstimatedValue = model.EstimatedValue;
                    pt.Accidental = model.Accidental;
                    pt.type = row.Type;
                    db.Fixed_Tabs.Add(pt);
                    db.SaveChanges();
                    Response.Write("<script>alert('Plan Added Successfully')</script>");
                }
                else
                {
                    Response.Write("<script>alert('This Plan Is Already Added. Make Sure You are adding a New Plan')</script>");
                }
                return View();


            }

        }

        [HttpGet]
        public ActionResult MIPPPlan()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult MIPPPlan(MIPP_tab model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var count = db.MIPP_tabs.Where(o => o.amount == model.amount && o.plancode == model.plancode).Count();

                if (count == 0)
                {
                    var row = db.NewPlans.Single(d => d.Plancode == model.plancode);
                    MIPP_tab pt = new MIPP_tab();

                    pt.plancode = row.Plancode;
                    pt.planname = row.Planname;
                    pt.term = row.Term;
                    pt.plotsize = 0;
                    pt.Yearly = model.Yearly;
                    pt.amount = model.amount;
                    pt.FiveERV = model.FiveERV;
                    pt.SevenERV = model.SevenERV;
                    pt.TenERV = model.TenERV;
                    pt.type = row.Type;

                    db.MIPP_tabs.Add(pt);
                    db.SaveChanges();
                    Response.Write("<script>alert('Plan Added Successfully')</script>");
                }
                else
                {
                    Response.Write("<script>alert('This Plan Is Already Added. Make Sure You are adding a New Plan')</script>");
                }
                return View();


            }

        }

        [HttpGet]
        public ActionResult PensionPlan()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult PensionPlan(Pension_Tab model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var count = db.Pension_Tabs.Where(o => o.Amount == model.Amount && o.Plancode == model.Plancode).Count();

                if (count == 0)
                {
                    var row = db.NewPlans.Single(d => d.Plancode == model.Plancode);
                    Pension_Tab pt = new Pension_Tab();

                    pt.Plancode = row.Plancode;
                    pt.Planname = row.Planname;
                    pt.Term = row.Term;
                    pt.Plotsize = model.Plotsize;
                    pt.Amount = model.Amount;
                    pt.Monthly = model.Monthly;
                    pt.Quarterly = model.Quarterly;
                    pt.Halfyearly = model.Halfyearly;
                    pt.Yearly = model.Yearly;
                    pt.Profit = model.Profit;
                    pt.EstimatedValue = model.EstimatedValue;
                    pt.type = row.Type;
                    db.Pension_Tabs.Add(pt);
                    db.SaveChanges();
                    Response.Write("<script>alert('Plan Added Successfully')</script>");
                }
                else
                {
                    Response.Write("<script>alert('This Plan Is Already Added. Make Sure You are adding a New Plan')</script>");
                }
                return View();


            }

        }

        [HttpGet]
        public ActionResult CreateSisPlan()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult CreateSisPlan(PlanTab model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (ModelState.IsValid)
                {
                    var Duplicate = (from o in db.PlanTabs where o.Planname == model.Planname select o).ToList();

                    if (Duplicate.Count > 0)
                    {
                        Response.Write("<script>alert('This Plan " + model.Planname + " Already exist ')</script>");
                    }

                    else
                    {
                        db.PlanTabs.Add(model);
                        db.SaveChanges();
                        Response.Write("<script>alert('Plan Successfully Created')</script>");

                    }

                }
            }
            return View();


        }

        [HttpGet]
        public ActionResult CreateMisPlan()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult CreateMisPlan(PlanTab model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var Duplicate = (from o in db.PlanTabs where o.Planname == model.Planname && o.mode == model.mode select o).ToList();
                if (Duplicate.Count > 0)
                {
                    Response.Write("<script>alert('This Plan of Mode " + model.mode + " Already exist ')</script>");
                }
                else
                {
                    db.PlanTabs.Add(model);
                    db.SaveChanges();
                    Response.Write("<script>alert('Plan Successfully Created')</script>");
                }
                return View();

            }

        }

        [HttpGet]
        public ActionResult CreateRank()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult CreateRank(Ranktab ob)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var Duplicate = (from o in db.Ranktabs where o.RankName == ob.RankName select o).ToList();

                if (Duplicate.Count > 0)
                {
                    Response.Write("<script>alert('This rank Already exist ')</script>");
                }

                else
                {
                    db.Ranktabs.Add(ob);
                    db.SaveChanges();
                    int rcount = (from aa in db.Ranktabs select aa).Count();


                    int count = (from aa in db.AgentDetails select aa).Count();
                    if (count > 0)
                    {
                        var min = (from aa in db.AgentDetails select aa.AgencyCode).Min();
                        AgentDetail aob = db.AgentDetails.Single(a => a.AgencyCode == min);
                        aob.RankCode = rcount;
                        aob.RankName = ob.RankName;

                        db.SaveChanges();
                    }

                    var planlist = (from p in db.ProTerms select p).ToList();
                    foreach (var plan in planlist)
                    {
                        for (int i = 1; i <= 5; i++)
                        {
                            comm_tab com = new comm_tab();
                            com.rankcode = ob.RankCode;
                            com.plancode = plan.Id;
                            com.year = i;
                            com.commission = 0;
                            db.comm_tabs.Add(com);
                            db.SaveChanges();

                        }

                        spotcomm_tab scom = new spotcomm_tab();
                        scom.rankcode = ob.RankCode;
                        scom.plancode = plan.Id;
                        scom.year = 1;
                        scom.commission = 0;
                        db.spotcomm_tabs.Add(scom);
                        db.SaveChanges();
                    }

                    Response.Write("<script>alert('Rank Successfully Created')</script>");
                }
            }
            return View();
        }

        [HttpGet]
        public ActionResult FillSalary()
        {
            List<Salary> sl = new List<Salary>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View(sl);
            }
        }
        [HttpPost]
        public ActionResult FillSalary(SalaryTab model, string planname)
        {
            List<Salary> sl = new List<Salary>();

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int rcode = 1;
                var count = (from r in db.Ranktabs select r).Count();
                var pr = db.PlanTabs.Single(p => p.Planname == planname);
                while (rcode <= count)
                {
                    sl.Add(new Salary { rankcode = rcode, BasicSalary = 0, Bonuspercent = 0, insurance = 0 });
                    SalaryTab st = new SalaryTab();
                    st.Rank = rcode;
                    st.Salary = 0;
                    st.Bonuspercent = 0;
                    st.Insurance = 0;
                    st.plancode = pr.Plancode;
                    db.SalaryTabs.Add(st);
                    db.SaveChanges();

                    rcode = rcode + 1;
                }
                return View(sl);
            }
        }

        [HttpGet]
        public ActionResult FillCommission()
        {
            List<Commission> commlist = new List<Commission>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["count"] = commlist.Count;
                return View(commlist);

            }

        }
        [HttpPost]
        public ActionResult FillCommission(int plancode)
        {
            int rankno = 1;
            var count = (from r in db.Ranktabs select r).Count();

            List<Commission> commlist = new List<Commission>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {



                var ob = db.ProTerms.Single(a => a.Id == plancode);

                ViewData["planname"] = ob.projectname + "(" + ob.term + ")";
                var counta = (from comm in db.comm_tabs where comm.plancode == plancode select comm).Count();

                if (counta == 0)
                {
                    while (rankno <= count)
                    {
                        commlist.Add(new Commission { rankcode = rankno, plancode = plancode, commyear = 0, commyear2 = 0, commyear3 = 0, commyear4 = 0, commyear5 = 0 });
                        rankno = rankno + 1;
                    }
                    for (int i = 1; i <= 5; i++)
                    {
                        for (int rcode = 1; rcode <= count; rcode++)
                        {

                            comm_tab com = new comm_tab();
                            com.rankcode = rcode;
                            com.plancode = plancode;
                            com.year = i;
                            com.commission = 0;
                            db.comm_tabs.Add(com);
                            db.SaveChanges();
                        }

                    }
                }

                else
                {
                    while (rankno <= count)
                    {

                        var year = db.comm_tabs.Single(up => up.plancode == plancode && up.rankcode == rankno && up.year == 1);
                        var year2 = db.comm_tabs.Single(up => up.plancode == plancode && up.rankcode == rankno && up.year == 2);
                        var year3 = db.comm_tabs.Single(up => up.plancode == plancode && up.rankcode == rankno && up.year == 3);
                        var year4 = db.comm_tabs.Single(up => up.plancode == plancode && up.rankcode == rankno && up.year == 4);
                        var year5 = db.comm_tabs.Single(up => up.plancode == plancode && up.rankcode == rankno && up.year == 5);
                        commlist.Add(new Commission { rankcode = rankno, plancode = plancode, commyear = year.commission, commyear2 = year2.commission, commyear3 = year3.commission, commyear4 = year4.commission, commyear5 = year5.commission });


                        rankno = rankno + 1;
                    }
                }

                ViewData["count"] = commlist.Count;
                return View(commlist);
            }
        }
        public JsonResult EditCommission(Commission model)
        {
            // Update model to your db  
            var w = db.ProTerms.Single(d => d.Id == model.plancode);
            ViewData["planname"] = w.projectname + "(" + w.term + ")";
            int rankno = 1;
            var count = (from r in db.Ranktabs select r).Count();
            List<Commission> commlist = new List<Commission>();
            if (model.rankcode != 0)
            {
                var rank = db.Ranktabs.Single(r => r.RankCode == model.rankcode);
                var rcomm = db.comm_tabs.Single(a => a.plancode == model.plancode && a.rankcode == model.rankcode && a.year == 1);
                var rcomm2 = db.comm_tabs.Single(a => a.plancode == model.plancode && a.rankcode == model.rankcode && a.year == 2);
                var rcomm3 = db.comm_tabs.Single(a => a.plancode == model.plancode && a.rankcode == model.rankcode && a.year == 3);
                var rcomm4 = db.comm_tabs.Single(a => a.plancode == model.plancode && a.rankcode == model.rankcode && a.year == 4);
                var rcomm5 = db.comm_tabs.Single(a => a.plancode == model.plancode && a.rankcode == model.rankcode && a.year == 5);

                rcomm.commission = model.commyear;
                rcomm2.commission = model.commyear2;
                rcomm3.commission = model.commyear3;
                rcomm4.commission = model.commyear4;
                rcomm5.commission = model.commyear5;


                db.SaveChanges();

                while (rankno <= count)
                {

                    var year = db.comm_tabs.Single(up => up.plancode == model.plancode && up.rankcode == rankno && up.year == 1);
                    var year2 = db.comm_tabs.Single(up => up.plancode == model.plancode && up.rankcode == rankno && up.year == 2);
                    var year3 = db.comm_tabs.Single(up => up.plancode == model.plancode && up.rankcode == rankno && up.year == 3);
                    var year4 = db.comm_tabs.Single(up => up.plancode == model.plancode && up.rankcode == rankno && up.year == 4);
                    var year5 = db.comm_tabs.Single(up => up.plancode == model.plancode && up.rankcode == rankno && up.year == 5);
                    commlist.Add(new Commission { rankcode = rankno, plancode = model.plancode, commyear = year.commission, commyear2 = year2.commission, commyear3 = year3.commission, commyear4 = year4.commission, commyear5 = year5.commission });


                    rankno = rankno + 1;
                }

                Response.Write("<script>alert('Commission for Rank " + rank.RankName + " updated successfully ')</script>");
            }

            ViewData["count"] = commlist.Count;
            return Json(commlist, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult FillSpotCommission()
        {
            List<Commission> commlist = new List<Commission>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["count"] = commlist.Count;
                return View(commlist);

            }

        }
        [HttpPost]
        public ActionResult FillSpotCommission(int plancode)
        {
            int rankno = 1;
            var count = (from r in db.Ranktabs select r).Count();

            List<Commission> commlist = new List<Commission>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {



                var ob = db.ProTerms.Single(a => a.Id == plancode);

                ViewData["planname"] = ob.projectname + "(" + ob.term + ")";
                var counta = (from comm in db.spotcomm_tabs where comm.plancode == plancode select comm).Count();

                if (counta == 0)
                {
                    while (rankno <= count)
                    {
                        commlist.Add(new Commission { rankcode = rankno, plancode = plancode, commyear = 0 });
                        rankno = rankno + 1;
                    }

                    for (int rcode = 1; rcode <= count; rcode++)
                    {
                        spotcomm_tab com = new spotcomm_tab();
                        com.rankcode = rcode;
                        com.plancode = plancode;
                        com.year = 1;
                        com.commission = 0;
                        db.spotcomm_tabs.Add(com);
                        db.SaveChanges();
                    }
                }

                else
                {
                    while (rankno <= count)
                    {

                        var year = db.spotcomm_tabs.Single(up => up.plancode == plancode && up.rankcode == rankno && up.year == 1);

                        commlist.Add(new Commission { rankcode = rankno, plancode = plancode, commyear = year.commission });


                        rankno = rankno + 1;
                    }
                }

                ViewData["count"] = commlist.Count;
                return View(commlist);
            }
        }
        public JsonResult EditSpotCommission(Commission model)
        {
            // Update model to your db  
            var w = db.ProTerms.Single(d => d.Id == model.plancode);
            ViewData["planname"] = w.projectname + "(" + w.term + ")";
            int rankno = 1;
            var count = (from r in db.Ranktabs select r).Count();
            List<Commission> commlist = new List<Commission>();
            if (model.rankcode != 0)
            {
                var rank = db.Ranktabs.Single(r => r.RankCode == model.rankcode);
                var rcomm = db.spotcomm_tabs.Single(a => a.plancode == model.plancode && a.rankcode == model.rankcode && a.year == 1);
                rcomm.commission = model.commyear;
                db.SaveChanges();

                while (rankno <= count)
                {

                    var year = db.spotcomm_tabs.Single(up => up.plancode == model.plancode && up.rankcode == rankno && up.year == 1);
                    commlist.Add(new Commission { rankcode = rankno, plancode = model.plancode, commyear = year.commission });

                    rankno = rankno + 1;
                }

                Response.Write("<script>alert('Commission for Rank " + rank.RankName + " updated successfully ')</script>");
            }

            ViewData["count"] = commlist.Count;
            return Json(commlist, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult AddHead()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var head = db.HeadTabs.ToList();
                return View(head);
            }
        }
        [HttpPost]
        public ActionResult AddHead(HeadTab ob)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var Duplicate = (from o in db.HeadTabs where o.head == ob.head select o).ToList();

                if (Duplicate.Count > 0)
                {
                    Response.Write("<script>alert('This Head Already exist ')</script>");
                }

                else
                {
                    if (ModelState.IsValid)
                    {
                        db.HeadTabs.Add(ob);
                        db.SaveChanges();
                        Response.Write("<script>alert('Head Added successfully ')</script>");
                    }
                }
                var head = db.HeadTabs.ToList();
                return View(head);
            }
        }

        [HttpGet]
        public ActionResult createrelation()
        {
            List<relation> rlist = new List<relation>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                rlist = (from ci in db.relations orderby ci.relations select ci).ToList();
                ViewData["count"] = rlist.Count();
                return View(rlist);
            }
        }
        [HttpPost]
        public ActionResult createrelation(relation ob)
        {
            List<relation> rlist = new List<relation>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var Duplicate = (from o in db.relations where o.relations == ob.relations select o).ToList();

                if (Duplicate.Count > 0)
                {
                    Response.Write("<script>alert('This Relation Already exist ')</script>");
                }

                else
                {
                    if (ModelState.IsValid)
                    {
                        db.relations.Add(ob);
                        db.SaveChanges();
                        Response.Write("<script>alert('Relation Added successfully ')</script>");
                    }
                }
                rlist = (from ci in db.relations orderby ci.relations select ci).ToList();
                ViewData["count"] = rlist.Count();
                return View(rlist);
            }
        }

        [HttpGet]
        public ActionResult SetTdsandLateFine()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult SetTdsandLateFine(Double TDS, Double NPCTDS, Double latefine, Double processingfee, Double applicationfee, Double memberfee, Double agencyformfee, Double accountformfee, Double accountopeningfee, Double revivalfee)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (ModelState.IsValid)
                {
                    TDSLF_tab ob = db.TDSLF_tabs.Single(a => a.Id == 1);
                    ob.TDS = TDS;
                    ob.NPCTDS = NPCTDS;
                    ob.latefine = latefine;
                    ob.processingfee = processingfee;
                    ob.applicationfee = applicationfee;
                    ob.agencyformfee = agencyformfee;
                    ob.accountformfee = accountformfee;
                    ob.accountopeningfee = accountopeningfee;
                    ob.memberfee = memberfee;
                    ob.revivalfee = revivalfee;
                    db.Entry<TDSLF_tab>(ob).State = System.Data.Entity.EntityState.Modified;
                    //db.Entry(ob).State = EntityState.Modified;
                    db.SaveChanges();
                    Response.Write("<script>alert('Record updated successfully ')</script>");
                }
            }
            return View();
        }

        [HttpGet]
        public ActionResult BookingAmount()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult BookingAmount(BookingTab ob)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                BookingTab bar = db.BookingTabs.Single(b => b.Id == 1);
                bar.bookingrate = ob.bookingrate;
                bar.spotcomm = ob.spotcomm;
                db.SaveChanges();
                return View();
            }

        }

        [HttpGet]
        public ActionResult AddExpense()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult AddExpense(Expense ep, string head, string remarks, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string ddno, HttpPostedFileBase Chequeimage, DateTime date, Double amount = 0, Double DDamount = 0, int type = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                Expense ob = new Expense();
                ob.head = head;
                ob.Remark = remarks;
                ob.amount = amount;
                ob.date_time = date;
                ob.branchcode = User.Identity.Name;
                ob.opid = User.Identity.Name;
                ob.type = type;
                ob.paymethod = ep.paymethod;
                if (ob.paymethod == "Cheque")
                {
                    ob.bank = ep.bank;
                    ob.Account = ep.Account;
                    ob.chequeno = ep.chequeno;
                    ob.ACholdername = ep.ACholdername;
                    ob.Branch = ep.Branch;
                    ob.IFSCCode = ep.IFSCCode;
                    ob.ChequeAmount = ep.ChequeAmount;
                    ob.Chequedate = ep.Chequedate;
                    ob.transactiontype = "NA";

                    if (Chequeimage != null)
                    {
                        string img = gid();
                        ob.Chequeimage = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        ob.Chequeimage = "~/Photo/default.jpg";

                    }
                }
                else if (ob.paymethod == "banktransaction")
                {
                    ob.bank = trbank;
                    ob.Account = holderacno;
                    ob.chequeno = transactionid;
                    ob.ACholdername = "NA";
                    ob.Branch = "NA";
                    ob.IFSCCode = "NA";
                    ob.ChequeAmount = tramount;
                    ob.Chequedate = Convert.ToDateTime(transactiondate);
                    ob.Chequeimage = "~/Photo/default.jpg";
                    ob.transactiontype = ep.transactiontype;
                }
                else if (ob.paymethod == "DD")
                {
                    ob.bank = "NA";
                    ob.Account = "NA";
                    ob.chequeno = ddno;
                    ob.ACholdername = "NA";
                    ob.Branch = "NA";
                    ob.IFSCCode = "NA";
                    ob.ChequeAmount = DDamount.ToString();
                    ob.Chequedate = DateTime.Now.Date;
                    ob.Chequeimage = "~/Photo/default.jpg";
                    ob.transactiontype = "NA";
                }
                else if (ob.paymethod == "Cash")
                {
                    ob.bank = "NA";
                    ob.Account = "NA";
                    ob.chequeno = "NA";
                    ob.ACholdername = "NA";
                    ob.Branch = "NA";
                    ob.IFSCCode = "NA";
                    ob.ChequeAmount = amount.ToString();
                    ob.Chequedate = DateTime.Now.Date;
                    ob.Chequeimage = "~/Photo/default.jpg";
                    ob.transactiontype = "NA";
                }

                db.Expenses.Add(ob);
                db.SaveChanges();
                Response.Write("<script>alert('Expense added Successfully')</script>");
            }
            return View();
        }

        [HttpGet]
        public ActionResult AddBonus()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult AddBonus(string agentcode, DateTime formonth, string type, Double bonusamount)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (ModelState.IsValid)
                {
                    var Duplicate = (from o in db.bonus_tabs where o.agentcode == agentcode && o.month == formonth.Month && o.year == formonth.Year select o).ToList();

                    if (Duplicate.Count > 0)
                    {
                        Response.Write("<script>alert('Bonus Already added for this month  ')</script>");
                    }

                    else
                    {
                        bonus_tab ob = new bonus_tab();
                        ob.agentcode = agentcode;
                        ob.type = type;
                        ob.bonusamount = bonusamount;
                        ob.formonth = DateTime.Now.Date;
                        ob.month = formonth.Month;
                        ob.year = formonth.Year;
                        db.bonus_tabs.Add(ob);
                        db.SaveChanges();
                        Response.Write("<script>alert('Bonus added Successfully')</script>");

                    }

                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult AddState()
        {
            List<CityStateTab> citylist = new List<CityStateTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                citylist = (from ci in db.CityStateTabs orderby ci.state select ci).ToList();
                ViewData["count"] = citylist.Count();
                return View(citylist);
            }

        }
        [HttpPost]
        public ActionResult AddState(CityStateTab model)
        {
            List<CityStateTab> citylist = new List<CityStateTab>();
            if (ModelState.IsValid)
            {
                CityStateTab ct = new CityStateTab();
                ct.state = model.state;
                ct.city = model.city;
                db.CityStateTabs.Add(model);
                db.SaveChanges();
                ViewBag.msg = "City added successfully.....";
            }
            citylist = (from ci in db.CityStateTabs orderby ci.state select ci).ToList();
            ViewData["count"] = citylist.Count();
            return View(citylist);
        }

        [HttpGet]
        public ActionResult createid()
        {
            List<Icard> ic = new List<Icard>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(ic);
            }
        }
        [HttpPost]
        public ActionResult createid(string agentid)
        {
            List<Icard> ic = new List<Icard>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var agcount = db.AgentDetails.Where(agc => agc.NewAgentId == agentid).Count();
                var info = db.AgentDetails.Single(agc => agc.NewAgentId == agentid);
                if (agcount > 0)
                {
                    var bname = db.Members.Single(m => m.Id == 1);
                    var com = db.CompanyInfos.Single(co => co.Id == 1);
                    var tic = (from nic in db.AgentDetails where nic.NewAgentId == agentid select nic).ToList();
                    foreach (var item in tic.ToList())
                    {
                        int age = DateTime.Now.Year - info.Dob.Year;
                        if (item.AgencyCode > 1)
                        {
                            var brch = db.Branchtabs.Single(bi => bi.BranchCode == item.BranchCode);
                            ic.Add(new Icard { newagentid = item.NewAgentId, name = item.name, newintroducerid = item.NewIntroducerId, age = age, address = item.Address, branch = brch.BranchName, btype = bname.branchname, companyname = com.CompanyName, comaddress = com.Address, comcontact = com.Contact, dob = item.Dob, fname = item.Father, rank = item.RankName, issuedate = item.Issueon, validdate = item.Validupto, dist = item.District, pin = item.PinCode, state = item.State, mobileno = item.Mobileno });
                        }
                        else
                        {
                            ic.Add(new Icard { newagentid = item.NewAgentId, name = item.name, newintroducerid = item.NewIntroducerId, age = age, address = item.Address, branch = "Head Office", btype = bname.branchname, companyname = com.CompanyName, comaddress = com.Address, comcontact = com.Contact, dob = item.Dob, fname = item.Father, rank = item.RankName, issuedate = item.Issueon, validdate = item.Validupto, dist = item.District, pin = item.PinCode, state = item.State, mobileno = item.Mobileno });
                        }
                    }

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "IdCard.rpt"));
                    rd.SetDataSource(ic);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        string dt = pdate.ToShortDateString();

                        return new FileStreamResult(stream, "application/pdf");
                    }

                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }

                else
                {
                    Response.Write("<script>alert('Please Enter a valid Id')</script>");
                }


                return View(ic);
            }
        }

        [HttpGet]
        public ActionResult CreateAllId()
        {
            List<Icard> ic = new List<Icard>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(ic);
            }
        }
        [HttpPost]
        public ActionResult CreateAllId(int rankcode = 0)
        {
            List<Icard> ic = new List<Icard>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var agcount = (from a in db.AgentDetails select a).Count();

                if (agcount > 0)
                {
                    var bname = db.Members.Single(m => m.Id == 1);
                    var com = db.CompanyInfos.Single(co => co.Id == 1);
                    var tic = (from nic in db.AgentDetails where nic.AgencyCode != 1 select nic).ToList();

                    foreach (var item in tic.ToList())
                    {
                        var info = db.AgentDetails.Single(agc => agc.NewAgentId == item.NewAgentId);
                        int age = DateTime.Now.Year - info.Dob.Year;
                        if (item.AgencyCode > 1)
                        {
                            var brch = db.Branchtabs.Single(bi => bi.BranchCode == item.BranchCode);
                            ic.Add(new Icard { newagentid = item.NewAgentId, name = item.name, newintroducerid = item.newmemberid, age = age, address = item.Address, branch = brch.BranchName, btype = bname.branchname, companyname = com.CompanyName, comaddress = com.Address, comcontact = com.Contact, dob = item.Dob, fname = item.Father, rank = item.RankName, issuedate = item.Issueon, validdate = item.Validupto, dist = item.District, pin = item.PinCode, mobileno = item.Mobileno });
                        }
                        else
                        {
                            ic.Add(new Icard { newagentid = item.NewAgentId, name = item.name, newintroducerid = item.newmemberid, age = age, address = item.Address, branch = "Head Office", btype = bname.branchname, companyname = com.CompanyName, comaddress = com.Address, comcontact = com.Contact, dob = item.Dob, fname = item.Father, rank = item.RankName, issuedate = item.Issueon, validdate = item.Validupto, dist = item.District, pin = item.PinCode, mobileno = item.Mobileno });
                        }
                    }

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "IdCard.rpt"));
                    rd.SetDataSource(ic);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        string dt = pdate.ToShortDateString();

                        return new FileStreamResult(stream, "application/pdf");
                    }

                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }

                else
                {
                    Response.Write("<script>alert('Please Enter a valid Id')</script>");
                }


                return View(ic);
            }
        }

        [HttpGet]
        public ActionResult LaunchScheme()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult LaunchScheme(string chk1, string chk2, string chk3, string message, string msgtype, string message1)
        {
            if (ModelState.IsValid)
            {

                var count = message.Count();
                if (chk1 == null && chk2 == null && chk3 == null)
                {
                    ViewBag.msg = "Please select any checkbox...";
                }



                if (msgtype == "English")
                {

                    if (chk1 == null && chk2 == null && chk3 != null)
                    {
                        var list = (from dbc in db.Emp_Regs select dbc).Distinct();
                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.mob + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg(bb, message);
                        ViewBag.msg = "Message sent successfully to all Employees.";
                    }
                    if (chk1 == null && chk2 != null && chk3 == null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Customer" select dbc).Distinct();
                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg(bb, message);
                        ViewBag.msg = "Message sent successfully to all Customers.";
                    }
                    if (chk1 == null && chk2 != null && chk3 != null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Customer" select dbc).Distinct();
                        var list1 = (from dbc in db.Emp_Regs select dbc).ToList();
                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg(bb, message);

                        System.Text.StringBuilder cc = new System.Text.StringBuilder();
                        foreach (var item in list1.ToList())
                        {
                            cc.Append(item.mob + ", ");
                        }
                        string dd = cc.ToString();
                        MyClass.Sendmsg(dd, message);
                        ViewBag.msg = "Message sent successfully to all Customers and Employees.";
                    }
                    if (chk1 != null && chk2 == null && chk3 == null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Agent" select dbc).ToList().Distinct();

                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg(bb, message);

                        ViewBag.msg = "Message sent successfully to all Brokers.";
                    }
                    if (chk1 != null && chk2 == null && chk3 != null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Agent" || dbc.type == "HR" select dbc).Distinct();

                        var list1 = (from dbc in db.Emp_Regs select dbc).ToList();

                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg(bb, message);

                        System.Text.StringBuilder cc = new System.Text.StringBuilder();
                        foreach (var item in list1.ToList())
                        {
                            cc.Append(item.mob + ", ");
                        }
                        string dd = cc.ToString();
                        MyClass.Sendmsg(dd, message);

                        ViewBag.msg = "Message sent successfully to all Employees and Brokers.";
                    }
                    if (chk1 != null && chk2 != null && chk3 == null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Customer" || dbc.type == "Agent" select dbc).Distinct();
                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg(bb, message);

                        ViewBag.msg = "Message sent successfully to all Customers and Brokers.";
                    }
                    if (chk1 != null && chk2 != null && chk3 != null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "HR" || dbc.type == "Customer" || dbc.type == "Agent" select dbc).Distinct();

                        var list1 = (from dbc in db.Emp_Regs select dbc).ToList();

                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg(bb, message);

                        System.Text.StringBuilder cc = new System.Text.StringBuilder();
                        foreach (var item in list1.ToList())
                        {
                            cc.Append(item.mob + ", ");
                        }
                        string dd = cc.ToString();
                        MyClass.Sendmsg(dd, message);

                        ViewBag.msg = "Message sent successfully to all Customers,Employees and Brokers.";
                    }
                }





                else if (msgtype == "Hindi")
                {

                    if (chk1 == null && chk2 == null && chk3 != null)
                    {
                        var list = (from dbc in db.Emp_Regs select dbc).Distinct();
                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.mob + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg_hindi(bb, message1);
                        ViewBag.msg = "Message sent successfully to all Employees.";
                    }
                    if (chk1 == null && chk2 != null && chk3 == null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Customer" select dbc).Distinct();
                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg_hindi(bb, message1);
                        ViewBag.msg = "Message sent successfully to all Customers.";
                    }
                    if (chk1 == null && chk2 != null && chk3 != null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Customer" select dbc).Distinct();
                        var list1 = (from dbc in db.Emp_Regs select dbc).ToList();
                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg_hindi(bb, message1);

                        System.Text.StringBuilder cc = new System.Text.StringBuilder();
                        foreach (var item in list1)
                        {
                            cc.Append(item.mob + ", ");
                        }
                        string dd = cc.ToString();
                        MyClass.Sendmsg_hindi(dd, message1);
                        ViewBag.msg = "Message sent successfully to all Customers and Employees.";
                    }
                    if (chk1 != null && chk2 == null && chk3 == null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Agent" select dbc).ToList().Distinct();

                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg_hindi(bb, message1);

                        ViewBag.msg = "Message sent successfully to all Brokers.";
                    }
                    if (chk1 != null && chk2 == null && chk3 != null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Agent" || dbc.type == "HR" select dbc).Distinct();

                        var list1 = (from dbc in db.Emp_Regs select dbc).ToList();

                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg_hindi(bb, message1);

                        System.Text.StringBuilder cc = new System.Text.StringBuilder();
                        foreach (var item in list1.ToList())
                        {
                            cc.Append(item.mob + ", ");
                        }
                        string dd = cc.ToString();
                        MyClass.Sendmsg_hindi(dd, message1);

                        ViewBag.msg = "Message sent successfully to all Employees and Brokers.";
                    }
                    if (chk1 != null && chk2 != null && chk3 == null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "Customer" || dbc.type == "Agent" select dbc).Distinct();
                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg_hindi(bb, message1);

                        ViewBag.msg = "Message sent successfully to all Customers and Brokers.";
                    }
                    if (chk1 != null && chk2 != null && chk3 != null)
                    {
                        var list = (from dbc in db.NewLogins where dbc.type == "HR" || dbc.type == "Customer" || dbc.type == "Agent" select dbc).Distinct();

                        var list1 = (from dbc in db.Emp_Regs select dbc).ToList();

                        System.Text.StringBuilder aa = new System.Text.StringBuilder();
                        foreach (var item in list.ToList())
                        {
                            aa.Append(item.Mobile + ", ");
                        }
                        string bb = aa.ToString();
                        MyClass.Sendmsg_hindi(bb, message1);

                        System.Text.StringBuilder cc = new System.Text.StringBuilder();
                        foreach (var item in list1)
                        {
                            cc.Append(item.mob + ", ");
                        }
                        string dd = cc.ToString();
                        MyClass.Sendmsg_hindi(dd, message1);

                        ViewBag.msg = "Message sent successfully to all Customers,Employees and Brokers.";
                    }
                }





            }
            return View();
        }


        #endregion

        #region Adjustment Menu Start Here

        [HttpGet]
        public ActionResult DeleteCommission()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult DeleteCommission(string newbondid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var count = (from dcl in db.commission_tabs where dcl.newbondid == newbondid select dcl).Count();
                if (count == 0)
                {
                    Response.Write("<script>alert('There no commission exists for this'" + mr.custname + " ')</script>");
                }
                else if (count > 0)
                {

                    var commlist = (from dcl in db.commission_tabs where dcl.newbondid == newbondid select dcl).ToList();
                    foreach (var comm in commlist)
                    {
                        db.commission_tabs.Remove(comm);
                    }
                    appltab bdc = db.appltabs.Single(c => c.newbondid == newbondid);
                    bdc.bonusper = 1;
                    db.SaveChanges();
                    Response.Write("<script>alert('Commission deleted successfully for this'" + mr.custname + " ')</script>");
                }
                return View();
            }
        }

        #endregion

        #region Payment Menu Start Here

        [HttpGet]
        public ActionResult SpotCommission()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {


                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        List<SpotCommList> sclist = new List<SpotCommList>();
                        var newagentid = TempData["newagentid"];
                        var newbondid = TempData["newbondid"];
                        DateTime date = Convert.ToDateTime(TempData["date"]);
                        if (newagentid != null)
                        {
                            var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                            stdate = Convert.ToDateTime(date);

                            var cr = db.CompanyInfos.Single(c => c.Id == 1);
                            var datelist = (from sc in db.spotcommission_tabs where sc.newagentid == newagentid && sc.status == 0 orderby sc.date select sc).ToList();
                            foreach (var d in datelist.ToList())
                            {
                                Double bussum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                                Double comsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                                sclist.Add(new SpotCommList { newagentid = (newagentid).ToString(), agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bussum, Commission = comsum, date = d.date, companyname = cr.CompanyName, branchname = User.Identity.Name });

                            }


                        }

                        return View(sclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }

        }
        [HttpPost]
        public ActionResult SpotCommission(string newagentid)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var datelist = (from sc in db.spotcommission_tabs where sc.newagentid == newagentid && sc.status == 0 orderby sc.date select sc).ToList();
                foreach (var date in datelist.ToList())
                {
                    Double busisum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == date.newbondid && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                    Double commsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == date.newbondid && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                    sclist.Add(new SpotCommList { newagentid = newagentid, agentname = date.name, newbondid = date.newbondid, name = date.bondname, Business = busisum, Commission = commsum, date = date.date, companyname = cr.CompanyName, branchname = User.Identity.Name });

                }

                return View(sclist);
            }
        }
        [HttpGet]
        public ActionResult SCV(string newagentid, string newbondid, DateTime? date)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["newbondid"] = newbondid;
                ViewData["sdate"] = date;
                return View();
            }
        }
        [HttpPost]
        public ActionResult SCV(Voucher_Report vt, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount, string newbondid, DateTime? date)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<SpotCommList> sclist = new List<SpotCommList>();
                if (newagentid != null)
                {

                    var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                    Double busisum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                    Double commsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    SpotCommTab ob = new SpotCommTab();
                    ob.newagentid = newagentid;
                    ob.business = busisum;
                    ob.commission = commsum;
                    ob.date = DateTime.Now.Date;
                    ob.opid = ar.BranchCode;
                    ob.Newbondid = newbondid;
                    /////---------paymethod------------
                    ob.paymethod = vt.paymethod;
                    if (vt.paymethod == "Cheque")
                    {
                        ob.bank = vt.bank;
                        ob.Account = vt.Account;
                        ob.chequeno = vt.chequeno;
                        ob.ACholdername = vt.ACholdername;
                        ob.Branch = vt.Branch;
                        ob.IFSCCode = vt.IFSCCode;
                        ob.ChequeAmount = vt.ChequeAmount;
                        ob.Chequedate = vt.Chequedate;
                        ob.transactiontype = "NA";
                        ob.Chequeimage = chkimg;
                    }
                    else if (ob.paymethod == "banktransaction")
                    {
                        ob.bank = trbank;
                        ob.Account = holderacno;
                        ob.chequeno = transactionid;
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = tramount;
                        ob.Chequedate = Convert.ToDateTime(transactiondate);
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = vt.transactiontype;
                    }
                    else if (ob.paymethod == "DD")
                    {
                        ob.bank = "NA";
                        ob.Account = "NA";
                        ob.chequeno = ddno;
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = ddamount;
                        ob.Chequedate = DateTime.Now.Date;
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = "NA";
                    }
                    else if (ob.paymethod == "Cash")
                    {
                        ob.bank = "NA";
                        ob.Account = "NA";
                        ob.chequeno = "NA";
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = cashamount;
                        ob.Chequedate = DateTime.Now.Date;
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = "NA";
                    }
                    db.SpotCommTabs.Add(ob);
                    db.SaveChanges();



                    var splist = db.spotcommission_tabs.Where(i => i.newagentid == newagentid && i.newbondid == newbondid && i.status == 0).ToList();
                    splist.ForEach(ui => ui.status = 1);
                    db.SaveChanges();

                    ViewBag.msg = "Spot Commission Paid Successfully";
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(stdate.Month) + "," + stdate.Year;
                    Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
                    Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
                    Double total = credit - debit;
                    //Wallet_Transaction wt = new Wallet_Transaction();
                    //wt.agentid = newagentid;
                    //wt.Credit = commsum;
                    //wt.netamount = total + commsum;
                    //wt.Debit = 0;
                    //wt.Date_Time = DateTime.Now;
                    //wt.Sender_Id = User.Identity.Name;
                    //wt.Sender_Name = User.Identity.Name;
                    //wt.status = 1;
                    //wt.Mode = "Spot";
                    //wt.Type = "Credit";
                    //string mm = DateTime.Now.ToString("yyyyMMddHHmmssFFF");

                    //wt.Transaction_No = "V" + mm;
                    //wt.Remark = "Spot Of month " + monthname;
                    //db.Wallet_Transactions.Add(wt);
                    //db.SaveChanges();
                }
                TempData["newagentid"] = newagentid;
                TempData["newbondid"] = newbondid;
                TempData["date"] = date;
                return RedirectToAction("SpotCommission");
            }
        }

        public ActionResult PrintSpotCommission(string newagentid, string newbondid)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var cbr = db.appltabs.Single(cc => cc.newbondid == newbondid);
            var ar = db.AgentDetails.Single(aa => aa.NewAgentId == newagentid);
            var broker = string.Empty;
            broker = ar.name + "(" + newagentid + ")";
            Double busisum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid select o.amount).DefaultIfEmpty(0).Sum();
            Double commsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid select o.commission).DefaultIfEmpty(0).Sum();
            sclist.Add(new SpotCommList { newagentid = broker, newbondid = cbr.newbondid, name = cbr.name, Business = busisum, Commission = commsum, date = stdate, companyname = cr.CompanyName, branchname = User.Identity.Name });

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "spotcommissionreport.rpt"));
            rd.SetDataSource(sclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult DWSpotCommission()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        List<SpotCommList> sclist = new List<SpotCommList>();
                        var newagentid = TempData["newagentid"];
                        var newbondid = TempData["newbondid"];
                        var sdate = TempData["ssdate"];
                        var edate = TempData["edate"];
                        if (newagentid != null)
                        {
                            DateTime ssdate = Convert.ToDateTime(sdate);
                            DateTime eedate = Convert.ToDateTime(edate);
                            DateTime paydate = DateTime.Now.Date;
                            var cr = db.CompanyInfos.Single(c => c.Id == 1);
                            var datelist = (from sc in db.spotcommission_tabs where sc.date >= ssdate && sc.date <= eedate && sc.status == 0 orderby sc.newagentid select sc).ToList();
                            foreach (var d in datelist.ToList())
                            {
                                Double bsum = (from o in db.spotcommission_tabs where o.newbondid == d.newbondid && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                                Double csum = (from o in db.spotcommission_tabs where o.newbondid == d.newbondid && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                                sclist.Add(new SpotCommList { newagentid = d.newagentid, agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bsum, Commission = csum, date = paydate, sdate = stdate, edate = enddate, companyname = cr.CompanyName, branchname = User.Identity.Name });
                            }

                            NewAgentid = newagentid.ToString();
                            NewBondid = newbondid.ToString();
                            stdate = ssdate;
                            enddate = eedate;

                        }


                        return View(sclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }


        }
        [HttpPost]
        public ActionResult DWSpotCommission(DateTime sdate, DateTime edate)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime paydate = DateTime.Now.Date;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var datelist = (from sc in db.spotcommission_tabs where sc.date >= sdate && sc.date <= edate && sc.status == 0 orderby sc.newagentid select sc).ToList();
                foreach (var d in datelist.ToList())
                {
                    Double bsum = (from o in db.spotcommission_tabs where o.newbondid == d.newbondid && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                    Double csum = (from o in db.spotcommission_tabs where o.newbondid == d.newbondid && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                    sclist.Add(new SpotCommList { newagentid = d.newagentid, agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bsum, Commission = csum, date = paydate, sdate = sdate, edate = edate, companyname = cr.CompanyName, branchname = User.Identity.Name });
                }
                stdate = sdate;
                enddate = edate;
                return View(sclist);
            }
        }

        public ActionResult PrintDWSpotCommission()
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            DateTime paydate = DateTime.Now.Date;
            var broker = string.Empty;
            var br = db.AgentDetails.Single(aa => aa.NewAgentId == NewAgentid);
            var cbr = db.appltabs.Single(cc => cc.newbondid == NewBondid);
            broker = br.name + "(" + br.NewAgentId + ")";
            Double busisum = (from o in db.spotcommission_tabs where o.newagentid == NewAgentid && o.newbondid == NewBondid && o.date >= stdate && o.date <= enddate && o.status == 1 select o.amount).DefaultIfEmpty(0).Sum();
            Double commsum = (from o in db.spotcommission_tabs where o.newagentid == NewAgentid && o.newbondid == NewBondid && o.date >= stdate && o.date <= enddate && o.status == 1 select o.commission).DefaultIfEmpty(0).Sum();
            sclist.Add(new SpotCommList { newagentid = broker, newbondid = NewBondid, name = cbr.name, Business = busisum, Commission = commsum, date = paydate, sdate = stdate, edate = enddate, companyname = cr.CompanyName, branchname = User.Identity.Name });

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DWspotcommissionreport.rpt"));
            rd.SetDataSource(sclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }
        [HttpGet]
        public ActionResult DWS(string newagentid, string newbondid, DateTime? sdate, DateTime? edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["newbondid"] = newbondid;
                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;
                return View();
            }
        }
        [HttpPost]
        public ActionResult DWS(Voucher_Report vt, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount, string newbondid, DateTime? sdate, DateTime? edate)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<SpotCommList> sclist = new List<SpotCommList>();
                if (newagentid != null)
                {
                    DateTime ssdate = Convert.ToDateTime(sdate);
                    DateTime eedate = Convert.ToDateTime(edate);

                    var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                    Double busisum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid && o.date >= ssdate && o.date <= eedate && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                    Double commsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid && o.date >= ssdate && o.date <= eedate && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                    DateTime paydate = DateTime.Now.Date;
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    SpotCommTab ob = new SpotCommTab();
                    ob.newagentid = newagentid;
                    ob.business = busisum;
                    ob.commission = commsum;
                    ob.date = paydate;
                    ob.opid = ar.BranchCode;
                    ob.Newbondid = newbondid;
                    /////---------paymethod------------
                    ob.paymethod = vt.paymethod;
                    if (vt.paymethod == "Cheque")
                    {
                        ob.bank = vt.bank;
                        ob.Account = vt.Account;
                        ob.chequeno = vt.chequeno;
                        ob.ACholdername = vt.ACholdername;
                        ob.Branch = vt.Branch;
                        ob.IFSCCode = vt.IFSCCode;
                        ob.ChequeAmount = vt.ChequeAmount;
                        ob.Chequedate = vt.Chequedate;
                        ob.transactiontype = "NA";
                        ob.Chequeimage = chkimg;
                    }
                    else if (ob.paymethod == "banktransaction")
                    {
                        ob.bank = trbank;
                        ob.Account = holderacno;
                        ob.chequeno = transactionid;
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = tramount;
                        ob.Chequedate = Convert.ToDateTime(transactiondate);
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = vt.transactiontype;
                    }
                    else if (ob.paymethod == "DD")
                    {
                        ob.bank = "NA";
                        ob.Account = "NA";
                        ob.chequeno = ddno;
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = ddamount;
                        ob.Chequedate = DateTime.Now.Date;
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = "NA";
                    }
                    else if (ob.paymethod == "Cash")
                    {
                        ob.bank = "NA";
                        ob.Account = "NA";
                        ob.chequeno = "NA";
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = cashamount;
                        ob.Chequedate = DateTime.Now.Date;
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = "NA";
                    }
                    db.SpotCommTabs.Add(ob);
                    db.SaveChanges();

                    var splist = db.spotcommission_tabs.Where(i => i.newagentid == newagentid && i.newbondid == newbondid && i.date >= ssdate && i.date <= eedate && i.status == 0).ToList();
                    splist.ForEach(ui => ui.status = 1);
                    db.SaveChanges();
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(stdate.Month) + "," + stdate.Year;
                    Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
                    Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
                    Double total = credit - debit;
                    //Wallet_Transaction wt = new Wallet_Transaction();
                    //wt.agentid = newagentid;
                    //wt.Credit = commsum;
                    //wt.netamount = total + commsum;
                    //wt.Debit = 0;
                    //wt.Date_Time = DateTime.Now;
                    //wt.Sender_Id = User.Identity.Name;
                    //wt.Sender_Name = User.Identity.Name;
                    //wt.status = 1;
                    //wt.Mode = "Spot";
                    //wt.Type = "Credit";
                    //string mm = DateTime.Now.ToString("yyyyMMddHHmmssFFF");

                    //wt.Transaction_No = "V" + mm;
                    //wt.Remark = "Spot Of month " + monthname;
                    //db.Wallet_Transactions.Add(wt);
                    //db.SaveChanges();
                    TempData["newagentid"] = newagentid;
                    TempData["newbondid"] = newbondid;
                    TempData["ssdate"] = ssdate;
                    TempData["edate"] = eedate;
                }
                return RedirectToAction("DWSpotCommission");
            }
        }

        #endregion

        #region Duplicate Menu Start Here
        [HttpGet]
        public ActionResult DuplicateBond()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult DuplicateBond(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var st = db.appltabs.Single(a => a.newbondid == newbondid);
                //if (st.printstatus == 1)
                //{
                if (st.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block!')</script>");
                }
                else
                {
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "Bond";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@newbondid", newbondid);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();

                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }

                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }

                    var ar = db.appltabs.Single(a => a.newbondid == newbondid);
                    DuplicateTab dt = new DuplicateTab();
                    dt.newbondid = newbondid;
                    dt.payamount = ar.payment;
                    dt.paymentno = 1;
                    dt.opid = User.Identity.Name;
                    dt.date = DateTime.Now;
                    dt.macaddress = localIP;
                    dt.type = "Bond";
                    db.DuplicateTabs.Add(dt);
                    db.SaveChanges();



                    List<Bond_report> bond = new List<Bond_report>();
                    bond = db.Bond_reports.ToList();

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "report.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }

                //else 
                //{
                //    Response.Write("<script>alert('This ID is not Approved!')</script>");
                //}
                return View();
            }

        }

        [HttpGet]
        public ActionResult WelcomeLetter()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult WelcomeLetter(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<fullwellcome> dl = new List<fullwellcome>();
                var st = db.appltabs.Single(a => a.newbondid == newbondid);
                if (st.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block!')</script>");
                }
                else
                {
                    ReportDocument rd = new ReportDocument();
                    if (st.mode == "FULL" || st.mode == "PART")
                    {
                        dl = db.Database.SqlQuery<fullwellcome>("select a.paymenttype,a.newmemberid,a.refno,a.refno,a.loanid,a.phase,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.newintroducerid,a.addr,a.mobileno,a.newbondid from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        dl[0].refno = dl[0].refno.Replace(" HOMES", "/WEL");
                        rd.Load(Path.Combine(Server.MapPath("~/Reports"), "FullWelcomeLetter.rpt"));
                    }
                    else if (st.mode != "FULL" && st.mode != "PART")
                    {
                        dl = db.Database.SqlQuery<fullwellcome>("select a.paymenttype,a.newmemberid,a.refno,a.refno,a.loanid,a.phase,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.newintroducerid,a.addr,a.mobileno,a.bookingamount,a.payment,a.newbondid from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        var now = dl[0].formdate;
                        var day = (now.Day % 10 == 1 && now.Day != 11) ? "st"
                          : (now.Day % 10 == 2 && now.Day != 12) ? "nd"
                          : (now.Day % 10 == 3 && now.Day != 13) ? "rd"
                          : "th";
                        day = now.Day.ToString() + day;
                        dl[0].refno = dl[0].refno.Replace(" HOMES", "/WEL");
                        dl[0].day = day;
                        if (st.mode == "CLP")
                        {
                            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CLPWelcomeLetter.rpt"));
                        }
                        else
                        {
                            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "EMIWelcomeLetter.rpt"));
                        }
                    }

                    rd.SetDataSource(dl);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();

                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }

                return View();
            }

        }

        [HttpGet]
        public ActionResult DuplicateReceipt(string newbondid, int paymentno = 0, Double payamount = 0)
        {
            List<DupliReceipt> dplist = new List<DupliReceipt>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (newbondid != null)
                {
                    string localIP = "";

                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }
                    NumberToEnglish n = new NumberToEnglish();
                    var amountinwords = n.changeToWords(payamount.ToString(), true);
                    int from = (from p in db.Installmenttabs where p.newbondid == newbondid && p.paymentno == paymentno select p.installmentno).Min();
                    int to = (from p in db.Installmenttabs where p.newbondid == newbondid && p.paymentno == paymentno select p.installmentno).Max();

                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "Receipt";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@newbondid", newbondid);
                    cmd.Parameters.AddWithValue("@paymentno", paymentno);
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                    cmd.Parameters.AddWithValue("@payamount", payamount);
                    cmd.Parameters.AddWithValue("@amountinword", amountinwords);
                    cmd.Parameters.AddWithValue("@from", from);
                    cmd.Parameters.AddWithValue("@to", to);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                       
                        DuplicateTab dt = new DuplicateTab();
                        dt.newbondid = newbondid;
                        dt.payamount = payamount;
                        dt.paymentno = paymentno;
                        dt.opid = User.Identity.Name;
                        dt.date = DateTime.Now;
                        dt.macaddress = localIP;
                        dt.type = "Receipt";
                        db.DuplicateTabs.Add(dt);
                        db.SaveChanges();
                        
                        
                        List<RecieptTab> drlist = new List<RecieptTab>();
                        
                        foreach (var cc in db.RecieptTabs.ToList())
                        {


                            DateTime luck = new DateTime((Convert.ToInt32(cc.date.Split('/')[2])), (Convert.ToInt32(cc.date.Split('/')[1])), (Convert.ToInt32(cc.date.Split('/')[0])));
                            drlist.Add(new RecieptTab
                            {


                                newbondid = cc.newbondid,
                                branchname = cc.branchname,
                                branchaddress = cc.branchaddress,
                                branchcode = cc.branchcode,
                                cssno = cc.cssno,
                                paymentno = cc.paymentno,
                                ledgerfolio = cc.ledgerfolio,
                                installmentno = cc.installmentno,
                                receiptno = cc.receiptno,
                                date = cc.date,



                                duedate = luck.ToString("MMMM") + " - " + luck.ToString("yyyy"),
                                nextduedate = cc.nextduedate,
                                expirydate = cc.expirydate,

                                name = cc.name,
                                father = cc.father,
                                relation = cc.relation,
                                age = cc.age,
                                address = cc.address,
                                dateofcommencement = cc.dateofcommencement,

                                totalconsideration = cc.totalconsideration,
                                maturityamount = cc.maturityamount,
                                yearsubscrib = cc.yearsubscrib,
                                unitcode = cc.unitcode,

                                planname = cc.planname,
                                term = cc.term,
                                landunit = cc.landunit,
                                mode = cc.mode,
                                amount = cc.amount,
                                agencycode = cc.agencycode,
                                payamount = cc.payamount,
                                paymethod = cc.paymethod,
                                othercharge = cc.othercharge,
                                amountinwords = n.changeToWords(cc.payamount.ToString(), true),
                                opid = cc.opid
                            });
                        }


                        ReportDocument rd = new ReportDocument();
                        rd.Load(Path.Combine(Server.MapPath("~/Reports"), "NewRenewal.rpt"));
                        rd.SetDataSource(drlist);

                        Response.Buffer = false;
                        Response.ClearContent();
                        Response.ClearHeaders();


                        try
                        {
                            Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            stream.Seek(0, SeekOrigin.Begin);
                            return new FileStreamResult(stream, "application/pdf");
                        }
                        catch (Exception ex)
                        {
                            Response.Write("<script>alert('" + ex.Message + "')</script>");
                        }
                        finally
                        {
                            rd.Close();
                            rd.Dispose();
                        }



                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }

                }
                return View(dplist);
            }
        }
        [HttpPost]
        public ActionResult DuplicateReceipt(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var ap = db.appltabs.Single(a => a.newbondid == newbondid);
                List<DupliReceipt> dplist = new List<DupliReceipt>();
                Double payamount = 0;
                if (ap.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block')</script>");
                }
                else
                {
                    var rlist = (from p in db.Installmenttabs where p.newbondid == newbondid && p.paymentno != 0 select new { p.paymentno }).Distinct();
                    foreach (var r in rlist.ToList())
                    {
                        payamount = (from u in db.Installmenttabs where u.newbondid == newbondid && u.paymentno == r.paymentno select u.payamount).DefaultIfEmpty(0).Sum();
                        var f = db.Installmenttabs.FirstOrDefault(d => d.paymentno == r.paymentno && d.newbondid == newbondid);
                        //payamount = (payamount + f.latefine) - f.reliefrs;
                        dplist.Add(new DupliReceipt { newbondid = newbondid, paymentno = r.paymentno, payamount = payamount });
                    }
                }
                return View(dplist);
            }
        }

        [HttpGet]
        public ActionResult DupliSpotCommission(string newagentid, string newbondid)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (newagentid != null)
                {
                    var duplicount = (from o in db.SpotCommTabs where o.newagentid == newagentid select o).Count();

                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var ar = db.AgentDetails.Single(aa => aa.NewAgentId == newagentid);
                    var broker = string.Empty;
                    broker = ar.name + "(" + newagentid + ")";
                    var sr = db.spotcommission_tabs.Single(o => o.newagentid == newagentid && o.newbondid == newbondid);
                    sclist.Add(new SpotCommList { newagentid = broker, newbondid = sr.newbondid, name = sr.bondname, Business = sr.amount, Commission = sr.commission, date = sr.date, companyname = cr.CompanyName, branchname = User.Identity.Name });

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "spotcommissionreport.rpt"));
                    rd.SetDataSource(sclist);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);

                        return new FileStreamResult(stream, "application/pdf");
                    }

                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }

                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }

                    DuplicateTab dt = new DuplicateTab();
                    dt.newbondid = newagentid;
                    dt.payamount = sr.commission;
                    dt.paymentno = duplicount + 1;
                    dt.opid = User.Identity.Name;
                    dt.date = sr.date;
                    dt.macaddress = localIP;
                    dt.type = "SpotComm";
                    db.DuplicateTabs.Add(dt);
                    db.SaveChanges();

                    var datelist = (from sc in db.spotcommission_tabs where sc.newagentid == newagentid && sc.status == 1 orderby sc.date select sc).ToList();
                    foreach (var d in datelist.ToList())
                    {
                        Double bsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid select o.amount).DefaultIfEmpty(0).Sum();
                        Double csum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid select o.commission).DefaultIfEmpty(0).Sum();
                        sclist.Add(new SpotCommList { newagentid = newagentid, agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bsum, Commission = csum, date = d.date, companyname = cr.CompanyName, branchname = User.Identity.Name });

                    }


                }

                return View(sclist);
            }
        }
        [HttpPost]
        public ActionResult DupliSpotCommission(string newagentid)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var datelist = (from sc in db.spotcommission_tabs where sc.newagentid == newagentid && sc.status == 1 orderby sc.date select sc).ToList();
                foreach (var d in datelist.ToList())
                {
                    Double bsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid select o.amount).DefaultIfEmpty(0).Sum();
                    Double csum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid select o.commission).DefaultIfEmpty(0).Sum();
                    sclist.Add(new SpotCommList { newagentid = newagentid, agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bsum, Commission = csum, date = d.date, companyname = cr.CompanyName, branchname = User.Identity.Name });

                }

                return View(sclist);
            }
        }

        #endregion

        #region Voucher Menu Start Here

        [HttpGet]
        public ActionResult ReleaseVoucher()
        {
            List<ReleaseTab> rtl = new List<ReleaseTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                rtl = db.ReleaseTabs.ToList();
                return View(rtl);
            }
        }
        [HttpPost]
        public ActionResult ReleaseVoucher(DateTime paydate, int month = 0, int year = 0)
        {
            List<ReleaseTab> rtl = new List<ReleaseTab>();
            rtl = db.ReleaseTabs.ToList();
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month);
            string year1 = year.ToString();
            var rrcount = db.ReleaseTabs.Where(c => c.month == month && c.year == year1).Count();

            if (rrcount > 0)
            {
                Response.Write("<script>alert('Voucher For this month is already released....')</script>");
            }
            else
            {
                MonthName mon = new MonthName();
                List<AgentDetail> ad = new List<AgentDetail>();
                ReleaseTab rt = new ReleaseTab();
                rt.Releasedate = paydate;
                rt.month = month;
                rt.year = year.ToString();
                db.ReleaseTabs.Add(rt);
                db.SaveChanges();

            }
            rtl = db.ReleaseTabs.ToList();
            return View(rtl);
        }

        [HttpGet]
        public ActionResult GenerateVoucher()
        {
            //List<ReleaseTab> rtl = new List<ReleaseTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                //rtl = db.ReleaseTabs.ToList();
                return View();
            }
        }
        [HttpPost]
        public ActionResult GenerateVoucher(DateTime paydate, int month = 0, int year = 0)
        {
            List<ReleaseTab> rtl = new List<ReleaseTab>();
            rtl = db.ReleaseTabs.ToList();
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month);
            string year1 = year.ToString();
            var rrcount = db.BrokerCommLists.Where(c => c.month == monthname && c.Year == year).Count();

            if (rrcount > 0)
            {
                Response.Write("<script>alert('Voucher For this month is already Generate....')</script>");
            }
            else
            {
                MonthName mon = new MonthName();
                //List<AgentDetail> ad = new List<AgentDetail>();
                //ReleaseTab rt = new ReleaseTab();
                //rt.Releasedate = paydate;
                //rt.month = month;
                //rt.year = year.ToString();
                //db.ReleaseTabs.Add(rt);

                //ad = db.AgentDetails.ToList();

                //foreach (var item in ad)
                //{
                //    BrokerCommList arv = new BrokerCommList();
                //    arv.agencycode = item.AgencyCode;
                //    arv.newagentid = item.NewAgentId;
                //    arv.name = item.name;
                //    arv.newintroducerid = item.NewIntroducerId;
                //    arv.introducerid = item.IntroducerCode;
                //    arv.rankname = item.RankName;
                //    arv.rankcode = item.RankCode;
                //    arv.branchcode = item.BranchCode;
                //    arv.panno = item.Panno;
                //    arv.status = item.Status;
                //    arv.mobile = item.Mobile;
                //    arv.month = mon.numbertomonthname(month);
                //    arv.date = paydate;
                //    arv.Introname = item.IntroName;
                //    arv.Year = year;
                //    db.BrokerCommLists.Add(arv);
                //    db.SaveChanges();
                //}

                var sdate = new DateTime(year, month, 1);
                var edate = sdate.AddMonths(1).AddDays(-1);

                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                SqlCommand cmd = new SqlCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "commissionvitran";
                cmd.Parameters.AddWithValue("@sdate", sdate);
                cmd.Parameters.AddWithValue("@edate", edate);
                cmd.Parameters.AddWithValue("@month", monthname);
                cmd.Parameters.AddWithValue("@paydate", paydate);
                cmd.Parameters.AddWithValue("@year", year);

                try
                {
                    con.Open();
                    cmd.ExecuteNonQuery();
                    con.Close();
                    Response.Write("<script>alert('Voucher Generate  Successfully ............')</script>");
                    ViewBag.msg = "Voucher Generate  Successfully ............";
                }
                catch (SqlException ex)
                {
                    ViewBag.msg = ex.Message;
                }



                db.SaveChanges();

            }
            //rtl = db.ReleaseTabs.ToList();
            return View();
        }

        [HttpGet]
        public ActionResult DCBrokerVoucher()
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var newagentid = TempData["newagentid"];
                int month = Convert.ToInt32(TempData["month"]);
                int year = Convert.ToInt32(TempData["year"]);
                if (newagentid != null)
                {
                    //SaveVoucher(newagentid, month, year, pdate);

                    /////////Selecting Voucher List Start Here//////
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month) + "," + year;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year && c.newagentid == newagentid select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    foreach (var b in blist)
                    {
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
                        List<plan> pclist = new List<plan>();
                        List<require> rlist = new List<require>();
                        Double tdsper = 0;
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);
                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }
                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                        var vyear = year.ToString();

                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        //------Inserting self voucher------------
                        var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                        foreach (var p in spclist.ToList())
                        {
                            pclist.Add(new plan { planname = p.planname });
                        }

                        foreach (var pc in pclist)
                        {


                            var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                            foreach (var spy in spylist.ToList())
                            {

                                var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                                var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                                if (business > 0)
                                {
                                    var percentage = (commission / business) * 100;
                                    rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                }
                            }
                        }

                        //------End Inserting self voucher----------------

                        //----------selecting team business and commission of selected month---------------

                        var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == year select a).ToList();
                        List<agents> alist = new List<agents>();
                        foreach (var aar in arlist)
                        {
                            alist.Add(new agents { agentcode = aar.agencycode });
                        }

                        foreach (var a in alist)
                        {
                            List<teamagents> tlist = new List<teamagents>();
                            List<trequire> trlist = new List<trequire>();
                            var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                            int rcount = 0;
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                            var maxsragent = tlist.Count;
                            var minsragent = 1;
                            while (minsragent <= maxsragent)
                            {

                                var da = tlist.Where(t => t.sr == minsragent);
                                foreach (var d in da.ToList())
                                {
                                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                    foreach (var aa in aalist)
                                    {
                                        rcount = rcount + 1;
                                        tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                    }

                                }
                                minsragent = minsragent + 1;
                                maxsragent = tlist.Count;
                            }

                            foreach (var tt in tlist)
                            {
                                var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == year);
                                var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                                foreach (var nctr in nctrlist)
                                {
                                    trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                                }

                            }

                            var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == year);
                            var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                            foreach (var dpc in dpclist)
                            {
                                var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                                foreach (var dpy in dpylist)
                                {
                                    var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                    var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                    if (tbusiness > 0)
                                    {
                                        var tpercentage = (tcommission / tbusiness) * 100;
                                        rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, panno = br.panno, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                    }
                                }
                            }

                        }


                        //----------End selecting team business and commission of selected month---------------

                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = netamount, commission = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, bounusamount = bonusamount, status = vcount, month = month, year = year });
                        }

                    }


                    //----------End selecting team business and commission of selected month---------------
                    /////////Selecting Voucher List End Here//////

                }

                return View(vlist);
            }
        }
        [HttpPost]
        public ActionResult DCBrokerVoucher(DateTime paydate, string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<VoucherList> vlist = new List<VoucherList>();
                MonthName mn = new MonthName();
                var monthnam = mn.numbertomonthname(month);
                var yyear = year.ToString();
                var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == year && c.newagentid == newagentid).Count();
                if (vrcount > 0)
                {

                    var monthname = mn.numbertomonthname(month) + "," + year;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year && c.newagentid == newagentid select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    foreach (var b in blist)
                    {
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
                        List<plan> pclist = new List<plan>();
                        List<require> rlist = new List<require>();
                        Double tdsper = 0;
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);
                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }

                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                        var vyear = year.ToString();

                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        //------Inserting self voucher------------
                        var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                        foreach (var p in spclist.ToList())
                        {
                            pclist.Add(new plan { planname = p.planname });
                        }

                        foreach (var pc in pclist)
                        {
                            var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                            foreach (var spy in spylist.ToList())
                            {

                                var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                                var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                                if (business > 0)
                                {
                                    var percentage = (commission / business) * 100;
                                    rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, panno = br.panno, voucherno = voucherno + 1 });
                                }
                            }
                        }

                        //------End Inserting self voucher----------------

                        //----------selecting team business and commission of selected month---------------

                        var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == year select a).ToList();
                        List<agents> alist = new List<agents>();
                        foreach (var aar in arlist)
                        {
                            alist.Add(new agents { agentcode = aar.agencycode });
                        }

                        foreach (var a in alist)
                        {
                            List<teamagents> tlist = new List<teamagents>();
                            List<trequire> trlist = new List<trequire>();
                            var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                            int rcount = 0;
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                            var maxsragent = tlist.Count;
                            var minsragent = 1;
                            while (minsragent <= maxsragent)
                            {

                                var da = tlist.Where(t => t.sr == minsragent);
                                foreach (var d in da.ToList())
                                {
                                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                    foreach (var aa in aalist)
                                    {
                                        rcount = rcount + 1;
                                        tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                    }

                                }
                                minsragent = minsragent + 1;
                                maxsragent = tlist.Count;
                            }

                            foreach (var tt in tlist)
                            {

                                var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode & n.month == mon && n.Year == year);
                                var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                                foreach (var nctr in nctrlist)
                                {
                                    trlist.Add(new trequire { newagentid = neaid.newagentid, plancode = nctr.plancode, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                                }

                            }

                            var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid & t.month == mon && t.Year == year);
                            var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                            foreach (var dpc in dpclist)
                            {
                                var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                                foreach (var dpy in dpylist)
                                {
                                    var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                    var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                    if (tbusiness > 0)
                                    {
                                        var tpercentage = (tcommission / tbusiness) * 100;
                                        rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = tnrname.panno });
                                    }
                                }
                            }

                        }

                        //----------End selecting team business and commission of selected month---------------

                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = netamount, commission = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, bounusamount = bonusamount, status = vcount, month = month, year = year });
                            //vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, status = vcount, month = month, year = year });
                        }
                    }
                    NewAgentid = newagentid;
                    vmonth = month;
                    vvyear = year;
                    pdate = paydate;
                    check = 1;
                    return View(vlist);
                }
                else
                {
                    Response.Write("<script>alert('Voucher is not Generate For this month Please Generate.....')</script>");
                }
                return View(vlist);
            }
        }
        public ActionResult PrintDCBrokerVoucher()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<VoucherList> vlist = new List<VoucherList>();
                MonthName mn = new MonthName();
                var monthnam = mn.numbertomonthname(vmonth);
                var yyear = vvyear.ToString();
                var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == vvyear && c.newagentid == NewAgentid).Count();
                if (vrcount > 0)
                {

                    var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(vmonth);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == vvyear && c.newagentid == NewAgentid select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    foreach (var b in blist)
                    {
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                        List<plan> pclist = new List<plan>();
                        List<require> rlist = new List<require>();
                        Double tdsper = 0;
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == vvyear);
                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }

                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                        var vyear = vvyear.ToString();

                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
                        //------Inserting self voucher------------
                        var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
                        foreach (var p in spclist.ToList())
                        {
                            pclist.Add(new plan { planname = p.planname });
                        }

                        foreach (var pc in pclist)
                        {
                            var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                            foreach (var spy in spylist.ToList())
                            {

                                var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                                var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.commission).DefaultIfEmpty(0).Sum();
                                if (business > 0)
                                {
                                    var percentage = (commission / business) * 100;
                                    rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, panno = br.panno, voucherno = voucherno + 1 });
                                }
                            }
                        }

                        //------End Inserting self voucher----------------

                        //----------selecting team business and commission of selected month---------------

                        var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == vvyear select a).ToList();
                        List<agents> alist = new List<agents>();
                        foreach (var aar in arlist)
                        {
                            alist.Add(new agents { agentcode = aar.agencycode });
                        }

                        foreach (var a in alist)
                        {
                            List<teamagents> tlist = new List<teamagents>();
                            List<trequire> trlist = new List<trequire>();
                            var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == vvyear);
                            int rcount = 0;
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                            var maxsragent = tlist.Count;
                            var minsragent = 1;
                            while (minsragent <= maxsragent)
                            {

                                var da = tlist.Where(t => t.sr == minsragent);
                                foreach (var d in da.ToList())
                                {
                                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                                    foreach (var aa in aalist)
                                    {
                                        rcount = rcount + 1;
                                        tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                    }

                                }
                                minsragent = minsragent + 1;
                                maxsragent = tlist.Count;
                            }

                            foreach (var tt in tlist)
                            {

                                var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode & n.month == mon && n.Year == vvyear);
                                var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == vmonth && nn.date.Year == vvyear select nn).ToList();
                                foreach (var nctr in nctrlist)
                                {
                                    trlist.Add(new trequire { newagentid = neaid.newagentid, plancode = nctr.plancode, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                                }

                            }

                            var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid & t.month == mon && t.Year == vvyear);
                            var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                            foreach (var dpc in dpclist)
                            {
                                var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                                foreach (var dpy in dpylist)
                                {
                                    var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                    var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                    if (tbusiness > 0)
                                    {
                                        var tpercentage = (tcommission / tbusiness) * 100;
                                        rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = tnrname.panno });
                                    }
                                }
                            }

                        }

                        //----------End selecting team business and commission of selected month---------------

                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = netamount, commission = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, bounusamount = bonusamount, status = vcount, month = vmonth, year = vvyear });
                            //vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, status = vcount, month = vmonth, year = vvyear,monthname=monthnam });
                        }
                    }
                }
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "dcvoucherdetail.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View(vlist);
            }

        }

        public ActionResult ViewCheque(string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("logout", "Home");
            }
            else
            {
                NumberToEnglish nw = new NumberToEnglish();
                List<printcheckbook> cheque = new List<printcheckbook>();
                string year1 = year.ToString();
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                var member = db.Voucher_Reports.Single(a => a.agentid == ar.AgencyCode && a.month == month && a.year == year1);
                string pdate = DateTime.Now.Date.ToString("dd/MM/yyyy");

                string D1 = pdate.Substring(0, 1);
                string D2 = pdate.Substring(1, 1);
                string M1 = pdate.Substring(3, 1);
                string M2 = pdate.Substring(4, 1);
                string Y1 = pdate.Substring(6, 1);
                string Y2 = pdate.Substring(7, 1);
                string Y3 = pdate.Substring(8, 1);
                string Y4 = pdate.Substring(9, 1);
                string amount = member.netamount.ToString() + "/-";
                var amountinwords = nw.changeToWords(member.netamount.ToString(), true);
                if (member.netamount > 0)
                {
                    cheque.Add(new printcheckbook { D1 = D1, D2 = D2, M1 = M1, M2 = M2, Y1 = Y1, Y2 = Y2, Y3 = Y3, Y4 = Y4, name = ar.name, amountword = amountinwords, amount = amount });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Cheque.rpt"));
                rd.SetDataSource(cheque);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);



                    return new FileStreamResult(stream, "application/pdf");



                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult PaymentOBVOne(string newagentid, int month = 0, int year = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                var mon = mn.numbertomonthname(month);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;
                var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
                List<plan> pclist = new List<plan>();
                List<require> rlist = new List<require>();
                Double tdsper = 0;
                var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
                var car = db.AgentDetails.Single(rrr => rrr.NewAgentId == newagentid);
                if (br.panno == null || br.panno == "Form-61")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }
                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                ViewData["tdsper"] = tdsper;
                var rankname = string.Empty;
                //------Inserting self voucher------------
                var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                foreach (var p in spclist.ToList())
                {
                    pclist.Add(new plan { planname = p.planname });
                }

                foreach (var pc in pclist)
                {
                    var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                    foreach (var spy in spylist.ToList())
                    {
                        var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                        var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                        if (business > 0)
                        {
                            var percentage = (commission / business) * 100;
                            rlist.Add(new require { agentid = br.agencycode, newagentid = newagentid, name = br.name, rankname = car.RankName, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = newagentid, brokername = br.name, brokerrank = car.RankName, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                        }
                    }
                }

                //------End Inserting self voucher----------------

                //----------selecting team business and commission of selected month---------------

                var arlist = (from a in db.BrokerCommLists where a.newintroducerid == newagentid && a.month == mon && a.Year == year select a).ToList();
                List<agents> alist = new List<agents>();
                foreach (var aar in arlist)
                {
                    alist.Add(new agents { agentcode = aar.agencycode });
                }

                foreach (var a in alist)
                {
                    List<teamagents> tlist = new List<teamagents>();
                    List<trequire> trlist = new List<trequire>();
                    var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                    int rcount = 0;
                    rcount = rcount + 1;
                    tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                    var maxsragent = tlist.Count;
                    var minsragent = 1;

                    while (minsragent <= maxsragent)
                    {

                        var da = tlist.Where(t => t.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = tlist.Count;
                    }

                    foreach (var tt in tlist)
                    {

                        var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == year);
                        var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                        foreach (var nctr in nctrlist)
                        {
                            trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, plancode = nctr.plancode, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });

                        }

                    }
                    var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == year);
                    var tcar = db.AgentDetails.Single(trrr => trrr.AgencyCode == a.agentcode);
                    var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                    foreach (var dpc in dpclist)
                    {

                        var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                        foreach (var dpy in dpylist)
                        {
                            var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                            var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                            if (tbusiness > 0)
                            {
                                var tpercentage = (tcommission / tbusiness) * 100;
                                rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, name = tnrname.name, rankname = tcar.RankName, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = newagentid, panno = br.panno, brokername = br.name, brokerrank = car.RankName, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                            }
                        }
                    }

                }


                //----------End selecting team business and commission of selected month---------------

                vnewagentid = newagentid;
                vmonth = month;
                vvyear = year;
                return View(rlist);
            }
        }
        public ActionResult PrintDCVoucher()
        {
            List<require> rlist = new List<require>();
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;
            var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
            List<plan> pclist = new List<plan>();
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            var mon = mn.numbertomonthname(vmonth);
            var br = db.BrokerCommLists.Single(a => a.newagentid == vnewagentid && a.month == mon && a.Year == vvyear);
            var car = db.AgentDetails.Single(rrr => rrr.NewAgentId == vnewagentid);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }
            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var rankname = string.Empty;
            //------Inserting self voucher------------
            var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == vnewagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
            foreach (var p in spclist.ToList())
            {
                pclist.Add(new plan { planname = p.planname });
            }

            foreach (var pc in pclist)
            {

                var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == vnewagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                foreach (var spy in spylist.ToList())
                {
                    var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Voucher" select cts.amount).DefaultIfEmpty(0).Sum();
                    var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Voucher" select cts.commission).DefaultIfEmpty(0).Sum();
                    if (business > 0)
                    {
                        var percentage = (commission / business) * 100;
                        rlist.Add(new require { agentid = br.agencycode, newagentid = br.newagentid, name = br.name, emailid = br.panno, rankname = car.RankName, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = br.panno, commtype = "Voucher" });
                    }

                    var sbusiness = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Spot" select cts.amount).DefaultIfEmpty(0).Sum();
                    var scommission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Spot" select cts.commission).DefaultIfEmpty(0).Sum();
                    if (sbusiness > 0)
                    {
                        var spercentage = (scommission / sbusiness) * 100;
                        rlist.Add(new require { agentid = br.agencycode, newagentid = br.newagentid, name = br.name, emailid = br.panno, rankname = car.RankName, planname = pc.planname, year = spy.year, business = sbusiness, percentage = spercentage, commission = scommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = br.panno, commtype = "Spot" });
                    }
                }
            }

            //------End Inserting self voucher----------------

            //----------selecting team business and commission of selected month---------------

            var arlist = (from a in db.BrokerCommLists where a.newintroducerid == vnewagentid && a.month == mon && a.Year == vvyear select a).ToList();
            List<agents> alist = new List<agents>();
            foreach (var aar in arlist)
            {
                alist.Add(new agents { agentcode = aar.agencycode });
            }

            foreach (var a in alist)
            {
                List<teamagents> tlist = new List<teamagents>();
                List<trequire> trlist = new List<trequire>();
                var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == vvyear);
                int rcount = 0;
                rcount = rcount + 1;
                tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                var maxsragent = tlist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = tlist.Where(t => t.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = tlist.Count;
                }

                foreach (var tt in tlist)
                {
                    var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == vvyear);

                    var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == vnewagentid && nn.date.Month == vmonth && nn.date.Year == vvyear select nn).ToList();
                    foreach (var nctr in nctrlist)
                    {
                        trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, plancode = nctr.plancode, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission, commtype = nctr.comtype });

                    }

                }

                var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == vvyear);
                var tcar = db.AgentDetails.Single(trrr => trrr.AgencyCode == a.agentcode);
                var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                foreach (var dpc in dpclist)
                {
                    var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                    foreach (var dpy in dpylist)
                    {

                        var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Voucher").Sum(tr => tr.business);
                        var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Voucher").Sum(tr => tr.commission);
                        if (tbusiness > 0)
                        {
                            var tpercentage = (tcommission / tbusiness) * 100;
                            rlist.Add(new require { agentid = nagentid.agencycode, newagentid = tnrname.newagentid, name = tnrname.name, rankname = tcar.RankName, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, commtype = "Voucher" });
                        }

                        var stbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Spot").Sum(tr => tr.business);
                        var stcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Spot").Sum(tr => tr.commission);
                        if (stbusiness > 0)
                        {
                            var stpercentage = (stcommission / stbusiness) * 100;
                            rlist.Add(new require { agentid = nagentid.agencycode, newagentid = tnrname.newagentid, name = tnrname.name, rankname = tcar.RankName, planname = dpc.planname, year = dpy.year, business = stbusiness, percentage = stpercentage, commission = stcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, commtype = "Spot" });
                        }
                    }
                }
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CompleteDCVoucher.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View();

        }
        [HttpGet]
        public ActionResult DCV(string newagentid, int month = 0, int year = 0, int status = 0, Double amount = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["month"] = month;
                ViewData["year"] = year;
                ViewData["amount"] = amount;
                return View();
            }
        }
        [HttpPost]
        public ActionResult DCV(Voucher_Report vr, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount, int month = 0, int year = 0, int status = 0)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (newagentid != null)
                {
                    int id = 1;
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    SaveVoucher(vr, newagentid, month, year, pdate, chkimg, trbank, transactionid, transactiondate, tramount, trpmethod, holderacno, ddamount, ddno, cashamount);
                    TempData["month"] = month;
                    TempData["year"] = year;
                    TempData["newagentid"] = newagentid;
                }
                return RedirectToAction("DCBrokerVoucher");
            }
        }

        [HttpGet]
        public ActionResult CCBrokerVoucher()
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var newagentid = TempData["newagentid"];
                int month = Convert.ToInt32(TempData["month"]);
                int year = Convert.ToInt32(TempData["year"]);

                if (newagentid != null)
                {
                    int id = 1;
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month) + "," + year;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    Double tdsper = 0;
                    foreach (var b in blist)
                    {
                        #region Selecting Complete Chain Start Here

                        int rcount = 0;
                        List<BrokerChain> bclist = new List<BrokerChain>();
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);
                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }

                        bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.newintroducerid, branchname = User.Identity.Name });
                        List<agents> dalist = new List<agents>();
                        var alist = (from al in db.BrokerCommLists where al.newintroducerid == b.newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                        foreach (var a in alist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                        }

                        var maxsragent = dalist.Count;
                        var minsragent = 1;
                        while (minsragent <= maxsragent)
                        {

                            var da = dalist.Where(a => a.sr == minsragent);
                            foreach (var d in da.ToList())
                            {
                                var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                foreach (var aa in aalist)
                                {
                                    rcount = rcount + 1;
                                    dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                                }

                            }
                            minsragent = minsragent + 1;
                            maxsragent = dalist.Count;
                        }

                        foreach (var dd in dalist)
                        {
                            var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                            bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.newintroducerid, branchname = User.Identity.Name });

                        }

                        #endregion

                        #region Selecting CC Voucher Start Here

                        List<require> rlist = new List<require>();
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                        var vyear = year.ToString();
                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();

                        foreach (var bc in bclist)
                        {

                            var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == year);

                            List<plan> pclist = new List<plan>();

                            //------Inserting self voucher------------

                            var spclist = (from ct in db.commission_tabs where ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                            foreach (var p in spclist.ToList())
                            {
                                pclist.Add(new plan { planname = p.planname });
                            }

                            foreach (var pc in pclist)
                            {

                                var spylist = (from sct in db.commission_tabs where sct.newagentid == br.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                                foreach (var spy in spylist.ToList())
                                {

                                    var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                                    var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                                    if (business > 0)
                                    {
                                        var percentage = (commission / business) * 100;
                                        rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                    }
                                }
                            }

                            //------End Inserting self voucher----------------

                        }
                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { id = "V" + id, newagentid = br.newagentid, name = br.name, introducerid = br.newintroducerid, TDSAmount = lesstds, GrossAmount = gcommission, amount = netamount, status = vcount, month = month, year = year });
                        }
                        id = id + 1;
                        #endregion
                    }
                }
            }
            return View(vlist);
        }
        [HttpPost]
        public ActionResult CCBrokerVoucher(DateTime paydate, int month = 0, int year = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int id = 1;
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<VoucherList> vlist = new List<VoucherList>();
                var monthnam = mn.numbertomonthname(month);
                var yyear = year.ToString();
                var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == year).Count();
                if (vrcount > 0)
                {
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    foreach (var b in blist)
                    {
                        #region Selecting Complete Chain Start Here

                        int rcount = 0;
                        Double tdsper = 0;
                        List<BrokerChain> bclist = new List<BrokerChain>();
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);

                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }

                        bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name });
                        List<agents> dalist = new List<agents>();
                        var alist = (from al in db.BrokerCommLists where al.newintroducerid == b.newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                        foreach (var a in alist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                        }

                        var maxsragent = dalist.Count;
                        var minsragent = 1;
                        while (minsragent <= maxsragent)
                        {

                            var da = dalist.Where(a => a.sr == minsragent);
                            foreach (var d in da.ToList())
                            {
                                var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                foreach (var aa in aalist)
                                {
                                    rcount = rcount + 1;
                                    dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                                }

                            }
                            minsragent = minsragent + 1;
                            maxsragent = dalist.Count;
                        }

                        foreach (var dd in dalist)
                        {
                            var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                            bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

                        }

                        #endregion

                        #region Selecting CC Voucher Start Here

                        List<require> rlist = new List<require>();
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                        var vyear = year.ToString();
                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        foreach (var bc in bclist)
                        {

                            var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == year);
                            List<plan> pclist = new List<plan>();

                            //------Inserting self voucher------------
                            //var spclist = (from ct in db.commission_tabs where ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.plancode select new { ct.plancode }).Distinct();
                            var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                            foreach (var p in spclist.ToList())
                            {
                                pclist.Add(new plan { planname = p.planname });
                            }

                            foreach (var pc in pclist)
                            {
                                var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                                foreach (var spy in spylist.ToList())
                                {

                                    var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                                    var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                                    if (business > 0)
                                    {
                                        var percentage = (commission / business) * 100;
                                        rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                    }
                                }
                            }

                            //------End Inserting self voucher----------------

                        }
                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { id = "V" + id, newagentid = br.newagentid, name = br.name, introducerid = br.newagentid, TDSAmount = lesstds, GrossAmount = gcommission, business = gbusiness, amount = netamount, status = vcount, month = month, year = year });
                        }
                        id = id + 1;
                        #endregion
                    }

                    vmonth = month;
                    vvyear = year;
                    pdate = paydate;
                }
                else
                {
                    Response.Write("<script>alert('Voucher is not Generate.. Please Generate Voucher For this month...')</script>");
                }

                return View(vlist);

            }

        }
        public ActionResult PrintCCBrokerVoucher()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                List<VoucherList> vlist = new List<VoucherList>();
                List<BrokerCommList> blist = new List<BrokerCommList>();
                var mon = mn.numbertomonthname(vmonth);
                blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == vvyear select c).ToList();
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                foreach (var b in blist)
                {
                    #region Selecting Complete Chain Start Here

                    int rcount = 0;
                    Double tdsper = 0;
                    List<BrokerChain> bclist = new List<BrokerChain>();
                    var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == vvyear);
                    if (br.panno == null || br.panno == "Form-61")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }

                    bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name });
                    List<agents> dalist = new List<agents>();
                    var alist = (from al in db.BrokerCommLists where al.newintroducerid == b.newagentid && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                    foreach (var a in alist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                    }

                    var maxsragent = dalist.Count;
                    var minsragent = 1;
                    while (minsragent <= maxsragent)
                    {

                        var da = dalist.Where(a => a.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = dalist.Count;
                    }
                    foreach (var dd in dalist)
                    {
                        var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == vvyear);
                        bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

                    }

                    #endregion

                    #region Selecting CC Voucher Start Here

                    List<require> rlist = new List<require>();
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;
                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                    var vyear = vvyear.ToString();
                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
                    foreach (var bc in bclist)
                    {

                        var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == vvyear);
                        List<plan> pclist = new List<plan>();

                        //------Inserting self voucher------------
                        var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
                        foreach (var p in spclist.ToList())
                        {
                            pclist.Add(new plan { planname = p.planname });
                        }

                        foreach (var pc in pclist)
                        {
                            var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                            foreach (var spy in spylist.ToList())
                            {
                                int vyyear = Convert.ToInt32(vyear);
                                var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == vmonth && cts.date.Year == vyyear select cts.amount).DefaultIfEmpty(0).Sum();
                                var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == vmonth && cts.date.Year == vyyear select cts.commission).DefaultIfEmpty(0).Sum();
                                if (business > 0)
                                {
                                    var percentage = (commission / business) * 100;
                                    rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                }
                            }
                        }

                        //------End Inserting self voucher----------------

                    }
                    var gbusiness = rlist.Sum(tr => tr.business);
                    var gcommission = rlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                    if (netamount > 0)
                    {
                        vlist.Add(new VoucherList { newagentid = br.newagentid, name = br.name, introducerid = br.newintroducerid, business = gbusiness,TDSAmount=lesstds,GrossAmount=gcommission, amount = netamount, status = vcount, month = vmonth, year = vvyear, monthname = monthname });
                    }



                    #endregion
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "ccvoucherdetail.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(vlist);
            }

        }
        [HttpGet]
        public ActionResult PaymentOBVTwo(string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<VoucherList> vlist = new List<VoucherList>();
                var mon = mn.numbertomonthname(month);
                #region Selecting Complete Chain Start Here

                int rcount = 0;
                List<BrokerChain> bclist = new List<BrokerChain>();
                var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
                //  var bb = db.Branchtabs.Single(b => b.BranchCode == br.branchcode);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;
                if (br.panno == null || br.panno == "Form-61")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }
                bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname });
                List<agents> dalist = new List<agents>();
                var alist = (from al in db.BrokerCommLists where al.newintroducerid == newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                    bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname });

                }

                #endregion

                #region Selecting CC Voucher Start Here

                List<require> rlist = new List<require>();
                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;
                ViewData["tdsper"] = tdsper;
                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                var vyear = year.ToString();
                var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();

                foreach (var bc in bclist)
                {

                    var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == year);
                    List<plan> pclist = new List<plan>();

                    //------Inserting self voucher------------
                    var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                    foreach (var p in spclist.ToList())
                    {
                        pclist.Add(new plan { planname = p.planname });
                    }

                    foreach (var pc in pclist)
                    {

                        var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                        foreach (var spy in spylist.ToList())
                        {

                            var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                            var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                            if (business > 0)
                            {
                                var percentage = (commission / business) * 100;
                                rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                            }
                        }
                    }

                    //------End Inserting self voucher----------------

                }

                #endregion

                vnewagentid = newagentid;
                vmonth = month;
                vvyear = year;
                return View(rlist);
            }
        }
        public ActionResult PrintCCVoucher(double netpayamount)
        {
            //Double sumcommission = 0;
            //Double netpayamount=0;
            //var netpayamount = Session["netpayment"];
           
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<VoucherList> vlist = new List<VoucherList>();
            var mon = mn.numbertomonthname(vmonth);

            #region Selecting Complete Chain Start Here

            int rcount = 0;
            List<BrokerChain> bclist = new List<BrokerChain>();
            var br = db.BrokerCommLists.Single(a => a.newagentid == vnewagentid && a.month == mon && a.Year == vvyear);
            // var bb = db.Branchtabs.Single(b => b.BranchCode == br.branchcode);
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }
            bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname });
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.BrokerCommLists where al.newintroducerid == vnewagentid && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == vvyear);
                bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname });

            }

            #endregion

            #region Selecting CC Voucher Start Here

            List<require> rlist = new List<require>();
            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;
            ViewData["tdsper"] = tdsper;
            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = vvyear.ToString();
            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();

            foreach (var bc in bclist)
            {

                var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == vvyear);
                List<plan> pclist = new List<plan>();

                //------Inserting self voucher------------
                var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
                foreach (var p in spclist.ToList())
                {
                    pclist.Add(new plan { planname = p.planname });
                }

                foreach (var pc in pclist)
                {
                    var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                    foreach (var spy in spylist.ToList())
                    {

                        var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                        var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.commission).DefaultIfEmpty(0).Sum();
                        if (business > 0)
                        {
                            var percentage = (commission / business) * 100;
                            //sumcommission = sumcommission + commission;
                            //var lesstds = Math.Round((sumcommission * tdsper) / 100, 2);
                            //netpayamount = (sumcommission + bonusamount) - lesstds;
                             NumberToEnglish n = new NumberToEnglish();
                             netpayamount = Math.Round(netpayamount, 0);
                             var amountinwords = n.changeToWords(netpayamount.ToString(), true);
                             rlist.Add(new require { domainname = cg.HeadOffice, amountinword = amountinwords, agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                        }
                    }
                }

                //------End Inserting self voucher----------------

            }

            #endregion


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CompleteCCVoucher.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View();
        }

        [HttpGet]
        public ActionResult ccv(string newagentid, int month = 0, int year = 0, int status = 0, Double amount = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["month"] = month;
                ViewData["year"] = year;
                ViewData["amount"] = amount;
                return View();
            }
        }
        [HttpPost]
        public ActionResult ccv(Voucher_Report vr, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount, int month = 0, int year = 0, int status = 0)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (newagentid != null)
                {
                    int id = 1;
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    CCSaveVoucher(vr, newagentid, month, year, pdate, chkimg, trbank, transactionid, transactiondate, tramount, trpmethod, holderacno, ddamount, ddno, cashamount);
                    TempData["month"] = month;
                    TempData["year"] = year;
                    TempData["newagentid"] = newagentid;
                }
                return RedirectToAction("CCBrokerVoucher");
            }
        }

       
        public ActionResult PrintBWBrokerVoucher()
        {
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<VoucherList> vlist = new List<VoucherList>();
            var monthnam = mn.numbertomonthname(vmonth);
            var yyear = vvyear.ToString();
            var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == vvyear).Count();
            if (vrcount > 0)
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(m => m.Id == 1);

                List<BrokerCommList> blist = new List<BrokerCommList>();
                var mon = mn.numbertomonthname(vmonth);
                blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == vvyear select c).ToList();
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;
                foreach (var bro in blist)
                {
                    if (bro.panno == null || bro.panno == "Form-61")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
                    var br = db.BrokerCommLists.Single(a => a.newagentid == bro.newagentid && a.month == mon && a.Year == vvyear);
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == bro.newagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;

                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                    var vyear = vvyear.ToString();
                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
                    var commlist = (from co in db.commission_tabs where co.newagentid == bro.newagentid && co.date.Month == vmonth && co.date.Year == vvyear select co).ToList();
                    foreach (var com in commlist)
                    {
                        var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                        bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = bro.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                    }

                    var gbusiness = bwvlist.Sum(tr => tr.business);
                    var gcommission = bwvlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                    if (netamount > 0)
                    {
                        vlist.Add(new VoucherList { newagentid = br.newagentid, name = br.name, TDSAmount = lesstds, GrossAmount = gcommission, introducerid = br.newintroducerid, business = gbusiness, amount = netamount, status = vcount, month = vmonth, year = vvyear });
                    }
      
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "dcvoucherdetail.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View(vlist);
            }
            else
            {
                Response.Write("<script>alert('Voucher is not Generate.. Please Generate Voucher For this month...')</script>");
            }
           
            return View(vlist);
        }


        [HttpGet]
        public ActionResult BWBrokerVoucher()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<VoucherList> vlist = new List<VoucherList>();
                var newagentid = TempData["newagentid"];
                int month = Convert.ToInt32(TempData["month"]);
                int year = Convert.ToInt32(TempData["year"]);
                if (newagentid != null)
                {
                    /////////Selecting Voucher List Start Here//////
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month) + "," + year;
                    var mon = mn.numbertomonthname(month);
                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var mr = db.Members.Single(m => m.Id == 1);
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    Double tdsper = 0;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year select c).ToList();

                    foreach (var bro in blist)
                    {
                        if (bro.panno == null || bro.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }
                        List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
                        var br = db.BrokerCommLists.Single(a => a.newagentid == bro.newagentid && a.month == mon && a.Year == year);
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == bro.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;

                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                        var vyear = year.ToString();
                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        var commlist = (from co in db.commission_tabs where co.newagentid == bro.newagentid && co.date.Month == month && co.date.Year == year select co).ToList();
                        foreach (var com in commlist)
                        {
                            var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                            bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = bro.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                        }

                        var gbusiness = bwvlist.Sum(tr => tr.business);
                        var gcommission = bwvlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = br.newagentid, name = br.name, introducerid = br.newintroducerid, TDSAmount = lesstds, GrossAmount = gcommission, amount = netamount, status = vcount, month = month, year = year });
                        }
                    }
                }

                return View(vlist);
            }

        }
        [HttpPost]
        public ActionResult BWBrokerVoucher(DateTime paydate, int month = 0, int year = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<VoucherList> vlist = new List<VoucherList>();
                var monthnam = mn.numbertomonthname(month);
                var yyear = year.ToString();
                var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == year).Count();
                if (vrcount > 0)
                {

                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var mr = db.Members.Single(m => m.Id == 1);

                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    Double tdsper = 0;
                    foreach (var bro in blist)
                    {
                        if (bro.panno == null || bro.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }
                        List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
                        var br = db.BrokerCommLists.Single(a => a.newagentid == bro.newagentid && a.month == mon && a.Year == year);
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == bro.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;

                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                        var vyear = year.ToString();
                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        var commlist = (from co in db.commission_tabs where co.newagentid == bro.newagentid && co.date.Month == month && co.date.Year == year select co).ToList();
                        foreach (var com in commlist)
                        {
                            var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                            bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = bro.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                        }

                        var gbusiness = bwvlist.Sum(tr => tr.business);
                        var gcommission = bwvlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = br.newagentid, name = br.name, TDSAmount = lesstds, GrossAmount = gcommission, introducerid = br.newintroducerid, business = gbusiness, amount = netamount, status = vcount, month = month, year = year });
                        }


                    }
                }
                else
                {
                    Response.Write("<script>alert('Voucher is not Generate.. Please Generate Voucher For this month...')</script>");
                }
                vmonth = month;
                vvyear = year;
                pdate = paydate;
                return View(vlist);
            }

        }
        [HttpGet]
        public ActionResult PaymentOBVThree(string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<VoucherList> vlist = new List<VoucherList>();
                List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
                List<AgentDetail> blist = new List<AgentDetail>();
                var mon = mn.numbertomonthname(month);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(m => m.Id == 1);
                var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;
                if (br.panno == null || br.panno == "Form-61")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }

                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;
                ViewData["tdsper"] = tdsper;

                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                var vyear = year.ToString();
                var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                var commlist = (from co in db.commission_tabs where co.newagentid == newagentid && co.date.Month == month && co.date.Year == year select co).ToList();
                foreach (var com in commlist)
                {
                    var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                    bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                }
                vnewagentid = newagentid;
                vmonth = month;
                vvyear = year;
                return View(bwvlist);
            }
        }
        public ActionResult PrintBWVoucher(float netpayamount)
        {
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<VoucherList> vlist = new List<VoucherList>();
            List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
            List<AgentDetail> blist = new List<AgentDetail>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(m => m.Id == 1);
            var mon = mn.numbertomonthname(vmonth);
            var br = db.BrokerCommLists.Single(a => a.newagentid == vnewagentid && a.month == mon && a.Year == vvyear);
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }

            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;

            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = vvyear.ToString();
            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
            var commlist = (from co in db.commission_tabs where co.newagentid == vnewagentid && co.date.Month == vmonth && co.date.Year == vvyear select co).ToList();
            foreach (var com in commlist)
            {
                var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                NumberToEnglish n = new NumberToEnglish();
                var amountinwords = n.changeToWords(netpayamount.ToString(), true);
                bwvlist.Add(new BondwiseVoucherlist { bond=amountinwords, newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = vnewagentid, brokername = br.name, brokerrank = br.rankname, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname,  plan = mr.planname });
            }



            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CompleteBWVoucher.rpt"));
            rd.SetDataSource(bwvlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View();


        }

        [HttpGet]
        public ActionResult BWV(string newagentid, int month = 0, int year = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["month"] = month;
                ViewData["year"] = year;
                return View();
            }
        }
        [HttpPost]
        public ActionResult BWV(Voucher_Report vr, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount, int month = 0, int year = 0, int status = 0)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (newagentid != null)
                {
                    int id = 1;
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    BWSaveVoucher(vr, newagentid, month, year, pdate, chkimg, trbank, transactionid, transactiondate, tramount, trpmethod, holderacno, ddamount, ddno, cashamount);
                    TempData["month"] = month;
                    TempData["year"] = year;
                    TempData["newagentid"] = newagentid;
                }
                return RedirectToAction("BWBrokerVoucher");
            }
        }


        #endregion

        #region Update Menu Start Here

        [HttpGet]
        public ActionResult UpdateBranch()
        {
            List<Branchtab> bt = new List<Branchtab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bt);
            }
        }
        [HttpPost]
        public ActionResult UpdateBranch(string command, string bcode, string bnid, string bname, string district, string address, string mobile)
        {
            List<Branchtab> bt = new List<Branchtab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        bt = db.Branchtabs.Where(c => c.BranchCode == bcode).ToList();
                        break;

                    case "Update":

                        Branchtab bcd = db.Branchtabs.Single(c => c.BranchCode == bnid);
                        bcd.BranchName = bname;
                        bcd.branchaddress = address;
                        bcd.BranchDistrict = district;
                        bcd.mobile = mobile;
                        db.Entry<Branchtab>(bcd).State = System.Data.Entity.EntityState.Modified;

                        //db.Entry(bcd).State = EntityState.Modified;
                        db.SaveChanges();
                        ViewBag.msg = "Branch Updated Successfully....";
                        bt = db.Branchtabs.Where(c => c.BranchCode == bnid).ToList();

                        break;
                }



                return View(bt);
            }
        }

        [HttpGet]
        public ActionResult UpdateOperator()
        {
            List<Operator> op = new List<Operator>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(op);
            }
        }
        [HttpPost]
        public ActionResult UpdateOperator(string command, string opid, string nopid, string opname, string address, string mobile, string email)
        {
            List<Operator> op = new List<Operator>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        op = db.Operators.Where(c => c.OperatorId == opid).ToList();
                        break;

                    case "Update":

                        Operator opn = db.Operators.Single(c => c.OperatorId == nopid);
                        opn.OperatorName = opname;
                        opn.OperatorAddress = address;
                        opn.Operator_Mail = email;
                        opn.OperatorMobile = mobile;
                        db.Entry<Operator>(opn).State = System.Data.Entity.EntityState.Modified;

                        db.SaveChanges();
                        ViewBag.msg = "Collection Point Updated Successfully....";
                        op = db.Operators.Where(c => c.OperatorId == nopid).ToList();

                        break;
                }




                return View(op);
            }
        }

        [HttpGet]
        public ActionResult UpdateHR()
        {
            List<HRTab> hr = new List<HRTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(hr);
            }
        }
        [HttpPost]
        public ActionResult UpdateHR(string command, string hrid, string nhrid, string hrname, string address, string mobile, string email)
        {
            List<HRTab> hr = new List<HRTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        hr = db.HRTabs.Where(c => c.HRId == hrid).ToList();
                        break;

                    case "Update":

                        HRTab hrn = db.HRTabs.Single(c => c.HRId == nhrid);
                        hrn.HRName = hrname;
                        hrn.Address = address;
                        hrn.emailid = email;
                        hrn.Mobile = mobile;

                        db.Entry<HRTab>(hrn).State = System.Data.Entity.EntityState.Modified;

                        db.SaveChanges();
                        ViewBag.msg = "HR Updated Successfully....";
                        hr = db.HRTabs.Where(c => c.HRId == nhrid).ToList();

                        break;
                }




                return View(hr);
            }
        }

        [HttpGet]
        public ActionResult UpdatePlan()
        {
            List<Plan> planlist = new List<Plan>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                planlist = (from p in db.Plans where p.status == 1 select p).ToList();
                return View(planlist);
            }
        }
        public JsonResult UpdatePlan(Plan model)
        {

            List<Plan> planlist = new List<Plan>();
            var p = db.Plans.Single(r => r.Plancode == model.Plancode);
            p.Planname = model.Planname;
            p.shortcutname = model.shortcutname;
            //db.Entry(p).State = EntityState.Modified;
            db.Entry<Plan>(p).State = System.Data.Entity.EntityState.Modified;

            db.SaveChanges();
            planlist = (from pr in db.Plans where pr.status == 1 select pr).ToList();
            Response.Write("<script>alert('Plan updated successfully ')</script>");
            return Json(planlist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdateBlock()
        {
            List<BlockTab> blocklist = new List<BlockTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                blocklist = (from p in db.BlockTabs where p.status == 1 select p).ToList();
                return View(blocklist);
            }
        }
        public JsonResult EditBlock(BlockTab model)
        {

            List<BlockTab> blocklist = new List<BlockTab>();
            var p = db.BlockTabs.Single(r => r.Id == model.Id);

            p.min = model.min;
            p.max = model.max;
            db.Entry<BlockTab>(p).State = System.Data.Entity.EntityState.Modified;

            //db.Entry(p).State = EntityState.Modified;
            db.SaveChanges();

            blocklist = (from pr in db.BlockTabs where p.status == 1 select pr).ToList();
            Response.Write("<script>alert('Block Limit updated successfully ')</script>");
            return Json(blocklist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdateNewPlan()
        {
            List<NewPlan> planlist = new List<NewPlan>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                planlist = (from p in db.NewPlans orderby p.Plancode select p).ToList();
                return View(planlist);
            }
        }
        public JsonResult UpdateNewPlan(NewPlan model)
        {

            List<NewPlan> planlist = new List<NewPlan>();
            var p = db.NewPlans.Single(r => r.Plancode == model.Plancode);

            p.Planname = model.Planname;
            p.Term = model.Term;
            p.mlyinstall = model.mlyinstall;
            p.qlyinstall = model.qlyinstall;
            p.hlyinstall = model.hlyinstall;
            p.ylyinstall = model.ylyinstall;
            p.revivaltime = model.revivaltime;
            p.bookingrate = model.bookingrate;
            db.Entry<NewPlan>(p).State = System.Data.Entity.EntityState.Modified;
            if (p.Type == "RD")
            {
                var rd = db.Plan_Tabs.Where(a => a.Plancode == model.Plancode).ToList();
                foreach (var a in rd)
                {
                    a.Planname = model.Planname;
                    db.Entry<Plan_Tab>(a).State = System.Data.Entity.EntityState.Modified;




                }


            }
            else if (p.Type == "FD")
            {
                var rd = db.Fixed_Tabs.Where(a => a.Plancode == model.Plancode).ToList();
                foreach (var a in rd)
                {
                    a.Planname = model.Planname;
                    db.Entry<Fixed_Tab>(a).State = System.Data.Entity.EntityState.Modified;

                }
            }
            else if (p.Type == "NFP")
            {
                var rd = db.MIPP_tabs.Where(a => a.plancode == model.Plancode).ToList();
                foreach (var a in rd)
                {
                    a.planname = model.Planname;
                    db.Entry<MIPP_tab>(a).State = System.Data.Entity.EntityState.Modified;

                }
            }
            else if (p.Type == "PPS")
            {
                var rd = db.Pension_Tabs.Where(a => a.Plancode == model.Plancode).ToList();
                foreach (var a in rd)
                {
                    a.Planname = model.Planname;
                    db.Entry<Pension_Tab>(a).State = System.Data.Entity.EntityState.Modified;

                }
            }
            db.SaveChanges();
            planlist = (from pr in db.NewPlans orderby pr.Plancode select pr).ToList();
            Response.Write("<script>alert('Plan updated successfully ')</script>");
            return Json(planlist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdatePlotLimit()
        {
            List<PlotLimit> planlist = new List<PlotLimit>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                planlist = (from p in db.PlotLimits where p.status == 1 orderby p.projectid select p).ToList();
                return View(planlist);
            }
        }
        public JsonResult EditPlotLimit(PlotLimit model)
        {

            List<PlotLimit> planlist = new List<PlotLimit>();
            var p = db.PlotLimits.Single(r => r.projectid == model.projectid);

            p.minvalue = model.minvalue;
            p.maxvalue = model.maxvalue;
            //db.Entry(p).State = EntityState.Modified;
            db.Entry<PlotLimit>(p).State = System.Data.Entity.EntityState.Modified;


            db.SaveChanges();
            planlist = (from pr in db.PlotLimits where p.status == 1 orderby pr.projectid select pr).ToList();
            Response.Write("<script>alert('Plot Limit updated successfully ')</script>");
            return Json(planlist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult EMIMaster()
        {
            List<RateTab> rlist = new List<RateTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["count"] = rlist.Count;
                return View(rlist);
            }
        }
        [HttpPost]
        public ActionResult EMIMaster(int projectid)
        {
            List<RateTab> rlist = new List<RateTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var pr = db.Plans.Single(p => p.Plancode == projectid);
                rlist = (from p in db.RateTabs where p.projectid == projectid && p.status == 1 orderby p.term select p).ToList();

                ViewData["projectid"] = projectid;
                ViewData["count"] = rlist.Count;

                return View(rlist);
            }
        }
        public JsonResult EditEMIMaster(RateTab model)
        {
            List<RateTab> rlist = new List<RateTab>();
            var p = db.RateTabs.Single(r => r.Id == model.Id);
            p.plotcost = model.plotcost;
            p.quotaper = model.quotaper;
            //db.Entry(p).State = EntityState.Modified;
            db.Entry<RateTab>(p).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            rlist = (from pr in db.RateTabs where pr.projectid == model.projectid && p.status == 1 orderby pr.term select pr).ToList();
            Response.Write("<script>alert('EMI updated successfully ')</script>");
            return Json(rlist, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult UpdateRDPlanAmount()
        {
            List<Plan_Tab> planlist = new List<Plan_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["count"] = planlist.Count;
                return View(planlist);
            }
        }
        [HttpPost]
        public ActionResult UpdateRDPlanAmount(int plancode)
        {
            List<Plan_Tab> planlist = new List<Plan_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var pr = db.NewPlans.Single(p => p.Plancode == plancode);
                ViewData["term"] = pr.Term;
                ViewData["plancode"] = plancode;
                planlist = (from p in db.Plan_Tabs where p.Plancode == plancode orderby pr.Planname select p).ToList();
                ViewData["count"] = planlist.Count;
                return View(planlist);
            }
        }
        public JsonResult EditRDPlanAmount(Plan_Tab model)
        {

            List<Plan_Tab> planlist = new List<Plan_Tab>();
            var p = db.Plan_Tabs.Single(r => r.Id == model.Id);

            p.Plotsize = model.Plotsize;
            p.Amount = model.Amount;
            p.Monthly = model.Monthly;
            p.Quarterly = model.Quarterly;
            p.Halfyearly = model.Halfyearly;
            p.Yearly = model.Yearly;
            p.EstimatedValue = model.EstimatedValue;
            p.Accidental = model.Accidental;
            //db.Entry(p).State = EntityState.Modified;
            db.Entry<Plan_Tab>(p).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            planlist = (from pr in db.Plan_Tabs where pr.Plancode == model.Plancode orderby pr.Planname select pr).ToList();
            Response.Write("<script>alert('Plan updated successfully ')</script>");
            return Json(planlist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdateNFPlanAmount()
        {
            List<MIPP_tab> planlist = new List<MIPP_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["count"] = planlist.Count;
                return View(planlist);
            }
        }
        [HttpPost]
        public ActionResult UpdateNFPlanAmount(int plancode)
        {
            List<MIPP_tab> planlist = new List<MIPP_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var pr = db.NewPlans.Single(p => p.Plancode == plancode);
                ViewData["term"] = pr.Term;
                ViewData["plancode"] = plancode;
                planlist = (from p in db.MIPP_tabs where p.plancode == plancode orderby pr.Planname select p).ToList();
                ViewData["count"] = planlist.Count;
                return View(planlist);
            }
        }
        public JsonResult EditNFPlanAmount(MIPP_tab model)
        {

            List<MIPP_tab> planlist = new List<MIPP_tab>();
            var p = db.MIPP_tabs.Single(r => r.Id == model.Id);
            p.plotsize = model.plotsize;
            p.amount = model.amount;
            p.Yearly = model.Yearly;
            p.FiveERV = model.FiveERV;
            //db.Entry(p).State = EntityState.Modified;
            db.Entry<MIPP_tab>(p).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            planlist = (from pr in db.MIPP_tabs where pr.plancode == model.plancode orderby pr.planname select pr).ToList();
            Response.Write("<script>alert('Plan updated successfully ')</script>");
            return Json(planlist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdatePPSPlanAmount()
        {
            List<Pension_Tab> planlist = new List<Pension_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["count"] = planlist.Count;
                return View(planlist);
            }
        }
        [HttpPost]
        public ActionResult UpdatePPSPlanAmount(int plancode)
        {
            List<Pension_Tab> planlist = new List<Pension_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var pr = db.NewPlans.Single(p => p.Plancode == plancode);
                ViewData["term"] = pr.Term;
                ViewData["plancode"] = plancode;
                planlist = (from p in db.Pension_Tabs where p.Plancode == plancode orderby pr.Planname select p).ToList();
                ViewData["count"] = planlist.Count;
                return View(planlist);
            }
        }
        public JsonResult EditPPSPlanAmount(Pension_Tab model)
        {

            List<Pension_Tab> planlist = new List<Pension_Tab>();
            var p = db.Pension_Tabs.Single(r => r.Id == model.Id);

            p.Plotsize = model.Plotsize;
            p.Amount = model.Amount;
            p.Monthly = model.Monthly;
            p.Quarterly = model.Quarterly;
            p.Halfyearly = model.Halfyearly;
            p.Yearly = model.Yearly;
            p.Profit = model.Profit;
            p.EstimatedValue = model.EstimatedValue;
            //db.Entry(p).State = EntityState.Modified;
            db.Entry<Pension_Tab>(p).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            planlist = (from pr in db.Pension_Tabs where pr.Plancode == model.Plancode orderby pr.Planname select pr).ToList();
            Response.Write("<script>alert('Plan updated successfully ')</script>");
            return Json(planlist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdateFDPlanAmount()
        {
            List<Fixed_Tab> planlist = new List<Fixed_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["count"] = planlist.Count;
                return View(planlist);
            }
        }
        [HttpPost]
        public ActionResult UpdateFDPlanAmount(int plancode)
        {
            List<Fixed_Tab> planlist = new List<Fixed_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var pr = db.NewPlans.Single(p => p.Plancode == plancode);
                ViewData["term"] = pr.Term;
                ViewData["plancode"] = plancode;
                planlist = (from p in db.Fixed_Tabs where p.Plancode == plancode orderby pr.Planname select p).ToList();
                ViewData["count"] = planlist.Count;
                return View(planlist);
            }
        }
        public JsonResult EditFDPlanAmount(Fixed_Tab model)
        {

            List<Fixed_Tab> planlist = new List<Fixed_Tab>();
            var p = db.Fixed_Tabs.Single(r => r.Id == model.Id);

            p.Plotsize = model.Plotsize;
            p.Amount = model.Amount;
            p.EstimatedValue = model.EstimatedValue;
            p.Accidental = model.Accidental;
            //db.Entry(p).State = EntityState.Modified;
            db.Entry<Fixed_Tab>(p).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            planlist = (from pr in db.Fixed_Tabs where pr.Plancode == model.Plancode orderby pr.Planname select pr).ToList();
            Response.Write("<script>alert('Plan updated successfully ')</script>");
            return Json(planlist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdateRDPlan()
        {
            List<PlanTab> rdpl = new List<PlanTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(rdpl);
            }
        }
        [HttpPost]
        public ActionResult UpdateRDPlan(string command, string Planname, string mode, string cmode, string PercentType, Double Term = 0, Double Minvalue = 0, Double Maxvalue = 0, Double Multiple = 0, Double MaturityPercent = 0, Double BonusPercent = 0, int Installments = 0, int plancode = 0, int plancode2 = 0)
        {
            List<PlanTab> rdpl = new List<PlanTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        rdpl = db.PlanTabs.Where(c => c.Plancode == plancode).ToList();
                        break;

                    case "Update":

                        PlanTab pt = db.PlanTabs.Single(c => c.Plancode == plancode2);

                        pt.Planname = Planname;
                        pt.Term = Term;

                        if (mode == null)
                        {
                            pt.mode = cmode;
                        }
                        else
                        {
                            pt.mode = mode;
                        }
                        pt.Installments = Installments;
                        pt.Minvalue = Minvalue;
                        pt.Maxvalue = Maxvalue;
                        pt.Multiple = Multiple;
                        pt.MaturityPercent = MaturityPercent;
                        pt.PercentType = PercentType;
                        pt.BonusPercent = BonusPercent;

                        //db.Entry(pt).State = EntityState.Modified;
                        db.Entry<PlanTab>(pt).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();
                        ViewBag.msg = "Plan Updated Successfully....";
                        rdpl = db.PlanTabs.Where(c => c.Plancode == plancode2).ToList();

                        break;
                }

                return View(rdpl);
            }
        }

        [HttpGet]
        public ActionResult UpdateFDPlan()
        {
            List<PlanTab> fdpl = new List<PlanTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(fdpl);
            }
        }
        [HttpPost]
        public ActionResult UpdateFDPlan(string command, string Planname, string PercentType, Double Term = 0, Double Minvalue = 0, Double Maxvalue = 0, Double Multiple = 0, Double MaturityPercent = 0, Double BonusPercent = 0, int plancode = 0, int plancode2 = 0)
        {
            List<PlanTab> fdpl = new List<PlanTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        fdpl = db.PlanTabs.Where(c => c.Plancode == plancode).ToList();
                        break;

                    case "Update":

                        PlanTab pt = db.PlanTabs.Single(c => c.Plancode == plancode2);

                        pt.Planname = Planname;
                        pt.Term = Term;
                        pt.Minvalue = Minvalue;
                        pt.Maxvalue = Maxvalue;
                        pt.Multiple = Multiple;
                        pt.MaturityPercent = MaturityPercent;
                        pt.PercentType = PercentType;
                        pt.BonusPercent = BonusPercent;

                        //db.Entry(pt).State = EntityState.Modified;
                        db.Entry<PlanTab>(pt).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();
                        ViewBag.msg = "Plan Updated Successfully....";
                        fdpl = db.PlanTabs.Where(c => c.Plancode == plancode2).ToList();

                        break;
                }
                return View(fdpl);
            }
        }

        [HttpGet]
        public ActionResult UpdateExpense()
        {
            List<Expense> explist = new List<Expense>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(explist);
            }
        }
        [HttpPost]
        public ActionResult UpdateExpense(DateTime date)
        {
            List<Expense> explist = new List<Expense>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                explist = (from p in db.Expenses where p.date_time == date select p).ToList();
                stdate = date;
                ViewData["count"] = explist.Count;
                return View(explist);
            }
        }
        public JsonResult EditExpense(Expense ob)
        {

            List<Expense> explist = new List<Expense>();
            var e = db.Expenses.Single(r => r.Id == ob.Id);
            e.amount = ob.amount;
            e.Remark = ob.Remark;
            e.head = ob.head;
            //db.Entry(e).State = EntityState.Modified;
            db.Entry<Expense>(e).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            explist = (from p in db.Expenses where p.date_time == stdate select p).ToList();
            ViewData["count"] = explist.Count;
            return Json(explist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdateRank()
        {
            List<Ranktab> ranklist = new List<Ranktab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ranklist = (from p in db.Ranktabs select p).ToList();
                ViewData["count"] = ranklist.Count;
                return View(ranklist);
            }
        }
        public JsonResult EditRank(Ranktab ob)
        {

            List<Ranktab> ranklist = new List<Ranktab>();
            var e = db.Ranktabs.Single(r => r.RankCode == ob.RankCode);
            e.RankName = ob.RankName;
            e.Rankshrtcut = ob.Rankshrtcut;
            e.Selfquota = ob.Selfquota;
            e.TeamQuota = ob.TeamQuota;
            //db.Entry(e).State = EntityState.Modified;
            db.Entry<Ranktab>(e).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            ranklist = (from p in db.Ranktabs select p).ToList();
            ViewData["count"] = ranklist.Count;
            return Json(ranklist, JsonRequestBehavior.AllowGet);

        }

        [HttpGet]
        public ActionResult UpdateMember()
        {
            List<Member_tab> md = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(md);
            }
        }
        [HttpPost]
        public ActionResult UpdateMember(string command, string newmemberid, Member_tab da)
        {
            List<Member_tab> md = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        if (newmemberid == "")
                        {
                            Response.Write("<script>alert('Please Fill Member Id')</script>");
                        }
                        else
                        {
                            md = db.Member_tabs.Where(c => c.NewMemberId == newmemberid).ToList();
                        }
                        break;

                    case "Update":
                        Member_tab agd = db.Member_tabs.Single(c => c.NewMemberId == da.NewMemberId);

                        agd.BranchCode = da.BranchCode;
                        agd.MemberName = da.MemberName;
                        agd.Address = da.Address;
                        agd.District = da.District;
                        agd.Pin = da.Pin;
                        agd.state = da.state;
                        agd.Gender = da.Gender;
                        agd.Mobile = da.Mobile;
                        agd.Share = da.Share;
                        agd.Father = da.Father;
                        agd.Cdate = da.Cdate;
                        agd.DOB = da.DOB;

                        agd.panno = da.panno;
                        agd.bankname = da.bankname;
                        agd.accountno = da.accountno;
                        agd.IFSC = da.IFSC;

                        agd.NomineeName = da.NomineeName;
                        agd.NomineeAge = da.NomineeAge;
                        agd.NomineeRel = da.NomineeRel;
                        agd.Relationof = da.Relationof;
                        agd.Mother = da.Mother;
                        agd.Nomineeaddr = da.Nomineeaddr;
                        agd.category = da.category;
                        //db.Entry(agd).State = EntityState.Modified;
                        db.Entry<Member_tab>(agd).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();

                        #region Update Agent Start Here

                        var alist = (from c in db.AgentDetails where c.newmemberid == da.NewMemberId select c).ToList();
                        if (alist.Count > 0)
                        {
                            foreach (var a in alist)
                            {
                                AgentDetail ar = db.AgentDetails.Single(ci => ci.NewAgentId == a.NewAgentId);

                                ar.name = da.MemberName;
                                ar.Father = da.Father;
                                ar.Address = da.Address;
                                ar.Mobile = da.Mobile;
                                ar.Age = da.DOB.ToString("dd/MM/yyyy");

                                ar.Panno = da.panno;
                                ar.BankAccountno = da.accountno;
                                ar.BankName = da.bankname;
                                ar.IFCCode = da.IFSC;

                                ar.NomineeName = da.NomineeName;
                                ar.NomineeAge = da.NomineeAge;
                                ar.Relationship = da.NomineeRel;
                                ar.NomineeAddress = da.Nomineeaddr;

                                db.SaveChanges();

                            }
                        }

                        #endregion Update Agent End here

                        #region    Update Customer Start Here

                        var clist = (from c in db.appltabs where c.newmemberid == da.NewMemberId select c).ToList();
                        if (clist.Count > 0)
                        {
                            foreach (var c in clist)
                            {
                                appltab bdc = db.appltabs.Single(ci => ci.newbondid == c.newbondid);

                                bdc.name = da.MemberName;
                                bdc.RelationOf = da.Relationof;
                                bdc.fathername = da.Father;
                                bdc.addr = da.Address;
                                bdc.mobileno = da.Mobile;
                                bdc.age = da.DOB.ToString("dd/MM/yyyy");

                                bdc.panno = da.panno;
                                bdc.accountno = da.accountno;
                                bdc.bankname = da.bankname;
                                bdc.IFSC = da.IFSC;

                                bdc.nomineename = da.NomineeName;
                                bdc.nomage = da.NomineeAge;
                                bdc.nomrel = da.NomineeRel;
                                bdc.nomaddr = da.Nomineeaddr;
                                db.SaveChanges();

                            }
                        }

                        #endregion Update Customer End Here

                        ViewBag.msg = "Member Details Updated Successfully....";
                        md = db.Member_tabs.Where(c => c.NewMemberId == da.NewMemberId).ToList();

                        break;
                }
                return View(md);
            }
        }

        [HttpGet]
        public ActionResult UpdateAccount()
        {
            List<SavingAccountInfo> bd = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bd);
            }
        }
        [HttpPost]
        public ActionResult UpdateAccount(string command, string accno, SavingAccountInfo sa, HttpPostedFileBase photo, HttpPostedFileBase idproof, HttpPostedFileBase sign, HttpPostedFileBase photo2, HttpPostedFileBase idproof2, HttpPostedFileBase sign2)
        {
            List<SavingAccountInfo> bd = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        bd = db.SavingAccountInfos.Where(c => c.accountno == accno).ToList();

                        break;

                    case "Update":

                        SavingAccountInfo bdn = db.SavingAccountInfos.Single(o => o.accountno == sa.accountno);
                        var cr = db.SavingAccountInfos.Single(b => b.accountno == sa.accountno);
                        if (sa.actype == "Self")
                        {
                            bdn.actype = sa.actype;
                            bdn.branchcode = sa.branchcode;
                            bdn.formfee = sa.formfee;
                            bdn.acholdername = sa.acholdername;
                            bdn.fathername = sa.fathername;
                            bdn.address = sa.address;
                            bdn.mobileno = sa.mobileno;
                            bdn.emailid = sa.emailid;
                            bdn.gender = sa.gender;
                            bdn.occupation = sa.occupation;
                            bdn.education = sa.education;
                            bdn.bloodgroup = sa.bloodgroup;
                            bdn.annualincome = sa.annualincome;
                            bdn.panno = sa.panno;
                            bdn.ifsccode = sa.ifsccode;
                            bdn.bankname = sa.bankname;
                            bdn.bankaddress = sa.bankaddress;

                            bdn.guardianname = sa.guardianname;
                            bdn.gurage = sa.gurage;
                            bdn.guraddr = sa.guraddr;
                            bdn.gurrel = sa.gurrel;

                            bdn.nomineename = sa.nomineename;
                            bdn.nomage = sa.nomage;
                            bdn.nomrel = sa.nomrel;
                            bdn.nomaddr = sa.nomaddr;

                            if (photo != null)
                            {
                                bdn.photo = cr.photo;
                                photo.SaveAs(HttpContext.Server.MapPath(cr.photo));
                            }
                            else
                            {
                                bdn.photo = cr.photo;

                            }
                            if (idproof != null)
                            {
                                bdn.idproof = cr.idproof;
                                idproof.SaveAs(HttpContext.Server.MapPath(cr.idproof));
                            }
                            else
                            {
                                bdn.idproof = cr.idproof;

                            }

                            if (sign != null)
                            {
                                bdn.sign = cr.sign;
                                sign.SaveAs(HttpContext.Server.MapPath(cr.sign));
                            }
                            else
                            {
                                bdn.sign = cr.sign;

                            }

                            bdn.Doj = Convert.ToDateTime(sa.Doj);
                            bdn.dob = Convert.ToDateTime(sa.dob);
                        }
                        else
                        {
                            bdn.actype = sa.actype;
                            bdn.branchcode = sa.branchcode;
                            bdn.formfee = sa.formfee;
                            bdn.acholdername = sa.acholdername;
                            bdn.fathername = sa.fathername;
                            bdn.address = sa.address;
                            bdn.mobileno = sa.mobileno;
                            bdn.emailid = sa.emailid;
                            bdn.gender = sa.gender;
                            bdn.occupation = sa.occupation;
                            bdn.education = sa.education;
                            bdn.bloodgroup = sa.bloodgroup;
                            bdn.annualincome = sa.annualincome;
                            bdn.panno = sa.panno;
                            bdn.ifsccode = sa.ifsccode;
                            bdn.bankname = sa.bankname;
                            bdn.bankaddress = sa.bankaddress;

                            bdn.guardianname = sa.guardianname;
                            bdn.gurage = sa.gurage;
                            bdn.guraddr = sa.guraddr;
                            bdn.gurrel = sa.gurrel;

                            bdn.nomineename = sa.nomineename;
                            bdn.nomage = sa.nomage;
                            bdn.nomrel = sa.nomrel;
                            bdn.nomaddr = sa.nomaddr;

                            if (photo != null)
                            {
                                bdn.photo = cr.photo;
                                photo.SaveAs(HttpContext.Server.MapPath(cr.photo));
                            }
                            else
                            {
                                bdn.photo = cr.photo;

                            }
                            if (idproof != null)
                            {
                                bdn.idproof = cr.idproof;
                                idproof.SaveAs(HttpContext.Server.MapPath(cr.idproof));
                            }
                            else
                            {
                                bdn.idproof = cr.idproof;

                            }

                            if (sign != null)
                            {
                                bdn.sign = cr.sign;
                                sign.SaveAs(HttpContext.Server.MapPath(cr.sign));
                            }
                            else
                            {
                                bdn.sign = cr.sign;

                            }

                            bdn.Doj = Convert.ToDateTime(sa.Doj);
                            bdn.dob = Convert.ToDateTime(sa.dob);

                            bdn.acholdername2 = sa.acholdername2;
                            bdn.fathername2 = sa.fathername2;
                            bdn.address2 = sa.address2;
                            bdn.mobileno2 = sa.mobileno2;
                            bdn.emailid2 = sa.emailid2;
                            bdn.gender2 = sa.gender2;
                            bdn.occupation2 = sa.occupation2;
                            bdn.education2 = sa.education2;
                            bdn.bloodgroup2 = sa.bloodgroup2;
                            bdn.annualincome2 = sa.annualincome2;
                            bdn.panno2 = sa.panno2;
                            bdn.dob2 = sa.dob2;

                            if (photo2 != null)
                            {
                                bdn.photo2 = cr.photo2;
                                photo2.SaveAs(HttpContext.Server.MapPath(cr.photo2));
                            }
                            else
                            {
                                bdn.photo2 = cr.photo2;

                            }

                            if (idproof2 != null)
                            {
                                bdn.idproof2 = cr.idproof2;
                                idproof2.SaveAs(HttpContext.Server.MapPath(cr.idproof2));
                            }
                            else
                            {
                                bdn.idproof2 = cr.idproof2;

                            }

                            if (sign2 != null)
                            {
                                bdn.sign2 = cr.sign2;
                                sign2.SaveAs(HttpContext.Server.MapPath(cr.sign2));
                            }
                            else
                            {
                                bdn.sign2 = cr.sign2;

                            }
                        }
                        //db.Entry(bdn).State = EntityState.Modified;
                        db.Entry<SavingAccountInfo>(bdn).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();
                        bd = (from bb in db.SavingAccountInfos where bb.accountno == sa.accountno select bb).ToList();


                        break;
                }

                return View(bd);
            }
        }

        [HttpGet]
        public ActionResult UpdateAgentForm()
        {
            List<AgentDetail> ad = new List<AgentDetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(ad);
            }
        }
        [HttpPost]
        public ActionResult UpdateAgentForm(string command, string brokerid, AgentDetail da, HttpPostedFileBase Photo)
        {
            List<AgentDetail> ad = new List<AgentDetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        if (brokerid == "")
                        {
                            Response.Write("<script>alert('Please Fill Agent Id')</script>");
                        }
                        else
                        {
                            ad = db.AgentDetails.Where(c => c.NewAgentId == brokerid).ToList();
                        }
                        break;

                    case "Update":
                        AgentDetail agd = db.AgentDetails.Single(c => c.NewAgentId == da.NewAgentId);
                        var row = db.Ranktabs.Single(c => c.RankCode == da.RankCode);
                        var r = db.AgentDetails.Single(c => c.NewAgentId == da.NewIntroducerId);
                        var mr = db.Members.Single(m => m.Id == 1);

                        TimeSpan span = da.Doj.Subtract(da.Dob);
                        int years = (int)(span.Days / 365.25);
                        int remainder = (int)(span.Days % 365.25);
                        int months = remainder / 30;
                        if (months >= 12)
                        {
                            int y = months / 12;
                            int m = months % 12;
                            months = m;
                            years = years + y;
                        }
                        int days = remainder % 30;
                        var age = years + " years " + months + " months " + days + " days";

                        agd.name = da.name;
                        agd.RankName = row.RankName;
                      
                        agd.Father = da.Father;
                        agd.Mother = da.Mother;
                        agd.Gender = da.Gender;
                        agd.NewIntroducerId = da.NewIntroducerId;
                        agd.IntroducerCode = r.AgencyCode;
                        agd.IntroName = da.IntroName;
                        agd.RankCode = da.RankCode;
                        agd.Nationality = da.Nationality;
                        agd.Dob = da.Dob;
                        agd.Age = age;
                        agd.BloodGroup = da.BloodGroup;
                        agd.Occupation = da.Occupation;
                        agd.Qualification = da.Qualification;
                        agd.Panno = da.Panno;
                        agd.Passportno = da.Passportno;
                        agd.Drivinglno = da.Drivinglno;
                        agd.Icardno = da.Icardno;
                        agd.Issueon = da.Issueon;
                        agd.Validupto = da.Validupto;
                        agd.BankName = da.BankName;
                        agd.BankAccountno = da.BankAccountno;
                        agd.IFCCode = da.IFCCode;
                        agd.BankAddress = da.BankAddress;
                        agd.Address = da.Address;
                        agd.District = da.District;
                        agd.State = da.State;
                        agd.PinCode = da.PinCode;
                        agd.Landlineno = da.Landlineno;
                        agd.Mobile = da.Mobile;
                        agd.Email = da.Email;
                        agd.NomineeName = da.NomineeName;
                        agd.NomineeAge = da.NomineeAge;
                        agd.NomineeAddress = da.NomineeAddress;
                        agd.Organization = da.Organization;
                        agd.Doj = da.Doj;
                        agd.areaofoccupation = da.areaofoccupation;
                        agd.approximatenoofactive = da.approximatenoofactive;
                        agd.Company = da.Company;
                        agd.Yoe = da.Yoe;
                        agd.Mobileno = da.Mobileno;
                        agd.cmpnyaddress = da.cmpnyaddress;
                        agd.Experience = da.Experience;
                        /*-----------------------------------*/
                        agd.OtherMobile = da.OtherMobile == 0 ? agd.OtherMobile : da.OtherMobile;
                        agd.BankBranchName = string.IsNullOrEmpty(da.BankBranchName) ? agd.BankBranchName : da.BankBranchName;
                        /*-------------------------------------*/
                        if (Photo != null)
                        {
                            string imgname = gid();
                            agd.Photo = "~/Photo/" + imgname + ".jpg";
                            Photo.SaveAs(HttpContext.Server.MapPath("~/Photo/") + imgname + ".jpg");
                        }
                        else
                        {
                            agd.Photo = agd.Photo;

                        }


                        //db.Entry(agd).State = EntityState.Modified;
                        db.Entry<AgentDetail>(agd).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();
                        ViewBag.msg = mr.agentname + " Details Updated Successfully....";
                        ad = db.AgentDetails.Where(c => c.NewAgentId == da.NewAgentId).ToList();

                        break;
                }
                return View(ad);
            }
        }
        public JsonResult selectpayment(Double term, Double bookingamount, Double discountper, int projectid, int plotsize, string mode, Double plccost = 0, Double Devcharge = 0)
        {

            List<PaymentList> installlist = new List<PaymentList>();
            var amountinwords = string.Empty;
            NumberToEnglish n = new NumberToEnglish();
            amountinwords = n.changeToWords(bookingamount.ToString(), true);
            var noi = 0.0;
            Double emiamount = 0;
            Double totalcon = 0;
            var rt = db.RateTabs.Single(t => t.Id == projectid && t.term == term && t.plotsize == 50);
            var rp = plotsize / 50;
            totalcon = rt.plotcost * rp;

            totalcon = totalcon + (Math.Round(totalcon * (plccost / 100))) + Math.Round((plotsize * Devcharge));

            //
            var damount = Math.Round(totalcon * (discountper / 100), 0);
            Double ramount = totalcon - bookingamount - damount;
            Double plotcost = totalcon - damount;


            if (mode == "Monthly")
            {
                noi = Convert.ToDouble(rt.noi);
                emiamount = Math.Round(ramount / noi, 0);

                installlist.Add(new PaymentList { totalcon = plotcost, maturityamount = plotcost, payment = emiamount, amountinwords = amountinwords });
            }
            else if (mode == "Quarterly")
            {
                noi = rt.noi / 3;
                emiamount = Math.Round(ramount / noi, 0);
                installlist.Add(new PaymentList { totalcon = plotcost, maturityamount = plotcost, payment = emiamount, amountinwords = amountinwords });
            }
            else if (mode == "Halfyearly")
            {
                noi = rt.noi / 6;
                emiamount = Math.Round(ramount / noi, 0);
                installlist.Add(new PaymentList { totalcon = plotcost, maturityamount = plotcost, payment = emiamount, amountinwords = amountinwords });
            }
            else if (mode == "Yearly")
            {
                noi = rt.noi / 12;
                emiamount = Math.Round(ramount / term, 0);
                installlist.Add(new PaymentList
                {
                    totalcon = Math.Round
                        (plotcost),
                    maturityamount = plotcost,
                    payment = emiamount,
                    amountinwords = amountinwords
                });
            }
            return Json(installlist, JsonRequestBehavior.AllowGet);
        }
        public JsonResult GetPlotList(string block, string introid, string bondid, int projectid, int phaseid)
        {
            var br = db.BlockTabs.Single(p => p.block == block && p.Plancode == projectid && p.phaseid == phaseid);
            int min = br.min;
            int max = br.max;
            List<plotlist> plist = new List<plotlist>();
            var blockid = db.BlockTabs.Single(a => a.Plancode == projectid && a.block == block && a.phaseid == phaseid);
            var chelist = (from sp in db.tempappltabs where sp.PYN != "N" && sp.block == block && sp.projectid == projectid && sp.phaseid == phaseid && sp.status == 1 select new { sp.plotno }).Distinct().ToList();
            var splist = (from sp in db.appltabs where sp.block == block && sp.projectid == projectid && sp.phaseid == phaseid && sp.newbondid != bondid && sp.status != 4 && sp.status != 2 select new { sp.plotno }).Distinct().ToList();

            var holdlist = (from sp in db.HoldingPlots where sp.holdblock == blockid.Id && sp.holdprojectid == projectid && sp.holdphaseid == phaseid && sp.holdstatus == 1 select new { sp.holdplotno }).Distinct().ToList();

            while (min <= max)
            {
                plist.Add(new plotlist { plotno = min });
                min = min + 1;
            }
            foreach (var p in splist)
            {
                plist.Remove(plist.Single(rr => rr.plotno == p.plotno ));

            }

            foreach (var h in holdlist)
            {
                plist.Remove(plist.Single(rr => rr.plotno == h.holdplotno));
            }
            //foreach (var l in holdlist)
            //{
            //    plist.Add(new plotlist { plotno = l.holdplotno });
            //}
            foreach (var c in chelist)
            {
                plist.Remove(plist.Single(rr => rr.plotno == c.plotno));
            }
            return Json(plist.OrderBy(a => a.plotno), JsonRequestBehavior.AllowGet);
        }
        
        [HttpGet]
        public ActionResult UpdateBond()
        {
            List<appltab> mt = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime maxdate1 = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name select a.date).DefaultIfEmpty().Max();
                int trid = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.date == maxdate1 select a.trid).DefaultIfEmpty().Max();
                DateTime maxdate = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.trid == trid select a.date).DefaultIfEmpty().Max();

                var clcount = (from c in db.ClosingMatchingTabs where c.date == maxdate && c.opid == User.Identity.Name && c.pagename == "Bond" select c).Count();
                int dcount = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.trid == trid && a.date == maxdate select a).Count();
                if (dcount > 0)
                {
                    if (clcount == 0)
                    {
                        TempData["pagename"] = "Bond";
                        return RedirectToAction("MatchingDailyClosing", "Branch");
                    }
                }
                return View(mt);
            }
        }
        [HttpPost]
        public ActionResult UpdateBond(appltab bd, tempappltab tbd, HttpPostedFileBase photo, HttpPostedFileBase Chequeimage, HttpPostedFileBase spanphoto, HttpPostedFileBase sphoto, HttpPostedFileBase saadharphoto, string command, string newbond, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string sdob = "", string dob = "", string sanniversarydate = "")
        {
            List<appltab> mt = new List<appltab>();
            var BondType = string.Empty;
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                switch (command)
                {
                    case "Search":

                        switch (newbond)
                        {
                            case "":
                                Response.Write("<script>alert('Please Select Contributor Id First')</script>");
                                break;
                            default:

                                mt = db.appltabs.Where(c => c.newbondid == newbond).ToList();
                                return View(mt);
                        }
                        break;

                    case "Submit":
                        var ds = db.Blockdates.Where(c => c.date == bd.formdate && c.branchcode == bd.branchcode && c.status == 0).Count();
                        if (ds > 0)
                        {
                            Response.Write("<script>alert('This Date is closed please select another date')</script>");
                        }
                        else
                        {
                            var phr=new PhaseTab();
                            var countapplltab = db.appltabs.Where(ui => ui.newbondid == bd.newbondid).Count();
                            if (countapplltab != 0)
                            {
                                int pcount = db.Installmenttabs.Where(p => p.newbondid == bd.newbondid && p.payamount != 0).Count();
                                if (pcount <= 1)
                                {
                                    var dateee = Convert.ToDateTime("1991-01-01");
                                    var row = db.appltabs.Single(ui => ui.newbondid == bd.newbondid);
                                    var row2 = (from dcl in db.Installmenttabs where dcl.newbondid == bd.newbondid select dcl).ToList();
                                    foreach (var m in row2.ToList())
                                    {
                                        db.Installmenttabs.Remove(m);
                                    }

                                    var row1 = (from dcl in db.spotcommission_tabs where dcl.newbondid == bd.newbondid select dcl).ToList();
                                    foreach (var n in row1.ToList())
                                    {
                                        db.spotcommission_tabs.Remove(n);
                                    }
                                    var comm = (from dcl in db.commission_tabs where dcl.newbondid == bd.newbondid select dcl).ToList();
                                    foreach (var co in comm.ToList())
                                    {
                                        db.commission_tabs.Remove(co);
                                    }
                                    db.SaveChanges();

                                    if (bd.phaseid != 0)
                                    {
                                        phr = db.PhaseTabs.Single(c => c.Id == bd.phaseid);
                                    }
                                    else
                                    {
                                        phr = db.PhaseTabs.FirstOrDefault(c => c.Id == row.phaseid);
                                    }

                                    var mr = db.Members.Single(m => m.Id == 1);
                                    var br = db.Branchtabs.Single(bc => bc.BranchCode == bd.branchcode);
                                    var cr = db.CompanyInfos.Single(csn => csn.AdminId == br.companyid);
                                    int max = (from a in db.appltabs select a).Count();
                                    var adr = db.AgentDetails.Single(ad => ad.NewAgentId == bd.newintroducerid);


                                    TimeSpan span = bd.formdate.Subtract(bd.dob);
                                    int years = (int)(span.Days / 365.25);
                                    int remainder = (int)(span.Days % 365.25);
                                    int months = remainder / 30;
                                    if (months >= 12)
                                    {
                                        int y = months / 12;
                                        int m = months % 12;
                                        months = m;
                                        years = years + y;
                                    }
                                    int days = remainder % 30;
                                    var age = years + " years " + months + " months " + days + " days";



                                    #region APPLTAB


                                    //row.bondid = row.bondid;//
                                    // bd.newbondid = newbondid;//
                                    //-------------Personal details------------------------------////
                                    row.name = bd.name;
                                    row.email = bd.email;
                                    row.newintroducerid = bd.newintroducerid;
                                    row.introducerid = adr.AgencyCode;//
                                    row.intrankcode = adr.RankCode;//
                                    row.intrankname = adr.RankName;//
                                    row.age = age;//
                                    row.branchcode = bd.branchcode;
                                    row.RelationOf = bd.RelationOf;
                                    row.fathername = bd.fathername;
                                    row.category = bd.category;
                                    row.incomegroup = bd.incomegroup;
                                    row.addr = bd.addr;
                                    row.mobileno = bd.mobileno;
                                    if (bd.formdate != null || bd.formdate != dateee)
                                    {
                                        row.formdate = bd.formdate;
                                    }
                                    else
                                    {
                                        row.formdate = row.formdate;
                                    }
                                    if (bd.dob != null || bd.dob != dateee)
                                    {
                                        row.dob = bd.dob;
                                    }
                                    else
                                    {
                                        row.dob = row.dob;
                                    }
                                    row.nationality = bd.nationality;
                                    row.guardianname = bd.guardianname;
                                    row.gurage = bd.gurage;
                                    row.gurrel = bd.gurrel;
                                    row.guraddr = bd.guraddr;
                                    if (photo != null)
                                    {
                                        string imgname = gid();
                                        row.photo = "~/Photo/" + imgname + ".jpg";
                                        photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                    }
                                    else
                                    {
                                        row.photo = row.photo;

                                    }
                                    //-------------Personal details END------------------------------////

                                    //-----Bank Information Update----------------//
                                    row.panno = bd.panno;
                                    row.bankname = bd.bankname;
                                    row.accountno = bd.accountno;
                                    row.IFSC = bd.IFSC;
                                    //-----Bank Information Update END----------------//
                                    //--------Second Applicant Form---------------//
                                    row.sapplicantname = bd.sapplicantname;
                                    row.sfathername = bd.sfathername;
                                    row.smothername = bd.smothername;
                                    row.scategory = bd.scategory;
                                    row.scorraddress = bd.scorraddress;
                                    row.scity = bd.scity;
                                    row.sstate = bd.sstate;
                                    row.spincode = bd.spincode;

                                    //----------Same As Above ------------------------//
                                    row.spermanentaddress = bd.spermanentaddress;
                                    row.pcity = bd.pcity;
                                    row.pstate = bd.pstate;
                                    row.ppincode = bd.ppincode;
                                    row.snationality = bd.snationality;
                                    row.squalification = bd.squalification;
                                    row.smobileno = bd.smobileno;
                                    row.salternatemobileno = bd.salternatemobileno;
                                    row.spanno = bd.spanno;
                                    row.semailid = bd.semailid;
                                    row.sdob = bd.sdob;
                                    row.saadharno = bd.saadharno;
                                    row.smaritialstatus = bd.smaritialstatus;
                                    row.sanniversarydate = bd.sanniversarydate;
                                    row.soccupation = bd.soccupation;
                                    row.spassport = bd.spassport;
                                    row.sresidentialstatus = bd.sresidentialstatus;

                                    if (sphoto != null)
                                    {
                                        row.sphoto = GenerateImageTag(sphoto);
                                    }
                                    else
                                    {
                                        row.sphoto = row.sphoto;
                                    }
                                    if (saadharphoto != null)
                                    {
                                        row.saadharphoto = GenerateImageTag(saadharphoto);
                                    }
                                    else
                                    {
                                        row.saadharphoto = row.saadharphoto;
                                    }
                                    if (spanphoto != null)
                                    {
                                        row.spanphoto = GenerateImageTag(spanphoto);
                                    }
                                    else
                                    {
                                        row.spanphoto = row.spanphoto;
                                    }
                                    //----------Same As Above End------------------------//
                                    //--------Second Applicant Form END--------------//

                                    //---------Project Details---------------------------------------------///
                                    row.propertytype = bd.propertytype;
                                    row.paymenttype = bd.paymenttype;
                                    ProTerm pr = new ProTerm();

                                    if (bd.paymenttype != "EMI")
                                    {
                                        pr = db.ProTerms.FirstOrDefault();
                                    }
                                    else
                                    {
                                        if (bd.term == row.term)
                                        {
                                            pr = db.ProTerms.Single(p => p.projectid == bd.projectid && p.term == bd.term);
                                            row.term = row.term;
                                        }

                                        else
                                        {
                                            pr = db.ProTerms.Single(p => p.projectid == bd.projectid && p.term == bd.term);
                                            row.term = bd.term;
                                        }
                                    }
                                    if (bd.paymenttype == "FULL") { row.bookingamount = bd.totalcon; }

                                    //row.plancode = bd.plancode;
                                    row.nolandunit = bd.nolandunit;

                                    if (bd.PYN == "N")
                                    {
                                        row.PYN = row.PYN;
                                        row.phaseid = row.phaseid;
                                        row.block = row.block;
                                        row.propertyaddress = row.propertyaddress;
                                        row.plotno = row.plotno;
                                    }
                                    if (bd.PYN == "Y")
                                    {
                                        row.PYN = bd.PYN;
                                        if (bd.phaseid != 0)
                                        {
                                            row.phaseid = bd.phaseid;
                                        }
                                        else
                                        {
                                            row.phaseid = row.phaseid;
                                        }
                                        if (bd.block != "NA")
                                        {
                                            row.block = bd.block;
                                        }
                                        else
                                        {
                                            row.block = row.block;
                                        }
                                        if (bd.propertyaddress != null)
                                        {
                                            row.propertyaddress = bd.propertyaddress;
                                        }
                                        else
                                        {
                                            row.propertyaddress = row.propertyaddress;
                                        }
                                        if (bd.plotno != 0)
                                        {
                                            row.plotno = bd.plotno;
                                        }
                                        else
                                        {
                                            row.plotno = row.plotno;
                                        }
                                    }
                                    row.bookingamount = bd.bookingamount;
                                    row.discountper = bd.discountper;
                                    row.propertypreference = bd.propertypreference;
                                    row.plccost = bd.plccost;
                                    row.totalcon = bd.totalcon;
                                    if (bd.mode != null)
                                    {
                                        row.mode = bd.mode;
                                    }
                                    else
                                    {
                                        row.mode = row.mode;
                                    }
                                    row.payment = bd.payment;
                                    row.expectedraisablevalue = bd.expectedraisablevalue;

                                    if (bd.expirydate != null || bd.expirydate != dateee)
                                    {
                                        row.expirydate = bd.expirydate;
                                    }
                                    else
                                    {
                                        row.expirydate = row.expirydate;
                                    }
                                    row.nomineename = bd.nomineename;
                                    row.nomage = bd.nomage;
                                    row.nomrel = bd.nomrel;
                                    row.nomaddr = bd.nomaddr;
                                    row.paymethod = bd.paymethod;
                                    row.pdate = bd.pdate;
                                    if (bd.paymethod == "DD")
                                    {
                                        row.checkorddno = bd.checkorddno;
                                        row.drawno = bd.drawno;
                                        row.branchpay = bd.branchpay;
                                        row.amountword = bd.amountword;
                                        row.Chequedate = row.Chequedate;
                                        row.ACholdername = "NA";
                                        row.Branch = "NA";
                                        row.IFSCCode = "NA";
                                        row.transactiontype = "NA";
                                        row.Chequeimage = row.Chequeimage;

                                    }
                                    if (bd.paymethod == "Cash")
                                    {
                                        row.branchpay = bd.branchpay;
                                        row.amountword = bd.amountword;
                                        row.Chequedate = row.Chequedate;
                                        row.ACholdername = "NA";
                                        row.Branch = "NA";
                                        row.IFSCCode = "NA";
                                        row.transactiontype = "NA";
                                        row.Chequeimage = row.Chequeimage;
                                    }
                                    if (bd.paymethod == "Cheque")
                                    {
                                        row.bank = bd.bank;
                                        row.Account = bd.Account;
                                        row.chequeno = bd.chequeno;
                                        row.ACholdername = bd.ACholdername;
                                        row.Branch = bd.Branch;
                                        row.IFSCCode = bd.IFSCCode;
                                        row.ChequeAmount = bd.ChequeAmount;
                                        row.Chequedate = bd.Chequedate;
                                        row.transactiontype = "NA";
                                        if (Chequeimage != null)
                                        {
                                            string img = gid();
                                            row.Chequeimage = "~/Photo/" + img + ".jpg";
                                            Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                                        }
                                        else
                                        {
                                            row.Chequeimage = row.Chequeimage;

                                        }

                                    }
                                    else if (bd.paymethod == "banktransaction")
                                    {
                                        row.bank = trbank;
                                        row.Account = holderacno;
                                        row.chequeno = transactionid;
                                        row.ACholdername = "NA";
                                        row.Branch = "NA";
                                        row.IFSCCode = "NA";
                                        row.ChequeAmount = tramount;
                                        if (bd.Chequedate != null || bd.Chequedate != dateee)
                                        {
                                            row.Chequedate = Convert.ToDateTime(transactiondate);
                                        }
                                        else
                                        {
                                            row.Chequedate = row.Chequedate;
                                        }
                                        row.Chequeimage = row.Chequeimage;
                                        row.transactiontype = bd.transactiontype;
                                    }

                                    //---------Project Details END---------------------------------------------///

                                    //---------Plot Detail ----------------------------------------------------///
                                    row.plotdesp = bd.plotdesp;
                                    if (bd.northeast != null)
                                    {
                                        row.northeast = bd.northeast;
                                    }
                                    else
                                    {
                                        row.northeast = row.northeast;
                                    }
                                    if (bd.southeast != null)
                                    {
                                        row.southeast = bd.southeast;
                                    }
                                    else
                                    {
                                        row.southeast = row.southeast;
                                    }
                                    if (bd.northwest != null)
                                    {
                                        row.northwest = bd.northwest;
                                    }
                                    else
                                    {
                                        row.northwest = row.northwest;
                                    }
                                    if (bd.southwest != null)
                                    {
                                        row.southwest = bd.southwest;
                                    }
                                    else
                                    {
                                        row.southwest = row.southwest;
                                    }
                                    //---------Plot Detail End----------------------------------------------------///
                                    row.plantype = row.plantype;

                                    row.plancode = pr.Id;//
                                    row.bonusper = row.bonusper;//
                                    var countplan = db.Plans.Where(x => x.Plancode == bd.projectid).Count();
                                    if (countplan != 0)
                                    {
                                        var pt = db.Plans.Single(c => c.Plancode == bd.projectid);
                                        row.planname = pt.shortcutname;//
                                    }
                                    else
                                    {
                                        var aaa = db.ProTerms.Single(c => c.Id == bd.projectid);
                                        var pt = db.Plans.Single(c => c.Plancode == aaa.projectid);
                                        row.planname = pt.shortcutname;//
                                    }

                                    row.pdate = bd.pdate;

                                    row.downpayment = row.downpayment;//
                                    row.Time = row.Time;//

                                    row.printstatus = row.printstatus;//
                                    if (bd.phaseid != 0)
                                    {
                                        row.phaseid = bd.phaseid;
                                        row.phase = phr.Phase;
                                    }
                                    else
                                    {
                                        row.phaseid = row.phaseid;
                                        row.phase = row.phase;
                                    }
                                    if (bd.chequeappdate != null || bd.chequeappdate != dateee)
                                    {
                                        row.chequeappdate = bd.pdate;
                                    }
                                    else
                                    {
                                        row.chequeappdate = row.pdate;
                                    }
                                    if (bd.Aadhaar_No != null)
                                    {
                                        row.Aadhaar_No = bd.Aadhaar_No;//
                                    }
                                    else
                                    {
                                        row.Aadhaar_No = row.Aadhaar_No;//
                                    }

                                    //date section

                                    // bd.sanniversarydate = GetCleanDate(sanniversarydate);
                                    // bd.sdob = GetCleanDate(sdob);
                                    //


                                    /*---------------------------------ref no----------------**/

                                    //db.Entry(row).State = EntityState.Modified;
                                    db.Entry<appltab>(row).State = System.Data.Entity.EntityState.Modified;
                                    db.SaveChanges();
                                    customerupdate_entry cupd = new customerupdate_entry();
                                    cupd.updateby = User.Identity.Name;
                                    cupd.customerid = bd.newbondid;
                                    cupd.updatedate = DateTime.Now;
                                    db.customerupdate_entrys.Add(cupd);
                                    db.SaveChanges();
                                    var appldetail = db.appltabs.Single(ui => ui.newbondid == bd.newbondid);
                                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                                    SqlCommand cmd = new SqlCommand();
                                    cmd.CommandText = "InsertAppTab";
                                    cmd.CommandType = CommandType.StoredProcedure;
                                    cmd.Connection = con;

                                    cmd.Parameters.AddWithValue("@introducerid", appldetail.introducerid);
                                    cmd.Parameters.AddWithValue("@plancode", appldetail.plancode);
                                    cmd.Parameters.AddWithValue("@planname", appldetail.planname);
                                    cmd.Parameters.AddWithValue("@payment", appldetail.payment);
                                    cmd.Parameters.AddWithValue("@bondid", appldetail.bondid);
                                    cmd.Parameters.AddWithValue("@mode", appldetail.mode);
                                    cmd.Parameters.AddWithValue("@formdate", appldetail.formdate);
                                    cmd.Parameters.AddWithValue("@pdate", appldetail.pdate);
                                    cmd.Parameters.AddWithValue("@term", appldetail.term);
                                    cmd.Parameters.AddWithValue("@opid", appldetail.opid);


                                    try
                                    {
                                        con.Open();
                                        cmd.ExecuteNonQuery();

                                        Response.Write("<script>alert('" + appldetail.name + " Update Successfully....')</script>");
                                        ViewBag.msg = mr.custname + " " + row.name + " (" + row.newbondid + ") Update Successfully....";
                                        NewBondid = appldetail.newbondid;
                                        ViewData["bondtype"] = appldetail.propertypreference;
                                        ViewData["newbondid"] = appldetail.newbondid;
                                        ViewData["discount"] = appldetail.discountper;
                                        BondType = appldetail.propertypreference; ;

                                    }

                                    catch (Exception e)
                                    {
                                        ViewBag.msg = e.Message;
                                    }
                                    finally
                                    {
                                        con.Close();
                                    }

                                    #endregion



                                    ViewData["paymethod"] = bd.paymethod;
                                    var count1 = db.BlockTabs.Where(ui => ui.Plancode == bd.projectid && ui.phaseid == bd.phaseid && ui.block == bd.block).Count();

                                }
                                else
                                {
                                    ViewBag.msg = "Please Cancel all renewal to update " + mrg.custname + " " + bd.name + " (" + bd.newbondid + ")";
                                }
                               
                            }
                             else
                                {
                                    ViewBag.msg = " Invalid Customer....";
                                }
                        }
                        break;
                       
                }
              
            }
            return View(mt);
        }

        [HttpGet]
        public ActionResult UpdateManualBond()
        {
            List<appltab> bd = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bd);
            }
        }
        [HttpPost]
        public ActionResult UpdateManualBond(string command, string newbond, appltab model, HttpPostedFileBase photo)
        {
            var mr = db.Members.Single(m => m.Id == 1);
            List<appltab> bd = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                string localIP = "";

                foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                {
                    if (nic.OperationalStatus == OperationalStatus.Up)
                    {
                        localIP += nic.GetPhysicalAddress().ToString();
                        break;
                    }
                }

                switch (command)
                {
                    case "Search":
                        if (newbond == "")
                        {
                            Response.Write("<script>alert('Please Fill " + mr.custname + " Id')</script>");
                        }
                        else
                        {
                            bd = db.appltabs.Where(c => c.newbondid == newbond).ToList();
                        }
                        break;

                    case "Update":

                        appltab bdc = db.appltabs.Single(c => c.newbondid == model.newbondid);
                        int count = db.Installmenttabs.Where(p => p.newbondid == model.newbondid && p.payamount != 0).Count();
                        if (count <= 1)
                        {
                            var row = db.appltabs.Single(o => o.newbondid == model.newbondid);
                            //db.appltabs.Remove(row);

                            var row2 = (from dcl in db.Installmenttabs where dcl.newbondid == model.newbondid select dcl).ToList();
                            foreach (var m in row2.ToList())
                            {
                                db.Installmenttabs.Remove(m);
                            }

                            var row1 = (from dcl in db.spotcommission_tabs where dcl.newbondid == model.newbondid select dcl).ToList();
                            foreach (var n in row1.ToList())
                            {
                                db.spotcommission_tabs.Remove(n);
                            }
                            var comm = (from dcl in db.commission_tabs where dcl.newbondid == model.newbondid select dcl).ToList();
                            foreach (var co in comm.ToList())
                            {
                                db.commission_tabs.Remove(co);
                            }
                            db.SaveChanges();

                            var br = db.Branchtabs.Single(bc => bc.BranchCode == model.branchcode);
                            var cr = db.CompanyInfos.Single(csn => csn.AdminId == br.companyid);

                            var adr = db.AgentDetails.Single(ad => ad.NewAgentId == model.newintroducerid);
                            //var pr = db.NewPlans.Single(pt => pt.Plancode == model.plancode);

                            var discount = Math.Round(model.payment * (model.discountper / 100), 0);
                            var totaldiscount = Math.Round(model.totalcon * (model.discountper / 100), 0);
                            var payment = model.payment - discount;
                            var totalcon = model.totalcon - totaldiscount;

                            bdc.bondid = row.bondid;
                            bdc.newbondid = model.newbondid;
                            bdc.name = model.name;
                            bdc.RelationOf = model.RelationOf;
                            bdc.fathername = model.fathername;
                            bdc.addr = model.addr;
                            bdc.mobileno = model.mobileno;
                            bdc.introducerid = adr.AgencyCode;
                            bdc.intrankcode = adr.RankCode;
                            bdc.intrankname = adr.RankName;
                            bdc.newintroducerid = model.newintroducerid;
                            bdc.formdate = model.formdate;
                            bdc.dob = DateTime.Now.Date;
                            bdc.age = model.age;
                            bdc.nationality = model.nationality;

                            bdc.guardianname = model.guardianname;
                            bdc.gurage = model.gurage;
                            bdc.gurrel = model.gurrel;
                            bdc.guraddr = model.guraddr;

                            if (photo != null)
                            {
                                string imgname = gid();
                                bdc.photo = "~/Photo/" + imgname + ".jpg";
                                photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                            }
                            else
                            {
                                bdc.photo = bdc.photo;
                            }

                            bdc.panno = model.panno;
                            bdc.bankname = model.bankname;
                            bdc.accountno = model.accountno;

                            bdc.plantype = model.plantype;
                            bdc.planname = model.planname;
                            bdc.plancode = 0;
                            bdc.bonusper = 0;
                            bdc.term = model.term;
                            bdc.mode = model.mode;
                            bdc.payment = payment;
                            bdc.applicationcharge = model.applicationcharge;
                            bdc.nolandunit = model.nolandunit;
                            bdc.totalcon = totalcon;
                            bdc.expectedraisablevalue = model.expectedraisablevalue;
                            bdc.expirydate = model.expirydate;

                            bdc.nomineename = model.nomineename;
                            bdc.nomage = model.nomage;
                            bdc.nomrel = model.nomrel;
                            bdc.nomaddr = model.nomaddr;

                            bdc.paymethod = model.paymethod;
                            bdc.pdate = model.formdate;
                            bdc.checkorddno = model.checkorddno;
                            bdc.drawno = model.drawno;
                            bdc.branchpay = model.branchpay;
                            bdc.amountword = model.amountword;
                            bdc.bookingamount = model.bookingamount;
                            bdc.downpayment = model.downpayment;
                            //db.Entry(bdc).State = EntityState.Modified;
                            db.Entry<appltab>(bdc).State = System.Data.Entity.EntityState.Modified;
                            db.SaveChanges();

                            ViewData["newbondid"] = model.newbondid;
                            con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                            SqlCommand cmd = new SqlCommand();
                            cmd.CommandText = "InsertAppTab";
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;

                            cmd.Parameters.AddWithValue("@introducerid", adr.AgencyCode);
                            cmd.Parameters.AddWithValue("@plancode", 0);
                            cmd.Parameters.AddWithValue("@planname", model.planname);
                            cmd.Parameters.AddWithValue("@payment", payment);
                            cmd.Parameters.AddWithValue("@bondid", bdc.bondid);
                            cmd.Parameters.AddWithValue("@mode", model.mode);
                            cmd.Parameters.AddWithValue("@formdate", model.formdate);
                            cmd.Parameters.AddWithValue("@pdate", model.pdate);
                            cmd.Parameters.AddWithValue("@term", model.term);
                            cmd.Parameters.AddWithValue("@opid", User.Identity.Name);

                            try
                            {
                                con.Open();
                                cmd.ExecuteNonQuery();
                                //MyClass.Sendmsg(model.mobileno, "Dear " + model.name + " Welcome to joining " + cr.CompanyName + ", your " + mr.custname + "Id is " + model.newbondid + " on date " + model.formdate + " for plan  " + model.planname + " term " + model.term + " years of Rs. " + model.payment);
                                Response.Write("<script>alert('" + mr.custname + " Updated Successfully....')</script>");
                                ViewBag.msg = mr.custname + " Updated Successfully....";
                                NewBondid = model.newbondid;

                            }

                            catch (Exception e)
                            {
                                ViewBag.msg = e.Message;
                            }
                            finally
                            {
                                con.Close();
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Please Cancel all renewal to update " + mr.custname;
                        }
                        break;
                }

                return View(bd);
            }
        }

        [HttpGet]
        public ActionResult UpdateAdjustmentBond()
        {
            List<appltab> bd = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bd);
            }
        }
        [HttpPost]
        public ActionResult UpdateAdjustmentBond(string command, string newbond, appltab model, HttpPostedFileBase photo, int noofrenewel = 0)
        {
            var mr = db.Members.Single(m => m.Id == 1);
            List<appltab> bd = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                string localIP = "";

                foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                {
                    if (nic.OperationalStatus == OperationalStatus.Up)
                    {
                        localIP += nic.GetPhysicalAddress().ToString();
                        break;
                    }
                }

                switch (command)
                {
                    case "Search":
                        if (newbond == "")
                        {
                            Response.Write("<script>alert('Please Fill " + mr.custname + " Id')</script>");

                        }
                        else
                        {
                            bd = db.appltabs.Where(c => c.newbondid == newbond).ToList();
                            var cc = db.Installmenttabs.Where(c => c.newbondid == newbond && c.payamount != 0 && c.type == "Adjustment").Count();
                            ViewData["noofrenewal"] = cc;
                        }
                        break;

                    case "Update":

                        appltab bdc = db.appltabs.Single(c => c.newbondid == model.newbondid);
                        int count = db.Installmenttabs.Where(p => p.newbondid == model.newbondid && p.payamount != 0 && p.type != "Adjustment").Count();
                        if (count == 0)
                        {
                            var row = db.appltabs.Single(o => o.newbondid == model.newbondid);
                            //db.appltabs.Remove(row);

                            var row2 = (from dcl in db.Installmenttabs where dcl.newbondid == model.newbondid select dcl).ToList();
                            foreach (var m in row2.ToList())
                            {
                                db.Installmenttabs.Remove(m);
                            }
                            db.SaveChanges();

                            var br = db.Branchtabs.Single(bc => bc.BranchCode == model.branchcode);
                            var adr = db.AgentDetails.Single(ad => ad.NewAgentId == model.newintroducerid);
                            var pr = db.NewPlans.Single(pt => pt.Plancode == model.plancode);

                            var discount = Math.Round(model.payment * (model.discountper / 100), 0);
                            var totaldiscount = Math.Round(model.totalcon * (model.discountper / 100), 0);
                            var payment = model.payment - discount;
                            var totalcon = model.totalcon - totaldiscount;

                            bdc.bondid = row.bondid;
                            bdc.newbondid = model.newbondid;
                            bdc.name = model.name;
                            bdc.RelationOf = model.RelationOf;
                            bdc.fathername = model.fathername;
                            bdc.addr = model.addr;
                            bdc.mobileno = model.mobileno;
                            bdc.introducerid = adr.AgencyCode;
                            bdc.intrankcode = adr.RankCode;
                            bdc.intrankname = adr.RankName;
                            bdc.newintroducerid = model.newintroducerid;
                            bdc.formdate = model.formdate;
                            bdc.dob = DateTime.Now.Date;
                            bdc.age = model.age;
                            bdc.nationality = model.nationality;

                            bdc.guardianname = model.guardianname;
                            bdc.gurage = model.gurage;
                            bdc.gurrel = model.gurrel;
                            bdc.guraddr = model.guraddr;

                            if (photo != null)
                            {
                                string imgname = gid();
                                bdc.photo = "~/Photo/" + imgname + ".jpg";
                                photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                            }
                            else
                            {
                                bdc.photo = bdc.photo;
                            }

                            bdc.panno = model.panno;
                            bdc.bankname = model.bankname;
                            bdc.accountno = model.accountno;

                            bdc.plantype = model.plantype;
                            bdc.planname = pr.Planname;
                            bdc.plancode = pr.Plancode;
                            bdc.bonusper = 0;
                            bdc.term = model.term;
                            bdc.mode = model.mode;
                            bdc.payment = payment;
                            bdc.applicationcharge = model.applicationcharge;
                            bdc.nolandunit = model.nolandunit;
                            bdc.totalcon = totalcon;
                            bdc.expectedraisablevalue = model.expectedraisablevalue;
                            bdc.expirydate = model.expirydate;

                            bdc.nomineename = model.nomineename;
                            bdc.nomage = model.nomage;
                            bdc.nomrel = model.nomrel;
                            bdc.nomaddr = model.nomaddr;

                            bdc.paymethod = model.paymethod;
                            bdc.pdate = model.formdate;
                            bdc.checkorddno = model.checkorddno;
                            bdc.drawno = model.drawno;
                            bdc.branchpay = model.branchpay;
                            bdc.amountword = model.amountword;
                            bdc.bookingamount = model.bookingamount;
                            bdc.downpayment = 0;
                            //db.Entry(bdc).State = EntityState.Modified;
                            db.Entry<appltab>(bdc).State = System.Data.Entity.EntityState.Modified;
                            db.SaveChanges();

                            ViewData["newbondid"] = model.newbondid;
                            con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                            SqlCommand cmd = new SqlCommand();
                            cmd.CommandText = "InsertAppTabAdjust";
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;

                            cmd.Parameters.AddWithValue("@introducerid", adr.AgencyCode);
                            cmd.Parameters.AddWithValue("@plancode", pr.Plancode);
                            cmd.Parameters.AddWithValue("@planname", model.planname);
                            cmd.Parameters.AddWithValue("@payment", payment);
                            cmd.Parameters.AddWithValue("@bondid", bdc.bondid);
                            cmd.Parameters.AddWithValue("@mode", model.mode);
                            cmd.Parameters.AddWithValue("@formdate", model.formdate);
                            cmd.Parameters.AddWithValue("@pdate", model.pdate);
                            cmd.Parameters.AddWithValue("@term", model.term);
                            cmd.Parameters.AddWithValue("@opid", User.Identity.Name);

                            try
                            {
                                con.Open();
                                cmd.ExecuteNonQuery();
                                con.Close();
                                //MyClass.Sendmsg(model.mobileno, "Dear " + model.name + " Welcome to joining " + cr.CompanyName + ", your " + mr.custname + "Id is " + model.newbondid + " on date " + model.formdate + " for plan  " + model.planname + " term " + model.term + " years of Rs. " + model.payment);
                                Response.Write("<script>alert('" + mr.custname + " Updated Successfully....')</script>");
                                ViewBag.msg = mr.custname + " Updated Successfully....";
                                NewBondid = model.newbondid;
                                ViewData["newbondid"] = model.newbondid;
                                if (noofrenewel > 0)
                                {
                                    for (int i = 1; i <= noofrenewel; i++)
                                    {
                                        var cr = db.appltabs.Single(c => c.newbondid == model.newbondid);
                                        SqlCommand cmd2 = new SqlCommand();
                                        cmd2.CommandText = "adjustrenewel";
                                        cmd2.CommandType = CommandType.StoredProcedure;
                                        cmd2.Connection = con;

                                        cmd2.Parameters.AddWithValue("@newbondid", model.newbondid);
                                        cmd2.Parameters.AddWithValue("@planname", cr.planname);
                                        cmd2.Parameters.AddWithValue("@term", cr.term);
                                        cmd2.Parameters.AddWithValue("@mode", cr.mode);
                                        cmd2.Parameters.AddWithValue("@installmentno", i);
                                        cmd2.Parameters.AddWithValue("@paymethod", cr.paymethod);
                                        cmd2.Parameters.AddWithValue("@pdate", cr.pdate);
                                        cmd2.Parameters.AddWithValue("@payamount", cr.payment);
                                        cmd2.Parameters.AddWithValue("@amountinword", cr.amountword);
                                        cmd2.Parameters.AddWithValue("@opid", User.Identity.Name);
                                        cmd2.Parameters.AddWithValue("@macaddress", localIP);
                                        cmd2.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());

                                        try
                                        {
                                            con.Open();
                                            cmd2.ExecuteNonQuery();
                                        }
                                        catch (Exception e)
                                        {
                                            ViewBag.msg = e.Message;
                                        }
                                        finally
                                        {
                                            con.Close();
                                        }
                                    }
                                }

                            }

                            catch (Exception e)
                            {
                                ViewBag.msg = e.Message;
                            }
                            finally
                            {
                                con.Close();
                            }
                        }
                        else
                        {
                            ViewBag.msg = "Please Cancel all renewal to update " + mr.custname;
                        }
                        break;
                }

                return View(bd);
            }
        }

        #endregion

        #region Complete Report Menu Start Here

        #region Field Reports Start Here

        [HttpGet]
        public ActionResult Broker(string brokerid, int s = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (brokerid == "" || brokerid == null)
                {
                    var dr = (from o in db.AgentDetails where o.Status == 1 orderby o.NewAgentId select o).ToList();

                    return View(dr);
                }
                else
                {
                    var dn = (from a in db.AgentDetails where a.NewAgentId == brokerid select a).ToList();
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Broker.rpt"));
                    rd.SetDataSource(dn);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }

                    return View(dn);
                }

            }
        }
        public ActionResult PrintBrokerList()
        {
            List<BrokerList> blist = new List<BrokerList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var brolist = (from o in db.AgentDetails where o.Status == 1 orderby o.NewAgentId select o).ToList();
            foreach (var b in brolist)
            {
                blist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Brokerlist.rpt"));
            rd.SetDataSource(blist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult AllBroker()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (!IsLoggedIn())
                {
                    return RedirectToAction("Logout", "Admin");
                }
                else
                {
                    List<BrokerList> blist = new List<BrokerList>();
                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var brolist = (from dcl in db.AgentDetails where dcl.Status == 1 select dcl).ToList();
                    foreach (var b in brolist)
                    {

                        blist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, password = b.Password });
                    }
                    return View(blist);

                }

            }
        }
        public ActionResult PrintAllBrokerList()
        {
            List<BrokerList> blist = new List<BrokerList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var brolist = (from dcl in db.AgentDetails where dcl.Status == 1 select dcl).ToList();
            foreach (var b in brolist)
            {

                var tp = "";
                var aa = db.NewLogins.Where(n => n.UserName == b.NewAgentId && n.type == "Agent").Count();
                if (aa == 1)
                {
                    var ng = db.NewLogins.Single(p => p.UserName == b.NewAgentId && p.type == "Agent");
                    tp = ng.Password;
                }
                blist.Add(new BrokerList { password = tp, newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Brokerlist.rpt"));
            rd.SetDataSource(blist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult DatewiseBroker()
        {
            List<BrokerList> dwblist = new List<BrokerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {


                return View(dwblist);
            }
        }
        [HttpPost]
        public ActionResult DatewiseBroker(DateTime sdate, DateTime edate)
        {
            List<BrokerList> dwblist = new List<BrokerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var blist = (from g in db.AgentDetails where g.Doj >= sdate && g.Doj <= edate && g.Status == 1 orderby g.NewAgentId select g).ToList();
                foreach (var b in blist)
                {
                    dwblist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = sdate, edate = edate });
                }

                stdate = sdate;
                enddate = edate;
                return View(dwblist);

            }
        }
        public ActionResult PrintDatewiseBroker()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                List<BrokerList> dwblist = new List<BrokerList>();
                var blist = (from g in db.AgentDetails where g.Doj >= stdate && g.Doj <= enddate && g.Status == 1 orderby g.NewAgentId select g).ToList();
                foreach (var b in blist)
                {
                    dwblist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = stdate, edate = enddate });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DatewiseBroker.rpt"));
                rd.SetDataSource(dwblist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(dwblist);
            }
        }

        [HttpGet]
        public ActionResult BrokerChain()
        {
            List<BrokerChain> bclist = new List<BrokerChain>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerChain(string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                int rcount = 0;
                MonthName mn = new MonthName();
                var mon = mn.numbertomonthname(month);
                List<BrokerChain> bclist = new List<BrokerChain>();
                var ccc = db.BrokerCommLists.Where(a => a.newagentid == newagentid && a.month == mon && a.Year == year).Count();
                if (ccc == 1)
                {
                    var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
                    bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    List<agents> dalist = new List<agents>();
                    var alist = (from al in db.BrokerCommLists where al.newintroducerid == newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                    foreach (var a in alist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                    }

                    var maxsragent = dalist.Count;
                    var minsragent = 1;
                    while (minsragent <= maxsragent)
                    {

                        var da = dalist.Where(a => a.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = dalist.Count;
                    }
                    foreach (var dd in dalist)
                    {
                        var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                        if (ad.status == 1)
                        {
                            bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                        }
                    }
                }
                else
                {
                    ViewBag.msg = "This Month Chain Not Released Please Check It";
                }
                NewAgentid = newagentid;
                vvyear = year;
                vmonth = month;
                return View(bclist);
            }
        }
        public ActionResult PrintBrokerChainReport()
        {
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            int rcount = 0;
            List<BrokerChain> bclist = new List<BrokerChain>();
            MonthName mn = new MonthName();
            var mon = mn.numbertomonthname(vmonth);
            var br = db.BrokerCommLists.Single(a => a.newagentid == NewAgentid && a.month == mon && a.Year == vvyear);
            bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.BrokerCommLists where al.newintroducerid == NewAgentid && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });
                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == vvyear);
                if (ad.status == 1)
                {
                    bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "BrokerChain.rpt"));
            rd.SetDataSource(bclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View(bclist);
        }

        [HttpGet]
        public ActionResult BrokerPaymentDetail()
        {
            List<BrokerPayment> bplist = new List<BrokerPayment>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bplist);
            }
        }
        [HttpPost]
        public ActionResult BrokerPaymentDetail(string newagentid)
        {
            List<BrokerPayment> bplist = new List<BrokerPayment>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime fdate = DateTime.Now.Date;
                DateTime sdate = DateTime.Now.Date;
                DateTime fdate1 = DateTime.Now.Date;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                int min = (from o in db.commission_tabs where o.agentid == ar.AgencyCode select o.Id).DefaultIfEmpty(0).Min();
                var comm = db.commission_tabs.Single(s => s.Id == min);
                DateTime dd = comm.date;

                while (dd <= DateTime.Now.Date)
                {
                    var year = dd.Year;
                    var year1 = year.ToString();
                    var month = dd.Month;
                    int mon = DateTime.DaysInMonth(year, month);
                    if (month > 9)
                    {
                        sdate = Convert.ToDateTime(month + "/01/" + year);
                        fdate = Convert.ToDateTime(month + "/" + mon + "/" + year);
                    }
                    else
                    {
                        sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                        fdate = Convert.ToDateTime("0" + month + "/" + mon + " /" + year);
                    }
                    var count = (from co in db.Voucher_Reports where co.month == month && co.year == year1 && co.agentid == ar.AgencyCode select co.Id).Count();
                    if (count >= 1)
                    {
                        MonthName mn = new MonthName();
                        var monthname = mn.numbertomonthname(month);
                        var bv = db.Voucher_Reports.Single(s => s.agentid == ar.AgencyCode && s.month == month && s.year == year1);
                        bplist.Add(new BrokerPayment { status = "Paid", newagentid = newagentid, name = ar.name, Business = bv.bussiness, commission = bv.commission, tds = bv.tds, netamount = bv.netamount, month = monthname, year = bv.year, pdate = bv.date, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                    else
                    {
                        int mon1 = DateTime.DaysInMonth(year, month);
                        if (month > 9)
                        {
                            sdate = Convert.ToDateTime(month + "/01/" + year);
                            fdate = Convert.ToDateTime(month + "/" + mon1 + "/" + year);
                        }
                        else
                        {
                            sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                            fdate = Convert.ToDateTime("0" + month + "/" + mon1 + " /" + year);
                        }
                        MonthName mn = new MonthName();
                        var monthname = mn.numbertomonthname(month);
                        var sumcomm = (from o in db.commission_tabs where o.date >= sdate && o.date <= fdate && o.agentid == ar.AgencyCode select o.commission).DefaultIfEmpty(0).Sum();
                        var business = (from o in db.commission_tabs where o.date >= sdate && o.date <= fdate && o.agentid == ar.AgencyCode select o.amount).DefaultIfEmpty(0).Sum();
                        bplist.Add(new BrokerPayment { status = "UnPaid", newagentid = newagentid, name = ar.name, Business = business, commission = sumcomm, tds = 0, netamount = 0, month = monthname, year = year1, pdate = DateTime.Now.Date, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                    dd = sdate.AddMonths(1);
                }
                NewAgentid = newagentid;
                return View(bplist);
            }
        }
        public ActionResult PrintBrokerPaymentReport()
        {
            List<BrokerPayment> bplist = new List<BrokerPayment>();
            DateTime fdate = DateTime.Now.Date;
            DateTime sdate = DateTime.Now.Date;
            DateTime fdate1 = DateTime.Now.Date;
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var ar = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);
            int min = (from o in db.commission_tabs where o.agentid == ar.AgencyCode select o.Id).DefaultIfEmpty(0).Min();
            var comm = db.commission_tabs.Single(s => s.Id == min);
            DateTime dd = comm.date;
            while (dd <= DateTime.Now.Date)
            {
                var year = dd.Year;
                var year1 = year.ToString();
                var month = dd.Month;
                int mon = DateTime.DaysInMonth(year, month);
                if (month > 9)
                {
                    sdate = Convert.ToDateTime(month + "/01/" + year);
                    fdate = Convert.ToDateTime(month + "/" + mon + "/" + year);
                }
                else
                {
                    sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                    fdate = Convert.ToDateTime("0" + month + "/" + mon + " /" + year);
                }
                var count = (from co in db.Voucher_Reports where co.month == month && co.year == year1 && co.agentid == ar.AgencyCode select co.Id).Count();
                if (count >= 1)
                {
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month);
                    var bv = db.Voucher_Reports.Single(s => s.agentid == ar.AgencyCode && s.month == month && s.year == year1);
                    bplist.Add(new BrokerPayment { status = "Paid", newagentid = NewAgentid, name = ar.name, Business = bv.bussiness, commission = bv.commission, tds = bv.tds, netamount = bv.netamount, month = monthname, year = bv.year, pdate = bv.date, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                else
                {
                    int mon1 = DateTime.DaysInMonth(year, month);
                    if (month > 9)
                    {

                        sdate = Convert.ToDateTime(month + "/01/" + year);
                        fdate = Convert.ToDateTime(month + "/" + mon1 + "/" + year);
                    }
                    else
                    {
                        sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                        fdate = Convert.ToDateTime("0" + month + "/" + mon1 + " /" + year);
                    }
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month);
                    var sumcomm = (from o in db.commission_tabs where o.date >= sdate && o.date <= fdate && o.agentid == ar.AgencyCode select o.commission).DefaultIfEmpty(0).Sum();
                    var business = (from o in db.commission_tabs where o.date >= sdate && o.date <= fdate && o.agentid == ar.AgencyCode select o.amount).DefaultIfEmpty(0).Sum();
                    bplist.Add(new BrokerPayment { status = "UnPaid", newagentid = NewAgentid, name = ar.name, Business = business, commission = sumcomm, tds = 0, netamount = 0, month = monthname, year = year1, pdate = DateTime.Now.Date, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                dd = sdate.AddMonths(1);
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerPayment.rpt"));
            rd.SetDataSource(bplist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View(bplist);
        }

        [HttpGet]
        public ActionResult Selfbusiness()
        {
            List<DatewiseDueCollection> dwl = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(dwl);
            }
        }
        [HttpPost]
        public ActionResult Selfbusiness(string newintroducerid)
        {
            List<DatewiseDueCollection> dwl = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newintroducerid);
                var amt = 0.0;
                var bondintro = (from o in db.appltabs where o.newintroducerid == newintroducerid select o).ToList();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                foreach (var c in bondintro)
                {
                    if (c.plantype == "PPS")
                    {
                        amt = c.totalcon;
                    }
                    else
                    {
                        amt = (from n in db.Installmenttabs where n.newbondid == c.newbondid && n.payamount != 0 select n.payamount).DefaultIfEmpty(0).Sum();
                    }
                    dwl.Add(new DatewiseDueCollection { newbondid = c.newbondid, name = c.name, newintroducerid = newintroducerid, IntroName = ar.name, formdate = c.formdate, amount = amt, branchname = c.branchcode, companyname = cr.CompanyName });
                }
                NewAgentid = newintroducerid;
                return View(dwl);
            }
        }
        public ActionResult PrintSelfbusiness()
        {
            List<DatewiseDueCollection> dwl = new List<DatewiseDueCollection>();
            var bondintro = (from o in db.appltabs where o.newintroducerid == NewAgentid select o).ToList();
            var amt = 0.0;
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var ar = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);
            foreach (var c in bondintro)
            {
                if (c.plantype == "PPS")
                {
                    amt = c.totalcon;
                }
                else
                {
                    amt = (from n in db.Installmenttabs where n.newbondid == c.newbondid && n.payamount != 0 select n.payamount).DefaultIfEmpty(0).Sum();
                }
                dwl.Add(new DatewiseDueCollection { newbondid = c.newbondid, name = c.name, newintroducerid = NewAgentid, IntroName = ar.name, formdate = c.formdate, amount = amt, branchname = c.branchcode, companyname = cr.CompanyName });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Selfbusiness.rpt"));
            rd.SetDataSource(dwl);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();

        }

        [HttpGet]
        public ActionResult BrokerAccount()
        {
            List<BrokerAccount> balist = new List<BrokerAccount>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(balist);
            }
        }
        [HttpPost]
        public ActionResult BrokerAccount(string newintroducerid, int month = 0, int year = 0)
        {
            List<BrokerAccount> balist = new List<BrokerAccount>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                var ar = db.AgentDetails.Single(n => n.NewAgentId == newintroducerid);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);

                int rcount = 0;
                MonthName mn = new MonthName();
                var mon = mn.numbertomonthname(month);
                var monthname = mon + "," + year;
                List<BrokerChain> bclist = new List<BrokerChain>();
                var ccc = db.BrokerCommLists.Where(a => a.newagentid == newintroducerid && a.month == mon && a.Year == year).Count();
                if (ccc == 1)
                {
                    var br = db.BrokerCommLists.Single(a => a.newagentid == newintroducerid && a.month == mon && a.Year == year);
                    bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    List<agents> dalist = new List<agents>();
                    var alist = (from al in db.BrokerCommLists where al.newintroducerid == newintroducerid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                    foreach (var a in alist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                    }

                    var maxsragent = dalist.Count;
                    var minsragent = 1;
                    while (minsragent <= maxsragent)
                    {

                        var da = dalist.Where(a => a.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = dalist.Count;
                    }
                    foreach (var dd in dalist)
                    {
                        var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                        if (ad.status == 1)
                        {
                            bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                        }
                    }
                }
                else
                {
                    #region Select Broker Chain Start Here
                    bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = User.Identity.Name });
                    List<agents> dalist = new List<agents>();
                    var alist = (from al in db.AgentDetails where al.NewIntroducerId == newintroducerid select new { al.AgencyCode }).Distinct();
                    foreach (var a in alist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
                    }

                    var maxsragent = dalist.Count;
                    var minsragent = 1;
                    while (minsragent <= maxsragent)
                    {

                        var da = dalist.Where(a => a.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = dalist.Count;
                    }
                    foreach (var dd in dalist)
                    {
                        var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                        bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });

                    }
                    #endregion

                }

                foreach (var bc in bclist)
                {
                    var arr = db.AgentDetails.Single(a => a.NewAgentId == bc.newagentid);
                    Double business = 0;
                    var blist = (from a in db.appltabs where a.newintroducerid == bc.newagentid && a.status == 1 orderby a.newbondid select a).ToList();
                    foreach (var b in blist)
                    {
                        var bamount = (from bb in db.Installmenttabs where bb.newbondid == b.newbondid && bb.paymentdate.Value.Month == month && bb.paymentdate.Value.Year == year select bb.payamount).DefaultIfEmpty(0).Sum();
                        business = business + bamount;
                    }
                    balist.Add(new BrokerAccount { newintroducerid = bc.newagentid, name = arr.name, newbondid = arr.NewIntroducerId, cname = arr.IntroName, planname = arr.Mobile, formdate = arr.Doj, amount = business, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, monthname = monthname });
                }

                NewAgentid = newintroducerid;
                vmonth = month;
                vvyear = year;
                return View(balist);
            }
        }
        public ActionResult PrintBrokerAccountReport()
        {
            List<BrokerAccount> balist = new List<BrokerAccount>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
            var ar = db.AgentDetails.Single(n => n.NewAgentId == NewAgentid);
            int rcount = 0;
            MonthName mn = new MonthName();
            var mon = mn.numbertomonthname(vmonth);
            var monthname = mon + "," + vvyear;
            List<BrokerChain> bclist = new List<BrokerChain>();
            var ccc = db.BrokerCommLists.Where(a => a.newagentid == NewAgentid && a.month == mon && a.Year == vvyear).Count();
            if (ccc == 1)
            {
                var br = db.BrokerCommLists.Single(a => a.newagentid == NewAgentid && a.month == mon && a.Year == vvyear);
                bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                List<agents> dalist = new List<agents>();
                var alist = (from al in db.BrokerCommLists where al.newintroducerid == NewAgentid && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == vvyear);
                    if (ad.status == 1)
                    {
                        bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }
            }
            else
            {
                #region Select Broker Chain Start Here
                bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = User.Identity.Name });
                List<agents> dalist = new List<agents>();
                var alist = (from al in db.AgentDetails where al.NewIntroducerId == NewAgentid select new { al.AgencyCode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                    bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });

                }
                #endregion
            }

            foreach (var bc in bclist)
            {
                var arr = db.AgentDetails.Single(a => a.NewAgentId == bc.newagentid);
                Double business = 0;
                var blist = (from a in db.appltabs where a.newintroducerid == bc.newagentid && a.status == 1 orderby a.newbondid select a).ToList();
                foreach (var b in blist)
                {
                    var bamount = (from bb in db.Installmenttabs where bb.newbondid == b.newbondid && bb.paymentdate.Value.Month == vmonth && bb.paymentdate.Value.Year == vvyear select bb.payamount).DefaultIfEmpty(0).Sum();
                    business = business + bamount;
                }
                balist.Add(new BrokerAccount { newintroducerid = bc.newagentid, name = arr.name, newbondid = arr.NewIntroducerId, cname = arr.IntroName, planname = arr.Mobile, formdate = arr.Doj, amount = business, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, monthname = monthname });

            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerAccount.rpt"));
            rd.SetDataSource(balist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View(balist);
        }

        [HttpGet]
        public ActionResult BrokerAccountDetails(string newintroducerid)
        {
            List<BrokerAccount> balist = new List<BrokerAccount>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                var ar = db.AgentDetails.Single(n => n.NewAgentId == newintroducerid);
                var alist = (from a in db.appltabs where a.newintroducerid == newintroducerid && a.formdate.Month == vmonth && a.formdate.Year == vvyear orderby a.newbondid select a).ToList();
                foreach (var b in alist)
                {
                    balist.Add(new BrokerAccount { newintroducerid = newintroducerid, name = ar.name, newbondid = b.newbondid, cname = b.name, amount = b.bookingamount, planname = b.planname, term = b.term, mode = b.mode, expirydate = b.expirydate, formdate = b.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname });
                }
                NewAgentid = newintroducerid;
                return View(balist);
            }
        }
        public ActionResult PrintBrokerAccountDetails()
        {
            List<BrokerAccount> balist = new List<BrokerAccount>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);

            var ar = db.AgentDetails.Single(n => n.NewAgentId == NewAgentid);
            var alist = (from a in db.appltabs where a.newintroducerid == NewAgentid && a.formdate.Month == vmonth && a.formdate.Year == vvyear orderby a.newbondid select a).ToList();
            foreach (var b in alist)
            {
                balist.Add(new BrokerAccount { newintroducerid = NewAgentid, name = ar.name, newbondid = b.newbondid, cname = b.name, amount = b.bookingamount, planname = b.planname, term = b.term, mode = b.mode, expirydate = b.expirydate, formdate = b.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerAccountDetails.rpt"));
            rd.SetDataSource(balist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View(balist);
        }

        [HttpGet]
        public ActionResult BrokerwiseAccountDetail()
        {
            List<BrokerwiseAccount> bwalist = new List<BrokerwiseAccount>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["newmessg"] = TempData["newmessg"];
                return View(bwalist);
            }
        }
        [HttpPost]
        public ActionResult BrokerwiseAccountDetail(string newagentid, DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                var ar = db.AgentDetails.Single(n => n.NewAgentId == newagentid);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
                //var bd = (from q in db.appltabs join ax in db.Installmenttabs on q.newbondid equals ax.newbondid where q.newintroducerid == newagentid && ax.paymentdate >= sdate && ax.paymentdate <= edate && q.status == 1 orderby q.Id select new { q.bondid }).Distinct();
                var bd = (from mn in db.appltabs where mn.newintroducerid == newagentid && mn.pdate >= sdate && mn.pdate <= edate && mn.status == 1 orderby mn.newbondid select new { mn.bondid }).Distinct();
                List<Tempbond> tb = new List<Tempbond>();
                List<BrokerwiseAccount> bwalist = new List<BrokerwiseAccount>();
                int count = bd.Count();
                if (count > 0)
                {
                    foreach (var item in bd.ToList())
                    {
                        tb.Add(new Tempbond { bondid = item.bondid });
                    }

                    foreach (var t in tb.ToList())
                    {
                        var bondid = t.bondid;
                        var applist = db.appltabs.Single(a => a.bondid == bondid);
                        var totalinstall = (from io in db.Installmenttabs where io.bondid == bondid select io).Count();
                        var maxinstall = (from u in db.Installmenttabs where u.bondid == bondid && u.payamount != 0 select u.installmentno).DefaultIfEmpty(0).Max();
                        string nextinstall = (maxinstall + 1).ToString();
                        //var row = db.Installmenttabs.Single(r => r.bondid == bondid && r.installmentno == maxinstall);
                        var row = db.Installmenttabs.Single(r => r.bondid == bondid && r.installmentno == maxinstall + 1);
                        string dt = (row.prevexpirydate).ToString("dd/MM/yyyy");
                        if (applist.plantype == plan4.shortcutname)
                        {
                            bwalist.Add(new BrokerwiseAccount { newintroducerid = newagentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = nextinstall, amount = row.amount, nextdate = dt, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = sdate, edate = edate });
                        }
                        else if (applist.plantype == "FD")
                        {
                            bwalist.Add(new BrokerwiseAccount { newintroducerid = newagentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = "No Renewal", amount = row.amount, nextdate = "No Due", branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = sdate, edate = edate });
                        }
                        else
                        {
                            bwalist.Add(new BrokerwiseAccount { newintroducerid = newagentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = nextinstall, amount = row.amount, nextdate = dt, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = sdate, edate = edate });
                        }
                    }
                }

                else
                {
                    TempData["newmessg"] = "There is no " + mr.custname + " related to this " + mr.agentname + "";
                    //Response.Write("<script>alert('There is no " + mr.custname + " related to this " + mr.agentname + "')<script");
                    return RedirectToAction("BrokerwiseAccountDetail","Admin");
                }

                NewAgentid = newagentid;
                stdate = sdate;
                enddate = edate;

                return View(bwalist);
            }
        }
        public ActionResult PrintBrokerwiseAccountReport()
        {
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
            var ar = db.AgentDetails.Single(n => n.NewAgentId == NewAgentid);

            var bd = (from mn in db.appltabs where mn.newintroducerid == NewAgentid && mn.pdate >= stdate && mn.pdate <= enddate && mn.status == 1 orderby mn.newbondid select new { mn.bondid }).Distinct();
            List<Tempbond> tb = new List<Tempbond>();
            List<BrokerwiseAccount> bwalist = new List<BrokerwiseAccount>();
            int count = bd.Count();
            foreach (var item in bd.ToList())
            {
                tb.Add(new Tempbond { bondid = item.bondid });
            }

            foreach (var t in tb.ToList())
            {
                var bondid = t.bondid;
                var applist = db.appltabs.Single(a => a.bondid == bondid);
                var totalinstall = (from io in db.Installmenttabs where io.bondid == bondid select io).Count();
                var maxinstall = (from u in db.Installmenttabs where u.bondid == bondid && u.payamount != 0 select u.installmentno).DefaultIfEmpty(0).Max();
                string nextinstall = (maxinstall + 1).ToString();
                var row = db.Installmenttabs.Single(r => r.bondid == bondid && r.installmentno == maxinstall + 1);
                string dt = (row.prevexpirydate).ToString("dd/MM/yyyy");
                if (applist.plantype == plan4.shortcutname)
                {
                    bwalist.Add(new BrokerwiseAccount { newintroducerid = NewAgentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = nextinstall, amount = row.amount, nextdate = dt, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = stdate, edate = enddate });
                }
                else if (applist.plantype == "FD")
                {
                    bwalist.Add(new BrokerwiseAccount { newintroducerid = NewAgentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = "No Renewal", amount = row.amount, nextdate = "No Due", branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = stdate, edate = enddate });
                }
                else
                {
                    bwalist.Add(new BrokerwiseAccount { newintroducerid = NewAgentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = nextinstall, amount = row.amount, nextdate = dt, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = stdate, edate = enddate });
                }
            }


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerwiseAccount.rpt"));
            rd.SetDataSource(bwalist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View(bwalist);


        }

        [HttpGet]
        public ActionResult BrokerSelfCollection()
        {
            List<TempSelfCollection> bsclist = new List<TempSelfCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["newmsg"]=TempData["newmsg"] ;
                return View(bsclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerSelfCollection(string newagent, DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);

                List<Tempbond> tb = new List<Tempbond>();
                List<TempSelfCollection> bsclist = new List<TempSelfCollection>();

                var agcount = db.AgentDetails.Where(hj => hj.NewAgentId == newagent).Count();
                if (agcount > 0)
                {

                    var ag = db.AgentDetails.Single(hj => hj.NewAgentId == newagent);

                    var tbd = db.appltabs.Where(ap => ap.newintroducerid == newagent ).Select(x => x.bondid).ToList();
                    //var tbd = (from ap in db.appltabs where ap.newintroducerid == newagent  select ap.bondid);
                    var bd = (from yt in db.Installmenttabs where yt.paymentdate >= sdate && yt.paymentdate <= edate && tbd.Contains(yt.bondid) select new { yt.bondid }).Distinct();
                    var count = tbd.Count();
                    if (count > 0)
                    {
                        foreach (var item in bd.ToList())
                        {
                            tb.Add(new Tempbond { bondid = item.bondid });
                        }

                        foreach (var t in tb.ToList())
                        {
                            List<SelfCollection> sf = new List<SelfCollection>();
                            int bondid = t.bondid;
                            var list = (from o in db.Installmenttabs
                                        join u in db.appltabs on o.newbondid equals u.newbondid
                                        where o.bondid == bondid && o.payamount != 0 && o.paymentdate >= sdate && o.paymentdate <= edate
                                        orderby u.newbondid
                                        select new { o.payamount, o.installmentno, o.year, o.planname, o.newbondid, o.plantype }).ToList();
                            int i = 0;
                            foreach (var g in list.ToList())
                            {
                                i = i + 1;
                                string subplan = g.plantype;
                                if (subplan == "FD")
                                {
                                    sf.Add(new SelfCollection { sis = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno == 1 && g.year == 1)
                                {
                                    sf.Add(new SelfCollection { MISFresh = g.payamount });
                                }

                                if (subplan == "MIS" && i == 1)
                                {

                                    var ppssum = db.appltabs.Single(b => b.newbondid == g.newbondid);
                                    sf.Add(new SelfCollection { PPSFresh = ppssum.totalcon });
                                }



                                if (subplan == "RD" && g.installmentno > 1 && g.year == 1)
                                {
                                    sf.Add(new SelfCollection { MIS1 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 2)
                                {
                                    sf.Add(new SelfCollection { MIS2 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 3)
                                {
                                    sf.Add(new SelfCollection { MIS3 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 4)
                                {
                                    sf.Add(new SelfCollection { MIS4 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 5)
                                {
                                    sf.Add(new SelfCollection { MIS5 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 6)
                                {
                                    sf.Add(new SelfCollection { MIS6 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 7)
                                {
                                    sf.Add(new SelfCollection { MIS7a = g.payamount });
                                }

                            }

                            double sissum = 0, misfsum = 0, mis1sum = 0, mis2sum = 0, mis3sum = 0, mis4sum = 0, mis5sum = 0, mis6sum = 0, mis7sum = 0, ppsum = 0;

                            sissum = sf.Sum(tr => tr.sis);
                            ppsum = sf.Sum(tr => tr.PPSFresh);
                            misfsum = sf.Sum(tr => tr.MISFresh);
                            mis1sum = sf.Sum(tr => tr.MIS1);
                            mis2sum = sf.Sum(tr => tr.MIS2);
                            mis3sum = sf.Sum(tr => tr.MIS3);
                            mis4sum = sf.Sum(tr => tr.MIS4);
                            mis5sum = sf.Sum(tr => tr.MIS5);
                            mis6sum = sf.Sum(tr => tr.MIS6);
                            mis7sum = sf.Sum(tr => tr.MIS7a);

                            var brow = db.appltabs.Single(bg => bg.bondid == bondid);
                            bsclist.Add(new TempSelfCollection { Newbondid = brow.newbondid, Customername = brow.name, brokername = ag.name, brokercode = ag.NewAgentId, tsis = sissum, tMISFresh = misfsum + sissum + ppsum, tPPSFresh = ppsum, tMIS1 = mis1sum, tMIS2 = mis2sum, tMIS3 = mis3sum, tMIS4 = mis4sum, tMIS5 = mis5sum, tMIS6 = mis6sum, tMIS7a = mis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = brow.nolandunit.ToString(), sdate = sdate, edate = edate });

                        }


                    }

                    else
                    {
                        Response.Write("<script>alert('There is no " + mr.custname + " related to this " + mr.agentname + "')</script>");
                    }
                }

                else
                {
                    Response.Write("<script>alert('This " + mr.agentname + " is not Register with your " + mr.branchname + "')</script>");

                }

                NewAgentid = newagent;
                stdate = sdate;
                enddate = edate;
                if (bsclist.Count() != 0)
                {
                    return View(bsclist);
                }
                else
                {
                    TempData["newmsg"] = " Your Self Collection From date" + sdate + " and end date" + edate + " is not available";
                    return View();
                }

            }
        }
        public ActionResult PrintselfCollection()
        {

            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);

            List<Tempbond> tb = new List<Tempbond>();
            List<TempSelfCollection> bsclist = new List<TempSelfCollection>();
            var agcount = db.AgentDetails.Where(hj => hj.NewAgentId == NewAgentid).Count();
            if (agcount > 0)
            {
                var ag = db.AgentDetails.Single(hj => hj.NewAgentId == NewAgentid);
                var tbd = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                var bd = (from yt in db.Installmenttabs where yt.paymentdate >= stdate && yt.paymentdate <= enddate && tbd.Contains(yt.bondid) select new { yt.bondid }).Distinct();
                var count = tbd.Count();
                if (count > 0)
                {
                    foreach (var item in bd.ToList())
                    {
                        tb.Add(new Tempbond { bondid = item.bondid });
                    }

                    foreach (var t in tb.ToList())
                    {
                        List<SelfCollection> sf = new List<SelfCollection>();
                        int bondid = t.bondid;
                        var list = (from o in db.Installmenttabs
                                    join u in db.appltabs on o.newbondid equals u.newbondid
                                    where o.bondid == bondid && o.payamount != 0 && o.paymentdate >= stdate && o.paymentdate <= enddate
                                    orderby u.newbondid
                                    select new { o.payamount, o.installmentno, o.year, o.planname, o.newbondid, o.plantype }).ToList();
                        int i = 0;
                        foreach (var g in list.ToList())
                        {
                            i = i + 1;
                            string subplan = g.plantype;
                            if (subplan == "FD")
                            {
                                sf.Add(new SelfCollection { sis = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno == 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { MISFresh = g.payamount });
                            }

                            if (subplan == "MIS" && i == 1)
                            {

                                var ppssum = db.appltabs.Single(b => b.newbondid == g.newbondid);
                                sf.Add(new SelfCollection { PPSFresh = ppssum.totalcon });
                            }



                            if (subplan == "RD" && g.installmentno > 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { MIS1 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 2)
                            {
                                sf.Add(new SelfCollection { MIS2 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 3)
                            {
                                sf.Add(new SelfCollection { MIS3 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 4)
                            {
                                sf.Add(new SelfCollection { MIS4 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 5)
                            {
                                sf.Add(new SelfCollection { MIS5 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 6)
                            {
                                sf.Add(new SelfCollection { MIS6 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 7)
                            {
                                sf.Add(new SelfCollection { MIS7a = g.payamount });
                            }

                        }

                        double sissum = 0, misfsum = 0, mis1sum = 0, mis2sum = 0, mis3sum = 0, mis4sum = 0, mis5sum = 0, mis6sum = 0, mis7sum = 0, ppsum = 0;

                        sissum = sf.Sum(tr => tr.sis);
                        ppsum = sf.Sum(tr => tr.PPSFresh);
                        misfsum = sf.Sum(tr => tr.MISFresh);
                        mis1sum = sf.Sum(tr => tr.MIS1);
                        mis2sum = sf.Sum(tr => tr.MIS2);
                        mis3sum = sf.Sum(tr => tr.MIS3);
                        mis4sum = sf.Sum(tr => tr.MIS4);
                        mis5sum = sf.Sum(tr => tr.MIS5);
                        mis6sum = sf.Sum(tr => tr.MIS6);
                        mis7sum = sf.Sum(tr => tr.MIS7a);

                        var brow = db.appltabs.Single(bg => bg.bondid == bondid);
                        bsclist.Add(new TempSelfCollection { Newbondid = brow.newbondid, Customername = brow.name, brokername = ag.name, brokercode = ag.NewAgentId, tsis = sissum, tMISFresh = misfsum + sissum + ppsum, tPPSFresh = ppsum, tMIS1 = mis1sum, tMIS2 = mis2sum, tMIS3 = mis3sum, tMIS4 = mis4sum, tMIS5 = mis5sum, tMIS6 = mis6sum, tMIS7a = mis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = brow.nolandunit.ToString(), sdate = stdate, edate = enddate });

                    }


                }

                else
                {
                    Response.Write("<script>alert('There is no " + mr.custname + " related to this " + mr.agentname + "')</script>");
                }
            }

            else
            {
                Response.Write("<script>alert('This " + mr.agentname + " is not Register with your " + mr.branchname + "')</script>");

            }

            ReportDocument rdp = new ReportDocument();
            rdp.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "Brokerselfcollection.rpt"));
            rdp.SetDataSource(bsclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rdp.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rdp.Close();
                rdp.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult QuotaCollection()
        {
            List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View(quotalist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult QuotaCollection(DateTime sdate, DateTime edate)
        {
            List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dalist = db.AgentDetails.Where(a => a.AgencyCode > 1).ToList();

                #region Select Broker Chain Start Here

                List<BrokerChain> bclist = new List<BrokerChain>();
                foreach (var dd in dalist)
                {
                    var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.AgencyCode);
                    bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });
                }

                #endregion

                foreach (var bc in bclist)
                {
                    var bwr = db.AgentDetails.Single(bw => bw.NewAgentId == bc.newagentid);
                    var rr = db.Ranktabs.Single(rw => rw.RankCode == bc.rankcode);
                    var br = db.Branchtabs.Single(b => b.BranchCode == "6816");

                    #region Select Sub Broker Chain Start Here

                    List<BrokerChain> subbclist = new List<BrokerChain>();
                    subbclist.Add(new BrokerChain { newagentid = bwr.NewAgentId, name = bwr.name, rankcode = bwr.RankCode, rankname = bwr.RankName, introducerid = bwr.NewIntroducerId, introname = bwr.IntroName, branchname = User.Identity.Name });
                    int srcount = 0;
                    List<agents> sdalist = new List<agents>();
                    var salist = (from sal in db.AgentDetails where sal.NewIntroducerId == bwr.NewAgentId select new { sal.AgencyCode }).Distinct();
                    foreach (var sa in salist)
                    {
                        srcount = srcount + 1;
                        sdalist.Add(new agents { sr = srcount, agentcode = sa.AgencyCode });
                    }

                    var smaxsragent = sdalist.Count;
                    var sminsragent = 1;
                    while (sminsragent <= smaxsragent)
                    {

                        var sda = sdalist.Where(sa => sa.sr == sminsragent);
                        foreach (var sd in sda.ToList())
                        {
                            var saalist = (from sal in db.AgentDetails where sal.IntroducerCode == sd.agentcode select new { sal.AgencyCode }).Distinct();
                            foreach (var saa in saalist)
                            {
                                srcount = srcount + 1;
                                sdalist.Add(new agents { sr = srcount, agentcode = saa.AgencyCode });

                            }

                        }
                        sminsragent = sminsragent + 1;
                        smaxsragent = sdalist.Count;
                    }

                    foreach (var sdd in sdalist)
                    {
                        var sad = db.AgentDetails.Single(sa => sa.AgencyCode == sdd.agentcode);
                        subbclist.Add(new BrokerChain { newagentid = sad.NewAgentId, name = sad.name, rankcode = sad.RankCode, rankname = sad.RankName, introducerid = sad.NewIntroducerId, introname = sad.IntroName, branchname = User.Identity.Name });
                    }

                    #endregion

                    List<InstallmentList> inslist = new List<InstallmentList>();
                    Double btotalcoll = 0, bquotaamount = 0, bipptotalcoll = 0, bdpptotalcoll = 0, Difference = 0;
                    var status = string.Empty;
                    var prankcount = 0;
                    foreach (var sbc in subbclist)
                    {
                        var tbd = (from ap in db.appltabs where ap.newintroducerid == sbc.newagentid select ap.bondid);
                        var bondlist = (from yt in db.Installmenttabs where yt.paymentdate >= sdate && yt.paymentdate <= edate && tbd.Contains(yt.bondid) select new { yt.newbondid }).Distinct().ToList();
                        foreach (var bond in bondlist)
                        {
                            var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= sdate && pl.paymentdate <= edate && pl.newbondid == bond.newbondid && pl.type != "Adjustment" && pl.year == 1 select pl).ToList();
                            foreach (var plan in planlist)
                            {
                                inslist.Add(new InstallmentList { newbondid = plan.newbondid, installmentno = plan.installmentno, mode = plan.mode, year = plan.year, term = plan.term_plan, planname = plan.planname, amount = plan.payamount });
                            }
                        }
                    }

                    var brocount = db.AgentDetails.Where(sc => sc.NewIntroducerId == bc.newagentid).Count();
                    var pnlist = inslist.Select(i => new { i.planname, i.term }).Distinct();
                    foreach (var pn in pnlist)
                    {
                        var pc = db.Plans.Single(t => t.shortcutname == pn.planname);
                        var p = db.RateTabs.Single(i => i.projectname == pc.Planname && i.term == pn.term);
                        Double totalcoll = 0, quotaamount = 0;
                        totalcoll = inslist.Where(ftr => ftr.planname == pn.planname && ftr.term == pn.term).Sum(r => (Double)r.amount);
                        quotaamount = Math.Round(((totalcoll * p.quotaper) / 100), 2);
                        btotalcoll = btotalcoll + totalcoll;
                        bquotaamount = bquotaamount + quotaamount;

                    }

                    if (rr.TeamQuota > bquotaamount)
                    {
                        Difference = rr.TeamQuota - bquotaamount;
                        status = "NA";
                    }
                    else
                    {
                        Difference = 0;
                        status = "ACHIEVED";
                    }

                    if (btotalcoll > 0)
                    {
                        quotalist.Add(new QuotaCollectionList { newagentid = bc.newagentid, name = bc.name, rankname = bc.rankname, newintroducerid = bwr.NewIntroducerId, IPPBusiness = bipptotalcoll, DPPBusiness = bdpptotalcoll, business = btotalcoll, quotaamount = bquotaamount, PromotionTarget = rr.TeamQuota, rankcount = brocount, prankcount = prankcount, Difference = Difference, sdate = sdate, edate = edate, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, agent = mr.agentname, rankcode = bc.rankcode, status = status });
                    }

                    //AgentDetail aaa = db.AgentDetails.Single(aa => aa.NewAgentId == bc.newagentid);
                    //if (Difference == 0 && aaa.RankCode < 12)
                    //{
                    //    var rank = 0;
                    //    var rrr = (from r in db.Ranktabs where r.TeamQuota <= bquotaamount && r.RankCode != 12 orderby r.RankCode select new { r.RankCode }).ToList();
                    //    foreach (var rs in rrr)
                    //    {
                    //        var raa = db.Ranktabs.Single(tt => tt.RankCode == rs.RankCode);
                    //        rank = raa.RankCode;
                    //    }

                    //    var ra = db.Ranktabs.Single(ri => ri.RankCode == rank + 1);
                    //    aaa.RankCode = ra.RankCode;
                    //    aaa.RankName = ra.RankName;
                    //    db.SaveChanges();
                    //}
                }
                stdate = sdate;
                enddate = edate;
                return View(quotalist.OrderByDescending(q => q.rankcode));
            }
        }
        public ActionResult PrintQuotaCollection()
        {
            List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
            MonthName mn = new MonthName();
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dalist = db.AgentDetails.Where(a => a.AgencyCode > 1).ToList();

            #region Select Broker Chain Start Here

            List<BrokerChain> bclist = new List<BrokerChain>();
            foreach (var dd in dalist)
            {
                var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.AgencyCode);
                bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });
            }

            #endregion

            foreach (var bc in bclist)
            {


                var bwr = db.AgentDetails.Single(bw => bw.NewAgentId == bc.newagentid);
                var rr = db.Ranktabs.Single(rw => rw.RankCode == bc.rankcode);
                var br = db.Branchtabs.Single(b => b.BranchCode == "6816");

                #region Select Sub Broker Chain Start Here

                List<BrokerChain> subbclist = new List<BrokerChain>();
                subbclist.Add(new BrokerChain { newagentid = bwr.NewAgentId, name = bwr.name, rankcode = bwr.RankCode, rankname = bwr.RankName, introducerid = bwr.NewIntroducerId, introname = bwr.IntroName, branchname = User.Identity.Name });
                int srcount = 0;
                List<agents> sdalist = new List<agents>();
                var salist = (from sal in db.AgentDetails where sal.NewIntroducerId == bwr.NewAgentId select new { sal.AgencyCode }).Distinct();
                foreach (var sa in salist)
                {
                    srcount = srcount + 1;
                    sdalist.Add(new agents { sr = srcount, agentcode = sa.AgencyCode });
                }

                var smaxsragent = sdalist.Count;
                var sminsragent = 1;
                while (sminsragent <= smaxsragent)
                {

                    var sda = sdalist.Where(sa => sa.sr == sminsragent);
                    foreach (var sd in sda.ToList())
                    {
                        var saalist = (from sal in db.AgentDetails where sal.IntroducerCode == sd.agentcode select new { sal.AgencyCode }).Distinct();
                        foreach (var saa in saalist)
                        {
                            srcount = srcount + 1;
                            sdalist.Add(new agents { sr = srcount, agentcode = saa.AgencyCode });

                        }

                    }
                    sminsragent = sminsragent + 1;
                    smaxsragent = sdalist.Count;
                }

                foreach (var sdd in sdalist)
                {
                    var sad = db.AgentDetails.Single(sa => sa.AgencyCode == sdd.agentcode);
                    subbclist.Add(new BrokerChain { newagentid = sad.NewAgentId, name = sad.name, rankcode = sad.RankCode, rankname = sad.RankName, introducerid = sad.NewIntroducerId, introname = sad.IntroName, branchname = User.Identity.Name });
                }

                #endregion

                List<InstallmentList> inslist = new List<InstallmentList>();
                Double btotalcoll = 0, bquotaamount = 0, bipptotalcoll = 0, bdpptotalcoll = 0, Difference = 0;
                var status = string.Empty;
                var prankcount = 0;
                foreach (var sbc in subbclist)
                {

                    var tbd = (from ap in db.appltabs where ap.newintroducerid == sbc.newagentid select ap.bondid);
                    var bondlist = (from yt in db.Installmenttabs where yt.paymentdate >= stdate && yt.paymentdate <= enddate && tbd.Contains(yt.bondid) select new { yt.newbondid }).Distinct().ToList();
                    foreach (var bond in bondlist)
                    {
                        var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= stdate && pl.paymentdate <= enddate && pl.newbondid == bond.newbondid && pl.type != "Adjustment" && pl.year == 1 select pl).ToList();
                        foreach (var plan in planlist)
                        {
                            inslist.Add(new InstallmentList { newbondid = plan.newbondid, installmentno = plan.installmentno, mode = plan.mode, year = plan.year, term = plan.term_plan, planname = plan.planname, amount = plan.payamount });
                        }
                    }
                }

                var brocount = db.AgentDetails.Where(sc => sc.NewIntroducerId == bc.newagentid).Count();
                var pnlist = inslist.Select(i => new { i.planname, i.term }).Distinct();
                foreach (var pn in pnlist)
                {
                    var pc = db.Plans.Single(t => t.shortcutname == pn.planname);
                    var p = db.RateTabs.Single(i => i.projectname == pc.Planname && i.term == pn.term);
                    Double totalcoll = 0, quotaamount = 0;
                    totalcoll = inslist.Where(ftr => ftr.planname == pn.planname && ftr.term == pn.term).Sum(r => (Double)r.amount);
                    quotaamount = Math.Round(((totalcoll * p.quotaper) / 100), 2);
                    btotalcoll = btotalcoll + totalcoll;
                    bquotaamount = bquotaamount + quotaamount;
                }

                if (rr.TeamQuota > bquotaamount)
                {
                    Difference = rr.TeamQuota - bquotaamount;
                    status = "NA";
                }
                else
                {
                    Difference = 0;
                    status = "ACHIEVED";

                }
                if (btotalcoll > 0)
                {
                    quotalist.Add(new QuotaCollectionList { newagentid = bc.newagentid, name = bc.name, rankname = bc.rankname, newintroducerid = bwr.NewIntroducerId, IPPBusiness = bipptotalcoll, DPPBusiness = bdpptotalcoll, business = btotalcoll, quotaamount = bquotaamount, PromotionTarget = rr.TeamQuota, rankcount = brocount, prankcount = prankcount, Difference = Difference, sdate = stdate, edate = enddate, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, agent = mr.agentname, rankcode = bc.rankcode, status = status });
                }

            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "QuotaCollection.rpt"));
            rd.SetDataSource(quotalist.OrderByDescending(q => q.rankcode));

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult AssociatePromotionReport()
        {
            List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View(quotalist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult AssociatePromotionReport(DateTime sdate, DateTime edate)
        {
            List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dalist = db.AgentDetails.Where(a => a.AgencyCode > 1).ToList();

                #region Select Broker Chain Start Here

                List<BrokerChain> bclist = new List<BrokerChain>();
                foreach (var dd in dalist)
                {
                    var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.AgencyCode);
                    bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });
                }

                #endregion

                foreach (var bc in bclist)
                {
                    var bwr = db.AgentDetails.Single(bw => bw.NewAgentId == bc.newagentid);
                    var rr = db.Ranktabs.Single(rw => rw.RankCode == bc.rankcode);
                    var br = db.Branchtabs.Single(b => b.BranchCode == "6816");

                    #region Select Sub Broker Chain Start Here

                    List<BrokerChain> subbclist = new List<BrokerChain>();
                    subbclist.Add(new BrokerChain { newagentid = bwr.NewAgentId, name = bwr.name, rankcode = bwr.RankCode, rankname = bwr.RankName, introducerid = bwr.NewIntroducerId, introname = bwr.IntroName, branchname = User.Identity.Name });
                    int srcount = 0;
                    List<agents> sdalist = new List<agents>();
                    var salist = (from sal in db.AgentDetails where sal.NewIntroducerId == bwr.NewAgentId select new { sal.AgencyCode }).Distinct();
                    foreach (var sa in salist)
                    {
                        srcount = srcount + 1;
                        sdalist.Add(new agents { sr = srcount, agentcode = sa.AgencyCode });
                    }

                    var smaxsragent = sdalist.Count;
                    var sminsragent = 1;
                    while (sminsragent <= smaxsragent)
                    {

                        var sda = sdalist.Where(sa => sa.sr == sminsragent);
                        foreach (var sd in sda.ToList())
                        {
                            var saalist = (from sal in db.AgentDetails where sal.IntroducerCode == sd.agentcode select new { sal.AgencyCode }).Distinct();
                            foreach (var saa in saalist)
                            {
                                srcount = srcount + 1;
                                sdalist.Add(new agents { sr = srcount, agentcode = saa.AgencyCode });
                            }
                        }
                        sminsragent = sminsragent + 1;
                        smaxsragent = sdalist.Count;
                    }

                    foreach (var sdd in sdalist)
                    {
                        var sad = db.AgentDetails.Single(sa => sa.AgencyCode == sdd.agentcode);
                        subbclist.Add(new BrokerChain { newagentid = sad.NewAgentId, name = sad.name, rankcode = sad.RankCode, rankname = sad.RankName, introducerid = sad.NewIntroducerId, introname = sad.IntroName, branchname = User.Identity.Name });
                    }

                    #endregion

                    List<InstallmentList> inslist = new List<InstallmentList>();
                    Double btotalcoll = 0, bquotaamount = 0, bipptotalcoll = 0, bdpptotalcoll = 0, Difference = 0;
                    var status = string.Empty;
                    var prankcount = 0;
                    foreach (var sbc in subbclist)
                    {
                        var tbd = (from ap in db.appltabs where ap.newintroducerid == sbc.newagentid select ap.bondid);
                        var bondlist = (from yt in db.Installmenttabs where yt.paymentdate >= sdate && yt.paymentdate <= edate && tbd.Contains(yt.bondid) select new { yt.newbondid }).Distinct().ToList();
                        foreach (var bond in bondlist)
                        {
                            var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= sdate && pl.paymentdate <= edate && pl.newbondid == bond.newbondid && pl.type != "Adjustment" select pl).ToList();
                            foreach (var plan in planlist)
                            {
                                inslist.Add(new InstallmentList { newbondid = plan.newbondid, installmentno = plan.installmentno, mode = plan.mode, year = plan.year, term = plan.term_plan, planname = plan.planname, amount = plan.payamount });
                            }
                        }
                    }

                    var brocount = db.AgentDetails.Where(sc => sc.NewIntroducerId == bc.newagentid).Count();


                    Double totalcoll = inslist.Sum(r => (Double)r.amount);
                    btotalcoll = totalcoll;
                    bquotaamount = totalcoll;

                    if (rr.TeamQuota > bquotaamount)
                    {
                        Difference = rr.TeamQuota - bquotaamount;
                        status = "NA";
                    }
                    else
                    {
                        Difference = 0;
                        status = "ACHIEVED";
                    }

                    if (btotalcoll > 0)
                    {
                        quotalist.Add(new QuotaCollectionList { newagentid = bc.newagentid, name = bc.name, rankname = bc.rankname, newintroducerid = bwr.NewIntroducerId, IPPBusiness = bipptotalcoll, DPPBusiness = bdpptotalcoll, business = btotalcoll, quotaamount = bquotaamount, PromotionTarget = rr.TeamQuota, rankcount = brocount, prankcount = prankcount, Difference = Difference, sdate = sdate, edate = edate, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, agent = mr.agentname, rankcode = bc.rankcode, status = status });
                    }

                    //AgentDetail aaa = db.AgentDetails.Single(aa => aa.NewAgentId == bc.newagentid);
                    //if (Difference == 0 && aaa.RankCode < 12)
                    //{
                    //    var rank = 0;
                    //    var rrr = (from r in db.Ranktabs where r.TeamQuota <= bquotaamount && r.RankCode != 12 orderby r.RankCode select new { r.RankCode }).ToList();
                    //    foreach (var rs in rrr)
                    //    {
                    //        var raa = db.Ranktabs.Single(tt => tt.RankCode == rs.RankCode);
                    //        rank = raa.RankCode;
                    //    }

                    //    var ra = db.Ranktabs.Single(ri => ri.RankCode == rank + 1);
                    //    aaa.RankCode = ra.RankCode;
                    //    aaa.RankName = ra.RankName;
                    //    db.SaveChanges();
                    //}
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "QuotaCollection.rpt"));
                rd.SetDataSource(quotalist.OrderByDescending(q => q.rankcode));

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult QuotaAchive()
        {
            List<QuotaAAchive> QuotaAchive = new List<QuotaAAchive>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(QuotaAchive);
            }
        }
        [HttpPost]
        public ActionResult QuotaAchive(int month = 0, int year = 0)
        {
            List<QuotaAAchive> QuotaAchive = new List<QuotaAAchive>();

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                MonthName mn = new MonthName();
                var amt = 0.0;

                var mon = mn.numbertomonthname(month);
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var rr = db.BrokerCommLists.Where(a => a.month == mon && a.Year == year).Count();
                var ar = db.BrokerCommLists.Where(a => a.month == mon && a.Year == year && a.rankcode <= 10).ToList();
                foreach (var z in ar)
                {
                    List<InstallmentList> inslist = new List<InstallmentList>();
                    var qutaamt = 0.0;
                    List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
                    #region Select Broker Chain Start Here

                    List<BrokerChain> bclist = new List<BrokerChain>();
                    bclist.Add(new BrokerChain { agentid = z.agencycode, newagentid = z.newagentid, name = z.name, rankcode = z.rankcode, rankname = z.rankname, introducerid = z.newintroducerid, introname = z.Introname, branchname = User.Identity.Name });
                    int rcount = 0;
                    List<agents> dalist = new List<agents>();
                    var alist = (from al in db.BrokerCommLists where al.introducerid == z.agencycode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                    foreach (var a in alist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                    }

                    var maxsragent = dalist.Count;
                    var minsragent = 1;
                    while (minsragent <= maxsragent)
                    {

                        var da = dalist.Where(a => a.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = dalist.Count;
                    }
                    foreach (var dd in dalist)
                    {
                        var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                        bclist.Add(new BrokerChain { agentid = ad.agencycode, newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

                    }

                    #endregion

                    #region Here Start select Business
                    foreach (var bc in bclist)
                    {
                        var tbd = (from ap in db.appltabs where ap.introducerid == bc.agentid  select ap.bondid);
                        var bondlist = (from yt in db.Installmenttabs where yt.paymentdate.Value.Month == month && yt.paymentdate.Value.Year == year && tbd.Contains(yt.bondid) select new { yt.newbondid }).Distinct();
                        foreach (var bond in bondlist.ToList())
                        {
                            var td = db.appltabs.Single(ap => ap.newbondid == bond.newbondid);
                            var planlist = (from pl in db.Installmenttabs where pl.paymentdate.Value.Month == month && pl.paymentdate.Value.Year == year && pl.newbondid == bond.newbondid select pl).ToList();
                            foreach (var plan in planlist)
                            {
                                if (td.plantype == "PPS")
                                {
                                    amt = td.totalcon;
                                }
                                else
                                {
                                    amt = plan.payamount;
                                }
                                inslist.Add(new InstallmentList { newbondid = plan.newbondid, installmentno = plan.installmentno, mode = plan.mode, year = plan.year, term = plan.term_plan, planname = plan.planname, amount = amt, plancode = td.plancode });
                            }

                        }
                    }
                    var pnlist = inslist.Select(i => new { i.plancode }).Distinct();
                    foreach (var pn in pnlist)
                    {
                        var p = db.NewPlans.Single(i => i.Plancode == pn.plancode);
                        Double totalcoll = 0, quotaamount = 0, per = 0;
                        totalcoll = inslist.Where(tr => tr.plancode == pn.plancode).Sum(r => (Double)r.amount);

                        if (p.Term >= 5)
                        {
                            per = 100;
                        }
                        else
                        {
                            per = 50;
                        }

                        quotaamount = Math.Round(((totalcoll * per) / 100), 2);
                        qutaamt = qutaamt + quotaamount;

                        //quotalist.Add(new QuotaCollectionList { newagentid = z.newagentid, name = z.name, rankname = z.rankname, newintroducerid = z.newintroducerid, planname = p.Planname, business = totalcoll, percentage = per, quotaamount = quotaamount, month = mon, year = year.ToString(), companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, plan = mr.planname, agent = mr.agentname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                    }

                    var rank = db.Ranktabs.Single(a => a.RankCode == z.rankcode);
                    QuotaAchive.Add(new QuotaAAchive { NewAgentid = z.newagentid, Name = z.name, QuotaAchive = qutaamt, RankName = z.rankname, QuotaAmount = rank.Selfquota + rank.TeamQuota, Month = mon, Year = year.ToString() });
                    qutaamt = 0.0;
                    #endregion Here End Collection

                }

                //NewAgentid = newagentid;
                vmonth = month;
                vvyear = year;
                return View(QuotaAchive);
            }
        }

        [HttpGet]
        public ActionResult BrokerChainCollection()
        {
            List<TempBrokerChainCollection> bcclist = new List<TempBrokerChainCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bcclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerChainCollection(string newagentid, DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<TempBrokerChainCollection> bcclist = new List<TempBrokerChainCollection>();
                MonthName mn = new MonthName();
                var mon = mn.numbertomonthname(sdate.Month);
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var acount = db.AgentDetails.Where(a => a.NewAgentId == newagentid).Count();
                if (acount == 0)
                {
                    var rr = sdate.Month - 1;
                    mon = mn.numbertomonthname(rr);
                }
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);

                #region Select Broker Chain Start Here

                List<BrokerChain> bclist = new List<BrokerChain>();
                bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = User.Identity.Name });
                int rcount = 0;
                List<agents> dalist = new List<agents>();

                var alist = (from al in db.AgentDetails where al.NewIntroducerId == newagentid select new { al.AgencyCode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                    bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });

                }

                #endregion

                #region Select Broker Collection Start Here

                foreach (var bc in bclist)
                {
                    List<Tempbond> tb = new List<Tempbond>();
                    List<TempSelfCollection> bsclist = new List<TempSelfCollection>();

                    var ag = db.AgentDetails.Single(hj => hj.NewAgentId == bc.newagentid);

                    var tbd = (from ap in db.appltabs where ap.newintroducerid == bc.newagentid  select ap.bondid).ToList();
                    var bd = (from yt in db.Installmenttabs where yt.paymentdate >= sdate && yt.paymentdate <= edate && tbd.Contains(yt.bondid) select new { yt.bondid }).Distinct();
                    var count = tbd.Count();
                    if (count > 0)
                    {
                        foreach (var item in bd.ToList())
                        {
                            tb.Add(new Tempbond { bondid = item.bondid });
                        }

                        foreach (var t in tb.ToList())
                        {
                            List<SelfCollection> sf = new List<SelfCollection>();
                            int bondid = t.bondid;
                            var list = (from o in db.Installmenttabs
                                        join u in db.appltabs on o.newbondid equals u.newbondid
                                        where o.bondid == bondid && o.payamount != 0 && o.paymentdate >= sdate && o.paymentdate <= edate
                                        orderby u.newbondid
                                        select new { o.payamount, o.installmentno, o.year, o.planname, u.plantype, u.plancode, u.totalcon }).ToList();

                            foreach (var g in list.ToList())
                            {
                                string subplan = g.plantype;
                                if (subplan == "FD")
                                {
                                    sf.Add(new SelfCollection { sis = g.payamount });
                                }
                                if (subplan == "MIS" && g.installmentno == 1 && g.year == 1)
                                {
                                    sf.Add(new SelfCollection { PPSFresh = g.totalcon });
                                }
                                if (subplan == "NFP" && g.installmentno == 1 && g.year == 1)
                                {
                                    sf.Add(new SelfCollection { NFPFresh = g.payamount });
                                }
                                if (subplan == "RD" && g.installmentno == 1 && g.year == 1)
                                {
                                    sf.Add(new SelfCollection { MISFresh = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 1)
                                {
                                    sf.Add(new SelfCollection { MIS1 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 2)
                                {
                                    sf.Add(new SelfCollection { MIS2 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 3)
                                {
                                    sf.Add(new SelfCollection { MIS3 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 4)
                                {
                                    sf.Add(new SelfCollection { MIS4 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 5)
                                {
                                    sf.Add(new SelfCollection { MIS5 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 6)
                                {
                                    sf.Add(new SelfCollection { MIS6 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year >= 7)
                                {
                                    sf.Add(new SelfCollection { MIS7a = g.payamount });
                                }

                            }

                            var brow = db.appltabs.Single(bg => bg.bondid == bondid);
                            double sissum = 0, misfsum = 0, mis1sum = 0, mis2sum = 0, mis3sum = 0, mis4sum = 0, mis5sum = 0, mis6sum = 0, mis7sum = 0, pppsum = 0, nfssum = 0;

                            sissum = sf.Sum(tr => tr.sis);
                            misfsum = sf.Sum(tr => tr.MISFresh);
                            mis1sum = sf.Sum(tr => tr.MIS1);
                            mis2sum = sf.Sum(tr => tr.MIS2);
                            mis3sum = sf.Sum(tr => tr.MIS3);
                            mis4sum = sf.Sum(tr => tr.MIS4);
                            mis5sum = sf.Sum(tr => tr.MIS5);
                            mis6sum = sf.Sum(tr => tr.MIS6);
                            mis7sum = sf.Sum(tr => tr.MIS7a);
                            pppsum = sf.Sum(tr => tr.PPSFresh);
                            nfssum = sf.Sum(tr => tr.NFPFresh);
                            bsclist.Add(new TempSelfCollection { Newbondid = brow.newbondid, Customername = brow.name, brokername = ag.name, brokercode = ag.NewAgentId, tsis = sissum, tMISFresh = misfsum, tPPSFresh = pppsum, tNFPFresh = nfssum, tMIS1 = mis1sum, tMIS2 = mis2sum, tMIS3 = mis3sum, tMIS4 = mis4sum, tMIS5 = mis5sum, tMIS6 = mis6sum, tMIS7a = mis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, sdate = sdate, edate = edate });
                        }


                    }
                    double bsissum = 0, bmisfsum = 0, bppsum = 0, bnfpsum = 0, bmis1sum = 0, bmis2sum = 0, bmis3sum = 0, bmis4sum = 0, bmis5sum = 0, bmis6sum = 0, bmis7sum = 0;
                    bsissum = bsclist.Sum(tr => tr.tsis);
                    bmisfsum = bsclist.Sum(tr => tr.tMISFresh);
                    bmis1sum = bsclist.Sum(tr => tr.tMIS1);
                    bmis2sum = bsclist.Sum(tr => tr.tMIS2);
                    bmis3sum = bsclist.Sum(tr => tr.tMIS3);
                    bmis4sum = bsclist.Sum(tr => tr.tMIS4);
                    bmis5sum = bsclist.Sum(tr => tr.tMIS5);
                    bmis6sum = bsclist.Sum(tr => tr.tMIS6);
                    bmis7sum = bsclist.Sum(tr => tr.tMIS7a);
                    bppsum = bsclist.Sum(tr => tr.tPPSFresh);
                    bnfpsum = bsclist.Sum(tr => tr.tNFPFresh);


                    if (bsissum + bmisfsum + bmis1sum + bmis2sum + bmis3sum + bmis4sum + bmis5sum + bmis6sum + bmis7sum + bppsum + bnfpsum > 0)
                    {
                        bcclist.Add(new TempBrokerChainCollection { brokercode = newagentid, brokername = ar.name, newagentid = bc.newagentid, name = bc.name, tsis = bsissum, tMISFresh = bmisfsum, tppp = bppsum, tMIP = bnfpsum, tMIS1 = bmis1sum, tMIS2 = bmis2sum, tMIS3 = bmis3sum, tMIS4 = bmis4sum, tMIS5 = bmis5sum, tMIS6 = bmis6sum, tMIS7a = bmis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = ag.Mobileno, bond = mr.custname, agent = mr.agentname, plan = mr.planname, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }

                }

                #endregion


                NewAgentid = newagentid;
                stdate = sdate;
                enddate = edate;

                return View(bcclist);
            }
        }
        public ActionResult PrintBrokerChainCollection()
        {
            MonthName mn = new MonthName();
            var mon = mn.numbertomonthname(stdate.Month);
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var acount = db.AgentDetails.Where(a => a.NewAgentId == NewAgentid).Count();
            if (acount == 0)
            {
                var rr = stdate.Month - 1;
                mon = mn.numbertomonthname(rr);
            }
            var ar = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);
            List<TempBrokerChainCollection> bcclist = new List<TempBrokerChainCollection>();
            #region Select Broker Chain Start Here

            List<BrokerChain> bclist = new List<BrokerChain>();
            bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = User.Identity.Name });
            int rcount = 0;
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.AgentDetails where al.NewIntroducerId == NewAgentid select new { al.AgencyCode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });

            }

            #endregion

            #region Select Broker Collectin Start Here

            foreach (var bc in bclist)
            {
                List<Tempbond> tb = new List<Tempbond>();
                List<TempSelfCollection> bsclist = new List<TempSelfCollection>();

                var ag = db.AgentDetails.Single(hj => hj.NewAgentId == bc.newagentid);


                var tbd = (from ap in db.appltabs where ap.newintroducerid == bc.newagentid  select ap.bondid).ToList();
                var bd = (from yt in db.Installmenttabs where yt.paymentdate >= stdate && yt.paymentdate <= enddate && tbd.Contains(yt.bondid) select new { yt.bondid }).Distinct();
                var count = tbd.Count();
                if (count > 0)
                {
                    foreach (var item in bd.ToList())
                    {
                        tb.Add(new Tempbond { bondid = item.bondid });
                    }

                    foreach (var t in tb.ToList())
                    {
                        List<SelfCollection> sf = new List<SelfCollection>();
                        int bondid = t.bondid;
                        var list = (from o in db.Installmenttabs
                                    join u in db.appltabs on o.newbondid equals u.newbondid
                                    where o.bondid == bondid && o.payamount != 0 && o.paymentdate >= stdate && o.paymentdate <= enddate
                                    orderby u.newbondid
                                    select new { o.payamount, o.installmentno, o.year, o.planname, u.plantype, u.plancode, u.totalcon }).ToList();

                        foreach (var g in list.ToList())
                        {
                            string subplan = g.plantype;
                            if (subplan == "FD")
                            {
                                sf.Add(new SelfCollection { sis = g.payamount });
                            }
                            if (subplan == "MIS" && g.installmentno == 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { PPSFresh = g.totalcon });
                            }
                            if (subplan == "NFP" && g.installmentno == 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { NFPFresh = g.payamount });
                            }
                            if (subplan == "RD" && g.installmentno == 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { MISFresh = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { MIS1 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 2)
                            {
                                sf.Add(new SelfCollection { MIS2 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 3)
                            {
                                sf.Add(new SelfCollection { MIS3 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 4)
                            {
                                sf.Add(new SelfCollection { MIS4 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 5)
                            {
                                sf.Add(new SelfCollection { MIS5 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 6)
                            {
                                sf.Add(new SelfCollection { MIS6 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year >= 7)
                            {
                                sf.Add(new SelfCollection { MIS7a = g.payamount });
                            }

                        }

                        var brow = db.appltabs.Single(bg => bg.bondid == bondid);
                        double sissum = 0, misfsum = 0, mis1sum = 0, mis2sum = 0, mis3sum = 0, mis4sum = 0, mis5sum = 0, mis6sum = 0, mis7sum = 0, pppsum = 0, nfssum = 0;

                        sissum = sf.Sum(tr => tr.sis);
                        misfsum = sf.Sum(tr => tr.MISFresh);
                        mis1sum = sf.Sum(tr => tr.MIS1);
                        mis2sum = sf.Sum(tr => tr.MIS2);
                        mis3sum = sf.Sum(tr => tr.MIS3);
                        mis4sum = sf.Sum(tr => tr.MIS4);
                        mis5sum = sf.Sum(tr => tr.MIS5);
                        mis6sum = sf.Sum(tr => tr.MIS6);
                        mis7sum = sf.Sum(tr => tr.MIS7a);
                        pppsum = sf.Sum(tr => tr.PPSFresh);
                        nfssum = sf.Sum(tr => tr.NFPFresh);
                        bsclist.Add(new TempSelfCollection { Newbondid = brow.newbondid, Customername = brow.name, brokername = ag.name, brokercode = ag.NewAgentId, tsis = sissum, tMISFresh = misfsum, tPPSFresh = pppsum, tNFPFresh = nfssum, tMIS1 = mis1sum, tMIS2 = mis2sum, tMIS3 = mis3sum, tMIS4 = mis4sum, tMIS5 = mis5sum, tMIS6 = mis6sum, tMIS7a = mis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, sdate = stdate, edate = enddate });
                    }


                }
                double bsissum = 0, bmisfsum = 0, bppsum = 0, bnfpsum = 0, bmis1sum = 0, bmis2sum = 0, bmis3sum = 0, bmis4sum = 0, bmis5sum = 0, bmis6sum = 0, bmis7sum = 0;
                bsissum = bsclist.Sum(tr => tr.tsis);
                bmisfsum = bsclist.Sum(tr => tr.tMISFresh);
                bmis1sum = bsclist.Sum(tr => tr.tMIS1);
                bmis2sum = bsclist.Sum(tr => tr.tMIS2);
                bmis3sum = bsclist.Sum(tr => tr.tMIS3);
                bmis4sum = bsclist.Sum(tr => tr.tMIS4);
                bmis5sum = bsclist.Sum(tr => tr.tMIS5);
                bmis6sum = bsclist.Sum(tr => tr.tMIS6);
                bmis7sum = bsclist.Sum(tr => tr.tMIS7a);
                bppsum = bsclist.Sum(tr => tr.tPPSFresh);
                bnfpsum = bsclist.Sum(tr => tr.tNFPFresh);


                if (bsissum + bmisfsum + bmis1sum + bmis2sum + bmis3sum + bmis4sum + bmis5sum + bmis6sum + bmis7sum + bppsum + bnfpsum > 0)
                {
                    bcclist.Add(new TempBrokerChainCollection { brokercode = NewAgentid, brokername = ar.name, newagentid = bc.newagentid, name = bc.name, tsis = bsissum, tMISFresh = bmisfsum, tppp = bppsum, tMIP = bnfpsum, tMIS1 = bmis1sum, tMIS2 = bmis2sum, tMIS3 = bmis3sum, tMIS4 = bmis4sum, tMIS5 = bmis5sum, tMIS6 = bmis6sum, tMIS7a = bmis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = ag.Mobileno, bond = mr.custname, agent = mr.agentname, plan = mr.planname, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

            }

            #endregion


            ReportDocument rdp = new ReportDocument();
            rdp.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerChainCollection.rpt"));
            rdp.SetDataSource(bcclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rdp.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rdp.Close();
                rdp.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BrokerSelfDueCollection()
        {
            List<SelfdueCollection> bsdclist = new List<SelfdueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bsdclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerSelfDueCollection(string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                MonthName mn = new MonthName();
                var mon = mn.numbertomonthname(month);
                List<SelfdueCollection> bsdclist = new List<SelfdueCollection>();
                var rr = db.BrokerCommLists.Where(a => a.newagentid == newagentid && a.month == mon && a.Year == year).Count();
                if (rr == 1)
                {
                    var ar = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
                    DateTime date = DateTime.Now.Date;
                    var tb = (from n in db.appltabs where n.newintroducerid == newagentid && n.status == 1 select n);

                    foreach (var t in tb.ToList())
                    {
                        var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate.Month <= month && i.prevexpirydate.Year <= year select i).ToList();
                        foreach (var bwdi in bwdilist)
                        {
                            bsdclist.Add(new SelfdueCollection { newagentid = newagentid, name = ar.name, newbondid = bwdi.newbondid, cname = t.name, expirydate = bwdi.prevexpirydate, planname = bwdi.planname, term = bwdi.term_plan, mode = bwdi.mode, amount = bwdi.amount, installmentno = bwdi.installmentno, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, mobileno = t.mobileno });
                        }
                    }

                    int count = bsdclist.Count();
                    if (count == 0)
                    {
                        Response.Write("<script>alert('There is No due collection')</script>");
                    }
                }
                else
                {
                    ViewBag.msg = "This Month Chain Not Released please Check It";
                }
                NewAgentid = newagentid;
                vmonth = month;
                vvyear = year;
                return View(bsdclist);

            }
        }
        public ActionResult PrintBrokerSelfDueReport()
        {

            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            MonthName mn = new MonthName();
            var mon = mn.numbertomonthname(vmonth);
            List<SelfdueCollection> bsdclist = new List<SelfdueCollection>();
            var rr = db.BrokerCommLists.Where(a => a.newagentid == NewAgentid && a.month == mon && a.Year == vvyear).Count();
            if (rr == 1)
            {
                var ar = db.BrokerCommLists.Single(a => a.newagentid == NewAgentid && a.month == mon && a.Year == vvyear);
                DateTime date = DateTime.Now.Date;
                var tb = (from n in db.appltabs where n.newintroducerid == NewAgentid && n.status == 1 select n);
                foreach (var t in tb.ToList())
                {
                    var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate.Month <= vmonth && i.prevexpirydate.Year <= vvyear select i).ToList();
                    foreach (var bwdi in bwdilist)
                    {
                        bsdclist.Add(new SelfdueCollection { newagentid = NewAgentid, name = ar.name, newbondid = bwdi.newbondid, cname = t.name, expirydate = bwdi.prevexpirydate, planname = bwdi.planname, term = bwdi.term_plan, mode = bwdi.mode, amount = bwdi.amount, installmentno = bwdi.installmentno, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, mobileno = t.mobileno });
                    }
                }

                int count = bsdclist.Count();
                if (count == 0)
                {
                    Response.Write("<script>alert('There is No due collection')</script>");
                }
            }
            else
            {
                ViewBag.msg = "This Month Chain Not Released please Check It";
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "BrokerSelfDueCollection.rpt"));
            rd.SetDataSource(bsdclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BrokerChainDueCollection()
        {
            List<ChaindueCollection> bcdclist = new List<ChaindueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(bcdclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerChainDueCollection(string newagentid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<ChaindueCollection> bcdclist = new List<ChaindueCollection>();
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);

                #region Select Broker Chain Start Here

                List<BrokerChain> bclist = new List<BrokerChain>();
                bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = User.Identity.Name });
                int rcount = 0;
                List<agents> dalist = new List<agents>();
                var alist = (from al in db.AgentDetails where al.NewIntroducerId == newagentid select new { al.AgencyCode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                    bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });

                }

                #endregion
                #region Select Due Collectin Start Here
                foreach (var bc in bclist)
                {

                    DateTime date = DateTime.Now.Date;
                    var tb = (from n in db.appltabs where n.newintroducerid == bc.newagentid && n.plantype == "RD" && n.status == 1 select n);
                    foreach (var t in tb.ToList())
                    {
                        double amount = 0;
                        List<BondDueCollection> bsdclist = new List<BondDueCollection>();
                        var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate < date select i).ToList();
                        foreach (var bwdi in bwdilist)
                        {
                            bsdclist.Add(new BondDueCollection { amount = bwdi.amount });
                        }


                        amount = bsdclist.Sum(tr => tr.amount);
                        if (amount > 0)
                        {
                            bcdclist.Add(new ChaindueCollection { brokercode = newagentid, brokername = ar.name, newagentid = bc.newagentid, name = bc.name, newbondid = t.newbondid, cname = t.name, expirydate = t.expirydate, planname = t.planname, term = t.term, mode = t.mode, amount = amount, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, mobileno = t.mobileno });
                        }
                    }

                }
                #endregion

                NewAgentid = newagentid;
                return View(bcdclist);
            }
        }
        public ActionResult PrintBrokerChainDueReport()
        {
            List<ChaindueCollection> bcdclist = new List<ChaindueCollection>();
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var ar = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);

            #region Select Broker Chain Start Here

            List<BrokerChain> bclist = new List<BrokerChain>();
            bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = User.Identity.Name });
            int rcount = 0;
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.AgentDetails where al.NewIntroducerId == NewAgentid select new { al.AgencyCode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = User.Identity.Name });

            }

            #endregion
            #region Select Due Collectin Start Here
            foreach (var bc in bclist)
            {

                DateTime date = DateTime.Now.Date;
                var tb = (from n in db.appltabs where n.newintroducerid == bc.newagentid && n.plantype == "RD" && n.status == 1 select n);
                foreach (var t in tb.ToList())
                {
                    double amount = 0;
                    List<BondDueCollection> bsdclist = new List<BondDueCollection>();
                    var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate < date select i).ToList();
                    foreach (var bwdi in bwdilist)
                    {
                        bsdclist.Add(new BondDueCollection { amount = bwdi.amount });
                    }


                    amount = bsdclist.Sum(tr => tr.amount);
                    if (amount > 0)
                    {
                        bcdclist.Add(new ChaindueCollection { brokercode = NewAgentid, brokername = ar.name, newagentid = bc.newagentid, name = bc.name, newbondid = t.newbondid, cname = t.name, expirydate = t.expirydate, planname = t.planname, term = t.term, mode = t.mode, amount = amount, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, mobileno = t.mobileno });
                    }
                }

            }
            #endregion

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerChainDueCollection.rpt"));
            rd.SetDataSource(bcdclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BDCReport()
        {
            List<TDSTemp> vlist = new List<TDSTemp>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(vlist);
            }

        }
        [HttpPost]
        public ActionResult BDCReport(DateTime paydate, int month = 0, int year = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<TDSTemp> vlist = new List<TDSTemp>();
                var yyear = year.ToString();
                List<BrokerCommList> blist = new List<BrokerCommList>();
                var mon = mn.numbertomonthname(month);
                blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year select c).ToList();
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                foreach (var b in blist)
                {
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;
                    var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
                    List<plan> pclist = new List<plan>();
                    List<require> rlist = new List<require>();
                    Double tdsper = 0;
                    var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);
                    if (br.panno == null || br.panno == "Form-61")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                    var vyear = year.ToString();

                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                    //------Inserting self voucher------------
                    var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                    foreach (var p in spclist.ToList())
                    {
                        pclist.Add(new plan { planname = p.planname });
                    }

                    foreach (var pc in pclist)
                    {


                        var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                        foreach (var spy in spylist.ToList())
                        {

                            var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                            var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                            if (business > 0)
                            {
                                var percentage = (commission / business) * 100;
                                rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                            }
                        }
                    }

                    //------End Inserting self voucher----------------

                    //----------selecting team business and commission of selected month---------------

                    var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == year select a).ToList();
                    List<agents> alist = new List<agents>();
                    foreach (var aar in arlist)
                    {
                        alist.Add(new agents { agentcode = aar.agencycode });
                    }

                    foreach (var a in alist)
                    {
                        List<teamagents> tlist = new List<teamagents>();
                        List<trequire> trlist = new List<trequire>();
                        var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                        int rcount = 0;
                        rcount = rcount + 1;
                        tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                        var maxsragent = tlist.Count;
                        var minsragent = 1;
                        while (minsragent <= maxsragent)
                        {

                            var da = tlist.Where(t => t.sr == minsragent);
                            foreach (var d in da.ToList())
                            {
                                var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                foreach (var aa in aalist)
                                {
                                    rcount = rcount + 1;
                                    tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                }

                            }
                            minsragent = minsragent + 1;
                            maxsragent = tlist.Count;
                        }

                        foreach (var tt in tlist)
                        {
                            var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == year);
                            var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                            foreach (var nctr in nctrlist)
                            {
                                trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                            }

                        }

                        var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == year);
                        var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                        foreach (var dpc in dpclist)
                        {
                            var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                            foreach (var dpy in dpylist)
                            {
                                var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                if (tbusiness > 0)
                                {
                                    var tpercentage = (tcommission / tbusiness) * 100;
                                    rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, panno = br.panno, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                }
                            }
                        }

                    }


                    //----------End selecting team business and commission of selected month---------------

                    var gbusiness = rlist.Sum(tr => tr.business);
                    var gcommission = rlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                    if (lesstds > 0)
                    {
                        var bb = db.AgentDetails.Single(p => p.NewAgentId == br.newagentid);
                        vlist.Add(new TDSTemp { brokerid = br.newagentid, brokername = br.name, address = bb.Address, dob = bb.Dob, panno = br.panno, tds = lesstds, monthname = monthname });
                    }
                }
                vmonth = month;
                vvyear = year;
                pdate = paydate;
                return View(vlist);

            }
        }
        public ActionResult PrintBDCReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                List<TDSTemp> vlist = new List<TDSTemp>();
                List<BrokerCommList> blist = new List<BrokerCommList>();
                var mon = mn.numbertomonthname(vmonth);
                blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == vvyear select c).ToList();
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                foreach (var b in blist)
                {
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;
                    var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                    List<plan> pclist = new List<plan>();
                    List<require> rlist = new List<require>();
                    Double tdsper = 0;
                    var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == vvyear);
                    if (br.panno == null || br.panno == "Form-61")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                    var vyear = vvyear.ToString();

                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
                    //------Inserting self voucher------------
                    var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
                    foreach (var p in spclist.ToList())
                    {
                        pclist.Add(new plan { planname = p.planname });
                    }

                    foreach (var pc in pclist)
                    {


                        var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                        foreach (var spy in spylist.ToList())
                        {

                            var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                            var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.commission).DefaultIfEmpty(0).Sum();
                            if (business > 0)
                            {
                                var percentage = (commission / business) * 100;
                                rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                            }
                        }
                    }

                    //------End Inserting self voucher----------------

                    //----------selecting team business and commission of selected month---------------

                    var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == vvyear select a).ToList();
                    List<agents> alist = new List<agents>();
                    foreach (var aar in arlist)
                    {
                        alist.Add(new agents { agentcode = aar.agencycode });
                    }

                    foreach (var a in alist)
                    {
                        List<teamagents> tlist = new List<teamagents>();
                        List<trequire> trlist = new List<trequire>();
                        var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == vvyear);
                        int rcount = 0;
                        rcount = rcount + 1;
                        tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                        var maxsragent = tlist.Count;
                        var minsragent = 1;
                        while (minsragent <= maxsragent)
                        {

                            var da = tlist.Where(t => t.sr == minsragent);
                            foreach (var d in da.ToList())
                            {
                                var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                                foreach (var aa in aalist)
                                {
                                    rcount = rcount + 1;
                                    tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                }

                            }
                            minsragent = minsragent + 1;
                            maxsragent = tlist.Count;
                        }

                        foreach (var tt in tlist)
                        {
                            var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == vvyear);
                            var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == vmonth && nn.date.Year == vvyear select nn).ToList();
                            foreach (var nctr in nctrlist)
                            {
                                trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                            }

                        }

                        var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == vvyear);
                        var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                        foreach (var dpc in dpclist)
                        {
                            var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                            foreach (var dpy in dpylist)
                            {
                                var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                if (tbusiness > 0)
                                {
                                    var tpercentage = (tcommission / tbusiness) * 100;
                                    rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, panno = br.panno, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                }
                            }
                        }

                    }


                    //----------End selecting team business and commission of selected month---------------

                    var gbusiness = rlist.Sum(tr => tr.business);
                    var gcommission = rlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                    if (lesstds > 0)
                    {
                        var bb = db.AgentDetails.Single(v => v.NewAgentId == br.newagentid);
                        vlist.Add(new TDSTemp { brokerid = br.newagentid, brokername = br.name, address = bb.Address, dob = bb.Dob, panno = br.panno, tds = lesstds, monthname = monthname });
                    }


                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BDCReport.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(vlist);
            }

        }

        [HttpGet]
        public ActionResult DWDueCollection()
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View(dwdclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult DWDueCollection(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var brolist = (from b in db.appltabs select new { b.newintroducerid }).Distinct();
                foreach (var bro in brolist.ToList())
                {
                    var appllist = (from a in db.appltabs where a.newintroducerid == bro.newintroducerid && a.mode != "Single" && a.status == 1 select a).ToList();
                    foreach (var t in appllist)
                    {

                        Double amount = 0;
                        string installmentno = "";
                        var bb = db.Branchtabs.Single(mm => mm.BranchCode == t.branchcode);
                        var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate >= sdate && i.prevexpirydate <= edate select i).ToList();
                        var dicount = bwdilist.Count();
                        if (dicount > 1)
                        {
                            foreach (var prn in bwdilist)
                            {
                                amount += prn.amount;
                                installmentno += prn.installmentno + ",";
                            }
                            installmentno = installmentno.Substring(0, installmentno.Length - 1);
                            dwdclist.Add(new DatewiseDueCollection { newbondid = t.newbondid, name = t.name, newintroducerid = t.newintroducerid, amount = amount, installment = installmentno, formdate = t.formdate, date = sdate, branchname = bb.BranchName, companyname = t.mobileno });
                        }
                        else if (dicount == 1)
                        {
                            var ir = db.Installmenttabs.Single(ii => ii.bondid == t.bondid && ii.payamount == 0 && ii.prevexpirydate >= sdate && ii.prevexpirydate <= edate);
                            dwdclist.Add(new DatewiseDueCollection { newbondid = t.newbondid, name = t.name, newintroducerid = t.newintroducerid, amount = ir.amount, installment = ir.installmentno.ToString(), formdate = t.formdate, date = sdate, branchname = bb.BranchName, companyname = t.mobileno });
                        }

                    }
                }

                int count = dwdclist.Count();
                if (count == 0)
                {
                    Response.Write("<script>alert('There is No due collection')</script>");
                }
                stdate = sdate;
                enddate = edate;
                return View(dwdclist);

            }
        }
        public ActionResult PrintDWDueCollection()
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var brolist = (from b in db.appltabs select new { b.newintroducerid }).Distinct();
            foreach (var bro in brolist.ToList())
            {
                var appllist = (from a in db.appltabs where a.newintroducerid == bro.newintroducerid && a.mode != "Single" && a.status == 1 select a).ToList();
                foreach (var t in appllist)
                {

                    Double amount = 0;
                    string installmentno = "";
                    var bb = db.Branchtabs.Single(mm => mm.BranchCode == t.branchcode);
                    var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate >= stdate && i.prevexpirydate <= enddate select i).ToList();
                    var dicount = bwdilist.Count();
                    if (dicount > 1)
                    {

                        foreach (var prn in bwdilist)
                        {
                            amount += prn.amount;
                            installmentno += prn.installmentno + ",";
                        }
                        installmentno = installmentno.Substring(0, installmentno.Length - 1);
                        dwdclist.Add(new DatewiseDueCollection { newbondid = t.newbondid, name = t.name, newintroducerid = t.newintroducerid, amount = amount, installment = installmentno, formdate = t.formdate, date = stdate, branchname = bb.BranchName, companyname = t.mobileno });
                    }
                    else if (dicount == 1)
                    {
                        var ir = db.Installmenttabs.Single(ii => ii.bondid == t.bondid && ii.payamount == 0 && ii.prevexpirydate >= stdate && ii.prevexpirydate <= enddate);
                        dwdclist.Add(new DatewiseDueCollection { newbondid = t.newbondid, name = t.name, newintroducerid = t.newintroducerid, amount = ir.amount, installment = ir.installmentno.ToString(), formdate = t.formdate, date = stdate, branchname = bb.BranchName, companyname = t.mobileno });
                    }

                }
            }

            int count = dwdclist.Count();
            if (count == 0)
            {
                Response.Write("<script>alert('There is No due collection')</script>");
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DueCollection.rpt"));
            rd.SetDataSource(dwdclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        #endregion

        #region Official Reports Start Here

        [HttpGet]
        public ActionResult BranchlLoginDetail()
        {
            List<Logindetail> dclist = new List<Logindetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View(dclist);

            }
        }
        [HttpPost]
        public ActionResult BranchlLoginDetail(string iid)
        {


            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["Newbondid"] = iid;
                List<Logindetail> bllist = new List<Logindetail>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dclist = (from dcl in db.branchlogindetails where dcl.iid == iid select dcl).ToList();
                foreach (var dcl in dclist)
                {
                    bllist.Add(new Logindetail { userid = dcl.iid, password = dcl.password, intime = dcl.indatetime, outtime = dcl.outdatetime, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                opid = iid;
                return View(bllist);
            }


        }
        public ActionResult PrintBranchlLoginDetail()
        {
            List<Logindetail> bllist = new List<Logindetail>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dclist = (from dcl in db.branchlogindetails where dcl.iid == opid select dcl).ToList();
            foreach (var dcl in dclist)
            {
                bllist.Add(new Logindetail { userid = dcl.iid, password = dcl.password, intime = dcl.indatetime, outtime = dcl.outdatetime, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BranchLoginReport.rpt"));
            rd.SetDataSource(bllist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult OperatorLoginDetails()
        {
            List<Logindetail> opldtl = new List<Logindetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(opldtl);
            }
        }
        [HttpPost]
        public ActionResult OperatorLoginDetails(string iid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<Logindetail> bllist = new List<Logindetail>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dclist = (from dcl in db.operatorlogin_details where dcl.iid == iid select dcl).ToList();
                foreach (var dcl in dclist)
                {
                    bllist.Add(new Logindetail { userid = dcl.iid, password = dcl.password, intime = dcl.indatetime, outtime = dcl.outdatetime, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                opid = iid;
                return View(bllist);
            }



        }
        public ActionResult PrintOperatorLoginDetails()
        {
            List<Logindetail> bllist = new List<Logindetail>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dclist = (from dcl in db.operatorlogin_details where dcl.iid == opid select dcl).ToList();
            foreach (var dcl in dclist)
            {
                bllist.Add(new Logindetail { userid = dcl.iid, password = dcl.password, intime = dcl.indatetime, outtime = dcl.outdatetime, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "OperatorLoginReport.rpt"));
            rd.SetDataSource(bllist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }



            return View();
        }

        [HttpGet]
        public ActionResult HRLoginDetails()
        {
            List<Logindetail> hrldtl = new List<Logindetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(hrldtl);
            }
        }
        [HttpPost]
        public ActionResult HRLoginDetails(string iid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<Logindetail> bllist = new List<Logindetail>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dclist = (from dcl in db.hrlogin_details where dcl.iid == iid select dcl).ToList();
                foreach (var dcl in dclist)
                {
                    bllist.Add(new Logindetail { userid = dcl.iid, password = dcl.password, intime = dcl.indatetime, outtime = dcl.outdatetime, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                opid = iid;
                return View(bllist);
            }

        }
        public ActionResult PrintHRLoginDetails()
        {
            List<Logindetail> bllist = new List<Logindetail>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dclist = (from dcl in db.hrlogin_details where dcl.iid == opid select dcl).ToList();
            foreach (var dcl in dclist)
            {
                bllist.Add(new Logindetail { userid = dcl.iid, password = dcl.password, intime = dcl.indatetime, outtime = dcl.outdatetime, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "HRLoginReport.rpt"));
            rd.SetDataSource(bllist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View();
        }

        [HttpGet]
        public ActionResult BranchList()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<Branchlist> blist = new List<Branchlist>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dclist = (from dcl in db.Branchtabs select dcl).ToList();
                foreach (var dcl in dclist)
                {
                    blist.Add(new Branchlist { BranchName = dcl.BranchName, BranchCode = dcl.BranchCode, BranchDistrict = dcl.BranchDistrict, branchaddress = dcl.branchaddress, mobile = dcl.mobile, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice,password = dcl.password });
                }
                return View(blist);

            }
        }
        public ActionResult PrintBranchList()
        {
            List<Branchlist> blist = new List<Branchlist>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dclist = (from dcl in db.Branchtabs select dcl).ToList();
            foreach (var dcl in dclist)
            {
                blist.Add(new Branchlist { BranchName = dcl.BranchName, BranchCode = dcl.BranchCode, BranchDistrict = dcl.BranchDistrict, branchaddress = dcl.branchaddress, mobile = dcl.mobile, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "SalesOfficeReport.rpt"));
            rd.SetDataSource(blist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult OperatorList()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<Oplist> blist = new List<Oplist>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dclist = (from dcl in db.Operators select dcl).ToList();
                foreach (var dcl in dclist)
                {
                    blist.Add(new Oplist { OperatorName = dcl.OperatorName, BranchCode = dcl.BranchCode, OperatorId = dcl.OperatorId, OperatorAddress = dcl.OperatorAddress, Operator_Mail = dcl.Operator_Mail, OperatorMobile = dcl.OperatorMobile, Cdate = dcl.Cdate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(blist);

            }
        }
        public ActionResult PrintOperatorList()
        {
            List<Oplist> blist = new List<Oplist>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dclist = (from dcl in db.Operators select dcl).ToList();
            foreach (var dcl in dclist)
            {
                blist.Add(new Oplist { OperatorName = dcl.OperatorName, BranchCode = dcl.BranchCode, OperatorId = dcl.OperatorId, OperatorAddress = dcl.OperatorAddress, Operator_Mail = dcl.Operator_Mail, OperatorMobile = dcl.OperatorMobile, Cdate = dcl.Cdate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "OperatotListReport.rpt"));
            rd.SetDataSource(blist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult HRList()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<hrlist> blist = new List<hrlist>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dclist = (from dcl in db.HRTabs select dcl).ToList();
                foreach (var dcl in dclist)
                {
                    blist.Add(new hrlist { HRId = dcl.HRId, BranchCode = dcl.BranchCode, HRName = dcl.HRName, hAddress = dcl.Address, email = dcl.emailid, Mobile = dcl.Mobile, date = dcl.date, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice,password = dcl.Password});
                }
                return View(blist);

            }
        }
        public ActionResult PrintHRList()
        {
            List<hrlist> blist = new List<hrlist>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dclist = (from dcl in db.HRTabs select dcl).ToList();
            foreach (var dcl in dclist)
            {
                blist.Add(new hrlist { HRId = dcl.HRId, BranchCode = dcl.BranchCode, HRName = dcl.HRName, hAddress = dcl.Address, email = dcl.emailid, Mobile = dcl.Mobile, date = dcl.date, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "HRListReport.rpt"));
            rd.SetDataSource(blist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult AllCustomer()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                return View(custlist);

            }
        }
        [HttpPost]
        public ActionResult AllCustomer(int option)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                List<appltab> cus = new List<appltab>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                if (option > 0)
                {
                    cus = db.appltabs.Where(s => s.projectid == option && s.status == 1).ToList();
                }
                else
                {
                    cus = db.appltabs.Where(s => s.status == 1).ToList();
                }

                foreach (var cust in cus)
                {
                    custlist.Add(new DatewiseCustomerList { totalamount = cust.totalcon, newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                PId = option;
                return View(custlist);

            }

        }
        public ActionResult PrintAllCustomerList()
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            List<appltab> cus = new List<appltab>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            if (PId > 0)
            {
                cus = db.appltabs.Where(s => s.projectid == PId && s.status == 1).ToList();
            }
            else
            {
                cus = db.appltabs.Where(s => s.status == 1).ToList();
            }

            foreach (var cust in cus)
            {
                custlist.Add(new DatewiseCustomerList { totalamount = cust.totalcon, newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CustomerList.rpt"));
            rd.SetDataSource(custlist.OrderBy(d => d.newbondid));

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult FilterCustomer()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                return View(custlist);

            }
        }
        [HttpPost]
        public ActionResult FilterCustomer(Double per = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                List<appltab> cus = new List<appltab>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                //if (per > 0)
                //{
                //    cus = db.appltabs.Where(s => s.status == 1).ToList();
                //}
                //foreach (var cust in cus)
                //{
                //    var peramount = Math.Round(cust.totalcon * (per / 100), 2);
                //    var paidamount = db.Installmenttabs.Where(i => i.newbondid == cust.newbondid).Sum(p => p.payamount);
                //    if (paidamount >= peramount)
                //    {
                //        custlist.Add(new DatewiseCustomerList { newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, plotno = cust.plotno, block = cust.block });
                //    }
                //}

                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {

                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("FilterCustomer", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@per", per);
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {
                        var rs = new DatewiseCustomerList();
                        rs.newbondid = sdr["newbondid"].ToString();
                        rs.name = sdr["name"].ToString();
                        rs.newintroducerid = sdr["newintroducerid"].ToString();
                        rs.planname = sdr["planname"].ToString();
                        rs.mode = sdr["mode"].ToString();
                        rs.payment = Convert.ToDouble(sdr["payment"]);
                        rs.bookingamount = Convert.ToDouble(sdr["bookingamount"]);
                        rs.downpayment = Convert.ToDouble(sdr["downpayment"]);
                        rs.plotsize = Convert.ToDouble(sdr["plotsize"]);
                        rs.Mobile = sdr["Mobile"].ToString();
                        rs.formdate = Convert.ToDateTime(sdr["formdate"]);
                        rs.plotno = Convert.ToInt32(sdr["plotno"]);
                        rs.block = sdr["block"].ToString();
                        custlist.Add(rs);
                    }
                }
                catch (SqlException e)
                {
                    ViewBag.msg = e.Message;

                }
                finally
                {
                    con.Close();
                }
                Per = per;
                return View(custlist);

            }

        }
        public ActionResult PrintFilterCustomer()
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            List<appltab> cus = new List<appltab>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            if (Per > 0)
            {
                cus = db.appltabs.Where(s => s.status == 1).ToList();
            }
            foreach (var cust in cus)
            {
                var peramount = Math.Round(cust.totalcon * (Per / 100), 2);
                var paidamount = db.Installmenttabs.Where(i => i.newbondid == cust.newbondid).Sum(p => p.payamount);
                if (paidamount >= peramount)
                {
                    custlist.Add(new DatewiseCustomerList { newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, plotno = cust.plotno, block = cust.block });
                }
            }


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CustomerList.rpt"));
            rd.SetDataSource(custlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult AllotPlot(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<appltab> custlist = new List<appltab>();
                custlist = db.appltabs.Where(c => c.newbondid == newbondid).ToList();
                return View(custlist);

            }
        }
        [HttpPost]
        public ActionResult AllotPlot(appltab ob, string newintroducerid, int plancode)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<appltab> custlist = new List<appltab>();
                appltab up = db.appltabs.Single(u => u.newbondid == ob.newbondid);
                up.PYN = ob.PYN;
                up.block = ob.block;
                up.plotno = ob.plotno;
                db.SaveChanges();



                var count1 = db.BlockTabs.Where(ui => ui.block == ob.block && ui.Plancode == plancode).Count();
                if (count1 > 0)
                {
                    var block = db.BlockTabs.Single(ui => ui.block == ob.block && ui.Plancode == plancode);
                    var count = db.HoldingPlots.Where(a => a.holdby == newintroducerid && a.holdplotno == ob.plotno && a.holdblock == block.Id && a.holdprojectid == block.Plancode).Count();
                    if (count > 0)
                    {
                        HoldingPlot cb = db.HoldingPlots.Single(a => a.holdby == newintroducerid && a.holdplotno == ob.plotno && a.holdblock == block.Id && a.holdprojectid == block.Plancode);
                        cb.holdstatus = 0;
                        db.SaveChanges();
                    }
                }
                ViewBag.msg = "Plot Alloted Successfully....";
                custlist = db.appltabs.Where(c => c.newbondid == ob.newbondid).ToList();
                return View(custlist);

            }
        }

        [HttpGet]
        public ActionResult AssignPlotCustomer()
        {
            List<DatewiseCustomerList> dwclist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        return View(dwclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult AssignPlotCustomer(int plancode,int phaseid, string block)
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);

                var tlist = (from cu in db.appltabs where cu.projectid == plancode && cu.phaseid==phaseid && cu.block == block && cu.status == 1 && cu.PYN == "Y" orderby cu.formdate select cu).ToList();

                foreach (var i in tlist)
                {
                    if (i.plantype == plan4.shortcutname)
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.totalcon, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, block = i.block, plotno = i.plotno });
                    }
                    else
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, block = i.block, plotno = i.plotno });
                    }
                }

                pphaseid = phaseid;
                pplancode = plancode;
                bblock = block;

                return View(clist.OrderBy(o => o.plotno));
            }
        }
        public ActionResult PrintAssignPlotCustomer()
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
                var tlist = (from cu in db.appltabs where cu.projectid == pplancode && cu.phaseid==pphaseid && cu.block == bblock && cu.status == 1 && cu.PYN == "Y" orderby cu.formdate select cu).ToList();

                foreach (var i in tlist)
                {
                    if (i.plantype == plan4.shortcutname)
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.totalcon, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, block = i.block, plotno = i.plotno });
                    }
                    else
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, block = i.block, plotno = i.plotno });
                    }
                }


                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "datewisecustomer.rpt"));
                rd.SetDataSource(clist.OrderBy(o => o.plotno));

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View(clist);
            }
        }

        [HttpGet]
        public ActionResult DatewiseCustomer(string newbondid, string mobileno)
        {
            List<DatewiseCustomerList> dwclist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        if (newbondid == null && mobileno == null)
                        {
                            return View(dwclist);
                        }
                        else
                        {
                            var mr = db.Members.Single(m => m.Id == 1);
                            var cr = db.CompanyInfos.Single(c => c.Id == 1);
                            var newlogin = db.NewLogins.Single(c => c.UserName == newbondid);
                            var appl = db.appltabs.Single(v => v.newbondid == newbondid);
                            var ins = db.Installmenttabs.Single(z => z.newbondid == newbondid && z.installmentno == 1);
                            MyClass.Sendmsg(mobileno, "Dear " + appl.name + ", Welcome To ODHDEVELOPERS INDIA YourID: " + newbondid + " and Password:" + newlogin.Mobile + ".Your Amt of " + appl.payment + " INR is received in mode of " + appl.paymethod + " and receipt no." + ins.receiptno + ". Visit "+cg.HeadOffice+"  For Info.");
                            ViewBag.msg = "Message send sucessfully....";
                            var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);

                            var tlist = (from cu in db.appltabs where cu.formdate >= stdate && cu.formdate <= enddate && cu.status == 1 orderby cu.formdate select cu).ToList();

                            foreach (var i in tlist)
                            {
                                if (i.plantype == plan4.shortcutname)
                                {
                                    dwclist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.totalcon, bookingamount = i.bookingamount, downpayment = i.downpayment, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, sdate = stdate, edate = enddate });
                                }
                                else
                                {
                                    dwclist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, sdate = stdate, edate = enddate });
                                }
                            }
                            return View(dwclist);
                        }
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult DatewiseCustomer(DateTime sdate, DateTime edate)
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);

                var tlist = (from cu in db.appltabs where cu.formdate >= sdate && cu.formdate <= edate && cu.status == 1 orderby cu.formdate select cu).ToList();

                foreach (var i in tlist)
                {
                    if (i.plantype == plan4.shortcutname)
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.totalcon, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, sdate = sdate, edate = edate });
                    }
                    else
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, sdate = sdate, edate = edate });
                    }
                }

                stdate = sdate;
                enddate = edate;

                return View(clist);
            }
        }
        public ActionResult PrintDatewiseCustomer()
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
                var tlist = (from cu in db.appltabs where cu.formdate >= stdate && cu.formdate <= enddate && cu.status == 1 orderby cu.formdate select cu).ToList();

                foreach (var i in tlist)
                {
                    if (i.plantype == plan4.shortcutname)
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.totalcon, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, sdate = stdate, edate = enddate });
                    }
                    else
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = User.Identity.Name, plan = mr.planname, bond = mr.custname, sdate = stdate, edate = enddate });
                    }
                }


                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "datewisecustomer.rpt"));
                rd.SetDataSource(clist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View(clist);
            }
        }

        [HttpGet]
        public ActionResult DatewiseCustomerLedger()
        {
            List<DatewiseCustomerList> dwclist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        return View(dwclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult DatewiseCustomerLedger(DateTime sdate, DateTime edate, string planname)
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
                if (planname == "")
                {
                    var tlist = (from cu in db.Installmenttabs where cu.paymentdate >= sdate && cu.paymentdate <= edate select new { cu.bondid }).Distinct().ToList();

                    foreach (var i in tlist)
                    {
                        var bcr = db.appltabs.Single(b => b.bondid == i.bondid);
                        var br = db.Branchtabs.Single(v => v.BranchCode == bcr.branchcode);
                        var amountsum = (from ii in db.Installmenttabs where ii.bondid == i.bondid && ii.paymentdate >= sdate && ii.paymentdate <= edate select ii.payamount).DefaultIfEmpty(0).Sum();
                        clist.Add(new DatewiseCustomerList { newbondid = bcr.newbondid, name = bcr.name, Mobile = bcr.mobileno, formdate = bcr.formdate, newintroducerid = bcr.newintroducerid, planname = bcr.planname, mode = bcr.mode, payment = bcr.payment, bookingamount = bcr.bookingamount, downpayment = amountsum, block = bcr.block, plotno = bcr.plotno, plotsize = bcr.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, plan = mr.planname, bond = mr.custname, sdate = sdate, edate = edate });
                    }
                }
                else
                {
                    var tlist = (from cu in db.Installmenttabs where cu.paymentdate >= sdate && cu.paymentdate <= edate && cu.planname == planname select new { cu.bondid }).Distinct().ToList();

                    foreach (var i in tlist)
                    {
                        var bcr = db.appltabs.Single(b => b.bondid == i.bondid);
                        var br = db.Branchtabs.Single(v => v.BranchCode == bcr.branchcode);
                        var amountsum = (from ii in db.Installmenttabs where ii.bondid == i.bondid && ii.paymentdate >= sdate && ii.paymentdate <= edate select ii.payamount).DefaultIfEmpty(0).Sum();
                        clist.Add(new DatewiseCustomerList { newbondid = bcr.newbondid, name = bcr.name, Mobile = bcr.mobileno, formdate = bcr.formdate, newintroducerid = bcr.newintroducerid, planname = bcr.planname, mode = bcr.mode, payment = bcr.payment, bookingamount = bcr.bookingamount, downpayment = amountsum, block = bcr.block, plotno = bcr.plotno, plotsize = bcr.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, plan = mr.planname, bond = mr.custname, sdate = sdate, edate = edate });
                    }
                }

                if (clist.Count > 0)
                {
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DWCustomerLedger.rpt"));
                    rd.SetDataSource(clist);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        string dt = pdate.ToShortDateString();

                        return new FileStreamResult(stream, "application/pdf");
                    }

                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }
                else
                {
                    Response.Write("<script>alert('No Data Found')</script>");
                }
                return View(clist);
            }
        }


        [HttpGet]
        public ActionResult MemberWiseAccountDetail()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                List<DWMemberList> memberlist = new List<DWMemberList>();
                var mlist = (from o in db.Member_tabs orderby o.NewMemberId select o).ToList();
                foreach (var m in mlist)
                {
                    memberlist.Add(new DWMemberList { newmemberid = m.NewMemberId, name = m.MemberName, dob = m.DOB, fathername = m.Father, maddress = m.Address, Mobileno = m.Mobile, branchname = User.Identity.Name, formdate = m.Cdate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(memberlist);
            }


        }
        public ActionResult PrintMemberList()
        {

            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            List<DWMemberList> memberlist = new List<DWMemberList>();
            var mlist = (from o in db.Member_tabs orderby o.NewMemberId select o).ToList();
            foreach (var m in mlist)
            {
                memberlist.Add(new DWMemberList { newmemberid = m.NewMemberId, name = m.MemberName, dob = m.DOB, fathername = m.Father, maddress = m.Address, Mobileno = m.Mobile, branchname = User.Identity.Name, formdate = m.Cdate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AllMemberList.rpt"));
            rd.SetDataSource(memberlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult MemberAccountDetail(string newmemberid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<BrokerAccount> balist = new List<BrokerAccount>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                var ar = db.Member_tabs.Single(n => n.NewMemberId == newmemberid);
                var alist = (from a in db.appltabs where a.newmemberid == newmemberid && a.status == 1 orderby a.newbondid select a).ToList();
                foreach (var b in alist)
                {
                    var amountsum = (from ii in db.Installmenttabs where ii.newbondid == b.newbondid select ii.payamount).DefaultIfEmpty(0).Sum();
                    balist.Add(new BrokerAccount { newintroducerid = newmemberid, name = ar.MemberName, newbondid = b.newbondid, cname = b.name, amount = amountsum, planname = b.planname, term = b.term, mode = b.mode, expirydate = b.expirydate, formdate = b.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                NewMemberid = newmemberid;
                return View(balist);
            }


        }
        public ActionResult PrintAccountDetail()
        {

            List<BrokerAccount> balist = new List<BrokerAccount>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var ar = db.Member_tabs.Single(n => n.NewMemberId == NewMemberid);
            var alist = (from a in db.appltabs where a.newmemberid == NewMemberid && a.status == 1 orderby a.newbondid select a).ToList();
            foreach (var b in alist)
            {
                var amountsum = (from ii in db.Installmenttabs where ii.newbondid == b.newbondid select ii.payamount).DefaultIfEmpty(0).Sum();
                balist.Add(new BrokerAccount { newintroducerid = NewMemberid, name = ar.MemberName, newbondid = b.newbondid, cname = b.name, amount = amountsum, planname = b.planname, term = b.term, mode = b.mode, expirydate = b.expirydate, formdate = b.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MemberAccountList.rpt"));
            rd.SetDataSource(balist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult DateWiseMember()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DWMemberList> memberlist = new List<DWMemberList>();
                return View(memberlist);
            }
        }
        [HttpPost]
        public ActionResult DateWiseMember(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                List<DWMemberList> memberlist = new List<DWMemberList>();
                var mlist = (from o in db.Member_tabs where o.Cdate <= edate && o.Cdate >= sdate orderby o.NewMemberId select o).ToList();
                foreach (var m in mlist)
                {
                    memberlist.Add(new DWMemberList { newmemberid = m.NewMemberId, name = m.MemberName, dob = m.DOB, fathername = m.Father, maddress = m.Address, Mobileno = m.Mobile, branchname = User.Identity.Name, formdate = m.Cdate, sdate = sdate, edate = edate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                enddate = edate;
                stdate = sdate;
                return View(memberlist);
            }


        }
        public ActionResult PrintDateWiseMember()
        {

            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            List<DWMemberList> memberlist = new List<DWMemberList>();
            var mlist = (from o in db.Member_tabs where o.Cdate <= enddate && o.Cdate >= stdate orderby o.NewMemberId select o).ToList();
            foreach (var m in mlist)
            {
                memberlist.Add(new DWMemberList { newmemberid = m.NewMemberId, name = m.MemberName, dob = m.DOB, fathername = m.Father, maddress = m.Address, Mobileno = m.Mobile, branchname = User.Identity.Name, formdate = m.Cdate, sdate = stdate, edate = enddate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "datewisemember.rpt"));
            rd.SetDataSource(memberlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult AllSavingaccount()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DWAccList> acclist = new List<DWAccList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dn = db.SavingAccountInfos.ToList();
                foreach (var d in dn)
                {
                    acclist.Add(new DWAccList { accountno = d.accountno, name = d.acholdername, fathername = d.fathername, maddress = d.address, Mobileno = d.mobileno, nomineename = d.nomineename, nomage = d.nomage, nomrel = d.nomrel, branchname = User.Identity.Name, formdate = d.Doj, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(acclist);
            }

        }
        public ActionResult Printallsavingaccount()
        {

            List<DWAccList> acclist = new List<DWAccList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = db.SavingAccountInfos.ToList();
            foreach (var d in dn)
            {
                acclist.Add(new DWAccList { accountno = d.accountno, name = d.acholdername, fathername = d.fathername, maddress = d.address, Mobileno = d.mobileno, nomineename = d.nomineename, nomage = d.nomage, nomrel = d.nomrel, branchname = User.Identity.Name, formdate = d.Doj, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "accountlist.rpt"));
            rd.SetDataSource(acclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult Datewisesaving()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DWAccList> acclist = new List<DWAccList>();
                return View(acclist);
            }
        }
        [HttpPost]
        public ActionResult Datewisesaving(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DWAccList> acclist = new List<DWAccList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dn = (from sa in db.SavingAccountInfos where sa.Doj >= sdate && sa.Doj <= edate select sa).ToList();
                foreach (var d in dn)
                {
                    acclist.Add(new DWAccList { accountno = d.accountno, name = d.acholdername, fathername = d.fathername, maddress = d.address, Mobileno = d.mobileno, nomineename = d.nomineename, nomage = d.nomage, nomrel = d.nomrel, branchname = User.Identity.Name, formdate = d.Doj, sdate = sdate, edate = edate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                stdate = sdate;
                enddate = edate;
                return View(acclist);
            }

        }
        public ActionResult PrintDatewisesaving()
        {
            List<DWAccList> acclist = new List<DWAccList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = (from sa in db.SavingAccountInfos where sa.Doj >= stdate && sa.Doj <= enddate select sa).ToList();
            foreach (var d in dn)
            {
                acclist.Add(new DWAccList { accountno = d.accountno, name = d.acholdername, fathername = d.fathername, maddress = d.address, Mobileno = d.mobileno, nomineename = d.nomineename, nomage = d.nomage, nomrel = d.nomrel, branchname = User.Identity.Name, formdate = d.Doj, sdate = stdate, edate = enddate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "datewisesaving.rpt"));
            rd.SetDataSource(acclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult DatewisesavingCollection()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DWAccListCollection> acclist = new List<DWAccListCollection>();
                return View(acclist);
            }
        }
        [HttpPost]
        public ActionResult DatewisesavingCollection(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DWAccListCollection> acclist = new List<DWAccListCollection>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dn = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate select sa.accountno).Distinct().ToList();
                var dz = dn.Count();

                foreach (var d in dn)
                {
                    double credit = 0; double debit = 0;
                    var dx = db.SavingAccountInfos.Single(c => c.accountno == d);
                    credit = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate && sa.accountno == d select sa.credit).DefaultIfEmpty(0).Sum();
                    debit = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate && sa.accountno == d select sa.debit).DefaultIfEmpty(0).Sum();
                    double bal = credit - debit;
                    acclist.Add(new DWAccListCollection { accountno = d, name = dx.acholdername, credit = credit, debit = debit, sdate = sdate, edate = edate, balance = bal });
                }
                stdate = sdate;
                enddate = edate;
                return View(acclist);
            }

        }
        public ActionResult PrintDatewisesavingCollection()
        {
            List<DWAccListCollection> acclist = new List<DWAccListCollection>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate select sa.accountno).Distinct().ToList();
            var dz = dn.Count();

            foreach (var d in dn)
            {
                double credit = 0; double debit = 0;
                var dx = db.SavingAccountInfos.Single(c => c.accountno == d);
                credit = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate && sa.accountno == d select sa.credit).DefaultIfEmpty(0).Sum();
                debit = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate && sa.accountno == d select sa.debit).DefaultIfEmpty(0).Sum();
                double bal = credit - debit;
                acclist.Add(new DWAccListCollection { accountno = d, name = dx.acholdername, credit = credit, debit = debit, sdate = stdate, edate = enddate, balance = bal });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "SavingCollection.rpt"));
            rd.SetDataSource(acclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult RdPlanList()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<RdList> rlist = new List<RdList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plist = (from aaa in db.Plan_Tabs select aaa).ToList();
                foreach (var p in plist)
                {
                    rlist.Add(new RdList { Planname = p.Planname, Term = p.Term, plotsize = p.Plotsize, Amount = p.Amount, Monthly = p.Monthly, Quarterly = p.Quarterly, Halfyearly = p.Halfyearly, Yearly = p.Yearly, EstimatedValue = p.EstimatedValue, Accidental = p.Accidental, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(rlist);

            }
        }
        public ActionResult PrintRdPlanReport()
        {

            List<RdList> rlist = new List<RdList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var plist = (from aaa in db.Plan_Tabs select aaa).ToList();
            foreach (var p in plist)
            {
                rlist.Add(new RdList { Planname = p.Planname, Term = p.Term, plotsize = p.Plotsize, Amount = p.Amount, Monthly = p.Monthly, Quarterly = p.Quarterly, Halfyearly = p.Halfyearly, Yearly = p.Yearly, EstimatedValue = p.EstimatedValue, Accidental = p.Accidental, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "rdplan.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult FDPlanList()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<FdList> rlist = new List<FdList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plist = (from aaa in db.Fixed_Tabs select aaa).ToList();
                foreach (var p in plist)
                {
                    rlist.Add(new FdList { Planname = p.Planname, Term = p.Term, plotsize = p.Plotsize, Amount = p.Amount, EstimatedValue = p.EstimatedValue, Accidental = p.Accidental, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(rlist);

            }
        }
        public ActionResult PrintFdPlanReport()
        {

            List<FdList> rlist = new List<FdList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var plist = (from aaa in db.Fixed_Tabs select aaa).ToList();
            foreach (var p in plist)
            {
                rlist.Add(new FdList { Planname = p.Planname, Term = p.Term, plotsize = p.Plotsize, Amount = p.Amount, EstimatedValue = p.EstimatedValue, Accidental = p.Accidental, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Fdplan.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult NFPlanList()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<NfpList> rlist = new List<NfpList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plist = (from aaa in db.MIPP_tabs select aaa).ToList();
                foreach (var p in plist)
                {
                    rlist.Add(new NfpList { Planname = p.planname, Term = p.term, Amount = p.amount, EstimatedValue = p.FiveERV, Yearlyamount = p.Yearly, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(rlist);

            }
        }
        public ActionResult PrintNFPlanReport()
        {

            List<NfpList> rlist = new List<NfpList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var plist = (from aaa in db.MIPP_tabs select aaa).ToList();
            foreach (var p in plist)
            {
                rlist.Add(new NfpList { Planname = p.planname, Term = p.term, Amount = p.amount, EstimatedValue = p.FiveERV, Yearlyamount = p.Yearly, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "NFPlan.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult PPlanList()
        {
            List<Pension_Tab> fd = new List<Pension_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<PensionList> rlist = new List<PensionList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plist = (from aaa in db.Pension_Tabs select aaa).ToList();
                foreach (var p in plist)
                {
                    rlist.Add(new PensionList { Planname = p.Planname, Term = p.Term, Amount = p.Amount, Monthly = p.Monthly, Quarterly = p.Quarterly, Halfyearly = p.Halfyearly, Yearly = p.Yearly, EstimatedValue = p.EstimatedValue, Profit = p.Profit, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(rlist);

            }
        }
        public ActionResult PrintPPlanReport()
        {

            List<PensionList> rlist = new List<PensionList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var plist = (from aaa in db.Pension_Tabs select aaa).ToList();
            foreach (var p in plist)
            {
                rlist.Add(new PensionList { Planname = p.Planname, Term = p.Term, Amount = p.Amount, Monthly = p.Monthly, Quarterly = p.Quarterly, Halfyearly = p.Halfyearly, Yearly = p.Yearly, EstimatedValue = p.EstimatedValue, Profit = p.Profit, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PPlan.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult RankList()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<ranList> rlist = new List<ranList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plist = (from aaa in db.Ranktabs select aaa).ToList();
                foreach (var p in plist)
                {
                    rlist.Add(new ranList { rankcode = p.RankCode, rankname = p.RankName, rankshname = p.Rankshrtcut, selfquota = p.Selfquota, teamquota = p.TeamQuota, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(rlist);

            }
        }
        public ActionResult PrintRank()
        {
            List<ranList> rlist = new List<ranList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var plist = (from aaa in db.Ranktabs select aaa).ToList();
            foreach (var p in plist)
            {
                rlist.Add(new ranList { rankcode = p.RankCode, rankname = p.RankName, rankshname = p.Rankshrtcut, selfquota = p.Selfquota, teamquota = p.TeamQuota, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Rank.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult CustumerInstallmentReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<CustomerInstallment> ins = new List<CustomerInstallment>();
                return View(ins);
            }
        }
        [HttpPost]
        public ActionResult CustumerInstallmentReport(string newbondid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int days = 0;
                List<CustomerInstallment> ins = new List<CustomerInstallment>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var bcount = (from vb in db.Installmenttabs where vb.newbondid == newbondid select vb).Count();

                if (bcount > 0)
                {
                    var inst = (from vb in db.Installmenttabs where vb.newbondid == newbondid select vb).OrderBy(x => x.installmentno).ToList();

                    foreach (var item in inst.ToList())
                    {
                        if (item.payamount != 0)
                        {
                            if (item.paymentdate > item.prevexpirydate)
                            {
                                DateTime dt1 = Convert.ToDateTime(item.paymentdate);
                                DateTime dt2 = item.prevexpirydate;
                                TimeSpan ts = dt1.Subtract(dt2);
                                days = ts.Days;
                            }
                            else
                            {
                                days = 0;
                            }
                        }
                        else
                        {
                            days = 0;
                        }

                        var bb = db.Branchtabs.Single(b => b.BranchCode == item.branch);
                        var brow = db.appltabs.Single(po => po.newbondid == item.newbondid);
                        var bro = db.AgentDetails.Single(bo => bo.NewAgentId == brow.newintroducerid);
                        ins.Add(new CustomerInstallment
                        {
                            downpayment = brow.downpayment,
                            latedays = days,
                            amount = item.amount,
                            payamount = item.payamount,
                            installmentno = item.installmentno,
                            year = item.year,
                            paymentdate = Convert.ToDateTime(item.paymentdate),
                            cssno = Convert.ToInt32(item.cssno),
                            receiptno = item.receiptno,
                            reliefrs = item.reliefrs,
                            newbondid = brow.newbondid,
                            cust_name = brow.name,
                            brokercode = brow.newintroducerid,
                            name = bro.name,
                            planname = brow.planname,
                            term_plan = brow.term,
                            mode = brow.mode,
                            branch = brow.branchcode,
                            mobile = brow.mobileno,
                            latefine = item.latefine,
                            age = brow.age,
                            address = brow.addr,
                            nomname = brow.nomineename,
                            nomage = brow.nomage,
                            nomrel = brow.nomrel,
                            bookingamount = brow.bookingamount,
                            totalcon = brow.totalcon,
                            expectedvalue = brow.expectedraisablevalue,
                            expirydate = item.prevexpirydate,
                            enddate = brow.expirydate,
                            Company = cr.CompanyName,
                            Branch_name = User.Identity.Name,
                            caddress = cr.Address,
                            emailid = cr.Emailid,
                            contact = cr.Contact,
                            domainname = cr.HeadOffice,
                            branchname = bb.BranchName,

                            paymethod = item.paymethod,
                            bank = item.bank,
                            Account = item.Account,
                            chequeno = item.chequeno,
                            ACholdername = item.ACholdername,
                            Bbranch = item.Bbranch,
                            IFSCCode = item.IFSCCode,
                            ChequeAmount = item.ChequeAmount,
                            Chequedate = item.Chequedate.ToString(),
                            penality = item.Penality,
                            transactiontype = item.transactiontype


                        });

                        NewBondid = newbondid;

                    }
                }

                else
                {
                    Response.Write("<script>alert('Record Not Found for this Id')</script>");

                }
                return View(ins);
            }
        }
        public ActionResult PrintCustumerInstallment()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int days = 0;
                string date1 = "01/01/0001";
                string date;
                //DateTime date = DateTime.Now.Date;
                List<CustomerInstallment> ins = new List<CustomerInstallment>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var inst = (from vb in db.Installmenttabs where vb.newbondid == NewBondid select vb).ToList();
                var paid_amt = inst.Select(d => d.payamount).DefaultIfEmpty(0).Sum();
                  var brow = db.appltabs.Single(po => po.newbondid == NewBondid);
                  var p1 = db.Plans.FirstOrDefault(d => d.Plancode == brow.projectid);
                  string _property_type = p1 == null ? "Residential" : p1.type.Replace("Commercial", "Residential Cum Commercial");
                foreach (var item in inst.ToList())
                {
                    if (item.payamount == 0)
                    {
                        days = 0;
                        date = date1;
                    }
                    else
                    {
                        if (item.paymentdate > item.prevexpirydate)
                        {
                            DateTime dt1 = Convert.ToDateTime(item.paymentdate);
                            DateTime dt2 = item.prevexpirydate;
                            TimeSpan ts = dt1.Subtract(dt2);
                            days = ts.Days;
                            date = Convert.ToDateTime(item.paymentdate).ToString("dd/MM/yyyy");
                        }
                        else
                        {
                            days = 0;
                            date = Convert.ToDateTime(item.paymentdate).ToString("dd/MM/yyyy");

                        }

                    }
                  
                    var bro = db.AgentDetails.Single(bo => bo.NewAgentId == brow.newintroducerid);
                    var bb = db.Branchtabs.Single(b => b.BranchCode == item.branch);
                    //var totapaidamount = db.Database.SqlQuery<Double>("select isnull(sum(payamount),0) from installmenttab where payamount>0 and newbondid='"+item.newbondid+"' ").SingleOrDefault();
                    //var totalremainamount = brow.bookingamount - totapaidamount;
                    string Paymethod = "";
                    if (item.paymethod == "banktransaction")
                    {
                        Paymethod =  item.transactiontype;
                    }
                    else
                    {
                        Paymethod = item.paymethod;
                    }
                    ins.Add(new CustomerInstallment
                    {
                        downpayment = brow.downpayment,
                        latedays = days,
                        latefine = item.latefine,
                        amount = item.amount,
                        payamount = item.payamount,
                        installmentno = item.installmentno,
                        year = item.year,
                        paydate = date,
                        cssno = Convert.ToInt32(item.cssno),
                        receiptno = item.receiptno,
                        reliefrs = item.reliefrs,
                        newbondid = brow.newbondid,
                        cust_name = brow.name,
                        brokercode = brow.newintroducerid,
                        name = bro.name,
                        planname = _property_type,
                        term_plan = brow.term,
                        mode = brow.paymenttype,
                        branch = brow.branchcode,
                        age = brow.age,
                        address = brow.addr,
                        nomname = brow.nomineename,
                        nomage = brow.nomage,
                        nomrel = brow.nomrel,
                        bookingamount = brow.bookingamount,
                        totalcon = brow.totalcon,
                        expectedvalue = brow.totalcon - paid_amt,
                        expirydate = item.prevexpirydate,
                        enddate = brow.expirydate,
                        Company = cr.CompanyName,
                        Branch_name = User.Identity.Name,
                        caddress = cr.Address,
                        emailid = cr.Emailid,
                        contact = cr.Contact,
                        domainname = cr.HeadOffice,
                        mobile = brow.mobileno,
                        branchname = bb.BranchName,

                        paymethod = Paymethod,
                        bank = item.bank,
                        Account = item.Account,
                        chequeno = item.chequeno,
                        ACholdername = item.ACholdername,
                        Bbranch = item.Bbranch,
                        IFSCCode = item.IFSCCode,
                        ChequeAmount = item.ChequeAmount,
                        Chequedate = item.Chequedate.ToString(),
                        penality = item.Penality,
                        transactiontype = item.transactiontype,
                        plotno = brow.plotno == 0 ? "NA" : brow.plotno.ToString(),
                        block = brow.block,
                        phase = brow.phase,
                        area = brow.nolandunit
                    });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CustomerInstallment.rpt"));
                rd.SetDataSource(ins);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(ins);
            }
        }

        [HttpGet]
        public ActionResult DailyExpense()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<ExpenseList> elist = new List<ExpenseList>();
                return View(elist);
            }

        }
        [HttpPost]
        public ActionResult DailyExpense(DateTime sdate, DateTime edate, string command)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<ExpenseList> elist = new List<ExpenseList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var ins = (from dcl in db.Expenses where dcl.date_time >= sdate && dcl.date_time <= edate select dcl).ToList();
                foreach (var i in ins)
                {
                    elist.Add(new ExpenseList { head = i.head, Remark = i.Remark, amount = i.amount, date_time = i.date_time, sdate = sdate, edate = edate, branchcode = i.branchcode, opid = i.opid, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, paymethod = i.paymethod, trans_id = i.chequeno });
                }
                ab = sdate;
                b = edate;
                return View(elist);
            }

        }
        public ActionResult PrintExpanse()
        {
            List<ExpenseList> elist = new List<ExpenseList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var ins = (from dcl in db.Expenses where dcl.date_time >= ab && dcl.date_time <= b select dcl).ToList();
            foreach (var i in ins)
            {
                elist.Add(new ExpenseList { head = i.head, Remark = i.Remark, amount = i.amount, date_time = i.date_time, sdate = ab, edate = b, branchcode = i.branchcode, opid = i.opid, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, paymethod = i.paymethod, trans_id = i.chequeno });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DailyExpanse.rpt"));
            rd.SetDataSource(elist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult HeadWiseExpense()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<HeadwiseExpense> ins = new List<HeadwiseExpense>();
                return View(ins);
            }

        }
        [HttpPost]
        public ActionResult HeadWiseExpense(DateTime sdate, DateTime edate, string head)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<HeadwiseExpense> ins = new List<HeadwiseExpense>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var headrow = (from dcl in db.Expenses where dcl.date_time >= sdate && dcl.date_time <= edate && dcl.head == head select dcl).ToList();
                foreach (var h in headrow)
                {
                    ins.Add(new HeadwiseExpense { head = head, date = h.date_time, remark = h.Remark, amount = h.amount, sdate = sdate, edate = edate, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice,paymethod=h.paymethod,opid=h.opid });
                }
                shead = head;
                ab = sdate;
                b = edate;
                return View(ins);
            }


        }
        public ActionResult PrintHeadWiseExpense()
        {
            List<HeadwiseExpense> ins = new List<HeadwiseExpense>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var headrow = (from dcl in db.Expenses where dcl.date_time >= ab && dcl.date_time <= b && dcl.head == shead select dcl).ToList();
            foreach (var h in headrow)
            {
                ins.Add(new HeadwiseExpense { head = shead, date = h.date_time, remark = h.Remark, amount = h.amount, sdate = ab, edate = b, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice,paymethod=h.paymethod,opid=h.opid });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "HeadWiseExpense.rpt"));
            rd.SetDataSource(ins);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult AllCashReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult AllDailyCollection()
        {
            List<DailyCollection> dc = new List<DailyCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["date"] = string.Empty;
                ViewData["newagentid"] = string.Empty;
                return View(dc);
            }

        }
        [HttpPost]
        public ActionResult AllDailyCollection(DateTime date, string newagentid, int filter, int year)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["date"] = date;
                ViewData["newagentid"] = newagentid;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                List<DailyCollection> dc = new List<DailyCollection>();
                List<Installment> inl = new List<Installment>();
                List<Memberfees> mfeeslist = new List<Memberfees>();
                Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0, dipositsaving = 0, widthdrawsaving = 0;
                Double formsumB = 0, appsumB = 0, memberfeesB = 0;
                var pst = db.Plans.Single(c => c.Plancode == 4);
                dipositsaving = (from j in db.TransactionTabs where j.pdate == date select j.credit).DefaultIfEmpty(0).Sum();
                widthdrawsaving = (from j in db.TransactionTabs where j.pdate == date select j.debit).DefaultIfEmpty(0).Sum();
                totalvoucher = (from ag in db.Voucher_Reports where ag.date == date select ag.netamount).DefaultIfEmpty(0).Sum();
                totalexp = (from ag in db.Expenses where ag.date_time == date select ag.amount).DefaultIfEmpty(0).Sum();
                appsum = (from b in db.appltabs where b.formdate == date && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
                formsum = (from ag in db.AgentDetails where ag.Doj == date select ag.formfee).DefaultIfEmpty(0).Sum();
                memberfees = (from ag in db.Member_tabs where ag.Cdate == date select ag.Fee).DefaultIfEmpty(0).Sum();
                acformfees = (from ag in db.SavingAccountInfos where ag.Doj == date select ag.formfee).DefaultIfEmpty(0).Sum();
                if (newagentid != null && newagentid != "")
                {
                    switch (filter)
                    {
                        case 1:
                            Double fee = 0;
                            var tbd = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                            var bd = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            appsumB = (from ag in db.appltabs where ag.formdate == date && ag.newintroducerid == newagentid && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.NewAgentId == newagentid select ag.formfee).DefaultIfEmpty(0).Sum();
                            var agent = db.appltabs.Where(s => s.formdate == date && s.newintroducerid == newagentid).ToList();
                            var agent1 = db.AgentDetails.Where(s => s.Doj == date && s.NewAgentId == newagentid).ToList();
                            foreach (var a in agent)
                            {

                                mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                            }
                            foreach (var b in agent1)
                            {
                                mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                            }
                            var result = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                            foreach (var mf in result)
                            {
                                var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                                if (mem1.Cdate == date)
                                {

                                    fee = mem1.Fee + fee;
                                }
                            }
                            memberfeesB = fee;
                            if (bd.Count() > 0)
                            {
                                foreach (var t in bd.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsumB,
                                            formfee = formsumB,
                                            memberfee = memberfeesB,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = User.Identity.Name,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }


                                //------Viewdata for display in page------------------------------------------


                            }
                            else if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = appsum,
                                    formfee = formsum,
                                    totalexp = totalexp,
                                    acformfee = 0,
                                    Voucher = totalvoucher,
                                    branchcode = User.Identity.Name,
                                    memberfee = 0,
                                    dipositsaving = 0,
                                    widthdrawsaving = 0,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;

                        case 2:
                            Double fee1 = 0;
                            var tbd2 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                            appsumB = (from ag in db.appltabs where ag.formdate == date && ag.newintroducerid == newagentid && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.NewAgentId == newagentid select ag.formfee).DefaultIfEmpty(0).Sum();
                            var agentB = db.appltabs.Where(s => s.formdate == date && s.newintroducerid == newagentid && s.status == 1).ToList();
                            var agentB1 = db.AgentDetails.Where(s => s.Doj == date && s.NewAgentId == newagentid).ToList();
                            foreach (var a in agentB)
                            {

                                mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                            }
                            foreach (var b in agentB1)
                            {
                                mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                            }
                            var resultB = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                            foreach (var mf in resultB)
                            {
                                var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                                if (mem1.Cdate == date)
                                {

                                    fee1 = mem1.Fee + fee1;
                                }
                            }
                            memberfeesB = fee1;
                            var bd2 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd2.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd2.Count() > 0)
                            {
                                foreach (var t in bd2.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,
                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsumB,
                                            formfee = formsumB,
                                            memberfee = memberfeesB,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = User.Identity.Name,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;
                        case 3:
                            if (year > 0)
                            {
                                var tbd3 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd3.Contains(p.bondid) select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.year == year && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = User.Identity.Name,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            else
                            {
                                var tbd3 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd3.Contains(p.bondid) select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = User.Identity.Name,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            break;
                        case 4:

                            if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = 0,
                                    formfee = 0,
                                    totalexp = 0,
                                    acformfee = 0,
                                    Voucher = 0,
                                    branchcode = User.Identity.Name,
                                    memberfee = 0,
                                    dipositsaving = 0,
                                    widthdrawsaving = 0,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }

                            break;
                    }
                }
                else if (newagentid == null || newagentid == "")
                {
                    switch (filter)
                    {
                        case 1:
                            appsum = (from b in db.appltabs where b.formdate == date && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsum = (from ag in db.AgentDetails where ag.Doj == date select ag.formfee).DefaultIfEmpty(0).Sum();
                            memberfees = (from ag in db.Member_tabs where ag.Cdate == date select ag.Fee).DefaultIfEmpty(0).Sum();
                            var bd = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 select new { p.bondid }).Distinct();
                            if (bd.Count() > 0)
                            {
                                foreach (var t in bd.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsum,
                                            formfee = formsum,
                                            memberfee = memberfees,
                                            acformfee = acformfees,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = User.Identity.Name,
                                            dipositsaving = dipositsaving,
                                            widthdrawsaving = widthdrawsaving,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }


                                //------Viewdata for display in page------------------------------------------


                            }
                            else if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = appsum,
                                    formfee = formsum,
                                    totalexp = totalexp,
                                    acformfee = acformfees,
                                    Voucher = totalvoucher,
                                    branchcode = User.Identity.Name,
                                    memberfee = 0,
                                    dipositsaving = dipositsaving,
                                    widthdrawsaving = widthdrawsaving,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;

                        case 2:

                            appsum = (from b in db.appltabs where b.formdate == date && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsum = (from ag in db.AgentDetails where ag.Doj == date select ag.formfee).DefaultIfEmpty(0).Sum();
                            memberfees = (from ag in db.Member_tabs where ag.Cdate == date select ag.Fee).DefaultIfEmpty(0).Sum();
                            var bd2 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 select new { p.bondid }).Distinct();
                            if (bd2.Count() > 0)
                            {
                                foreach (var t in bd2.ToList())
                                {
                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);

                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,
                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsum,
                                            formfee = formsum,
                                            memberfee = memberfees,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = User.Identity.Name,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;
                        case 3:
                            if (year > 0)
                            {
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.year == year && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = User.Identity.Name,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            else
                            {

                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = User.Identity.Name,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            break;
                        case 4:

                            if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = 0,
                                    formfee = 0,
                                    totalexp = 0,
                                    acformfee = acformfees,
                                    Voucher = 0,
                                    branchcode = User.Identity.Name,
                                    memberfee = 0,
                                    dipositsaving = dipositsaving,
                                    widthdrawsaving = widthdrawsaving,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }

                            break;
                    }
                }
                ViewData["ondate"] = date;
                pdate = date;
                NewAgentid = newagentid;
                vvyear = year;
                sfilter = filter;
                return View(dc);
            }

        }
        public ActionResult PrintAllDailyCollectionReport()
        {
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            List<DailyCollection> dc = new List<DailyCollection>();
            List<Installment> inl = new List<Installment>();
            List<Memberfees> mfeeslist = new List<Memberfees>();
            Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0, dipositsaving = 0, widthdrawsaving = 0;
            Double formsumB = 0, appsumB = 0, memberfeesB = 0;
            var pst = db.Plans.Single(c => c.Plancode == 4);

            dipositsaving = (from j in db.TransactionTabs where j.pdate == pdate select j.credit).DefaultIfEmpty(0).Sum();
            widthdrawsaving = (from j in db.TransactionTabs where j.pdate == pdate select j.debit).DefaultIfEmpty(0).Sum();
            totalvoucher = (from ag in db.Voucher_Reports where ag.date == pdate select ag.netamount).DefaultIfEmpty(0).Sum();
            totalexp = (from ag in db.Expenses where ag.date_time == pdate select ag.amount).DefaultIfEmpty(0).Sum();
            appsum = (from b in db.appltabs where b.formdate == pdate && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
            formsum = (from ag in db.AgentDetails where ag.Doj == pdate select ag.formfee).DefaultIfEmpty(0).Sum();
            memberfees = (from ag in db.Member_tabs where ag.Cdate == pdate select ag.Fee).DefaultIfEmpty(0).Sum();
            acformfees = (from ag in db.SavingAccountInfos where ag.Doj == pdate select ag.formfee).DefaultIfEmpty(0).Sum();

            if (NewAgentid != null && NewAgentid != "")
            {
                switch (sfilter)
                {
                    case 1:
                        Double fee2 = 0;
                        var tbd = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                        appsumB = (from ag in db.appltabs where ag.formdate == pdate && ag.newintroducerid == NewAgentid && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsumB = (from ag in db.AgentDetails where ag.Doj == pdate && ag.NewAgentId == NewAgentid select ag.formfee).DefaultIfEmpty(0).Sum();
                        var agent = db.appltabs.Where(s => s.formdate == pdate && s.newintroducerid == NewAgentid && s.status == 1).ToList();
                        var agent1 = db.AgentDetails.Where(s => s.Doj == pdate && s.NewAgentId == NewAgentid).ToList();
                        foreach (var a in agent)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                        }
                        foreach (var b in agent1)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                        }
                        var result = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                        foreach (var mf in result)
                        {
                            var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                            if (mem1.Cdate == pdate)
                            {
                                fee2 = mem1.Fee + fee2;
                            }
                        }
                        memberfeesB = fee2;
                        var bd = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                        if (bd.Count() > 0)
                        {
                            foreach (var t in bd.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,

                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            //-------Insertion in Daily Collection Temp Tab--------------------------
                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsumB,
                                        formfee = formsumB,
                                        memberfee = memberfeesB,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = User.Identity.Name,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }



                        }
                        else if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = appsum,
                                formfee = formsum,
                                totalexp = totalexp,
                                acformfee = 0,
                                Voucher = totalvoucher,
                                branchcode = User.Identity.Name,
                                memberfee = 0,
                                dipositsaving = 0,
                                widthdrawsaving = 0,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;

                    case 2:
                        Double fee1 = 0;
                        var tbd2 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                        appsumB = (from ag in db.appltabs where ag.formdate == pdate && ag.newintroducerid == NewAgentid && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsumB = (from ag in db.AgentDetails where ag.Doj == pdate && ag.NewAgentId == NewAgentid select ag.formfee).DefaultIfEmpty(0).Sum();
                        var agentB = db.appltabs.Where(s => s.formdate == pdate && s.newintroducerid == NewAgentid && s.status == 1).ToList();
                        var agentB1 = db.AgentDetails.Where(s => s.Doj == pdate && s.NewAgentId == NewAgentid).ToList();
                        foreach (var a in agentB)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                        }
                        foreach (var b in agentB1)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                        }
                        var resultB = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                        foreach (var mf in resultB)
                        {
                            var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                            if (mem1.Cdate == pdate)
                            {

                                fee1 = mem1.Fee + fee1;
                            }
                        }
                        memberfeesB = fee1;
                        var bd2 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd2.Contains(p.bondid) select new { p.bondid }).Distinct();
                        if (bd2.Count() > 0)
                        {
                            foreach (var t in bd2.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);

                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,
                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsumB,
                                        formfee = formsumB,
                                        memberfee = memberfeesB,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = User.Identity.Name,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }

                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;
                    case 3:
                        if (vvyear > 0)
                        {
                            var tbd3 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd3.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.year == vvyear && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = User.Identity.Name,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        else
                        {
                            var tbd3 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd3.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = User.Identity.Name,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        break;
                    case 4:

                        if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = 0,
                                formfee = 0,
                                totalexp = 0,
                                acformfee = 0,
                                Voucher = 0,
                                branchcode = User.Identity.Name,
                                memberfee = 0,
                                dipositsaving = 0,
                                widthdrawsaving = 0,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }

                        break;
                }
            }
            else if (NewAgentid == null || NewAgentid == "")
            {
                switch (sfilter)
                {
                    case 1:
                        appsum = (from b in db.appltabs where b.formdate == pdate && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsum = (from ag in db.AgentDetails where ag.Doj == pdate select ag.formfee).DefaultIfEmpty(0).Sum();
                        memberfees = (from ag in db.Member_tabs where ag.Cdate == pdate select ag.Fee).DefaultIfEmpty(0).Sum();
                        var bd = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 select new { p.bondid }).Distinct();
                        if (bd.Count() > 0)
                        {
                            foreach (var t in bd.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,

                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            //-------Insertion in Daily Collection Temp Tab--------------------------
                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsum,
                                        formfee = formsum,
                                        memberfee = memberfees,
                                        acformfee = acformfees,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = User.Identity.Name,
                                        dipositsaving = dipositsaving,
                                        widthdrawsaving = widthdrawsaving,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }


                        }
                        else if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = appsum,
                                formfee = formsum,
                                totalexp = totalexp,
                                acformfee = acformfees,
                                Voucher = totalvoucher,
                                branchcode = User.Identity.Name,
                                memberfee = 0,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;

                    case 2:

                        appsum = (from b in db.appltabs where b.formdate == pdate && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsum = (from ag in db.AgentDetails where ag.Doj == pdate select ag.formfee).DefaultIfEmpty(0).Sum();
                        memberfees = (from ag in db.Member_tabs where ag.Cdate == pdate select ag.Fee).DefaultIfEmpty(0).Sum();
                        var bd2 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 select new { p.bondid }).Distinct();
                        if (bd2.Count() > 0)
                        {
                            foreach (var t in bd2.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,
                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsum,
                                        formfee = formsum,
                                        memberfee = memberfees,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = User.Identity.Name,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }

                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;
                    case 3:
                        if (vvyear > 0)
                        {
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.year == vvyear && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = User.Identity.Name,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        else
                        {

                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = User.Identity.Name,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        break;
                    case 4:

                        if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = 0,
                                formfee = 0,
                                totalexp = 0,
                                acformfee = acformfees,
                                Voucher = 0,
                                branchcode = User.Identity.Name,
                                memberfee = 0,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }

                        break;
                }
            }
            ViewData["ondate"] = pdate;

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "OperatorDailycollection.rpt"));
            rd.SetDataSource(dc);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View(dc);

        }

        [HttpGet]
        public ActionResult CompleteDailyCollection()
        {
            List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View(mdc);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }

        }
        [HttpPost]
        public ActionResult CompleteDailyCollection(DateTime sdate, DateTime edate, string type)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
                List<Installment> inl = new List<Installment>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var sn = 1;
                Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0;
                var pst = db.Plans.Single(c => c.Plancode == 4);
                var dipositsaving = (from j in db.TransactionTabs where j.pdate >= sdate && j.pdate <= edate select j.credit).DefaultIfEmpty(0).Sum();
                var widthdrawsaving = (from j in db.TransactionTabs where j.pdate >= sdate && j.pdate <= edate select j.debit).DefaultIfEmpty(0).Sum();
                totalvoucher = (from ag in db.Voucher_Reports where ag.date >= sdate && ag.date <= edate select ag.netamount).DefaultIfEmpty(0).Sum();
                totalexp = (from ag in db.Expenses where ag.date_time >= sdate && ag.date_time <= edate select ag.amount).DefaultIfEmpty(0).Sum();
                appsum = (from b in db.appltabs where b.formdate >= sdate && b.formdate <= edate && b.status == 1 && b.paymethod == type select b.applicationcharge).DefaultIfEmpty(0).Sum();
                formsum = (from ag in db.AgentDetails where ag.Doj >= sdate && ag.Doj <= edate select ag.formfee).DefaultIfEmpty(0).Sum();
                memberfees = (from ag in db.Member_tabs where ag.Cdate >= sdate && ag.Cdate <= edate select ag.Fee).DefaultIfEmpty(0).Sum();
                acformfees = (from ag in db.SavingAccountInfos where ag.Doj >= sdate && ag.Doj <= edate select ag.formfee).DefaultIfEmpty(0).Sum();

                var bd = (from p in db.Installmenttabs where p.paymethod == type && p.paymentdate >= sdate && p.paymentdate <= edate && p.paymentno != 0 && tbd.Contains(p.bondid) select new { p.bondid }).Distinct();

                if (bd.Count() > 0)
                {
                    foreach (var t in bd.ToList())
                    {
                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                        var irow = (from im in db.Installmenttabs where im.paymethod == type && im.bondid == t.bondid && im.paymentdate >= sdate && im.paymentdate <= edate && im.payamount != 0 && im.type != "Adjustment" select im).ToList();
                        foreach (var cl in irow.ToList())
                        {
                            var finalamount = 0.0;
                            if (app.plantype == pst.shortcutname)
                            {
                                finalamount = app.totalcon;
                            }
                            else
                            {
                                finalamount = cl.payamount;
                            }
                            inl.Add(new Installment
                            {
                                paymentdate = Convert.ToDateTime(cl.paymentdate),
                                rcptno = cl.receiptno,
                                amount = finalamount,
                                latefee = cl.latefine,
                                relief = cl.reliefrs,
                                cssno = Convert.ToInt32(cl.cssno),
                                year = cl.year,
                                installno = cl.installmentno,
                                Account_Code = app.newbondid,
                                Name = app.name,
                                Introducer_Code = agt.NewAgentId,
                                Rank = agt.RankName,
                                Planname = app.planname,
                                Plantype = app.plantype,
                                Term = app.term,

                                paymethod = cl.paymethod,
                                bank = cl.bank,
                                Bbranch = cl.Bbranch,
                                Account = cl.Account,
                                ACholdername = cl.ACholdername,
                                IFSCCode = cl.IFSCCode,
                                ChequeAmount = cl.ChequeAmount,
                                chequeno = cl.chequeno,
                                Chequedate = (cl.Chequedate).ToString(),
                                transactiontype = cl.transactiontype

                            });
                        }

                    }

                    foreach (var i in inl.ToList())
                    {

                        string renew;
                        if (i.installno == 1)
                        {
                            renew = "New";
                        }
                        else
                        {
                            renew = "Renew";
                        }
                        if (renew == "Renew" && i.Plantype == pst.shortcutname)
                        {
                            ///-----------PPS Plan Amount Not Add 
                        }
                        else
                        {
                            mdc.Add(new MergeDailyCollection
                            {
                                trno = "tr" + sn,
                                no = "D" + sn,
                                cssno = i.cssno,
                                date = i.paymentdate,
                                newbondid = i.Account_Code,
                                name = i.Name,
                                rankname = i.Rank,
                                newintroducerid = i.Introducer_Code,
                                amount = i.amount,
                                latefine = i.latefee,
                                rebate = i.relief,
                                receiptno = i.rcptno,
                                planname = i.Planname,
                                term = i.Term,
                                newrenew = renew,
                                appcharge = appsum,
                                formfee = formsum,
                                memberfee = memberfees,
                                acformfee = acformfees,
                                totalexp = totalexp,
                                voucher = totalvoucher,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                branchname = User.Identity.Name,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice,
                                sdate = sdate,
                                edate = edate,

                                paymethod = i.paymethod,
                                bank = i.bank,
                                Bbranch = i.Bbranch,
                                Account = i.Account,
                                ACholdername = i.ACholdername,
                                IFSCCode = i.IFSCCode,
                                ChequeAmount = i.ChequeAmount,
                                chequeno = i.chequeno,
                                Chequedate = i.Chequedate,
                                transactiontype = i.transactiontype

                            });
                        }
                        sn = sn + 1;

                    }

                    //------Viewdata for display in page------------------------------------------

                    stdate = sdate;
                    enddate = edate;
                    typ = type;
                }
                else
                {
                    Response.Write("<script>alert('There is no collection in this date')</script>");
                }
                return View(mdc);
            }
        }
        public ActionResult PrintCompleteDailyCollection()
        {
            List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
            List<Installment> inl = new List<Installment>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
            var sn = 1;
            Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0;
            var pst = db.Plans.Single(c => c.Plancode == 4);
            var dipositsaving = (from j in db.TransactionTabs where j.pdate >= stdate && j.pdate <= enddate select j.credit).DefaultIfEmpty(0).Sum();
            var widthdrawsaving = (from j in db.TransactionTabs where j.pdate >= stdate && j.pdate <= enddate select j.debit).DefaultIfEmpty(0).Sum();
            totalvoucher = (from ag in db.Voucher_Reports where ag.date >= stdate && ag.date <= enddate select ag.netamount).DefaultIfEmpty(0).Sum();
            totalexp = (from ag in db.Expenses where ag.date_time >= stdate && ag.date_time <= enddate select ag.amount).DefaultIfEmpty(0).Sum();
            appsum = (from b in db.appltabs where b.formdate >= stdate && b.formdate <= enddate && b.status == 1 && b.paymethod == typ select b.applicationcharge).DefaultIfEmpty(0).Sum();
            formsum = (from ag in db.AgentDetails where ag.Doj >= stdate && ag.Doj <= enddate select ag.formfee).DefaultIfEmpty(0).Sum();
            memberfees = (from ag in db.Member_tabs where ag.Cdate >= stdate && ag.Cdate <= enddate select ag.Fee).DefaultIfEmpty(0).Sum();
            acformfees = (from ag in db.SavingAccountInfos where ag.Doj >= stdate && ag.Doj <= enddate select ag.formfee).DefaultIfEmpty(0).Sum();

            var bd = (from p in db.Installmenttabs where p.paymethod == typ && p.paymentdate >= stdate && p.paymentdate <= enddate && p.paymentno != 0 && tbd.Contains(p.bondid) select new { p.bondid }).Distinct();

            if (bd.Count() > 0)
            {
                foreach (var t in bd.ToList())
                {
                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                    var irow = (from im in db.Installmenttabs where im.paymethod == typ && im.bondid == t.bondid && im.paymentdate >= stdate && im.paymentdate <= enddate && im.payamount != 0 && im.type != "Adjustment" select im).ToList();
                    foreach (var cl in irow.ToList())
                    {
                        var finalamount = 0.0;
                        if (app.plantype == pst.shortcutname)
                        {
                            finalamount = app.totalcon;
                        }
                        else
                        {
                            finalamount = cl.payamount;
                        }
                        inl.Add(new Installment
                        {
                            paymentdate = Convert.ToDateTime(cl.paymentdate),
                            rcptno = cl.receiptno,
                            amount = finalamount,
                            latefee = cl.latefine,
                            relief = cl.reliefrs,
                            cssno = Convert.ToInt32(cl.cssno),
                            year = cl.year,
                            installno = cl.installmentno,
                            Account_Code = app.newbondid,
                            Name = app.name,
                            Introducer_Code = agt.NewAgentId,
                            Rank = agt.RankName,
                            Planname = app.planname,
                            Plantype = app.plantype,
                            Term = app.term,

                            paymethod = cl.paymethod,
                            bank = cl.bank,
                            Bbranch = cl.Bbranch,
                            Account = cl.Account,
                            ACholdername = cl.ACholdername,
                            IFSCCode = cl.IFSCCode,
                            ChequeAmount = cl.ChequeAmount,
                            chequeno = cl.chequeno,
                            Chequedate = (cl.Chequedate).ToString(),
                            transactiontype = cl.transactiontype

                        });
                    }

                }

                foreach (var i in inl.ToList())
                {

                    string renew;
                    if (i.installno == 1)
                    {
                        renew = "New";
                    }
                    else
                    {
                        renew = "Renew";
                    }
                    if (renew == "Renew" && i.Plantype == pst.shortcutname)
                    {
                        ///-----------PPS Plan Amount Not Add 
                    }
                    else
                    {
                        mdc.Add(new MergeDailyCollection
                        {
                            no = "D" + sn,
                            cssno = i.cssno,
                            date = i.paymentdate,
                            newbondid = i.Account_Code,
                            name = i.Name,
                            rankname = i.Rank,
                            newintroducerid = i.Introducer_Code,
                            amount = i.amount,
                            latefine = i.latefee,
                            rebate = i.relief,
                            receiptno = i.rcptno,
                            planname = i.Planname,
                            term = i.Term,
                            newrenew = renew,
                            appcharge = appsum,
                            formfee = formsum,
                            memberfee = memberfees,
                            acformfee = acformfees,
                            totalexp = totalexp,
                            voucher = totalvoucher,
                            dipositsaving = dipositsaving,
                            widthdrawsaving = widthdrawsaving,
                            branchname = User.Identity.Name,
                            companyname = cr.CompanyName,
                            address = cr.Address,
                            emailid = cr.Emailid,
                            contact = cr.Contact,
                            domainname = cr.HeadOffice,
                            sdate = stdate,
                            edate = enddate,

                            paymethod = i.paymethod,
                            bank = i.bank,
                            Bbranch = i.Bbranch,
                            Account = i.Account,
                            ACholdername = i.ACholdername,
                            IFSCCode = i.IFSCCode,
                            ChequeAmount = i.ChequeAmount,
                            chequeno = i.chequeno,
                            Chequedate = i.Chequedate,
                            newagenid = i.transactiontype
                        });
                    }
                    sn = sn + 1;

                }

                //------Viewdata for display in page------------------------------------------


            }
            else
            {
                Response.Write("<script>alert('There is no collection in this date')</script>");
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CDailycollection.rpt"));
            rd.SetDataSource(mdc);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                string dt = pdate.ToShortDateString();

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult DateWiseCollection()
        {
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["sdate"] = string.Empty;
                ViewData["edate"] = string.Empty;
                return View(dwclist);
            }
        }
        [HttpPost]
        public ActionResult DateWiseCollection(DateTime sdate, DateTime edate)
        {
            List<Memberfees> mfeeslist = new List<Memberfees>();
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;

                DateTime fsdate = sdate;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, expense = 0, totalvoucher = 0, agfee = 0, appfee = 0, memberfee = 0, accfee = 0, deposit = 0, widthdraw = 0, pps = 0, late = 0, rebate = 0;
                while (sdate <= edate)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno == 1 && o.mode != "Single" && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno == 1 && o.mode == "Single" && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 1 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 2 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 3 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 4 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 5 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 6 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year >= 7 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    late = (from o in db.Installmenttabs where o.paymentdate == sdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.latefine).DefaultIfEmpty(0).Sum();
                    rebate = (from o in db.Installmenttabs where o.paymentdate == sdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.reliefrs).DefaultIfEmpty(0).Sum();

                    deposit = (from o in db.appltabs where o.pdate == sdate && tbd.Contains(o.bondid) select o.downpayment).DefaultIfEmpty(0).Sum();
                    memberfee = (from ag in db.Member_tabs where ag.Cdate == sdate select ag.Fee).DefaultIfEmpty(0).Sum();
                    appfee = (from ag in db.appltabs where ag.formdate == sdate && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                    agfee = (from ag in db.AgentDetails where ag.Doj == sdate select ag.formfee).DefaultIfEmpty(0).Sum();
                    accfee = (from ag in db.SavingAccountInfos where ag.Doj == sdate select ag.formfee).DefaultIfEmpty(0).Sum();
                    widthdraw = (from o in db.spotcommission_tabs where o.date == sdate select o.commission).DefaultIfEmpty(0).Sum();
                    totalvoucher = (from o in db.Voucher_Reports where o.date == sdate select o.netamount).DefaultIfEmpty(0).Sum();
                    expense = (from ag in db.Expenses where ag.date_time == sdate select ag.amount).DefaultIfEmpty(0).Sum();

                    if (tsis + tMISFresh + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a + expense + totalvoucher + agfee + appfee + memberfee + accfee + deposit + widthdraw + pps + late + rebate > 0)
                    {
                        dwclist.Add(new OpDatewisecollection { date = sdate, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, Expense = expense, Voucher = totalvoucher, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, sdate = fsdate, edate = edate, Appcharge = appfee, Agencyfee = agfee, Accountfee = accfee, Memberfee = memberfee, deposit = deposit, widthdraw = widthdraw, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, pps = pps, late = late, releaf = rebate });
                    }

                    sdate = sdate.AddDays(1);
                }

                stdate = fsdate;
                enddate = edate;
            }
            return View(dwclist);

        }
        public ActionResult PrintDatewiseCollection()
        {
            List<Memberfees> mfeeslist = new List<Memberfees>();
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime fstdate = stdate;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, expense = 0, totalvoucher = 0, agfee = 0, appfee = 0, memberfee = 0, accfee = 0, deposit = 0, widthdraw = 0, pps = 0, late = 0, rebate = 0;

                while (stdate <= enddate)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno == 1 && o.mode != "Single" && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno == 1 && o.mode == "Single" && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 1 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 2 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 3 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 4 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 5 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 6 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year >= 7 && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    late = (from o in db.Installmenttabs where o.paymentdate == stdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.latefine).DefaultIfEmpty(0).Sum();
                    rebate = (from o in db.Installmenttabs where o.paymentdate == stdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && tbd.Contains(o.bondid) select o.reliefrs).DefaultIfEmpty(0).Sum();

                    deposit = (from o in db.appltabs where o.pdate == stdate && tbd.Contains(o.bondid) select o.downpayment).DefaultIfEmpty(0).Sum();
                    memberfee = (from ag in db.Member_tabs where ag.Cdate == stdate select ag.Fee).DefaultIfEmpty(0).Sum();
                    appfee = (from ag in db.appltabs where ag.formdate == stdate && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                    agfee = (from ag in db.AgentDetails where ag.Doj == stdate select ag.formfee).DefaultIfEmpty(0).Sum();
                    accfee = (from ag in db.SavingAccountInfos where ag.Doj == stdate select ag.formfee).DefaultIfEmpty(0).Sum();
                    widthdraw = (from o in db.spotcommission_tabs where o.date == stdate select o.commission).DefaultIfEmpty(0).Sum();
                    totalvoucher = (from o in db.Voucher_Reports where o.date == stdate select o.netamount).DefaultIfEmpty(0).Sum();
                    expense = (from ag in db.Expenses where ag.date_time == stdate select ag.amount).DefaultIfEmpty(0).Sum();

                    if (tsis + tMISFresh + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a + expense + totalvoucher + agfee + appfee + memberfee + accfee + deposit + widthdraw + pps + late + rebate > 0)
                    {
                        dwclist.Add(new OpDatewisecollection { date = stdate, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, Expense = expense, Voucher = totalvoucher, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, sdate = fstdate, edate = enddate, Appcharge = appfee, Agencyfee = agfee, Accountfee = accfee, Memberfee = memberfee, deposit = deposit, widthdraw = widthdraw, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, pps = pps, late = late, releaf = rebate });
                    }

                    stdate = stdate.AddDays(1);
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "DatewiseCollection.rpt"));
                rd.SetDataSource(dwclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();
                    return new FileStreamResult(stream, "application/pdf");

                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult DateWiseChequeCollection()
        {
            List<Chequecollection> model = new List<Chequecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["sdate"] = string.Empty;
                ViewData["edate"] = string.Empty;
                return View(model);
            }
        }
        [HttpPost]
        public ActionResult DateWiseChequeCollection(DateTime sdate, DateTime edate)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
               
                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;
                List<Chequecollection> model = new List<Chequecollection>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {

                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("chequecollpro", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sdate", sdate);
                    cmd.Parameters.AddWithValue("@edate", edate);
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);


                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {
                        var rs = new Chequecollection();
                        rs.newbondid = sdr["newbondid"].ToString();
                        rs.name = sdr["name"].ToString();
                        rs.bank = sdr["bank"].ToString();
                        rs.chequeno = sdr["chequeno"].ToString();
                        rs.pdate = Convert.ToDateTime(sdr["paydate"]);
                        rs.amount = Convert.ToDouble(sdr["amount"]);
                        rs.sdate = Convert.ToDateTime(sdr["sdate"]);
                        rs.edate = Convert.ToDateTime(sdr["edate"]);
                        rs.opid = sdr["opid"].ToString();
                        model.Add(rs);
                    }


                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "chequecoll.rpt"));
                    rd.SetDataSource(model);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();
                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }

                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    con.Close();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult DateWiseChequeClearCollection()
        {
            List<Chequecollection> model = new List<Chequecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["sdate"] = string.Empty;
                ViewData["edate"] = string.Empty;
                return View(model);
            }
        }
        [HttpPost]
        public ActionResult DateWiseChequeClearCollection(DateTime sdate, DateTime edate)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;
                List<Chequecollection> model = new List<Chequecollection>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {

                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("chequeclearcollpro", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sdate", sdate);
                    cmd.Parameters.AddWithValue("@edate", edate);
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);


                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {
                        var rs = new Chequecollection();
                        rs.newbondid = sdr["newbondid"].ToString();
                        rs.name = sdr["name"].ToString();
                        rs.bank = sdr["bank"].ToString();
                        rs.chequeno = sdr["chequeno"].ToString();
                        rs.pdate = Convert.ToDateTime(sdr["paydate"]);
                        rs.amount = Convert.ToDouble(sdr["amount"]);
                        rs.sdate = Convert.ToDateTime(sdr["sdate"]);
                        rs.edate = Convert.ToDateTime(sdr["edate"]);
                        rs.opid = sdr["opid"].ToString();
                        model.Add(rs);
                    }


                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "chequeclearcoll.rpt"));
                    rd.SetDataSource(model);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();
                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }

                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    con.Close();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult FundMobilisation()
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(pwclist);
            }
        }
        [HttpPost]
        public ActionResult FundMobilisation(DateTime sdate, DateTime edate)
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);

                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= sdate && pl.paymentdate <= edate && tbd.Contains(pl.bondid) select new { pl.planname }).Distinct();
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, total = 0, tpps = 0, tnfp = 0;
                foreach (var plan in planlist)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tnfp = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "NFS" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode == "Single" && o.plantype == "FD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tpps = (from o in db.appltabs where o.formdate >= sdate && o.formdate <= edate && o.planname == plan.planname && o.mode != "Single" && o.plantype == "PPS" && o.status == 1 select o.totalcon).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 1 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 2 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 3 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 4 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 5 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 6 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year >= 7 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    total = tMISFresh + tsis + tpps + tnfp + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a;
                    if (total > 0)
                    {
                        pwclist.Add(new FundMobilization { planname = plan.planname, tPPSFresh = tpps, tNFPFresh = tnfp, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, total = total, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                stdate = sdate;
                enddate = edate;
                return View(pwclist.OrderByDescending(p => p.total));
            }
        }
        public ActionResult PrintFundMobilisation()
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);

                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= stdate && pl.paymentdate <= enddate select new { pl.planname }).Distinct();
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, total = 0, tpps = 0, tnfp = 0;
                foreach (var plan in planlist)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tnfp = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "NFS" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode == "Single" && o.plantype == "FD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tpps = (from o in db.appltabs where o.formdate >= stdate && o.formdate <= enddate && o.planname == plan.planname && o.mode != "Single" && o.plantype == "PPS" && o.status == 1 select o.totalcon).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 1 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 2 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 3 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 4 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 5 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 6 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year >= 7 && o.plantype == "RD" && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    total = tMISFresh + tsis + tpps + tnfp + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a;
                    if (total > 0)
                    {
                        pwclist.Add(new FundMobilization { planname = plan.planname, tPPSFresh = tpps, tNFPFresh = tnfp, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, total = total, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "FundMobilisation.rpt"));
                rd.SetDataSource(pwclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult AllClosingBalance()
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(cbrlist);
            }
        }
        [HttpPost]
        public ActionResult AllClosingBalance(DateTime sdate, DateTime edate)
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);

                Double totalsalary = 0;
                Double ytotalsalary = 0;
                var plan1 = db.Plans.Single(p1 => p1.Plancode == 1);
                var plan2 = db.Plans.Single(p2 => p2.Plancode == 2);
                var plan3 = db.Plans.Single(p3 => p3.Plancode == 3);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                /////Yesterday's Collection /////
                var todayfdcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.mode == "Single" && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todayRdcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.mode != "Single" && df.type != "Adjustment" && df.installmentno == 1 && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var bookingy = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.bookingamount).DefaultIfEmpty(0).Sum();
                var advancey = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.downpayment).DefaultIfEmpty(0).Sum();
                var todayNewBondcoll = todayfdcoll + todayRdcoll;
                var todayRenewalBondcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.installmentno != 1 && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

                var yeslatefee = (from df in db.Installmenttabs where df.paymentdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
                var yesreleif = (from df in db.Installmenttabs where df.paymentdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
                var ylatefee = yeslatefee - yesreleif;

                var bformfeey = (from df in db.AgentDetails where df.Doj < sdate select df.formfee).DefaultIfEmpty(0).Sum();
                var cformfeey = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
                var mformfeey = (from df in db.Member_tabs where df.Cdate < sdate select df.Fee).DefaultIfEmpty(0).Sum();
                var acformfeey = (from df in db.SavingAccountInfos where df.Doj < sdate select df.formfee).DefaultIfEmpty(0).Sum();
                var deposity = (from df in db.TransactionTabs where df.pdate < sdate select df.credit).DefaultIfEmpty(0).Sum();
                var intotaly = Math.Round((todayRenewalBondcoll + bformfeey + cformfeey + mformfeey + acformfeey + deposity + ylatefee + bookingy + advancey), 2);

                var spotcommy = (from o in db.spotcommission_tabs where o.date < sdate select o.commission).DefaultIfEmpty(0).Sum();
                var withdrawy = (from df in db.TransactionTabs where df.pdate < sdate select df.debit).DefaultIfEmpty(0).Sum();
                var expansey = (from df in db.Expenses where df.date_time < sdate select df.amount).DefaultIfEmpty(0).Sum();
                var todayVouchercoll = (from df in db.Voucher_Reports where df.date < sdate select df.netamount).DefaultIfEmpty(0).Sum();
                var AdvPayment = (from df in db.AdvBrokerPaymentTabs where df.date < sdate select df.amount).DefaultIfEmpty(0).Sum();
                var mat = (from df in db.MaturityTabs where df.maturitydate < sdate select df.maturityamount).DefaultIfEmpty(0).Sum();
                var emplisty = (from se in db.Salary_ems where se.date < sdate select se).ToList();
                foreach (var el in emplisty)
                {
                    var ysalary = (from df in db.Salary_ems where df.date < sdate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                    ytotalsalary = totalsalary + ysalary;
                }
                var extotaly = Math.Round((expansey + todayVouchercoll + ytotalsalary + withdrawy + AdvPayment + mat + spotcommy), 2);
                var grandtotaly = intotaly - extotaly;

                /////Today's Collection /////

                var todayfdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.mode == "Single" && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todayRdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.mode != "Single" && df.installmentno == 1 && df.type != "Adjustment" && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todaybooking = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.bookingamount).DefaultIfEmpty(0).Sum();
                var todayadvance = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.downpayment).DefaultIfEmpty(0).Sum();
                var todayNewBondcoll1 = todayfdcoll1 + todayRdcoll1;
                var todayRenewalBondcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.installmentno != 1 && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

                var todaylatefee = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
                var todayreleif = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
                var latefee = todaylatefee - todayreleif;

                var bformfee = (from df in db.AgentDetails where df.Doj >= sdate && df.Doj <= edate select df.formfee).DefaultIfEmpty(0).Sum();
                var cformfee = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
                var mformfee = (from df in db.Member_tabs where df.Cdate >= sdate && df.Cdate <= edate select df.Fee).DefaultIfEmpty(0).Sum();
                var acformfee = (from df in db.SavingAccountInfos where df.Doj >= sdate && df.Doj <= edate select df.formfee).DefaultIfEmpty(0).Sum();
                var deposit = (from df in db.TransactionTabs where df.pdate >= sdate && df.pdate <= edate select df.credit).DefaultIfEmpty(0).Sum();
                var intotal = Math.Round((todayRenewalBondcoll1 + bformfee + cformfee + mformfee + acformfee + deposit + latefee + todaybooking + todayadvance), 2);

                var spotcomm = (from o in db.spotcommission_tabs where o.date >= sdate && o.date <= edate select o.commission).DefaultIfEmpty(0).Sum();
                var withdraw = (from df in db.TransactionTabs where df.pdate >= sdate && df.pdate <= edate select df.debit).DefaultIfEmpty(0).Sum();
                var expanse = (from df in db.Expenses where df.date_time >= sdate && df.date_time <= edate select df.amount).DefaultIfEmpty(0).Sum();
                var todayVouchercoll1 = (from df in db.Voucher_Reports where df.date >= sdate && df.date <= edate select df.netamount).DefaultIfEmpty(0).Sum();
                var AdvPayment1 = (from df in db.AdvBrokerPaymentTabs where df.date >= sdate && df.date <= edate select df.amount).DefaultIfEmpty(0).Sum();
                var mat1 = (from df in db.MaturityTabs where df.maturitydate >= sdate && df.maturitydate <= edate select df.maturityamount).DefaultIfEmpty(0).Sum();
                var emplist = (from se in db.Salary_ems where se.date >= sdate && se.date <= edate select se).ToList();
                foreach (var el in emplist)
                {
                    var salary = (from df in db.Salary_ems where df.date >= sdate && df.date <= edate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                    totalsalary = totalsalary + salary;
                }

                var extotal = Math.Round((expanse + todayVouchercoll1 + totalsalary + withdraw + AdvPayment1 + mat1 + spotcomm), 2);
                var grandtotal = intotal - extotal;

                cbrlist.Add(new BalanceReport { bookingamount = todaybooking, downpayment = todayadvance, maturity = mat1, pps = 0, fpo = todayRdcoll1, dpo = todayfdcoll1, advpayment = AdvPayment1, newbond = todayNewBondcoll1, renewel = todayRenewalBondcoll1, latefee = latefee, bformfee = bformfee, cformfee = cformfee, mformfee = mformfee, acformfee = acformfee, deposit = deposit, withdraw = withdraw, intotal = intotal, expence = expanse, spotcomm = spotcomm, voucher = todayVouchercoll1, salary = totalsalary, extotal = extotal, grandtotal = grandtotal, branchname = User.Identity.Name, companyname = cr.CompanyName, openingbalance = grandtotaly, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                stdate = sdate;
                enddate = edate;
                return View(cbrlist);
            }
        }
        public ActionResult PrintClosingBalance()
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();

            var cr = db.CompanyInfos.Single(c => c.Id == 1);

            Double totalsalary = 0;
            Double ytotalsalary = 0;
            var plan1 = db.Plans.Single(p1 => p1.Plancode == 1);
            var plan2 = db.Plans.Single(p2 => p2.Plancode == 2);
            var plan3 = db.Plans.Single(p3 => p3.Plancode == 3);
            var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
            /////Yesterday's Collection /////
            var todayfdcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.mode == "Single" && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todayRdcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.mode != "Single" && df.type != "Adjustment" && df.installmentno == 1 && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var bookingy = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.bookingamount).DefaultIfEmpty(0).Sum();
            var advancey = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.downpayment).DefaultIfEmpty(0).Sum();
            var todayNewBondcoll = todayfdcoll + todayRdcoll;
            var todayRenewalBondcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.installmentno != 1 && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

            var yeslatefee = (from df in db.Installmenttabs where df.paymentdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
            var yesreleif = (from df in db.Installmenttabs where df.paymentdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
            var ylatefee = yeslatefee - yesreleif;

            var bformfeey = (from df in db.AgentDetails where df.Doj < stdate select df.formfee).DefaultIfEmpty(0).Sum();
            var cformfeey = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
            var mformfeey = (from df in db.Member_tabs where df.Cdate < stdate select df.Fee).DefaultIfEmpty(0).Sum();
            var acformfeey = (from df in db.SavingAccountInfos where df.Doj < stdate select df.formfee).DefaultIfEmpty(0).Sum();
            var deposity = (from df in db.TransactionTabs where df.pdate < stdate select df.credit).DefaultIfEmpty(0).Sum();
            var intotaly = Math.Round((todayRenewalBondcoll + bformfeey + cformfeey + mformfeey + acformfeey + deposity + ylatefee + bookingy + advancey), 2);

            var spotcommy = (from o in db.spotcommission_tabs where o.date < stdate select o.commission).DefaultIfEmpty(0).Sum();
            var withdrawy = (from df in db.TransactionTabs where df.pdate < stdate select df.debit).DefaultIfEmpty(0).Sum();
            var expansey = (from df in db.Expenses where df.date_time < stdate select df.amount).DefaultIfEmpty(0).Sum();
            var todayVouchercoll = (from df in db.Voucher_Reports where df.date < stdate select df.netamount).DefaultIfEmpty(0).Sum();
            var AdvPayment = (from df in db.AdvBrokerPaymentTabs where df.date < stdate select df.amount).DefaultIfEmpty(0).Sum();
            var mat = (from df in db.MaturityTabs where df.maturitydate < stdate select df.maturityamount).DefaultIfEmpty(0).Sum();
            var emplisty = (from se in db.Salary_ems where se.date < stdate select se).ToList();
            foreach (var el in emplisty)
            {
                var ysalary = (from df in db.Salary_ems where df.date < stdate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                ytotalsalary = totalsalary + ysalary;
            }
            var extotaly = Math.Round((expansey + todayVouchercoll + ytotalsalary + withdrawy + AdvPayment + mat + spotcommy), 2);
            var grandtotaly = intotaly - extotaly;

            /////Today's Collection /////

            var todayfdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.mode == "Single" && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todayRdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.mode != "Single" && df.installmentno == 1 && df.type != "Adjustment" && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todaybooking = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.bookingamount).DefaultIfEmpty(0).Sum();
            var todayadvance = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.downpayment).DefaultIfEmpty(0).Sum();
            var todayNewBondcoll1 = todayfdcoll1 + todayRdcoll1;
            var todayRenewalBondcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.installmentno != 1 && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

            var todaylatefee = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
            var todayreleif = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
            var latefee = todaylatefee - todayreleif;

            var bformfee = (from df in db.AgentDetails where df.Doj >= stdate && df.Doj <= enddate select df.formfee).DefaultIfEmpty(0).Sum();
            var cformfee = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
            var mformfee = (from df in db.Member_tabs where df.Cdate >= stdate && df.Cdate <= enddate select df.Fee).DefaultIfEmpty(0).Sum();
            var acformfee = (from df in db.SavingAccountInfos where df.Doj >= stdate && df.Doj <= enddate select df.formfee).DefaultIfEmpty(0).Sum();
            var deposit = (from df in db.TransactionTabs where df.pdate >= stdate && df.pdate <= enddate select df.credit).DefaultIfEmpty(0).Sum();
            var intotal = Math.Round((todayRenewalBondcoll1 + bformfee + cformfee + mformfee + acformfee + deposit + latefee + todaybooking + todayadvance), 2);

            var spotcomm = (from o in db.spotcommission_tabs where o.date >= stdate && o.date <= enddate select o.commission).DefaultIfEmpty(0).Sum();
            var withdraw = (from df in db.TransactionTabs where df.pdate >= stdate && df.pdate <= enddate select df.debit).DefaultIfEmpty(0).Sum();
            var expanse = (from df in db.Expenses where df.date_time >= stdate && df.date_time <= enddate select df.amount).DefaultIfEmpty(0).Sum();
            var todayVouchercoll1 = (from df in db.Voucher_Reports where df.date >= stdate && df.date <= enddate select df.netamount).DefaultIfEmpty(0).Sum();
            var AdvPayment1 = (from df in db.AdvBrokerPaymentTabs where df.date >= stdate && df.date <= enddate select df.amount).DefaultIfEmpty(0).Sum();
            var mat1 = (from df in db.MaturityTabs where df.maturitydate >= stdate && df.maturitydate <= enddate select df.maturityamount).DefaultIfEmpty(0).Sum();
            var emplist = (from se in db.Salary_ems where se.date >= stdate && se.date <= enddate select se).ToList();
            foreach (var el in emplist)
            {
                var salary = (from df in db.Salary_ems where df.date >= stdate && df.date <= enddate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                totalsalary = totalsalary + salary;
            }

            var extotal = Math.Round((expanse + todayVouchercoll1 + totalsalary + withdraw + AdvPayment1 + mat1 + spotcomm), 2);
            var grandtotal = intotal - extotal;

            cbrlist.Add(new BalanceReport { bookingamount = todaybooking, downpayment = todayadvance, maturity = mat1, pps = 0, advpayment = AdvPayment1, fpo = todayRdcoll1, dpo = todayfdcoll1, newbond = todayNewBondcoll1, renewel = todayRenewalBondcoll1, latefee = latefee, bformfee = bformfee, cformfee = cformfee, mformfee = mformfee, acformfee = acformfee, deposit = deposit, withdraw = withdraw, intotal = intotal, expence = expanse, spotcomm = spotcomm, voucher = todayVouchercoll1, salary = totalsalary, extotal = extotal, grandtotal = grandtotal, branchname = User.Identity.Name, companyname = cr.CompanyName, openingbalance = grandtotaly, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "ClosingBalanceReport.rpt"));
            rd.SetDataSource(cbrlist);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View(cbrlist);
        }

        [HttpGet]
        public ActionResult AccBalanceReport()
        {
            List<AcBalanceReport> abrlist = new List<AcBalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(abrlist);
            }
        }
        [HttpPost]
        public ActionResult AccBalanceReport(DateTime sdate, DateTime edate)
        {
            List<AcBalanceReport> abrlist = new List<AcBalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var alist = (from pl in db.SavingAccountInfos where pl.Doj >= sdate && pl.Doj <= edate select pl).ToList();
                foreach (var a in alist)
                {
                    var creditsum = (from df in db.TransactionTabs where df.accountno == a.accountno select df.credit).DefaultIfEmpty(0).Sum();
                    var debitsum = (from df in db.TransactionTabs where df.accountno == a.accountno select df.debit).DefaultIfEmpty(0).Sum();
                    var balance = (creditsum - debitsum);
                    abrlist.Add(new AcBalanceReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, credit = creditsum, debit = debitsum, balance = balance, branchname = User.Identity.Name, companyname = cr.CompanyName, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                stdate = sdate;
                enddate = edate;

                return View(abrlist);
            }
        }
        public ActionResult PrintAccBalanceReport()
        {
            List<AcBalanceReport> abrlist = new List<AcBalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var alist = (from pl in db.SavingAccountInfos where pl.Doj >= stdate && pl.Doj <= enddate select pl).ToList();
                foreach (var a in alist)
                {
                    var creditsum = (from df in db.TransactionTabs where df.accountno == a.accountno select df.credit).DefaultIfEmpty(0).Sum();
                    var debitsum = (from df in db.TransactionTabs where df.accountno == a.accountno select df.debit).DefaultIfEmpty(0).Sum();
                    var balance = (creditsum - debitsum);
                    abrlist.Add(new AcBalanceReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, credit = creditsum, debit = debitsum, balance = balance, branchname = User.Identity.Name, companyname = cr.CompanyName, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AccBalanceReport.rpt"));
                rd.SetDataSource(abrlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult DuplicatePrintReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateList> dlist = new List<DuplicateList>();
                return View(dlist);
            }
        }
        [HttpPost]
        public ActionResult DuplicatePrintReport(DateTime sdate, DateTime edate, string type)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateList> dlist = new List<DuplicateList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dl = (from g in db.DuplicateTabs where EntityFunctions.TruncateTime(g.date) >= sdate && EntityFunctions.TruncateTime(g.date) <= edate && g.type == type select g).ToList();
                foreach (var d in dl)
                {
                    dlist.Add(new DuplicateList { newbondid = d.newbondid, payamount = d.payamount, paymentno = d.paymentno, opid = d.opid, macaddress = d.macaddress, type = d.type, date = d.date, sdate = sdate, edate = edate, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                stdate = sdate;
                enddate = edate;
                ptype = type;
                ViewData["Type"] = type;
                return View(dlist);

            }
        }
        public ActionResult PrintDuplicatePrintReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateList> dlist = new List<DuplicateList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dl = (from g in db.DuplicateTabs where EntityFunctions.TruncateTime(g.date) >= stdate && EntityFunctions.TruncateTime(g.date) <= enddate && g.type == ptype select g).ToList();
                foreach (var d in dl)
                {
                    dlist.Add(new DuplicateList { newbondid = d.newbondid, payamount = d.payamount, paymentno = d.paymentno, opid = d.opid, macaddress = d.macaddress, type = d.type, date = d.date, sdate = stdate, edate = enddate, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DuplicatePrint.rpt"));
                rd.SetDataSource(dlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult CancelReceiptReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<CancelRcptList> crcptlist = new List<CancelRcptList>();
                var ins = (from dcl in db.Cancel_Receipts select dcl).ToList();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                foreach (var i in ins)
                {
                    var appinfo = db.appltabs.Single(s => s.bondid == i.bondid);
                    var agentinfo = db.AgentDetails.Single(s => s.NewAgentId == appinfo.newintroducerid);
                    crcptlist.Add(new CancelRcptList { customername = appinfo.name, brokername = agentinfo.name, newbondid = i.newbondid, payamount = i.payamount, installmentno = i.installmentno, receiptno = i.receiptno, planname = i.planname, mode = i.mode, term = i.term, pdate = i.paymentdate, cdate = i.Time, cancelby = i.opid, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(crcptlist);
            }
        }
        public ActionResult PrintCancelReport()
        {

            List<CancelRcptList> crcptlist = new List<CancelRcptList>();
            var ins = (from dcl in db.Cancel_Receipts select dcl).ToList();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            foreach (var i in ins)
            {
                var appinfo = db.appltabs.Single(s => s.bondid == i.bondid);
                var agentinfo = db.AgentDetails.Single(s => s.NewAgentId == appinfo.newintroducerid);
                crcptlist.Add(new CancelRcptList { customername = appinfo.name, brokername = agentinfo.name, newbondid = i.newbondid, payamount = i.payamount, installmentno = i.installmentno, receiptno = i.receiptno, planname = i.planname, mode = i.mode, term = i.term, pdate = i.paymentdate, cdate = i.Time, cancelby = i.opid, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "cancelreceipt.rpt"));
            rd.SetDataSource(crcptlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult MaturityPaidDetails()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<MaturityPaid> mpdlist = new List<MaturityPaid>();
                return View(mpdlist);
            }
        }
        [HttpPost]
        public ActionResult MaturityPaidDetails(DateTime sdate, DateTime edate)
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mlist = (from pl in db.MaturityTabs where pl.maturitydate >= sdate && pl.maturitydate <= edate select pl).ToList();
                foreach (var m in mlist)
                {
                    mpdlist.Add(new MaturityPaid { newbondid = m.newbondid, name = m.name, newintroducerid = m.newintroducerid, mobileno = m.mobileno, formdate = m.formdate, planname = m.planname, term = m.term, mode = m.mode, payment = m.payment, nolandunit = m.nolandunit, totalcon = m.totalcon, expectedraisablevalue = m.expectedraisablevalue, expirydate = m.expirydate, maturityamount = m.maturityamount, maturitydate = m.maturitydate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                stdate = sdate;
                enddate = edate;

                return View(mpdlist);
            }
        }
        public ActionResult PrintMaturityPaidDetails()
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mlist = (from pl in db.MaturityTabs where pl.maturitydate >= stdate && pl.maturitydate <= enddate select pl).ToList();

                foreach (var m in mlist)
                {
                    mpdlist.Add(new MaturityPaid { newbondid = m.newbondid, name = m.name, newintroducerid = m.newintroducerid, mobileno = m.mobileno, formdate = m.formdate, planname = m.planname, term = m.term, mode = m.mode, payment = m.payment, nolandunit = m.nolandunit, totalcon = m.totalcon, expectedraisablevalue = m.expectedraisablevalue, expirydate = m.expirydate, maturityamount = m.maturityamount, maturitydate = m.maturitydate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "MaturityPaidDetails.rpt"));
                rd.SetDataSource(mpdlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult PaidVoucher()
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(pv);
            }

        }
        [HttpPost]
        public ActionResult PaidVoucher(int year, int month)
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);

                string year1 = year.ToString();
                var pvlist = (from v in db.Voucher_Reports where v.year == year1 && v.month == month select v).ToList();

                foreach (var m in pvlist.ToList())
                {
                    var advamount = Math.Round((m.commission - m.tds - m.netamount), 2);
                    if (advamount < 0)
                    {
                        advamount = 0;
                    }
                    var ag = db.AgentDetails.Single(o => o.AgencyCode == m.agentid);
                    pv.Add(new PaidVoucher
                    {
                        Brokercode = ag.NewAgentId,
                        BrokerName = ag.name,
                        panno = ag.Panno,
                        bussiness = m.bussiness,
                        commission = m.commission,
                        netamount = m.netamount,
                        tds = m.tds,
                        advamount = advamount,
                        month = monthname,
                        year = m.year,
                        date = m.date,
                        Companyname = cr.CompanyName,
                        Broker_name = mr.agentname,
                        Branch_name = mr.branchname,
                        address = cr.Address,
                        contact = cr.Contact,
                        emailid = cr.Emailid,
                        domainname = cr.HeadOffice
                    });

                }

                vvyear = year;
                vmonth = month;
                ViewData["Month"] = monthname;
                return View(pv);

            }
        }
        public ActionResult PrintPaidVoucher()
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                string year1 = vvyear.ToString();

                var pvlist = (from v in db.Voucher_Reports where v.year == year1 && v.month == vmonth select v).ToList();

                foreach (var m in pvlist.ToList())
                {
                    var advamount = Math.Round((m.commission - m.tds - m.netamount), 2);
                    if (advamount < 0)
                    {
                        advamount = 0;
                    }
                    var ag = db.AgentDetails.Single(o => o.AgencyCode == m.agentid);
                    pv.Add(new PaidVoucher
                    {
                        branchcode = User.Identity.Name,
                        Brokercode = ag.NewAgentId,
                        panno = ag.Panno,
                        BrokerName = ag.name,
                        bussiness = m.bussiness,
                        commission = m.commission,
                        netamount = m.netamount,
                        tds = m.tds,
                        advamount = advamount,
                        month = monthname,
                        year = m.year,
                        date = m.date,
                        Companyname = cr.CompanyName,
                        Broker_name = mr.agentname,
                        Branch_name = mr.branchname,
                        address = cr.Address,
                        contact = cr.Contact,
                        emailid = cr.Emailid,
                        domainname = cr.HeadOffice
                    });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "PaidVoucher.rpt"));
                rd.SetDataSource(pv);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult Unpaidvoucher()
        {
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(vlist);
            }
        }
        [HttpPost]
        public ActionResult Unpaidvoucher(int month, int year)
        {
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<AgentDetail> blist = new List<AgentDetail>();
                string year1 = year.ToString();
                blist = (from b in db.AgentDetails where !db.Voucher_Reports.Any(p => p.agentid == b.AgencyCode && p.month == month && p.year == year1) select b).ToList();
                foreach (var b in blist)
                {
                    List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();

                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var mr = db.Members.Single(m => m.Id == 1);

                    var br = db.AgentDetails.Single(a => a.AgencyCode == b.AgencyCode);
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    Double tdsper = 0;
                    if (br.Panno == null || br.Panno == "")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == br.NewAgentId && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;

                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode select cts).Count();
                    var vyear = year.ToString();
                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode && cts.month == month && cts.year == vyear select cts).Count();
                    var commlist = (from co in db.commission_tabs where co.newagentid == br.NewAgentId && co.date.Month == month && co.date.Year == year select co).ToList();
                    foreach (var com in commlist)
                    {
                        var appr = db.appltabs.Single(bi => bi.newbondid == com.newbondid);
                        bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = br.NewAgentId, brokername = br.name, newintroducerid = br.NewIntroducerId, month = month.ToString(), voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                    }

                    var advancepayment = (from cts in db.AdvBrokerPaymentTabs where cts.newagentid == br.NewAgentId && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                    var gbusiness = bwvlist.Sum(tr => tr.business);
                    var gcommission = bwvlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                    vlist.Add(new PaidVoucher { Brokercode = br.NewAgentId, BrokerName = br.name, panno = br.Panno, netamount = netamount, bussiness = gbusiness, commission = gcommission, tds = lesstds, advamount = advancepayment, Branch_name = mr.branchname, Broker_name = mr.agentname, month = monthname, year = year.ToString(), Companyname = cr.CompanyName, address = cr.Address, contact = cr.Contact, emailid = cr.Emailid, domainname = cr.HeadOffice, bonusamount = bonusamount });

                }
                vvyear = year;
                vmonth = month;
                ViewData["Month"] = monthname;
                return View(vlist);
            }
        }
        public ActionResult Printunpaidvoucher()
        {
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            List<AgentDetail> blist = new List<AgentDetail>();
            string year1 = vvyear.ToString();
            blist = (from b in db.AgentDetails where !db.Voucher_Reports.Any(p => p.agentid == b.AgencyCode && p.month == vmonth && p.year == year1) select b).ToList();


            foreach (var b in blist)
            {
                List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(m => m.Id == 1);

                var br = db.AgentDetails.Single(a => a.AgencyCode == b.AgencyCode);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;
                if (br.Panno == null || br.Panno == "")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }
                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == br.NewAgentId && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;

                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode select cts).Count();
                var vyear = vvyear.ToString();
                var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode && cts.month == vmonth && cts.year == vyear select cts).Count();
                var commlist = (from co in db.commission_tabs where co.newagentid == br.NewAgentId && co.date.Month == vmonth && co.date.Year == vvyear select co).ToList();
                foreach (var com in commlist)
                {
                    var appr = db.appltabs.Single(bi => bi.newbondid == com.newbondid);
                    bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = br.NewAgentId, brokername = br.name, newintroducerid = br.NewIntroducerId, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                }

                var advancepayment = (from cts in db.AdvBrokerPaymentTabs where cts.newagentid == br.NewAgentId && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();

                var gbusiness = bwvlist.Sum(tr => tr.business);
                var gcommission = bwvlist.Sum(tr => tr.commission);
                var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                vlist.Add(new PaidVoucher
                {
                    branchcode = User.Identity.Name,
                    Brokercode = br.NewAgentId,
                    BrokerName = br.name,
                    panno = br.Panno,
                    netamount = netamount,
                    bussiness = gbusiness,
                    commission = gcommission,
                    tds = lesstds,
                    advamount = advancepayment,
                    Branch_name = mr.branchname,
                    Broker_name = mr.agentname,
                    month = monthname,
                    year = vvyear.ToString(),
                    Companyname = cr.CompanyName,
                    address = cr.Address,
                    contact = cr.Contact,
                    emailid = cr.Emailid,
                    domainname = cr.HeadOffice,
                    bonusamount = bonusamount
                });

            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "UnpaidVoucher.rpt"));
            rd.SetDataSource(vlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                string dt = pdate.ToShortDateString();

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View(vlist);
        }

        [HttpGet]
        public ActionResult DatewiseSVoucherList()
        {
            List<DatewiseSVoucherList> dwvlist = new List<DatewiseSVoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(dwvlist);
            }
        }
        [HttpPost]
        public ActionResult DatewiseSVoucherList(DateTime sdate, DateTime edate)
        {
            List<DatewiseSVoucherList> dwvlist = new List<DatewiseSVoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var nbond = string.Empty;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var vlist = (from pl in db.SpotCommTabs where pl.date >= sdate && pl.date <= edate select pl).ToList();
                foreach (var v in vlist)
                {
                    var ar = db.AgentDetails.Single(a => a.NewAgentId == v.newagentid);
                    if (v.Newbondid == "NA")
                    {
                        dwvlist.Add(new DatewiseSVoucherList { bondname = "NA", newbondid = "NA", newagentid = ar.NewAgentId, name = ar.name, amount = v.business, commission = v.commission, pdate = v.date, branchname = cr.AdminId, companyname = cr.CompanyName, sdate = sdate, edate = edate });
                    }
                    else
                    {
                        var ap = db.appltabs.Single(s => s.newbondid == v.Newbondid);
                        dwvlist.Add(new DatewiseSVoucherList { bondname = ap.name, newbondid = v.Newbondid, newagentid = ar.NewAgentId, name = ar.name, amount = v.business, commission = v.commission, pdate = v.date, branchname = cr.AdminId, companyname = cr.CompanyName, sdate = sdate, edate = edate });
                    }

                }

                stdate = sdate;
                enddate = edate;

                return View(dwvlist);
            }
        }
        public ActionResult PrintDatewiseSVoucherList()
        {
            List<DatewiseSVoucherList> dwvlist = new List<DatewiseSVoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var vlist = (from pl in db.SpotCommTabs where pl.date >= stdate && pl.date <= enddate select pl).ToList();
                foreach (var v in vlist)
                {
                    var ar = db.AgentDetails.Single(a => a.NewAgentId == v.newagentid);
                    if (v.Newbondid == "NA")
                    {
                        dwvlist.Add(new DatewiseSVoucherList { bondname = "NA", newbondid = "NA", newagentid = ar.NewAgentId, name = ar.name, amount = v.business, commission = v.commission, pdate = v.date, branchname = cr.AdminId, companyname = cr.CompanyName, sdate = stdate, edate = enddate });
                    }
                    else
                    {
                        var ap = db.appltabs.Single(s => s.newbondid == v.Newbondid);
                        dwvlist.Add(new DatewiseSVoucherList { bondname = ap.name, newbondid = v.Newbondid, newagentid = ar.NewAgentId, name = ar.name, amount = v.business, commission = v.commission, pdate = v.date, branchname = cr.AdminId, companyname = cr.CompanyName, sdate = stdate, edate = enddate });
                    }

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DatewiseSVoucherList.rpt"));
                rd.SetDataSource(dwvlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult DatewiseVoucherList()
        {
            List<DatewiseVoucherList> dwvlist = new List<DatewiseVoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(dwvlist);
            }
        }
        [HttpPost]
        public ActionResult DatewiseVoucherList(DateTime sdate, DateTime edate)
        {
            List<DatewiseVoucherList> dwvlist = new List<DatewiseVoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var vlist = (from pl in db.Voucher_Reports where pl.date >= sdate && pl.date <= edate select pl).ToList();
                foreach (var v in vlist)
                {
                    var ar = db.AgentDetails.Single(a => a.AgencyCode == v.agentid);
                    dwvlist.Add(new DatewiseVoucherList { newagentid = ar.NewAgentId, name = ar.name, newintroducerid = ar.NewIntroducerId, amount = v.netamount, pdate = v.date, branchname = cr.AdminId, companyname = cr.CompanyName, sdate = sdate, edate = edate });

                }

                stdate = sdate;
                enddate = edate;

                return View(dwvlist);
            }
        }
        public ActionResult PrintDatewiseVoucherList()
        {
            List<DatewiseVoucherList> dwvlist = new List<DatewiseVoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var vlist = (from pl in db.Voucher_Reports where pl.date >= stdate && pl.date <= enddate select pl).ToList();
                foreach (var v in vlist)
                {
                    var ar = db.AgentDetails.Single(a => a.AgencyCode == v.agentid);
                    dwvlist.Add(new DatewiseVoucherList { newagentid = ar.NewAgentId, name = ar.name, newintroducerid = ar.NewIntroducerId, amount = v.netamount, pdate = v.date, branchname = cr.AdminId, companyname = cr.CompanyName, sdate = stdate, edate = enddate });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DatewiseVoucherList.rpt"));
                rd.SetDataSource(dwvlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult RenewalList()
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View(dwdclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult RenewalList(plan model, string newagentid, int filter, int month = 0, int year = 0)
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime fdate = DateTime.Now.Date;
                DateTime fdate1 = DateTime.Now.Date;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pst = db.Plans.Single(c => c.Plancode == 4);
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    int mon = DateTime.DaysInMonth(year, month);
                    if (month > 9)
                    {
                        fdate = Convert.ToDateTime(month + "/" + mon + "/" + year);
                        fdate1 = Convert.ToDateTime(month + "/01/" + year);
                    }
                    else
                    {
                        fdate = Convert.ToDateTime("0" + month + "/" + mon + " /" + year);
                        fdate1 = Convert.ToDateTime("0" + month + "/01/" + year);
                    }
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        MonthName mn = new MonthName();
                        var monthname = mn.numbertomonthname(month) + "," + year;
                        switch (filter)
                        {
                            case 1:
                                var bd1 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.planname.Substring(0, 3) != pst.shortcutname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install1 = 0;
                                Double lastamt1 = 0;
                                foreach (var o in bd1)
                                {
                                    int i1 = 0;
                                    lastamt1 = 0;
                                    var bbr1 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr1.expirydate >= fdate1)
                                    {
                                        int bcount1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                        if (bcount1 > 0)
                                        {
                                            int mininstall1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                            int maxinstall1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                            lastamt1 = 0;
                                            while (mininstall1 <= maxinstall1)
                                            {
                                                var ar1 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall1);
                                                lastamt1 = lastamt1 + ar1.amount;
                                                install1 = install1 + 1;
                                                mininstall1 = mininstall1 + 1;

                                            }
                                            i1 = i1 + 1;
                                        }
                                        else
                                        {
                                            lastamt1 = 0;
                                            i1 = i1 + 1;
                                        }

                                        var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr1.newbondid);
                                        var ap = db.appltabs.Single(c => c.newbondid == bbr1.newbondid);
                                        var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                        var installment1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        var installmentt1 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        int total1 = Convert.ToInt32(installment1) + Convert.ToInt32(installmentt1);
                                        var info1 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total1);

                                        if (rt.status != 0 && i1 == 1)
                                        {
                                            dwdclist.Add(new DatewiseDueCollection { newbondid = bbr1.newbondid, bondid = ap.bondid, viewby = User.Identity.Name, name = ap.name, amount = lastamt1, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info1.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount1.ToString(), plan = bbr1.planname, installamount = bbr1.payment, mobileno = ap.mobileno, plotno = ap.plotno, block = ap.block });
                                        }
                                        install1 = 0;

                                    }
                                }


                                break;

                            case 2:
                                double lastamt2 = 0;
                                var bd2 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.planname.Substring(0, 3) != pst.shortcutname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install2 = 0;

                                foreach (var o in bd2)
                                {
                                    int i2 = 0;
                                    lastamt2 = 0;
                                    var bbr2 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr2.expirydate >= fdate1)
                                    {
                                        if (bbr2.newintroducerid == newagentid)
                                        {
                                            int bcount2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                            if (bcount2 > 0)
                                            {
                                                int mininstall2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                                int maxinstall2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                                lastamt2 = 0;
                                                while (mininstall2 <= maxinstall2)
                                                {
                                                    var ar2 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall2);
                                                    lastamt2 = lastamt2 + ar2.amount;
                                                    install2 = install2 + 1;
                                                    mininstall2 = mininstall2 + 1;
                                                    pdate = Convert.ToDateTime(ar2.paymentdate);
                                                }
                                                i2 = i2 + 1;
                                            }
                                            else
                                            {
                                                lastamt2 = 0;
                                                i2 = i2 + 1;
                                            }
                                            var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr2.newbondid);
                                            var ap = db.appltabs.Single(c => c.newbondid == bbr2.newbondid);
                                            var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                            var installment2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            var installmentt2 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            int total2 = Convert.ToInt32(installment2) + Convert.ToInt32(installmentt2);
                                            var info2 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total2);

                                            if (rt.status != 0 && i2 == 1)
                                            {
                                                dwdclist.Add(new DatewiseDueCollection { newbondid = bbr2.newbondid, bondid = ap.bondid, viewby = User.Identity.Name, name = ap.name, amount = lastamt2, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info2.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount2.ToString(), plan = bbr2.planname, installamount = bbr2.payment, mobileno = ap.mobileno, plotno = ap.plotno, block = ap.block });
                                            }
                                            install2 = 0;

                                        }
                                    }

                                }
                                break;

                            case 3:
                                var pr = db.NewPlans.Single(s => s.Plancode == model.plancode);
                                Double lastamt3 = 0;
                                var bd3 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.planname == pr.Planname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install3 = 0;

                                foreach (var o in bd3)
                                {
                                    int i3 = 0;
                                    lastamt3 = 0;
                                    var bbr3 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr3.expirydate >= fdate1)
                                    {
                                        int bcount3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                        if (bcount3 > 0)
                                        {
                                            int mininstall3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                            int maxinstall3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                            lastamt3 = 0;
                                            while (mininstall3 <= maxinstall3)
                                            {
                                                var ar3 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall3);
                                                lastamt3 = lastamt3 + ar3.amount;
                                                install3 = install3 + 1;
                                                mininstall3 = mininstall3 + 1;
                                                pdate = Convert.ToDateTime(ar3.paymentdate);
                                            }
                                            i3 = i3 + 1;
                                        }
                                        else
                                        {
                                            lastamt3 = 0;
                                            i3 = i3 + 1;
                                        }
                                        var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr3.newbondid);
                                        var ap = db.appltabs.Single(c => c.newbondid == bbr3.newbondid);
                                        var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                        var installment3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        var installmentt3 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        int total3 = Convert.ToInt32(installment3) + Convert.ToInt32(installmentt3);
                                        var info3 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total3);

                                        if (rt.status != 0 && i3 == 1)
                                        {
                                            dwdclist.Add(new DatewiseDueCollection { newbondid = bbr3.newbondid, bondid = ap.bondid, viewby = User.Identity.Name, name = ap.name, amount = lastamt3, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info3.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount3.ToString(), plan = bbr3.planname, installamount = bbr3.payment, mobileno = ap.mobileno, plotno = ap.plotno, block = ap.block });
                                        }
                                        install3 = 0;
                                    }

                                }
                                break;

                        }
                        ViewData["Month"] = month;
                        ViewData["Monthnm"] = mn.numbertomonthname(month);
                        ViewData["Year"] = year;
                        ViewData["monthname"] = monthname;
                        vmonth = month;
                        vvyear = year;
                        NewAgentid = newagentid;
                        sfilter = filter;
                        plancode = model.plancode;
                        return View(dwdclist.OrderBy(s => s.bondid));
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        public ActionResult PrintRenewalList()
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime fdate = DateTime.Now.Date;
                DateTime fdate1 = DateTime.Now.Date;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pst = db.Plans.Single(c => c.Plancode == 4);
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    int mon = DateTime.DaysInMonth(vvyear, vmonth);
                    if (vmonth > 9)
                    {

                        fdate = Convert.ToDateTime(vmonth + "/" + mon + "/" + vvyear);
                        fdate1 = Convert.ToDateTime(vmonth + "/01/" + vvyear);
                    }
                    else
                    {
                        fdate = Convert.ToDateTime("0" + vmonth + "/" + mon + " /" + vvyear);
                        fdate1 = Convert.ToDateTime("0" + vmonth + "/01/" + vvyear);
                    }
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        if (log.status == 1 && log.type == "Admin")
                        {
                            MonthName mn = new MonthName();
                            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                            switch (sfilter)
                            {
                                case 1:
                                    var bd1 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.planname.Substring(0, 3) != pst.shortcutname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                    var install1 = 0;
                                    Double lastamt1 = 0;
                                    foreach (var o in bd1)
                                    {
                                        int i1 = 0;
                                        lastamt1 = 0;
                                        var bbr1 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                        if (bbr1.expirydate >= fdate1)
                                        {
                                            int bcount1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                            if (bcount1 > 0)
                                            {
                                                int mininstall1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                                int maxinstall1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                                lastamt1 = 0;
                                                while (mininstall1 <= maxinstall1)
                                                {
                                                    var ar1 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall1);
                                                    lastamt1 = lastamt1 + ar1.amount;
                                                    install1 = install1 + 1;
                                                    mininstall1 = mininstall1 + 1;
                                                    pdate = Convert.ToDateTime(ar1.paymentdate);
                                                }
                                                i1 = i1 + 1;
                                            }
                                            else
                                            {
                                                lastamt1 = 0;
                                                i1 = i1 + 1;
                                            }
                                            var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr1.newbondid);
                                            var ap = db.appltabs.Single(c => c.newbondid == bbr1.newbondid);
                                            var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                            var installment1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            var installmentt1 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            int total1 = Convert.ToInt32(installment1) + Convert.ToInt32(installmentt1);
                                            var info1 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total1);

                                            if (rt.status != 0 && i1 == 1)
                                            {
                                                dwdclist.Add(new DatewiseDueCollection { newbondid = bbr1.newbondid, bondid = ap.bondid, branchnamenew = User.Identity.Name, name = ap.name, amount = lastamt1, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info1.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount1.ToString(), plan = bbr1.planname, installamount = bbr1.payment, mobileno = ap.mobileno, plotno = ap.plotno, block = ap.block });
                                            }
                                            install1 = 0;

                                        }

                                    }
                                    break;

                                case 2:
                                    double lastamt2 = 0;
                                    var bd2 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.planname.Substring(0, 3) != pst.shortcutname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                    var install2 = 0;

                                    foreach (var o in bd2)
                                    {
                                        int i2 = 0;
                                        lastamt2 = 0;
                                        var bbr2 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                        if (bbr2.expirydate >= fdate1)
                                        {
                                            if (bbr2.newintroducerid == NewAgentid)
                                            {
                                                int bcount2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                                if (bcount2 > 0)
                                                {
                                                    int mininstall2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                                    int maxinstall2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                                    lastamt2 = 0;
                                                    while (mininstall2 <= maxinstall2)
                                                    {
                                                        var ar2 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall2);
                                                        lastamt2 = lastamt2 + ar2.amount;
                                                        install2 = install2 + 1;
                                                        mininstall2 = mininstall2 + 1;
                                                        pdate = Convert.ToDateTime(ar2.paymentdate);
                                                    }
                                                    i2 = i2 + 1;
                                                }
                                                else
                                                {
                                                    lastamt1 = 0;
                                                    i2 = i2 + 1;
                                                }
                                                var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr2.newbondid);
                                                var ap = db.appltabs.Single(c => c.newbondid == bbr2.newbondid);
                                                var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                                var installment2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                                var installmentt2 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                                int total2 = Convert.ToInt32(installment2) + Convert.ToInt32(installmentt2);
                                                var info2 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total2);

                                                if (rt.status != 0 && i2 == 1)
                                                {
                                                    dwdclist.Add(new DatewiseDueCollection { newbondid = bbr2.newbondid, bondid = ap.bondid, branchnamenew = User.Identity.Name, name = ap.name, amount = lastamt2, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info2.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount2.ToString(), plan = bbr2.planname, installamount = bbr2.payment, mobileno = ap.mobileno, plotno = ap.plotno, block = ap.block });
                                                }
                                                install2 = 0;

                                            }
                                        }
                                    }

                                    break;

                                case 3:
                                    var pr = db.NewPlans.Single(s => s.Plancode == plancode);
                                    Double lastamt3 = 0;
                                    var bd3 = (from b in db.Installmenttabs where b.planname == pr.Planname && b.prevexpirydate <= fdate && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                    var install3 = 0;

                                    foreach (var o in bd3)
                                    {
                                        int i3 = 0;
                                        lastamt3 = 0;
                                        var bbr3 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                        if (bbr3.expirydate >= fdate1)
                                        {
                                            int bcount3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                            if (bcount3 > 0)
                                            {
                                                int mininstall3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                                int maxinstall3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                                lastamt3 = 0;
                                                while (mininstall3 <= maxinstall3)
                                                {
                                                    var ar3 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall3);
                                                    lastamt3 = lastamt3 + ar3.amount;
                                                    install3 = install3 + 1;
                                                    mininstall3 = mininstall3 + 1;
                                                    pdate = Convert.ToDateTime(ar3.paymentdate);
                                                }
                                                i3 = i3 + 1;
                                            }
                                            else
                                            {
                                                lastamt1 = 0;
                                                i3 = i3 + 1;
                                            }
                                            var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr3.newbondid);
                                            var ap = db.appltabs.Single(c => c.newbondid == bbr3.newbondid);
                                            var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                            var installment3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            var installmentt3 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            int total3 = Convert.ToInt32(installment3) + Convert.ToInt32(installmentt3);
                                            var info3 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total3);

                                            if (rt.status != 0 && i3 == 1)
                                            {
                                                dwdclist.Add(new DatewiseDueCollection { newbondid = bbr3.newbondid, bondid = ap.bondid, branchnamenew = User.Identity.Name, name = ap.name, amount = lastamt3, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info3.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount3.ToString(), plan = bbr3.planname, installamount = bbr3.payment, mobileno = ap.mobileno, plotno = ap.plotno, block = ap.block });
                                            }
                                            install3 = 0;

                                        }
                                    }
                                    break;

                            }

                        }


                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Duepaymentreport.rpt"));
                rd.SetDataSource(dwdclist.OrderBy(s => s.bondid));

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();

                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult LiabalityReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                List<Liability> acclist = new List<Liability>();

                return View(acclist);
            }

        }
        [HttpPost]
        public ActionResult LiabalityReport(DateTime sdate)
        {

            List<Liability> acclist = new List<Liability>();

            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = (from sa in db.appltabs where sa.expirydate <= sdate && sa.status == 1 select sa.newbondid).ToList().Distinct();
            var dz = dn.Count();
            if (dz > 0)
            {
                foreach (var d in dn)
                {

                    var name = db.appltabs.Single(c => c.newbondid == d);
                    var dx = db.Installmenttabs.Where(c => c.newbondid == d);
                    var paidinstallment = (from sa in db.Installmenttabs where sa.paymentdate <= sdate && sa.newbondid == d select sa.paymentno).Count();
                    var unpaidinstallment = (from sa in db.Installmenttabs where sa.payamount == 0 && sa.newbondid == d select sa.paymentno).Count();

                    acclist.Add(new Liability { newbondid = d, paidinstallment = paidinstallment, name = name.name, newintroducerid = name.newintroducerid, Maturitydate = name.expirydate, plan = name.planname, doj = name.formdate, unpaidinstallment = unpaidinstallment, amount = name.expectedraisablevalue, planamount = name.totalcon, companyname = cr.CompanyName, branchname = User.Identity.Name, date = sdate });
                }
            }
            else
            {
                Response.Write("<script>alert('Data was not found.')</script>");
            }
            sdate1 = sdate;
            return View(acclist);

        }
        public ActionResult PrintLiabalityReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                List<Liability> acclist = new List<Liability>();

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dn = (from sa in db.appltabs where sa.expirydate <= sdate1 && sa.status == 1 select sa.newbondid).ToList().Distinct();
                var dz = dn.Count();

                foreach (var d in dn)
                {

                    var name = db.appltabs.Single(c => c.newbondid == d);
                    var dx = db.Installmenttabs.Where(c => c.newbondid == d);
                    var paidinstallment = (from sa in db.Installmenttabs where sa.paymentdate <= sdate1 && sa.newbondid == d select sa.paymentno).Count();
                    var unpaidinstallment = (from sa in db.Installmenttabs where sa.payamount == 0 && sa.newbondid == d select sa.paymentno).Count();

                    acclist.Add(new Liability { newbondid = d, paidinstallment = paidinstallment, name = name.name, newintroducerid = name.newintroducerid, Maturitydate = name.expirydate, plan = name.planname, doj = name.formdate, unpaidinstallment = unpaidinstallment, amount = name.expectedraisablevalue, planamount = name.totalcon, companyname = cr.CompanyName, branchname = User.Identity.Name, date = sdate1 });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Liability.rpt"));
                rd.SetDataSource(acclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();

            }

        }

        [HttpGet]
        public ActionResult MaturityReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                List<Liability> acclist = new List<Liability>();

                return View(acclist);
            }

        }
        [HttpPost]
        public ActionResult MaturityReport(int month = 0, int year = 0)
        {

            List<Liability> acclist = new List<Liability>();
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month) + "," + year;
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = (from sa in db.appltabs where sa.expirydate.Month == month && sa.expirydate.Year == year && sa.status == 1 select sa.newbondid).ToList().Distinct();
            var dz = dn.Count();
            var amt = 0.0;
            if (dz > 0)
            {
                foreach (var d in dn)
                {

                    var name = db.appltabs.Single(c => c.newbondid == d);
                    var agent = db.AgentDetails.Single(c => c.NewAgentId == name.newintroducerid);
                    var dx = db.Installmenttabs.Where(c => c.newbondid == d);
                    var paidinstallment = (from sa in db.Installmenttabs where sa.newbondid == d && sa.payamount != 0 select sa.paymentno).Count();
                    var unpaidinstallment = (from sa in db.Installmenttabs where sa.payamount == 0 && sa.newbondid == d select sa.paymentno).Count();
                    var Noinstallment = (from sa in db.Installmenttabs where sa.newbondid == d select sa.paymentno).Count();

                    if (paidinstallment == Noinstallment)
                    {
                        amt = name.expectedraisablevalue;
                    }
                    else
                    {
                        amt = paidinstallment * name.payment;
                    }


                    acclist.Add(new Liability { newbondid = d, paidinstallment = paidinstallment, name = name.name, newintroducerid = agent.name, Maturitydate = name.expirydate, plan = name.planname, doj = name.formdate, unpaidinstallment = unpaidinstallment, amount = amt, planamount = name.totalcon, companyname = cr.CompanyName, branchname = User.Identity.Name, month = month, year = year, monthname = monthname });
                }
            }
            else
            {
                Response.Write("<script>alert('Data was not found.')</script>");
            }
            vmonth = month;
            vvyear = year;
            return View(acclist);




        }
        public ActionResult PrintMaturityReport()
        {
            List<Liability> acclist = new List<Liability>();
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = (from sa in db.appltabs where sa.expirydate.Month == vmonth && sa.expirydate.Year == vvyear && sa.status == 1 select sa.newbondid).ToList().Distinct();
            var dz = dn.Count();
            var amt = 0.0;
            if (dz > 0)
            {
                foreach (var d in dn)
                {

                    var name = db.appltabs.Single(c => c.newbondid == d);
                    var agent = db.AgentDetails.Single(c => c.NewAgentId == name.newintroducerid);
                    var dx = db.Installmenttabs.Where(c => c.newbondid == d);
                    var paidinstallment = (from sa in db.Installmenttabs where sa.newbondid == d && sa.payamount != 0 select sa.paymentno).Count();
                    var unpaidinstallment = (from sa in db.Installmenttabs where sa.payamount == 0 && sa.newbondid == d select sa.paymentno).Count();
                    var Noinstallment = (from sa in db.Installmenttabs where sa.newbondid == d select sa.paymentno).Count();

                    if (paidinstallment == Noinstallment)
                    {
                        amt = name.expectedraisablevalue;
                    }
                    else
                    {
                        amt = paidinstallment * name.payment;
                    }


                    acclist.Add(new Liability { newbondid = d, paidinstallment = paidinstallment, name = name.name, newintroducerid = agent.name, Maturitydate = name.expirydate, plan = name.planname, doj = name.formdate, unpaidinstallment = unpaidinstallment, amount = amt, planamount = name.totalcon, companyname = cr.CompanyName, branchname = User.Identity.Name, month = vmonth, year = vvyear, monthname = monthname });
                }
            }



            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Maturity.rpt"));
            rd.SetDataSource(acclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult AllAccStatement()
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(abrlist);
            }
        }
        [HttpPost]
        public ActionResult AllAccStatement(DateTime sdate, DateTime edate)
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var prevcredit = (from pr in db.TransactionTabs where pr.pdate < sdate select pr.credit).DefaultIfEmpty(0).Sum();
                var prevdebit = (from pr in db.TransactionTabs where pr.pdate < sdate select pr.debit).DefaultIfEmpty(0).Sum();
                var prevbalance = prevcredit - prevdebit;
                var alist = (from pl in db.TransactionTabs where pl.pdate >= sdate && pl.pdate <= edate select pl).ToList();
                foreach (var a in alist)
                {
                    abrlist.Add(new AcStatementReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, transactionid = a.transactionid, remarks = a.remark, credit = a.credit, debit = a.debit, balance = a.balance, prevbalance = prevbalance, branchname = User.Identity.Name, companyname = cr.CompanyName, sdate = sdate, edate = edate, pdate = a.pdate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }


                stdate = sdate;
                enddate = edate;
                return View(abrlist);
            }
        }
        public ActionResult PrintAllAccStatement()
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var prevcredit = (from pr in db.TransactionTabs where pr.pdate < stdate select pr.credit).DefaultIfEmpty(0).Sum();
                var prevdebit = (from pr in db.TransactionTabs where pr.pdate < stdate select pr.debit).DefaultIfEmpty(0).Sum();
                var prevbalance = prevcredit - prevdebit;
                var alist = (from pl in db.TransactionTabs where pl.pdate >= stdate && pl.pdate <= enddate select pl).ToList();
                foreach (var a in alist)
                {
                    abrlist.Add(new AcStatementReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, transactionid = a.transactionid, remarks = a.remark, credit = a.credit, debit = a.debit, balance = a.balance, prevbalance = prevbalance, branchname = User.Identity.Name, companyname = cr.CompanyName, sdate = stdate, edate = enddate, pdate = a.pdate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AllAccStatement.rpt"));
                rd.SetDataSource(abrlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();

                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult AccStatementReport()
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(abrlist);
            }
        }
        [HttpPost]
        public ActionResult AccStatementReport(string accountid, DateTime sdate, DateTime edate)
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var prevcredit = (from pr in db.TransactionTabs where pr.pdate < sdate && pr.accountno == accountid select pr.credit).DefaultIfEmpty(0).Sum();
                var prevdebit = (from pr in db.TransactionTabs where pr.pdate < sdate && pr.accountno == accountid select pr.debit).DefaultIfEmpty(0).Sum();
                var prevbalance = prevcredit - prevdebit;
                var alist = (from pl in db.TransactionTabs where pl.accountno == accountid && pl.pdate >= sdate && pl.pdate <= edate select pl).ToList();
                foreach (var a in alist)
                {
                    abrlist.Add(new AcStatementReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, transactionid = a.transactionid, remarks = a.remark, credit = a.credit, debit = a.debit, balance = a.balance, prevbalance = prevbalance, branchname = User.Identity.Name, companyname = cr.CompanyName, sdate = sdate, edate = edate, pdate = a.pdate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                newaccountid = accountid;
                stdate = sdate;
                enddate = edate;
                return View(abrlist);
            }
        }
        public ActionResult PrintAccStatementReport()
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var prevcredit = (from pr in db.TransactionTabs where pr.pdate < stdate && pr.accountno == newaccountid select pr.credit).DefaultIfEmpty(0).Sum();
                var prevdebit = (from pr in db.TransactionTabs where pr.pdate < stdate && pr.accountno == newaccountid select pr.debit).DefaultIfEmpty(0).Sum();
                var prevbalance = prevcredit - prevdebit;
                var alist = (from pl in db.TransactionTabs where pl.accountno == newaccountid && pl.pdate >= stdate && pl.pdate <= enddate select pl).ToList();
                foreach (var a in alist)
                {
                    abrlist.Add(new AcStatementReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, transactionid = a.transactionid, remarks = a.remark, credit = a.credit, debit = a.debit, balance = a.balance, prevbalance = prevbalance, branchname = User.Identity.Name, companyname = cr.CompanyName, sdate = stdate, edate = enddate, pdate = a.pdate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AccStatementReport.rpt"));
                rd.SetDataSource(abrlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult Advancepaymentreport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<AdvPaymentTemp> ap = new List<AdvPaymentTemp>();
                return View(ap);
            }
        }

        [HttpPost]
        public ActionResult Advancepaymentreport(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<AdvPaymentTemp> ap = new List<AdvPaymentTemp>();
                //string ayear = year.ToString();
                //MonthName mn = new MonthName();
                var fromtodate = sdate.ToString("dd/MM/yyy") + " TO " + edate.ToString("dd/MM/yyy");
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var an = (from c in db.AdvBrokerPaymentTabs where c.date >= sdate && c.date <= edate select c).ToList();
                foreach (var item in an.ToList())
                {
                    Double recoveryamount = 0;
                    string rdate = "-";
                    var ar = db.AgentDetails.Single(a => a.NewAgentId == item.newagentid);
                    //var count = (from vc in db.Voucher_Reports where vc.agentid == ar.AgencyCode && vc.date >= sdate && vc.date <= edate select vc).Count();
                    var count = (from vc in db.Voucher_Reports where vc.agentid == ar.AgencyCode && vc.date >= sdate && vc.date <= edate select vc).ToList();
                    foreach (var itemlist in count)
                    {
                        if (count.Count() > 0)
                        {
                            //  var vr1 = db.Voucher_Reports.Single(tr => tr.date >= sdate && tr.date <= edate);
                            var vr = db.Voucher_Reports.Single(v => v.Id==itemlist.Id);
                            //var vr = db.Voucher_Reports.Where(v => v.agentid == ar.AgencyCode && v.date >= sdate && v.date <= edate).ToList();
                           // var comm = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.date >= sdate && v.date <= edate select v.commission).DefaultIfEmpty(0).Sum();
                            //var tds = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.date >= sdate && v.date <= edate select v.tds).DefaultIfEmpty(0).Sum();
                            //var netvoucher = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.date >= sdate && v.date <= edate select v.netamount).DefaultIfEmpty(0).Sum();

                            var comm = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == itemlist.month && v.year == itemlist.year select v.commission).DefaultIfEmpty(0).Sum();
                            var tds = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == itemlist.month && v.year == itemlist.year select v.tds).DefaultIfEmpty(0).Sum();
                            var netvoucher = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == itemlist.month && v.year == itemlist.year select v.netamount).DefaultIfEmpty(0).Sum();
                            recoveryamount = Math.Round(comm - tds - netvoucher, 0);
                             rdate = itemlist.date.ToString("dd/MM/yyy");
                            ap.Add(new AdvPaymentTemp { newagentid = item.newagentid, name = ar.name, amount = item.amount, recoveryamount = recoveryamount, date = item.date, recoverydate = rdate, Remark = item.Remark, opid = item.opid, branchcode = item.branchcode, companyname = cr.CompanyName, monthname = fromtodate });
                        }
                        else
                        {
                            ap.Add(new AdvPaymentTemp { newagentid = item.newagentid, name = ar.name, amount = item.amount, recoveryamount = recoveryamount, date = item.date, recoverydate = rdate, Remark = item.Remark, opid = item.opid, branchcode = item.branchcode, companyname = cr.CompanyName, monthname = fromtodate });
                        }
                    }
                }
                stdate = sdate;
                enddate = edate; 
                return View(ap);
            }
        }
        public ActionResult PrintAdvancepayment()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<AdvPaymentTemp> ap = new List<AdvPaymentTemp>();
                //string ayear = year.ToString();
                //MonthName mn = new MonthName();
                var fromtodate = stdate.ToString("dd/MM/yyy") + " TO " + enddate.ToString("dd/MM/yyy");
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var an = (from c in db.AdvBrokerPaymentTabs where c.date >= stdate && c.date <= enddate select c).ToList();
                foreach (var item in an.ToList())
                {
                    Double recoveryamount = 0;
                    string rdate = "-";
                    var ar = db.AgentDetails.Single(a => a.NewAgentId == item.newagentid);
                   // var count = (from vc in db.Voucher_Reports where vc.agentid == ar.AgencyCode && vc.date >= stdate && vc.date <= enddate select vc).Count();
                    var count = (from vc in db.Voucher_Reports where vc.agentid == ar.AgencyCode && vc.date >= stdate && vc.date <= enddate select vc).ToList();
                   foreach(var itemlist in count)
                   {
                    if (count.Count() > 0)
                    {
                        //var vr = db.Voucher_Reports.Single(v => v.agentid == ar.AgencyCode && v.date >= stdate && v.date <= enddate);
                      //  var vr = db.Voucher_Reports.Where(v => v.agentid == ar.AgencyCode && v.date >= stdate && v.date <= enddate).ToList();
                      //  var comm = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.date >= stdate && v.date <= enddate select v.commission).DefaultIfEmpty(0).Sum();
                      //  var tds = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.date >= stdate && v.date <= enddate select v.tds).DefaultIfEmpty(0).Sum();
                       // var netvoucher = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.date >= stdate && v.date <= enddate select v.netamount).DefaultIfEmpty(0).Sum();
                       // recoveryamount = comm - tds - netvoucher;
                       // rdate = vr.date.ToString("dd/MM/yyy");
                        var vr = db.Voucher_Reports.Single(v => v.Id == itemlist.Id);
                        var comm = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month==itemlist.month && v.year == itemlist.year select v.commission).DefaultIfEmpty(0).Sum();
                        var tds = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == itemlist.month && v.year == itemlist.year select v.tds).DefaultIfEmpty(0).Sum();
                        var netvoucher = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == itemlist.month && v.year == itemlist.year select v.netamount).DefaultIfEmpty(0).Sum();
                        recoveryamount = comm - tds - netvoucher;
                         rdate = vr.date.ToString("dd/MM/yyy");
                        ap.Add(new AdvPaymentTemp { newagentid = item.newagentid, name = ar.name, amount = item.amount, recoveryamount = recoveryamount, date = item.date, recoverydate = rdate, Remark = item.Remark, opid = item.opid, branchcode = item.branchcode, companyname = cr.CompanyName, monthname = fromtodate });
                    }
                    else
                    {
                        ap.Add(new AdvPaymentTemp { newagentid = item.newagentid, name = ar.name, amount = item.amount, recoveryamount = recoveryamount, date = item.date, recoverydate = rdate, Remark = item.Remark, opid = item.opid, branchcode = item.branchcode, companyname = cr.CompanyName, monthname = fromtodate });
                 
                    }
                   }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Advancepayment.rpt"));
                rd.SetDataSource(ap);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        #endregion

        #endregion

        #region Branchwise Report Menu start here

        #region Field Report
        [HttpGet]
        public ActionResult BrokerlistBranch()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<BrokerList> blist = new List<BrokerList>();
                return View(blist);

            }
        }
        [HttpPost]
        public ActionResult BrokerlistBranch(string branch)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<BrokerList> blist = new List<BrokerList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == branch);
                var brolist = (from dcl in db.AgentDetails where dcl.BranchCode == branch && dcl.Status == 1 select dcl).ToList();
                foreach (var b in brolist)
                {
                    blist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                ViewData["Branch"] = branch;
                Branchcode = branch;
                return View(blist);
            }
        }
        public ActionResult PrintBrokerListBranch()
        {
            List<BrokerList> blist = new List<BrokerList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(b => b.BranchCode == Branchcode);
            var brolist = (from dcl in db.AgentDetails where dcl.BranchCode == Branchcode && dcl.Status == 1 select dcl).ToList();
            foreach (var b in brolist)
            {
                blist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Brokerlist.rpt"));
            rd.SetDataSource(blist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult DatewiseBrokerBranch()
        {
            List<BrokerList> dwblist = new List<BrokerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(dwblist);
            }
        }
        [HttpPost]
        public ActionResult DatewiseBrokerBranch(string bcode, DateTime sdate, DateTime edate)
        {
            List<BrokerList> dwblist = new List<BrokerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == bcode);
                var blist = (from g in db.AgentDetails where g.BranchCode == bcode && g.Doj >= sdate && g.Doj <= edate && g.Status == 1 orderby g.Doj select g).ToList();
                foreach (var b in blist)
                {
                    dwblist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = sdate, edate = edate });
                }

                stdate = sdate;
                enddate = edate;
                Branchcode = bcode;

                return View(dwblist);

            }
        }
        public ActionResult PrintDatewiseBrokerBranch()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<BrokerList> dwblist = new List<BrokerList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == Branchcode);
                var blist = (from g in db.AgentDetails where g.BranchCode == Branchcode && g.Doj >= stdate && g.Doj <= enddate && g.Status == 1 orderby g.Doj select g).ToList();
                foreach (var b in blist)
                {
                    dwblist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = stdate, edate = enddate });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DatewiseBroker.rpt"));
                rd.SetDataSource(dwblist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(dwblist);
            }
        }

        #endregion

        #region Official Report

        [HttpGet]
        public ActionResult OperatorListBranch()
        {
            List<Operator> dclist = new List<Operator>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(dclist);
            }
        }
        [HttpPost]
        public ActionResult OperatorListBranch(string bcode)
        {
            List<Operator> dclist = new List<Operator>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                Branchcode = bcode;
                dclist = (from dcl in db.Operators where dcl.BranchCode == bcode select dcl).ToList();
                return View(dclist);


            }
        }
        public ActionResult PrintOperatorListBranch()
        {
            List<Operator> bond = new List<Operator>();
            bond = (from dcl in db.Operators where dcl.BranchCode == Branchcode select dcl).ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "OperatotListReport.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult CustomerReportBranch()
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(custlist);
            }
        }
        [HttpPost]
        public ActionResult CustomerReportBranch(int option, string bcode)
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            List<appltab> cus = new List<appltab>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var bb = db.Branchtabs.Single(o => o.BranchCode == bcode);
                ViewData["Branch"] = bb.BranchCode;

                if (option > 0)
                {
                    cus = (from s in db.appltabs where s.branchcode == bb.BranchCode && s.projectid == option && s.status == 1 orderby s.newbondid select s).ToList();
                }
                else
                {
                    cus = (from s in db.appltabs where s.branchcode == bb.BranchCode && s.status == 1 orderby s.newbondid select s).ToList();
                }
                foreach (var cust in cus)
                {
                    custlist.Add(new DatewiseCustomerList { newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                PId = option;
                Branchcode = bcode;
                return View(custlist);

            }
        }
        public ActionResult PrintCustomerReportBranch()
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            List<appltab> cus = new List<appltab>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var bb = db.Branchtabs.Single(o => o.BranchCode == Branchcode);
            if (PId > 0)
            {
                cus = (from s in db.appltabs where s.branchcode == bb.BranchCode && s.projectid == PId && s.status == 1 orderby s.newbondid select s).ToList();
            }
            else
            {
                cus = (from s in db.appltabs where s.branchcode == bb.BranchCode && s.status == 1 orderby s.newbondid select s).ToList();
            }
            foreach (var cust in cus)
            {
                custlist.Add(new DatewiseCustomerList { newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CustomerList.rpt"));
            rd.SetDataSource(custlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BrnachDatewisesavingCollection()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DWAccListCollection> acclist = new List<DWAccListCollection>();
                return View(acclist);
            }
        }
        [HttpPost]
        public ActionResult BrnachDatewisesavingCollection(DateTime sdate, DateTime edate, string bcode)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DWAccListCollection> acclist = new List<DWAccListCollection>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dn = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate && sa.branchcode == bcode select sa.accountno).Distinct().ToList();
                var dz = dn.Count();

                foreach (var d in dn)
                {
                    double credit = 0; double debit = 0;
                    var dx = db.SavingAccountInfos.Single(c => c.accountno == d);
                    credit = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate && sa.accountno == d && sa.branchcode == bcode select sa.credit).DefaultIfEmpty(0).Sum();
                    debit = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate && sa.accountno == d && sa.branchcode == bcode select sa.debit).DefaultIfEmpty(0).Sum();
                    double bal = credit - debit;
                    acclist.Add(new DWAccListCollection { accountno = d, name = dx.acholdername, credit = credit, debit = debit, sdate = sdate, edate = edate, balance = bal });
                }
                stdate = sdate;
                enddate = edate;
                Branchcode = bcode;
                return View(acclist);
            }

        }
        public ActionResult PrintBranchDatewisesavingCollection()
        {
            List<DWAccListCollection> acclist = new List<DWAccListCollection>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate && sa.branchcode == Branchcode select sa.accountno).Distinct().ToList();
            var dz = dn.Count();

            foreach (var d in dn)
            {
                double credit = 0; double debit = 0;
                var dx = db.SavingAccountInfos.Single(c => c.accountno == d);
                credit = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate && sa.accountno == d && sa.branchcode == Branchcode select sa.credit).DefaultIfEmpty(0).Sum();
                debit = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate && sa.accountno == d && sa.branchcode == Branchcode select sa.debit).DefaultIfEmpty(0).Sum();
                double bal = credit - debit;
                acclist.Add(new DWAccListCollection { accountno = d, name = dx.acholdername, credit = credit, debit = debit, sdate = stdate, edate = enddate, balance = bal });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "SavingCollection.rpt"));
            rd.SetDataSource(acclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BranchAllSavingaccount()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<SavingAccountInfo> dd = new List<SavingAccountInfo>();
                return View(dd);
            }

        }
        [HttpPost]
        public ActionResult BranchAllSavingaccount(string bcode)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<SavingAccountInfo> dd = new List<SavingAccountInfo>();
                dd = db.SavingAccountInfos.Where(a => a.branchcode == bcode).ToList();
                Branchcode = bcode;
                return View(dd);
            }

        }
        public ActionResult PrintBranchallsavingaccount()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var dn = db.SavingAccountInfos.Where(a => a.branchcode == Branchcode).ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "accountlist.rpt"));
                rd.SetDataSource(dn);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View(dn);

            }

        }

        [HttpGet]
        public ActionResult DailyExpenseBranch()
        {
            List<ExpenseList> ins = new List<ExpenseList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(ins);
            }

        }
        [HttpPost]
        public ActionResult DailyExpenseBranch(string bcode, DateTime sdate, DateTime edate, string command)
        {
            List<ExpenseList> elist = new List<ExpenseList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var ins = (from dcl in db.Expenses where dcl.date_time >= sdate && dcl.date_time <= edate && dcl.branchcode == bcode select dcl).ToList();
                foreach (var i in ins)
                {
                    elist.Add(new ExpenseList { head = i.head, Remark = i.Remark, amount = i.amount, date_time = i.date_time, sdate = sdate, edate = edate, branchcode = i.branchcode, opid = i.opid, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice,paymethod=i.paymethod });
                }
                ab = sdate;
                b = edate;
                Branchcode = bcode;
                ViewData["Branch"] = bcode;
            }
            return View(elist);

        }
        public ActionResult PrintDailyExpanseBranch()
        {
            List<ExpenseList> elist = new List<ExpenseList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var ins = (from dcl in db.Expenses where dcl.date_time >= ab && dcl.date_time <= b && dcl.branchcode == Branchcode select dcl).ToList();
            foreach (var i in ins)
            {
                elist.Add(new ExpenseList { head = i.head, Remark = i.Remark, amount = i.amount, date_time = i.date_time, sdate = ab, edate = b, branchcode = i.branchcode, opid = i.opid, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice,paymethod=i.paymethod });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DailyExpanse.rpt"));
            rd.SetDataSource(elist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult ClosingBalanceBranch()
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(cbrlist);
            }
        }
        [HttpPost]
        public ActionResult ClosingBalanceBranch(DateTime sdate, DateTime edate, string bcode)
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(d => d.BranchCode == bcode);

                ViewData["Branch"] = bcode;
                Double totalsalary = 0;
                Double ytotalsalary = 0;
                var plan1 = db.Plans.Single(p1 => p1.Plancode == 1);
                var plan2 = db.Plans.Single(p2 => p2.Plancode == 2);
                var plan3 = db.Plans.Single(p3 => p3.Plancode == 3);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                /////Yesterday's Collection /////
                var todayfdcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.mode == "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todayRdcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.mode != "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && df.installmentno == 1 && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var bookingy = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.bookingamount).DefaultIfEmpty(0).Sum();
                var advancey = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.downpayment).DefaultIfEmpty(0).Sum();
                var todayNewBondcoll = todayfdcoll + todayRdcoll;
                var todayRenewalBondcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.installmentno != 1 && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

                var yeslatefee = (from df in db.Installmenttabs where df.paymentdate < sdate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
                var yesreleif = (from df in db.Installmenttabs where df.paymentdate < sdate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
                var ylatefee = yeslatefee - yesreleif;

                var bformfeey = (from df in db.AgentDetails where df.Doj < sdate && df.BranchCode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
                var cformfeey = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && df.branchcode == br.BranchCode && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
                var mformfeey = (from df in db.Member_tabs where df.Cdate < sdate && df.BranchCode == br.BranchCode select df.Fee).DefaultIfEmpty(0).Sum();
                var acformfeey = (from df in db.SavingAccountInfos where df.Doj < sdate && df.branchcode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
                var deposity = (from df in db.TransactionTabs where df.pdate < sdate && df.branchcode == br.BranchCode select df.credit).DefaultIfEmpty(0).Sum();
                var intotaly = Math.Round((todayRenewalBondcoll + bformfeey + cformfeey + mformfeey + acformfeey + deposity + ylatefee + bookingy + advancey), 2);

                var spotcommy = (from o in db.spotcommission_tabs where o.date < sdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                var AdvPayment = (from df in db.AdvBrokerPaymentTabs where df.date < sdate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
                var withdrawy = (from df in db.TransactionTabs where df.pdate < sdate && df.branchcode == br.BranchCode select df.debit).DefaultIfEmpty(0).Sum();
                var expansey = (from df in db.Expenses where df.date_time < sdate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
                var todayVouchercoll = (from df in db.Voucher_Reports where df.date < sdate && df.branchcode == br.BranchCode select df.netamount).DefaultIfEmpty(0).Sum();
                var mat = (from df in db.MaturityTabs where df.maturitydate < sdate && df.branchcode == br.BranchCode select df.maturityamount).DefaultIfEmpty(0).Sum();
                var emplisty = (from se in db.Salary_ems where se.date < sdate select se).ToList();
                foreach (var el in emplisty)
                {
                    var erow = db.Emp_Regs.Single(er => er.empid == el.empid);
                    var branchcode = erow.branchcode;
                    if (branchcode == br.BranchCode)
                    {
                        var ysalary = (from df in db.Salary_ems where df.date < sdate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                        ytotalsalary = totalsalary + ysalary;
                    }
                }
                var extotaly = Math.Round((expansey + todayVouchercoll + ytotalsalary + withdrawy + AdvPayment + mat + spotcommy), 2);
                var grandtotaly = intotaly - extotaly;

                /////Today's Collection /////
                var todayfdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.mode == "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todayRdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.mode != "Single" && df.installmentno == 1 && df.type != "Adjustment" && df.branch == br.BranchCode && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todaybooking = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.bookingamount).DefaultIfEmpty(0).Sum();
                var todayadvance = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.downpayment).DefaultIfEmpty(0).Sum();
                var todayNewBondcoll1 = todayfdcoll1 + todayRdcoll1;
                var todayRenewalBondcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.installmentno != 1 && df.branch == br.BranchCode && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

                var todaylatefee = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
                var todayreleif = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
                var latefee = todaylatefee - todayreleif;

                var bformfee = (from df in db.AgentDetails where df.Doj >= sdate && df.Doj <= edate && df.BranchCode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
                var cformfee = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && df.branchcode == br.BranchCode && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
                var mformfee = (from df in db.Member_tabs where df.Cdate >= sdate && df.Cdate <= edate && df.BranchCode == br.BranchCode select df.Fee).DefaultIfEmpty(0).Sum();
                var acformfee = (from df in db.SavingAccountInfos where df.Doj >= sdate && df.Doj <= edate && df.branchcode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
                var deposit = (from df in db.TransactionTabs where df.pdate >= sdate && df.pdate <= edate && df.branchcode == br.BranchCode select df.credit).DefaultIfEmpty(0).Sum();
                var intotal = Math.Round((todayRenewalBondcoll1 + bformfee + cformfee + mformfee + acformfee + deposit + latefee + todaybooking + todayadvance), 2);

                var spotcomm = (from o in db.spotcommission_tabs where o.date >= sdate && o.date <= edate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                var AdvPayment1 = (from df in db.AdvBrokerPaymentTabs where df.date >= sdate && df.date <= edate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
                var withdraw = (from df in db.TransactionTabs where df.pdate >= sdate && df.pdate <= edate && df.branchcode == br.BranchCode select df.debit).DefaultIfEmpty(0).Sum();
                var expanse = (from df in db.Expenses where df.date_time >= sdate && df.date_time <= edate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
                var todayVouchercoll1 = (from df in db.Voucher_Reports where df.date >= sdate && df.date <= edate && df.branchcode == br.BranchCode select df.netamount).DefaultIfEmpty(0).Sum();
                var mat1 = (from df in db.MaturityTabs where df.maturitydate >= sdate && df.maturitydate <= edate && df.branchcode == br.BranchCode select df.maturityamount).DefaultIfEmpty(0).Sum();
                var emplist = (from se in db.Salary_ems where se.date >= sdate && se.date <= edate select se).ToList();
                foreach (var el in emplist)
                {

                    var salary = (from df in db.Salary_ems where df.date >= sdate && df.date <= edate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                    totalsalary = totalsalary + salary;
                }

                var extotal = Math.Round((expanse + todayVouchercoll1 + totalsalary + withdraw + AdvPayment1 + mat1 + spotcomm), 2);
                var grandtotal = intotal - extotal;

                cbrlist.Add(new BalanceReport { bookingamount = todaybooking, downpayment = todayadvance, maturity = mat1, pps = 0, fpo = todayRdcoll1, dpo = todayfdcoll1, advpayment = AdvPayment1, newbond = todayNewBondcoll1, renewel = todayRenewalBondcoll1, latefee = latefee, bformfee = bformfee, cformfee = cformfee, mformfee = mformfee, acformfee = acformfee, deposit = deposit, withdraw = withdraw, intotal = intotal, expence = expanse, spotcomm = spotcomm, voucher = todayVouchercoll1, salary = totalsalary, extotal = extotal, grandtotal = grandtotal, branchname = br.BranchName, companyname = cr.CompanyName, openingbalance = grandtotaly, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                Branchcode = bcode;
                stdate = sdate;
                enddate = edate;
                return View(cbrlist);
            }
        }
        public ActionResult PrintBranchClosingBalance()
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(d => d.BranchCode == Branchcode);
            Double totalsalary = 0;
            Double ytotalsalary = 0;
            var plan1 = db.Plans.Single(p1 => p1.Plancode == 1);
            var plan2 = db.Plans.Single(p2 => p2.Plancode == 2);
            var plan3 = db.Plans.Single(p3 => p3.Plancode == 3);
            var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
            /////Yesterday's Collection /////
            var todayfdcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.mode == "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todayRdcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.mode != "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && df.installmentno == 1 && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var bookingy = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.bookingamount).DefaultIfEmpty(0).Sum();
            var advancey = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.downpayment).DefaultIfEmpty(0).Sum();
            var todayNewBondcoll = todayfdcoll + todayRdcoll;
            var todayRenewalBondcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.installmentno != 1 && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

            var yeslatefee = (from df in db.Installmenttabs where df.paymentdate < stdate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
            var yesreleif = (from df in db.Installmenttabs where df.paymentdate < stdate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
            var ylatefee = yeslatefee - yesreleif;

            var bformfeey = (from df in db.AgentDetails where df.Doj < stdate && df.BranchCode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
            var cformfeey = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && df.branchcode == br.BranchCode && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
            var mformfeey = (from df in db.Member_tabs where df.Cdate < stdate && df.BranchCode == br.BranchCode select df.Fee).DefaultIfEmpty(0).Sum();
            var acformfeey = (from df in db.SavingAccountInfos where df.Doj < stdate && df.branchcode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
            var deposity = (from df in db.TransactionTabs where df.pdate < stdate && df.branchcode == br.BranchCode select df.credit).DefaultIfEmpty(0).Sum();
            var intotaly = Math.Round((todayRenewalBondcoll + bformfeey + cformfeey + mformfeey + acformfeey + deposity + ylatefee + bookingy + advancey), 2);

            var spotcommy = (from o in db.spotcommission_tabs where o.date < stdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
            var AdvPayment = (from df in db.AdvBrokerPaymentTabs where df.date < stdate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
            var withdrawy = (from df in db.TransactionTabs where df.pdate < stdate && df.branchcode == br.BranchCode select df.debit).DefaultIfEmpty(0).Sum();
            var expansey = (from df in db.Expenses where df.date_time < stdate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
            var todayVouchercoll = (from df in db.Voucher_Reports where df.date < stdate && df.branchcode == br.BranchCode select df.netamount).DefaultIfEmpty(0).Sum();
            var mat = (from df in db.MaturityTabs where df.maturitydate < stdate && df.branchcode == br.BranchCode select df.maturityamount).DefaultIfEmpty(0).Sum();
            var emplisty = (from se in db.Salary_ems where se.date < stdate select se).ToList();
            foreach (var el in emplisty)
            {
                var erow = db.Emp_Regs.Single(er => er.empid == el.empid);
                var branchcode = erow.branchcode;
                if (branchcode == br.BranchCode)
                {
                    var ysalary = (from df in db.Salary_ems where df.date < stdate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                    ytotalsalary = totalsalary + ysalary;
                }
            }
            var extotaly = Math.Round((expansey + todayVouchercoll + ytotalsalary + withdrawy + AdvPayment + mat + spotcommy), 2);
            var grandtotaly = intotaly - extotaly;

            /////Today's Collection /////
            var todayfdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.mode == "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todayRdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.mode != "Single" && df.installmentno == 1 && df.type != "Adjustment" && df.branch == br.BranchCode && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todaybooking = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.bookingamount).DefaultIfEmpty(0).Sum();
            var todayadvance = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.downpayment).DefaultIfEmpty(0).Sum();
            var todayNewBondcoll1 = todayfdcoll1 + todayRdcoll1;
            var todayRenewalBondcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.installmentno != 1 && df.branch == br.BranchCode && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

            var todaylatefee = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
            var todayreleif = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
            var latefee = todaylatefee - todayreleif;

            var bformfee = (from df in db.AgentDetails where df.Doj >= stdate && df.Doj <= enddate && df.BranchCode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
            var cformfee = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && df.branchcode == br.BranchCode && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
            var mformfee = (from df in db.Member_tabs where df.Cdate >= stdate && df.Cdate <= enddate && df.BranchCode == br.BranchCode select df.Fee).DefaultIfEmpty(0).Sum();
            var acformfee = (from df in db.SavingAccountInfos where df.Doj >= stdate && df.Doj <= enddate && df.branchcode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
            var deposit = (from df in db.TransactionTabs where df.pdate >= stdate && df.pdate <= enddate && df.branchcode == br.BranchCode select df.credit).DefaultIfEmpty(0).Sum();
            var intotal = Math.Round((todayRenewalBondcoll1 + bformfee + cformfee + mformfee + acformfee + deposit + latefee + todaybooking + todayadvance), 2);

            var spotcomm = (from o in db.spotcommission_tabs where o.date >= stdate && o.date <= enddate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
            var AdvPayment1 = (from df in db.AdvBrokerPaymentTabs where df.date >= stdate && df.date <= enddate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
            var withdraw = (from df in db.TransactionTabs where df.pdate >= stdate && df.pdate <= enddate && df.branchcode == br.BranchCode select df.debit).DefaultIfEmpty(0).Sum();
            var expanse = (from df in db.Expenses where df.date_time >= stdate && df.date_time <= enddate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
            var todayVouchercoll1 = (from df in db.Voucher_Reports where df.date >= stdate && df.date <= enddate && df.branchcode == br.BranchCode select df.netamount).DefaultIfEmpty(0).Sum();
            var mat1 = (from df in db.MaturityTabs where df.maturitydate >= stdate && df.maturitydate <= enddate && df.branchcode == br.BranchCode select df.maturityamount).DefaultIfEmpty(0).Sum();
            var emplist = (from se in db.Salary_ems where se.date >= stdate && se.date <= enddate select se).ToList();
            foreach (var el in emplist)
            {

                var salary = (from df in db.Salary_ems where df.date >= stdate && df.date <= enddate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                totalsalary = totalsalary + salary;
            }

            var extotal = Math.Round((expanse + todayVouchercoll1 + totalsalary + withdraw + AdvPayment1 + mat1 + spotcomm), 2);
            var grandtotal = intotal - extotal;

            cbrlist.Add(new BalanceReport { bookingamount = todaybooking, downpayment = todayadvance, maturity = mat1, pps = 0, fpo = todayRdcoll1, dpo = todayfdcoll1, advpayment = AdvPayment1, newbond = todayNewBondcoll1, renewel = todayRenewalBondcoll1, latefee = latefee, bformfee = bformfee, cformfee = cformfee, mformfee = mformfee, acformfee = acformfee, deposit = deposit, withdraw = withdraw, intotal = intotal, expence = expanse, spotcomm = spotcomm, voucher = todayVouchercoll1, salary = totalsalary, extotal = extotal, grandtotal = grandtotal, branchname = br.BranchName, companyname = cr.CompanyName, openingbalance = grandtotaly, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "ClosingBalanceReport.rpt"));
            rd.SetDataSource(cbrlist);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View(cbrlist);
        }

        [HttpGet]
        public ActionResult DailyCollectionBranch()
        {
            List<DailyCollection> dc = new List<DailyCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["date"] = string.Empty;
                ViewData["newagentid"] = string.Empty;
                ViewData["Branch"] = string.Empty;
                return View(dc);
            }

        }
        [HttpPost]
        public ActionResult DailyCollectionBranch(string bcode, DateTime date, string newagentid, int filter, int year)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["date"] = date;
                ViewData["newagentid"] = newagentid;
                ViewData["Branch"] = bcode;
                var bbb = db.Branchtabs.Single(o => o.BranchCode == bcode);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var ttbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                List<DailyCollection> dc = new List<DailyCollection>();
                List<Installment> inl = new List<Installment>();
                List<Memberfees> mfeeslist = new List<Memberfees>();
                Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0, dipositsaving = 0, widthdrawsaving = 0;
                Double formsumB = 0, appsumB = 0, memberfeesB = 0;
                var pst = db.Plans.Single(c => c.Plancode == 4);

                dipositsaving = (from j in db.TransactionTabs where j.pdate == date && j.branchcode == bbb.BranchCode select j.credit).DefaultIfEmpty(0).Sum();
                widthdrawsaving = (from j in db.TransactionTabs where j.pdate == date && j.branchcode == bbb.BranchCode select j.debit).DefaultIfEmpty(0).Sum();
                totalvoucher = (from ag in db.Voucher_Reports where ag.date == date && ag.branchcode == bbb.BranchCode select ag.netamount).DefaultIfEmpty(0).Sum();
                totalexp = (from ag in db.Expenses where ag.date_time == date && ag.branchcode == bbb.BranchCode select ag.amount).DefaultIfEmpty(0).Sum();
                appsum = (from b in db.appltabs where b.formdate == date && b.branchcode == bbb.BranchCode && ttbd.Contains(b.bondid) select b.applicationcharge).DefaultIfEmpty(0).Sum();
                formsum = (from ag in db.AgentDetails where ag.Doj == date && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                memberfees = (from ag in db.Member_tabs where ag.Cdate == date && ag.BranchCode == bbb.BranchCode select ag.Fee).DefaultIfEmpty(0).Sum();
                acformfees = (from ag in db.SavingAccountInfos where ag.Doj == date && ag.branchcode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();

                if (newagentid != null && newagentid != "")
                {
                    switch (filter)
                    {
                        case 1:
                            double fee = 0;
                            var tbd = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                            var bd = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                            appsumB = (from ag in db.appltabs where ag.formdate == date && ag.newintroducerid == newagentid && ag.branchcode == bbb.BranchCode && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.NewAgentId == newagentid && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                            var agent = db.appltabs.Where(s => s.formdate == date && s.newintroducerid == newagentid && s.branchcode == bbb.BranchCode && s.status == 1).ToList();
                            var agent1 = db.AgentDetails.Where(s => s.Doj == date && s.NewAgentId == newagentid && s.BranchCode == bbb.BranchCode).ToList();
                            foreach (var a in agent)
                            {

                                mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                            }
                            foreach (var b in agent1)
                            {
                                mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                            }
                            var result = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                            foreach (var mf in result)
                            {
                                var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                                if (mem1.Cdate == date)
                                {

                                    fee = mem1.Fee + fee;
                                }
                            }
                            memberfeesB = fee;
                            if (bd.Count() > 0)
                            {
                                foreach (var t in bd.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.type != "Adjustment").ToList();

                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsumB,
                                            formfee = formsumB,
                                            memberfee = memberfeesB,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }


                                //------Viewdata for display in page------------------------------------------


                            }
                            else if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = appsum,
                                    formfee = formsum,
                                    totalexp = totalexp,
                                    acformfee = 0,
                                    Voucher = totalvoucher,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = 0,
                                    widthdrawsaving = 0,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;

                        case 2:
                            double fee1 = 0;
                            var tbd2 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                            appsumB = (from ag in db.appltabs where ag.formdate == date && ag.newintroducerid == newagentid && ag.branchcode == bbb.BranchCode && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.NewAgentId == newagentid && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                            var agentB = db.appltabs.Where(s => s.formdate == date && s.newintroducerid == newagentid && s.branchcode == bbb.BranchCode && s.status == 1).ToList();
                            var agentB1 = db.AgentDetails.Where(s => s.Doj == date && s.NewAgentId == newagentid && s.BranchCode == bbb.BranchCode).ToList();
                            foreach (var a in agentB)
                            {

                                mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                            }
                            foreach (var b in agentB1)
                            {
                                mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                            }
                            var resultB = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                            foreach (var mf in resultB)
                            {
                                var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                                if (mem1.Cdate == date)
                                {

                                    fee1 = mem1.Fee + fee1;
                                }
                            }
                            memberfeesB = fee1;
                            var bd2 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd2.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                            if (bd2.Count() > 0)
                            {
                                foreach (var t in bd2.ToList())
                                {

                                    appsumB = (from b in db.appltabs where b.formdate == date && b.newintroducerid == newagentid && b.branchcode == bbb.BranchCode select b.applicationcharge).DefaultIfEmpty(0).Sum();
                                    formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.BranchCode == bbb.BranchCode && ag.NewIntroducerId == newagentid select ag.formfee).DefaultIfEmpty(0).Sum();

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,
                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsumB,
                                            formfee = formsumB,
                                            memberfee = memberfeesB,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;
                        case 3:
                            if (year > 0)
                            {
                                var tbd3 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.year == year && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            else
                            {
                                var tbd3 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            break;
                        case 4:

                            if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = 0,
                                    formfee = 0,
                                    totalexp = 0,
                                    acformfee = 0,
                                    Voucher = 0,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = 0,
                                    widthdrawsaving = 0,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }

                            break;
                    }
                }
                else if (newagentid == null || newagentid == "")
                {
                    switch (filter)
                    {
                        case 1:

                            var bd = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd.Count() > 0)
                            {
                                foreach (var t in bd.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {

                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsum,
                                            formfee = formsum,
                                            memberfee = memberfees,
                                            acformfee = acformfees,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = dipositsaving,
                                            widthdrawsaving = widthdrawsaving,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }


                                //------Viewdata for display in page------------------------------------------


                            }
                            else if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = appsum,
                                    formfee = formsum,
                                    totalexp = totalexp,
                                    acformfee = acformfees,
                                    Voucher = totalvoucher,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = dipositsaving,
                                    widthdrawsaving = widthdrawsaving,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;

                        case 2:

                            var bd2 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd2.Count() > 0)
                            {
                                foreach (var t in bd2.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,
                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsum,
                                            formfee = formsum,
                                            memberfee = memberfees,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;
                        case 3:
                            if (year > 0)
                            {
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.year == year && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            else
                            {

                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            break;
                        case 4:

                            if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = 0,
                                    formfee = 0,
                                    totalexp = 0,
                                    acformfee = acformfees,
                                    Voucher = 0,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = dipositsaving,
                                    widthdrawsaving = widthdrawsaving,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }

                            break;
                    }
                }

                ViewData["ondate"] = date;
                pdate = date;
                NewAgentid = newagentid;
                vvyear = year;
                sfilter = filter;
                Branchcode = bcode;
                return View(dc);
            }
        }
        public ActionResult PrintDailyCollectionBranchReport()
        {

            var bbb = db.Branchtabs.Single(o => o.BranchCode == Branchcode);
            ViewData["Branch"] = Branchcode;
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            List<DailyCollection> dc = new List<DailyCollection>();
            List<Installment> inl = new List<Installment>();
            List<Memberfees> mfeeslist = new List<Memberfees>();
            Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0, dipositsaving = 0, widthdrawsaving = 0;
            Double formsumB = 0, appsumB = 0, memberfeesB = 0;
            var pst = db.Plans.Single(c => c.Plancode == 4);
            var ttbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
            dipositsaving = (from j in db.TransactionTabs where j.pdate == pdate && j.branchcode == bbb.BranchCode select j.credit).DefaultIfEmpty(0).Sum();
            widthdrawsaving = (from j in db.TransactionTabs where j.pdate == pdate && j.branchcode == bbb.BranchCode select j.debit).DefaultIfEmpty(0).Sum();
            totalvoucher = (from ag in db.Voucher_Reports where ag.date == pdate && ag.branchcode == bbb.BranchCode select ag.netamount).DefaultIfEmpty(0).Sum();
            totalexp = (from ag in db.Expenses where ag.date_time == pdate && ag.branchcode == bbb.BranchCode select ag.amount).DefaultIfEmpty(0).Sum();
            appsum = (from b in db.appltabs where b.formdate == pdate && b.branchcode == bbb.BranchCode && ttbd.Contains(b.bondid) select b.applicationcharge).DefaultIfEmpty(0).Sum();
            formsum = (from ag in db.AgentDetails where ag.Doj == pdate && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
            memberfees = (from ag in db.Member_tabs where ag.Cdate == pdate && ag.BranchCode == bbb.BranchCode select ag.Fee).DefaultIfEmpty(0).Sum();
            acformfees = (from ag in db.SavingAccountInfos where ag.Doj == pdate && ag.branchcode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();

            if (NewAgentid != null && NewAgentid != "")
            {
                switch (sfilter)
                {
                    case 1:
                        Double fee = 0;
                        var tbd = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                        var bd = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                        appsumB = (from ag in db.appltabs where ag.formdate == pdate && ag.newintroducerid == NewAgentid && ag.branchcode == bbb.BranchCode && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsumB = (from ag in db.AgentDetails where ag.Doj == pdate && ag.NewAgentId == NewAgentid && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                        var agent = db.appltabs.Where(s => s.formdate == pdate && s.newintroducerid == NewAgentid && s.branchcode == bbb.BranchCode && s.status == 1).ToList();
                        var agent1 = db.AgentDetails.Where(s => s.Doj == pdate && s.NewAgentId == NewAgentid && s.BranchCode == bbb.BranchCode).ToList();
                        foreach (var a in agent)
                        {

                            mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                        }
                        foreach (var b in agent1)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                        }
                        var result = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                        foreach (var mf in result)
                        {
                            var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                            if (mem1.Cdate == pdate)
                            {

                                fee = mem1.Fee + fee;
                            }
                        }
                        memberfeesB = fee;
                        if (bd.Count() > 0)
                        {
                            foreach (var t in bd.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,

                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            //-------Insertion in Daily Collection Temp Tab--------------------------
                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsumB,
                                        formfee = formsumB,
                                        memberfee = memberfeesB,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }


                            //------Viewdata for display in page------------------------------------------


                        }
                        else if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = appsum,
                                formfee = formsum,
                                totalexp = totalexp,
                                acformfee = 0,
                                Voucher = totalvoucher,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = 0,
                                widthdrawsaving = 0,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;

                    case 2:
                        double fee1 = 0;
                        var tbd2 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                        appsumB = (from ag in db.appltabs where ag.formdate == pdate && ag.newintroducerid == NewAgentid && ag.branchcode == bbb.BranchCode && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsumB = (from ag in db.AgentDetails where ag.Doj == pdate && ag.NewAgentId == NewAgentid && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                        var agentB = db.appltabs.Where(s => s.formdate == pdate && s.newintroducerid == NewAgentid && s.branchcode == bbb.BranchCode && s.status == 1).ToList();
                        var agentB1 = db.AgentDetails.Where(s => s.Doj == pdate && s.NewAgentId == NewAgentid && s.BranchCode == bbb.BranchCode).ToList();
                        foreach (var a in agentB)
                        {

                            mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                        }
                        foreach (var b in agentB1)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                        }
                        var resultB = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                        foreach (var mf in resultB)
                        {
                            var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                            if (mem1.Cdate == pdate)
                            {

                                fee1 = mem1.Fee + fee1;
                            }
                        }
                        memberfeesB = fee1;
                        var bd2 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd2.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                        if (bd2.Count() > 0)
                        {
                            foreach (var t in bd2.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,
                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsumB,
                                        formfee = formsumB,
                                        memberfee = memberfeesB,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }

                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;
                    case 3:
                        if (vvyear > 0)
                        {
                            var tbd3 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.year == vvyear && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        else
                        {
                            var tbd3 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        break;
                    case 4:

                        if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = 0,
                                formfee = 0,
                                totalexp = 0,
                                acformfee = 0,
                                Voucher = 0,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = 0,
                                widthdrawsaving = 0,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }

                        break;
                }
            }
            else if (NewAgentid == null || NewAgentid == "")
            {
                switch (sfilter)
                {
                    case 1:

                        var bd = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                        if (bd.Count() > 0)
                        {
                            foreach (var t in bd.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,

                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            //-------Insertion in Daily Collection Temp Tab--------------------------
                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsum,
                                        formfee = formsum,
                                        memberfee = memberfees,
                                        acformfee = acformfees,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = dipositsaving,
                                        widthdrawsaving = widthdrawsaving,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }


                            //------Viewdata for display in page------------------------------------------


                        }
                        else if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = appsum,
                                formfee = formsum,
                                totalexp = totalexp,
                                acformfee = acformfees,
                                Voucher = totalvoucher,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;

                    case 2:

                        var bd2 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                        if (bd2.Count() > 0)
                        {
                            foreach (var t in bd2.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,
                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsum,
                                        formfee = formsum,
                                        memberfee = memberfees,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }

                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;
                    case 3:
                        if (vvyear > 0)
                        {
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.year == vvyear && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        else
                        {

                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        break;
                    case 4:

                        if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = 0,
                                formfee = 0,
                                totalexp = 0,
                                acformfee = acformfees,
                                Voucher = 0,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }

                        break;
                }
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "OperatorDailycollection.rpt"));
            rd.SetDataSource(dc);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                string dt = pdate.ToShortDateString();

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View(dc);

        }

        [HttpGet]
        public ActionResult DateWiseCollectionBranch()
        {
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["branchcode"] = string.Empty;
                ViewData["sdate"] = string.Empty;
                ViewData["edate"] = string.Empty;
                return View(dwclist);
            }
        }
        [HttpPost]
        public ActionResult DateWiseCollectionBranch(string bcode, DateTime sdate, DateTime edate)
        {
            List<Memberfees> mfeeslist = new List<Memberfees>();
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["branchcode"] = bcode;
                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;

                DateTime fsdate = sdate;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == bcode);
                var pst = db.Plans.Single(c => c.Plancode == 4);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, expense = 0, totalvoucher = 0, agfee = 0, appfee = 0, memberfee = 0, accfee = 0, deposit = 0, widthdraw = 0, pps = 0, late = 0, rebate = 0;
                while (sdate <= edate)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno == 1 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno == 1 && o.mode == "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 1 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 2 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 3 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 4 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 5 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 6 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year >= 7 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    late = (from o in db.Installmenttabs where o.paymentdate == sdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.latefine).DefaultIfEmpty(0).Sum();
                    rebate = (from o in db.Installmenttabs where o.paymentdate == sdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.reliefrs).DefaultIfEmpty(0).Sum();

                    deposit = (from o in db.appltabs where o.pdate == sdate && o.branchcode == br.BranchCode && tbd.Contains(o.bondid) select o.downpayment).DefaultIfEmpty(0).Sum();
                    memberfee = (from ag in db.Member_tabs where ag.Cdate == sdate && ag.BranchCode == br.BranchCode select ag.Fee).DefaultIfEmpty(0).Sum();
                    appfee = (from ag in db.appltabs where ag.formdate == sdate && ag.status == 1 && ag.branchcode == br.BranchCode select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                    agfee = (from ag in db.AgentDetails where ag.Doj == sdate && ag.BranchCode == br.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                    accfee = (from ag in db.SavingAccountInfos where ag.Doj == sdate && ag.branchcode == br.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                    widthdraw = (from o in db.spotcommission_tabs where o.date == sdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                    totalvoucher = (from o in db.Voucher_Reports where o.date == sdate && o.branchcode == br.BranchCode select o.netamount).DefaultIfEmpty(0).Sum();
                    expense = (from ag in db.Expenses where ag.date_time == sdate && ag.branchcode == br.BranchCode select ag.amount).DefaultIfEmpty(0).Sum();

                    if (tsis + tMISFresh + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a + expense + totalvoucher + agfee + appfee + memberfee + accfee + deposit + widthdraw + pps + late + rebate > 0)
                    {
                        dwclist.Add(new OpDatewisecollection { date = sdate, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, Expense = expense, Voucher = totalvoucher, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = fsdate, edate = edate, Appcharge = appfee, Agencyfee = agfee, Accountfee = accfee, Memberfee = memberfee, deposit = deposit, widthdraw = widthdraw, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, pps = pps, late = late, releaf = rebate });
                    }

                    sdate = sdate.AddDays(1);
                }

                stdate = fsdate;
                enddate = edate;
                Branchcode = bcode;
                return View(dwclist);
            }
        }
        public ActionResult PrintDatewiseCollectionBranch()
        {
            List<Memberfees> mfeeslist = new List<Memberfees>();
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime fsdate = stdate;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == Branchcode);
                var pst = db.Plans.Single(c => c.Plancode == 4);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, expense = 0, totalvoucher = 0, agfee = 0, appfee = 0, memberfee = 0, accfee = 0, deposit = 0, widthdraw = 0, pps = 0, late = 0, rebate = 0;
                while (stdate <= enddate)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno == 1 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno == 1 && o.mode == "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 1 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 2 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 3 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 4 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 5 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 6 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year >= 7 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    late = (from o in db.Installmenttabs where o.paymentdate == stdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.latefine).DefaultIfEmpty(0).Sum();
                    rebate = (from o in db.Installmenttabs where o.paymentdate == stdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.reliefrs).DefaultIfEmpty(0).Sum();

                    deposit = (from o in db.appltabs where o.pdate == stdate && o.branchcode == br.BranchCode && tbd.Contains(o.bondid) select o.downpayment).DefaultIfEmpty(0).Sum();
                    memberfee = (from ag in db.Member_tabs where ag.Cdate == stdate && ag.BranchCode == br.BranchCode select ag.Fee).DefaultIfEmpty(0).Sum();
                    appfee = (from ag in db.appltabs where ag.formdate == stdate && ag.status == 1 && ag.branchcode == br.BranchCode select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                    agfee = (from ag in db.AgentDetails where ag.Doj == stdate && ag.BranchCode == br.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                    accfee = (from ag in db.SavingAccountInfos where ag.Doj == stdate && ag.branchcode == br.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                    widthdraw = (from o in db.spotcommission_tabs where o.date == stdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                    totalvoucher = (from o in db.Voucher_Reports where o.date == stdate && o.branchcode == br.BranchCode select o.netamount).DefaultIfEmpty(0).Sum();
                    expense = (from ag in db.Expenses where ag.date_time == stdate && ag.branchcode == br.BranchCode select ag.amount).DefaultIfEmpty(0).Sum();

                    if (tsis + tMISFresh + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a + expense + totalvoucher + agfee + appfee + memberfee + accfee + deposit + widthdraw + pps + late + rebate > 0)
                    {
                        dwclist.Add(new OpDatewisecollection { date = stdate, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, Expense = expense, Voucher = totalvoucher, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = fsdate, edate = enddate, Appcharge = appfee, Agencyfee = agfee, Accountfee = accfee, Memberfee = memberfee, deposit = deposit, widthdraw = widthdraw, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, pps = pps, late = late, releaf = rebate });
                    }
                    stdate = stdate.AddDays(1);
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "DatewiseCollection.rpt"));
                rd.SetDataSource(dwclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(dwclist);
            }
        }

        [HttpGet]
        public ActionResult CompleteDailyCollectionBranch()
        {
            List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View(mdc);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }

        }
        [HttpPost]
        public ActionResult CompleteDailyCollectionBranch(string bcode, DateTime sdate, DateTime edate)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
                List<Installment> inl = new List<Installment>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);

                Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0;
                var pst = db.Plans.Single(c => c.Plancode == 4);
                var dipositsaving = (from j in db.TransactionTabs where j.pdate >= sdate && j.pdate <= edate && j.branchcode == bcode select j.credit).DefaultIfEmpty(0).Sum();
                var widthdrawsaving = (from j in db.TransactionTabs where j.pdate >= sdate && j.pdate <= edate && j.branchcode == bcode select j.debit).DefaultIfEmpty(0).Sum();
                totalvoucher = (from ag in db.Voucher_Reports where ag.date >= sdate && ag.date <= edate && ag.branchcode == bcode select ag.netamount).DefaultIfEmpty(0).Sum();
                totalexp = (from ag in db.Expenses where ag.date_time >= sdate && ag.date_time <= edate && ag.branchcode == bcode select ag.amount).DefaultIfEmpty(0).Sum();
                appsum = (from b in db.appltabs where b.formdate >= sdate && b.formdate <= edate && b.branchcode == bcode && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
                formsum = (from ag in db.AgentDetails where ag.Doj >= sdate && ag.Doj <= edate && ag.BranchCode == bcode select ag.formfee).DefaultIfEmpty(0).Sum();
                memberfees = (from ag in db.Member_tabs where ag.Cdate >= sdate && ag.Cdate <= edate && ag.BranchCode == bcode select ag.Fee).DefaultIfEmpty(0).Sum();
                acformfees = (from ag in db.SavingAccountInfos where ag.Doj >= sdate && ag.Doj <= edate && ag.branchcode == bcode select ag.formfee).DefaultIfEmpty(0).Sum();

                var bd = (from p in db.Installmenttabs where p.paymentdate >= sdate && p.paymentdate <= edate && p.paymentno != 0 && p.branch == bcode && tbd.Contains(p.bondid) select new { p.bondid }).Distinct();

                if (bd.Count() > 0)
                {
                    foreach (var t in bd.ToList())
                    {
                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                        var irow = (from im in db.Installmenttabs where im.bondid == t.bondid && im.paymentdate >= sdate && im.paymentdate <= edate && im.payamount != 0 && im.type != "Adjustment" select im).ToList();
                        foreach (var cl in irow.ToList())
                        {
                            var finalamount = 0.0;
                            if (app.plantype == pst.shortcutname)
                            {
                                finalamount = app.totalcon;
                            }
                            else
                            {
                                finalamount = cl.payamount;
                            }
                            inl.Add(new Installment
                            {
                                paymentdate = Convert.ToDateTime(cl.paymentdate),
                                rcptno = cl.receiptno,
                                amount = finalamount,
                                latefee = cl.latefine,
                                relief = cl.reliefrs,
                                cssno = Convert.ToInt32(cl.cssno),
                                year = cl.year,
                                installno = cl.installmentno,
                                Account_Code = app.newbondid,
                                Name = app.name,
                                Introducer_Code = agt.NewAgentId,
                                Rank = agt.RankName,
                                Planname = app.planname,
                                Plantype = app.plantype,
                                Term = app.term,

                            });
                        }

                    }

                    foreach (var i in inl.ToList())
                    {
                        string renew;
                        if (i.installno == 1)
                        {
                            renew = "New";
                        }
                        else
                        {
                            renew = "Renew";
                        }
                        if (renew == "Renew" && i.Plantype == pst.shortcutname)
                        {
                            ///-----------PPS Plan Amount Not Add 
                        }
                        else
                        {
                            mdc.Add(new MergeDailyCollection
                            {
                                cssno = i.cssno,
                                date = i.paymentdate,
                                newbondid = i.Account_Code,
                                name = i.Name,
                                rankname = i.Rank,
                                newintroducerid = i.Introducer_Code,
                                amount = i.amount,
                                latefine = i.latefee,
                                rebate = i.relief,
                                receiptno = i.rcptno,
                                planname = i.Planname,
                                term = i.Term,
                                newrenew = renew,
                                appcharge = appsum,
                                formfee = formsum,
                                memberfee = memberfees,
                                acformfee = acformfees,
                                totalexp = totalexp,
                                voucher = totalvoucher,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                branchname = bcode,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice,
                                sdate = sdate,
                                edate = edate
                            });
                        }

                    }

                    //------Viewdata for display in page------------------------------------------

                    stdate = sdate;
                    enddate = edate;
                    Branchcode = bcode;
                }
                else
                {
                    Response.Write("<script>alert('There is no collection in this date')</script>");
                }
                return View(mdc);
            }
        }
        public ActionResult PrintCompleteDailyCollectionBranch()
        {
            List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
            List<Installment> inl = new List<Installment>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);

            Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0;
            var pst = db.Plans.Single(c => c.Plancode == 4);
            var dipositsaving = (from j in db.TransactionTabs where j.pdate >= stdate && j.pdate <= enddate && j.branchcode == Branchcode select j.credit).DefaultIfEmpty(0).Sum();
            var widthdrawsaving = (from j in db.TransactionTabs where j.pdate >= stdate && j.pdate <= enddate && j.branchcode == Branchcode select j.debit).DefaultIfEmpty(0).Sum();
            totalvoucher = (from ag in db.Voucher_Reports where ag.date >= stdate && ag.date <= enddate && ag.branchcode == Branchcode select ag.netamount).DefaultIfEmpty(0).Sum();
            totalexp = (from ag in db.Expenses where ag.date_time >= stdate && ag.date_time <= enddate && ag.branchcode == Branchcode select ag.amount).DefaultIfEmpty(0).Sum();
            appsum = (from b in db.appltabs where b.formdate >= stdate && b.formdate <= enddate && b.branchcode == Branchcode select b.applicationcharge).DefaultIfEmpty(0).Sum();
            formsum = (from ag in db.AgentDetails where ag.Doj >= stdate && ag.Doj <= enddate && ag.BranchCode == Branchcode select ag.formfee).DefaultIfEmpty(0).Sum();
            memberfees = (from ag in db.Member_tabs where ag.Cdate >= stdate && ag.Cdate <= enddate && ag.BranchCode == Branchcode select ag.Fee).DefaultIfEmpty(0).Sum();
            acformfees = (from ag in db.SavingAccountInfos where ag.Doj >= stdate && ag.Doj <= enddate && ag.branchcode == Branchcode select ag.formfee).DefaultIfEmpty(0).Sum();

            var bd = (from p in db.Installmenttabs where p.paymentdate >= stdate && p.paymentdate <= enddate && p.paymentno != 0 && p.branch == Branchcode && tbd.Contains(p.bondid) select new { p.bondid }).Distinct();

            if (bd.Count() > 0)
            {
                foreach (var t in bd.ToList())
                {
                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                    var irow = (from im in db.Installmenttabs where im.bondid == t.bondid && im.paymentdate >= stdate && im.paymentdate <= enddate && im.payamount != 0 && im.type != "Adjustment" select im).ToList();
                    foreach (var cl in irow.ToList())
                    {
                        var finalamount = 0.0;
                        if (app.plantype == pst.shortcutname)
                        {
                            finalamount = app.totalcon;
                        }
                        else
                        {
                            finalamount = cl.payamount;
                        }
                        inl.Add(new Installment
                        {
                            paymentdate = Convert.ToDateTime(cl.paymentdate),
                            rcptno = cl.receiptno,
                            amount = finalamount,
                            latefee = cl.latefine,
                            relief = cl.reliefrs,
                            cssno = Convert.ToInt32(cl.cssno),
                            year = cl.year,
                            installno = cl.installmentno,
                            Account_Code = app.newbondid,
                            Name = app.name,
                            Introducer_Code = agt.NewAgentId,
                            Rank = agt.RankName,
                            Planname = app.planname,
                            Plantype = app.plantype,
                            Term = app.term,

                        });
                    }

                }

                //-------Insertion in Daily Collection Temp Tab--------------------------
                foreach (var i in inl.ToList())
                {

                    string renew;
                    if (i.installno == 1)
                    {
                        renew = "New";
                    }
                    else
                    {
                        renew = "Renew";
                    }
                    if (renew == "Renew" && i.Plantype == pst.shortcutname)
                    {

                    }
                    else
                    {
                        mdc.Add(new MergeDailyCollection
                        {
                            cssno = i.cssno,
                            date = i.paymentdate,
                            newbondid = i.Account_Code,
                            name = i.Name,
                            rankname = i.Rank,
                            newintroducerid = i.Introducer_Code,
                            amount = i.amount,
                            latefine = i.latefee,
                            rebate = i.relief,
                            receiptno = i.rcptno,
                            planname = i.Planname,
                            term = i.Term,
                            newrenew = renew,
                            appcharge = appsum,
                            formfee = formsum,
                            memberfee = memberfees,
                            acformfee = acformfees,
                            totalexp = totalexp,
                            voucher = totalvoucher,
                            dipositsaving = dipositsaving,
                            widthdrawsaving = widthdrawsaving,
                            branchname = Branchcode,
                            companyname = cr.CompanyName,
                            address = cr.Address,
                            emailid = cr.Emailid,
                            contact = cr.Contact,
                            domainname = cr.HeadOffice,
                            sdate = stdate,
                            edate = enddate
                        });
                    }

                }

            }


            else
            {
                Response.Write("<script>alert('There is no collection in this date')</script>");
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CDailycollection.rpt"));
            rd.SetDataSource(mdc);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                string dt = pdate.ToShortDateString();

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult CsswiseCollectionBranch()
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(csswlist);
            }
        }
        [HttpPost]
        public ActionResult CsswiseCollectionBranch(string bcode, DateTime date, int mincss, int maxcss)
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var bb = db.Branchtabs.Single(b => b.BranchCode == bcode);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                ViewData["Branch"] = bb.BranchName;
                var inslist = (from i in db.Installmenttabs orderby i.cssno where i.paymentdate == date && i.cssno >= mincss && i.cssno <= maxcss && i.branch == bcode && tbd.Contains(i.bondid) select i).ToList();
                foreach (var ins in inslist)
                {
                    var br = db.appltabs.Single(b => b.bondid == ins.bondid);
                    csswlist.Add(new CsswiseBusiness { paymethod = ins.paymethod, newbondid = ins.newbondid, name = br.name, cssno = Convert.ToInt32(ins.cssno), planname = ins.planname, term = ins.term_plan, mode = ins.mode, amount = ins.amount, latefine = ins.latefine, rebate = ins.reliefrs, payamount = ins.payamount, expirydate = ins.expirydate, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, date = date });
                }
                stdate = date;
                scss = mincss;
                ecss = maxcss;
                Branchcode = bcode;
                return View(csswlist);
            }
        }
        public ActionResult PrintCsswiseCollBranch()
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var bb = db.Branchtabs.Single(b => b.BranchCode == Branchcode);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var inslist = (from i in db.Installmenttabs orderby i.cssno where i.paymentdate == stdate && i.cssno >= scss && i.cssno <= ecss && i.branch == Branchcode && tbd.Contains(i.bondid) select i).ToList();
                foreach (var ins in inslist)
                {
                    var br = db.appltabs.Single(b => b.bondid == ins.bondid);
                    csswlist.Add(new CsswiseBusiness { newbondid = ins.newbondid, name = br.name, cssno = Convert.ToInt32(ins.cssno), planname = ins.planname, term = ins.term_plan, mode = ins.mode, amount = ins.amount, latefine = ins.latefine, rebate = ins.reliefrs, payamount = ins.payamount, expirydate = ins.expirydate, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, date = stdate });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "CSSwiseBusiness.rpt"));
                rd.SetDataSource(csswlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult FundMobilisationBranch()
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(pwclist);
            }
        }
        [HttpPost]
        public ActionResult FundMobilisationBranch(string bcode, DateTime sdate, DateTime edate)
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == bcode);
                ViewData["Branch"] = br.BranchName;
                var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= sdate && pl.paymentdate <= edate && pl.branch == bcode select new { pl.planname }).Distinct();
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, total = 0, tpps = 0, tnfp = 0;
                foreach (var plan in planlist)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "RD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tnfp = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "NFS" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode == "Single" && o.plantype == "FD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tpps = (from o in db.appltabs where o.formdate >= sdate && o.formdate <= edate && o.planname == plan.planname && o.mode != "Single" && o.plantype == "PPS" && o.branchcode == bcode && tbd.Contains(o.bondid) select o.totalcon).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 1 && o.plantype == "RD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 2 && o.plantype == "RD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 3 && o.plantype == "RD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 4 && o.plantype == "RD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 5 && o.plantype == "RD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 6 && o.plantype == "RD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year >= 7 && o.plantype == "RD" && o.branch == bcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    total = tMISFresh + tsis + tpps + tnfp + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a;
                    if (total > 0)
                    {
                        pwclist.Add(new FundMobilization { planname = plan.planname, tPPSFresh = tpps, tNFPFresh = tnfp, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, total = total, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                stdate = sdate;
                enddate = edate;
                Branchcode = bcode;
                return View(pwclist);
            }
        }
        public ActionResult PrintFundMobilisationBranch()
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == Branchcode);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= stdate && pl.paymentdate <= enddate && pl.branch == Branchcode select new { pl.planname }).Distinct();
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, total = 0, tpps = 0, tnfp = 0;
                foreach (var plan in planlist)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "RD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tnfp = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "NFS" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode == "Single" && o.plantype == "FD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tpps = (from o in db.appltabs where o.formdate >= stdate && o.formdate <= enddate && o.planname == plan.planname && o.mode != "Single" && o.plantype == "PPS" && o.branchcode == Branchcode && tbd.Contains(o.bondid) select o.totalcon).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 1 && o.plantype == "RD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 2 && o.plantype == "RD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 3 && o.plantype == "RD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 4 && o.plantype == "RD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 5 && o.plantype == "RD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 6 && o.plantype == "RD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year >= 7 && o.plantype == "RD" && o.branch == Branchcode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    total = tMISFresh + tsis + tpps + tnfp + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a;
                    if (total > 0)
                    {
                        pwclist.Add(new FundMobilization { planname = plan.planname, tPPSFresh = tpps, tNFPFresh = tnfp, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, total = total, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "FundMobilisation.rpt"));
                rd.SetDataSource(pwclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult MaturityPaidDetailsBranch()
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(mpdlist);
            }
        }
        [HttpPost]
        public ActionResult MaturityPaidDetailsBranch(string bcode, DateTime sdate, DateTime edate)
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == bcode);
                ViewData["Branch"] = br.BranchName;

                var mlist = (from pl in db.MaturityTabs where pl.maturitydate >= sdate && pl.maturitydate <= edate && pl.branchcode == bcode select pl).ToList();

                foreach (var m in mlist)
                {
                    mpdlist.Add(new MaturityPaid { newbondid = m.newbondid, name = m.name, newintroducerid = m.newintroducerid, mobileno = m.mobileno, formdate = m.formdate, planname = m.planname, term = m.term, mode = m.mode, payment = m.payment, nolandunit = m.nolandunit, totalcon = m.totalcon, expectedraisablevalue = m.expectedraisablevalue, expirydate = m.expirydate, maturityamount = m.maturityamount, maturitydate = m.maturitydate, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname, sdate = sdate, edate = edate });

                }

                stdate = sdate;
                enddate = edate;
                Branchcode = bcode;
                return View(mpdlist);
            }
        }
        public ActionResult PrintMaturityPaidBranch()
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == Branchcode);

                var mlist = (from pl in db.MaturityTabs where pl.maturitydate >= stdate && pl.maturitydate <= enddate && pl.branchcode == Branchcode select pl).ToList();

                foreach (var m in mlist)
                {
                    mpdlist.Add(new MaturityPaid { newbondid = m.newbondid, name = m.name, newintroducerid = m.newintroducerid, mobileno = m.mobileno, formdate = m.formdate, planname = m.planname, term = m.term, mode = m.mode, payment = m.payment, nolandunit = m.nolandunit, totalcon = m.totalcon, expectedraisablevalue = m.expectedraisablevalue, expirydate = m.expirydate, maturityamount = m.maturityamount, maturitydate = m.maturitydate, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname, sdate = stdate, edate = enddate });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "MaturityPaidDetails.rpt"));
                rd.SetDataSource(mpdlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult PaidVoucherBranch()
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(pv);
            }

        }
        [HttpPost]
        public ActionResult PaidVoucherBranch(int year, int month, string bcode)
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);

                string year1 = year.ToString();
                var pvlist = (from v in db.Voucher_Reports where v.year == year1 && v.month == month && v.branchcode == bcode select v).ToList();

                foreach (var m in pvlist.ToList())
                {
                    var advamount = Math.Round((m.commission - m.tds - m.netamount), 2);
                    if (advamount < 0)
                    {
                        advamount = 0;
                    }
                    var ag = db.AgentDetails.Single(o => o.AgencyCode == m.agentid && m.branchcode == bcode);
                    pv.Add(new PaidVoucher
                    {
                        Brokercode = ag.NewAgentId,
                        BrokerName = ag.name,
                        panno = ag.Panno,
                        bussiness = m.bussiness,
                        commission = m.commission,
                        netamount = m.netamount,
                        tds = m.tds,
                        advamount = advamount,
                        month = monthname,
                        year = m.year,
                        date = m.date,
                        Companyname = cr.CompanyName,
                        Broker_name = mr.agentname,
                        Branch_name = mr.branchname,
                        branchcode = bcode
                    });

                }

                vvyear = year;
                vmonth = month;
                ViewData["Branch"] = bcode;
                ViewData["Month"] = monthname;

                Branchcode = bcode;
                return View(pv);

            }
        }
        public ActionResult PrintPaidVoucherBranch()
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                string year1 = vvyear.ToString();

                var pvlist = (from v in db.Voucher_Reports where v.year == year1 && v.month == vmonth && v.branchcode == Branchcode select v).ToList();

                foreach (var m in pvlist.ToList())
                {
                    var advamount = Math.Round((m.commission - m.tds - m.netamount), 2);
                    if (advamount < 0)
                    {
                        advamount = 0;
                    }
                    var ag = db.AgentDetails.Single(o => o.AgencyCode == m.agentid && m.branchcode == Branchcode);
                    pv.Add(new PaidVoucher
                    {
                        Brokercode = ag.NewAgentId,
                        BrokerName = ag.name,
                        panno = ag.Panno,
                        bussiness = m.bussiness,
                        commission = m.commission,
                        netamount = m.netamount,
                        tds = m.tds,
                        advamount = advamount,
                        month = monthname,
                        year = m.year,
                        date = m.date,
                        Companyname = cr.CompanyName,
                        Broker_name = mr.agentname,
                        Branch_name = mr.branchname,
                        branchcode = Branchcode
                    });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "PaidVoucher.rpt"));
                rd.SetDataSource(pv);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(pv);
            }
        }

        [HttpGet]
        public ActionResult UnpaidvoucherBranch()
        {
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(vlist);
            }
        }
        [HttpPost]
        public ActionResult UnpaidvoucherBranch(int month, int year, string bcode)
        {
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<AgentDetail> blist = new List<AgentDetail>();
                string year1 = year.ToString();
                blist = (from b in db.AgentDetails where !db.Voucher_Reports.Any(p => p.agentid == b.AgencyCode && p.month == month && p.year == year1 && p.branchcode == bcode) && b.BranchCode == bcode select b).ToList();


                foreach (var b in blist)
                {
                    List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();

                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var mr = db.Members.Single(m => m.Id == 1);

                    var br = db.AgentDetails.Single(a => a.AgencyCode == b.AgencyCode);
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    Double tdsper = 0;
                    if (br.Panno == null || br.Panno == "")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == br.NewAgentId && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;

                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode select cts).Count();
                    var vyear = year.ToString();
                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode && cts.month == month && cts.year == vyear select cts).Count();
                    var commlist = (from co in db.commission_tabs where co.newagentid == br.NewAgentId && co.date.Month == month && co.date.Year == year select co).ToList();
                    foreach (var com in commlist)
                    {
                        var appr = db.appltabs.Single(bi => bi.newbondid == com.newbondid);
                        bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = br.NewAgentId, brokername = br.name, newintroducerid = br.NewIntroducerId, month = month.ToString(), voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                    }
                    var advancepayment = (from cts in db.AdvBrokerPaymentTabs where cts.newagentid == br.NewAgentId && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();

                    var gbusiness = bwvlist.Sum(tr => tr.business);
                    var gcommission = bwvlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                    vlist.Add(new PaidVoucher { Brokercode = br.NewAgentId, BrokerName = br.name, panno = br.Panno, netamount = netamount, bussiness = gbusiness, commission = gcommission, tds = lesstds, advamount = advancepayment, Branch_name = mr.branchname, Broker_name = mr.agentname, month = monthname, year = year.ToString(), Companyname = cr.CompanyName, branchcode = bcode, address = cr.Address, contact = cr.Contact, emailid = cr.Emailid, domainname = cr.HeadOffice });

                }
                vvyear = year;
                vmonth = month;
                Branchcode = bcode;
                ViewData["Branch"] = bcode;
                ViewData["Month"] = monthname;
                //----------End selecting team business and commission of selected month---------------
                /////////Selecting Voucher List End Here//////

                return View(vlist);
            }
        }
        public ActionResult PrintunpaidvoucherBranch()
        {
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            List<AgentDetail> blist = new List<AgentDetail>();
            string year1 = vvyear.ToString();
            blist = (from b in db.AgentDetails where !db.Voucher_Reports.Any(p => p.agentid == b.AgencyCode && p.month == vmonth && p.year == year1 && p.branchcode == Branchcode) && b.BranchCode == Branchcode select b).ToList();


            foreach (var b in blist)
            {
                List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(m => m.Id == 1);

                var br = db.AgentDetails.Single(a => a.AgencyCode == b.AgencyCode);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;
                if (br.Panno == null || br.Panno == "")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }
                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == br.NewAgentId && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;

                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode select cts).Count();
                var vyear = vvyear.ToString();
                var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode && cts.month == vmonth && cts.year == vyear select cts).Count();
                var commlist = (from co in db.commission_tabs where co.newagentid == br.NewAgentId && co.date.Month == vmonth && co.date.Year == vvyear select co).ToList();
                foreach (var com in commlist)
                {
                    var appr = db.appltabs.Single(bi => bi.newbondid == com.newbondid);
                    bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = br.NewAgentId, brokername = br.name, newintroducerid = br.NewIntroducerId, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                }
                var advancepayment = (from cts in db.AdvBrokerPaymentTabs where cts.newagentid == br.NewAgentId && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                var gbusiness = bwvlist.Sum(tr => tr.business);
                var gcommission = bwvlist.Sum(tr => tr.commission);
                var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                vlist.Add(new PaidVoucher { Brokercode = br.NewAgentId, BrokerName = br.name, panno = br.Panno, netamount = netamount, bussiness = gbusiness, commission = gcommission, tds = lesstds, advamount = advancepayment, Branch_name = mr.branchname, Broker_name = mr.agentname, month = monthname, year = vvyear.ToString(), Companyname = cr.CompanyName, branchcode = Branchcode, address = cr.Address, contact = cr.Contact, emailid = cr.Emailid, domainname = cr.HeadOffice });

            }

            //----------End selecting team business and commission of selected month---------------
            /////////Selecting Voucher List End Here//////


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "UnpaidVoucher.rpt"));
            rd.SetDataSource(vlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                string dt = pdate.ToShortDateString();

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View(vlist);
        }

        [HttpGet]
        public ActionResult DuplicatePrintReportBranch()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateTab> dpt = new List<DuplicateTab>();


                return View(dpt);
            }
        }
        [HttpPost]
        public ActionResult DuplicatePrintReportBranch(DateTime sdate, DateTime edate, string type, string branch)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateTab> dpt = new List<DuplicateTab>();
                dpt = (from g in db.DuplicateTabs where g.date >= sdate && g.date <= edate && g.type == type && g.opid == branch select g).ToList();

                stdate = sdate;
                enddate = edate;
                ptype = type;
                Branchcode = branch;
                ViewData["Type"] = type;
                return View(dpt);

            }
        }
        public ActionResult PrintDuplicateBranchReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateTab> dpt = new List<DuplicateTab>();
                dpt = (from g in db.DuplicateTabs where g.date >= stdate && g.date <= enddate && g.type == ptype && g.opid == Branchcode select g).ToList();

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DuplicatePrint.rpt"));
                rd.SetDataSource(dpt);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(dpt);
            }
        }

        [HttpGet]
        public ActionResult CancelReceiptBranch()
        {
            List<CancelRcptList> crcptlist = new List<CancelRcptList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(crcptlist);
            }
        }
        [HttpPost]
        public ActionResult CancelReceiptBranch(string bcode)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<CancelRcptList> crcptlist = new List<CancelRcptList>();
                var br = db.Branchtabs.Single(s => s.BranchCode == bcode);
                var ins = (from dcl in db.Cancel_Receipts where dcl.branch == br.BranchCode select dcl).ToList();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                foreach (var i in ins)
                {
                    crcptlist.Add(new CancelRcptList { newbondid = i.newbondid, opid = i.opid, time = i.Time, payamount = i.payamount, installmentno = i.installmentno, receiptno = i.receiptno, planname = i.planname, mode = i.mode, term = i.term, pdate = i.paymentdate, cdate = i.Time, cancelby = i.opid, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                Branchcode = bcode;
                return View(crcptlist);
            }
        }
        public ActionResult PrintCancelReceiptBranch()
        {

            List<CancelRcptList> crcptlist = new List<CancelRcptList>();
            var br = db.Branchtabs.Single(s => s.BranchCode == Branchcode);
            var ins = (from dcl in db.Cancel_Receipts where dcl.branch == br.BranchCode select dcl).ToList();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            foreach (var i in ins)
            {
                crcptlist.Add(new CancelRcptList { newbondid = i.newbondid, opid = i.opid, time = i.Time, payamount = i.payamount, installmentno = i.installmentno, receiptno = i.receiptno, planname = i.planname, mode = i.mode, term = i.term, pdate = i.paymentdate, cdate = i.Time, cancelby = i.opid, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "cancelreceipt.rpt"));
            rd.SetDataSource(crcptlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }


        #endregion

        #endregion

        #region Operatorwise Report Menu Start here

        #region Operatorwise Field Report

        [HttpGet]
        public ActionResult BrokerOperator()
        {

            List<AgentDetail> ad = new List<AgentDetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View(ad);

            }
        }
        [HttpPost]
        public ActionResult BrokerOperator(string opid)
        {


            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var br = db.Operators.Single(o => o.OperatorId == opid);
                var dr = (from o in db.AgentDetails where o.BranchCode == br.BranchCode && o.Status == 1 orderby o.NewAgentId select o).ToList();
                ViewData["Branch"] = br.BranchCode;
                OperatorId = opid;
                return View(dr);

            }
        }
        public ActionResult PrintBrokerOperatorList()
        {
            var opr = db.Operators.Single(o => o.OperatorId == OperatorId);
            var br = db.Branchtabs.Single(o => o.BranchCode == opr.BranchCode);
            List<BrokerList> blist = new List<BrokerList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var brolist = (from o in db.AgentDetails where o.BranchCode == br.BranchCode && o.Status == 1 orderby o.NewAgentId select o).ToList();
            foreach (var b in brolist)
            {
                blist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Brokerlist.rpt"));
            rd.SetDataSource(blist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult DatewiseBrokerOperator()
        {
            List<BrokerList> dwblist = new List<BrokerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(dwblist);
            }
        }
        [HttpPost]
        public ActionResult DatewiseBrokerOperator(string opid, DateTime sdate, DateTime edate)
        {
            List<BrokerList> dwblist = new List<BrokerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var pr = db.Operators.Single(o => o.OperatorId == opid);
                var br = db.Branchtabs.Single(o => o.BranchCode == pr.BranchCode);
                var blist = (from g in db.AgentDetails where g.BranchCode == pr.BranchCode && g.Doj >= sdate && g.Doj <= edate && g.Status == 1 orderby g.NewAgentId select g).ToList();
                foreach (var b in blist)
                {
                    dwblist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, sdate = sdate, edate = edate });
                }

                stdate = sdate;
                enddate = edate;
                OperatorId = opid;

                return View(dwblist);

            }
        }
        public ActionResult PrintDatewiseBrokerOperator()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<BrokerList> dwblist = new List<BrokerList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(o => o.OperatorId == OperatorId);
                var br = db.Branchtabs.Single(o => o.BranchCode == pr.BranchCode);
                var blist = (from g in db.AgentDetails where g.BranchCode == pr.BranchCode && g.Doj >= stdate && g.Doj <= enddate && g.Status == 1 orderby g.NewAgentId select g).ToList();
                foreach (var b in blist)
                {
                    dwblist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, sdate = stdate, edate = enddate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DatewiseBroker.rpt"));
                rd.SetDataSource(dwblist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(dwblist);
            }
        }

        #endregion

        #region Operatorwise Official Report

        [HttpGet]
        public ActionResult CustomerListOpwise()
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(custlist);
            }
        }
        [HttpPost]
        public ActionResult CustomerListOpwise(int option, string opid)
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            List<appltab> cus = new List<appltab>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var pr = db.Operators.Single(o => o.OperatorId == opid);
                var bb = db.Branchtabs.Single(o => o.BranchCode == pr.BranchCode);
                ViewData["Branch"] = bb.BranchCode;

                if (option > 0)
                {
                    cus = (from s in db.appltabs where s.opid == pr.OperatorId && s.projectid == option && s.status == 1 orderby s.newbondid select s).ToList();
                }
                else
                {
                    cus = (from s in db.appltabs where s.opid == pr.OperatorId && s.status == 1 orderby s.newbondid select s).ToList();
                }
                foreach (var cust in cus)
                {
                    custlist.Add(new DatewiseCustomerList { newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                PId = option;
                OperatorId = opid;
                return View(custlist);

            }

        }
        public ActionResult PrintCustomerListOpwise()
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            List<appltab> cus = new List<appltab>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var pr = db.Operators.Single(o => o.OperatorId == OperatorId);
            var bb = db.Branchtabs.Single(o => o.BranchCode == pr.BranchCode);

            if (PId > 0)
            {
                cus = (from s in db.appltabs where s.opid == pr.OperatorId && s.projectid == PId && s.status == 1 orderby s.newbondid select s).ToList();
            }
            else
            {
                cus = (from s in db.appltabs where s.opid == pr.OperatorId && s.status == 1 orderby s.newbondid select s).ToList();
            }

            foreach (var cust in cus)
            {
                custlist.Add(new DatewiseCustomerList { newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CustomerList.rpt"));
            rd.SetDataSource(custlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult DailyExpenseOpwise()
        {
            List<Expense> ins = new List<Expense>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(ins);
            }
        }
        [HttpPost]
        public ActionResult DailyExpenseOpwise(string opid, DateTime sdate, DateTime edate)
        {
            List<Expense> ins = new List<Expense>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var or = db.Operators.Single(o => o.OperatorId == opid);
                ins = (from dcl in db.Expenses where dcl.date_time >= sdate && dcl.date_time <= edate && dcl.opid == opid select dcl).ToList();
                ab = sdate;
                b = edate;
                ViewData["Branch"] = or.BranchCode;
                OperatorId = opid;
                return View(ins);
            }
        }
        public ActionResult PrintExpanseOpwise()
        {
            List<Expense> comm = new List<Expense>();
            comm = db.Expenses.Where(s => s.date_time >= ab && s.date_time <= b && s.opid == OperatorId).ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DailyExpanse.rpt"));
            rd.SetDataSource(comm);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View();
        }

        [HttpGet]
        public ActionResult OperatorDailyCollection()
        {
            List<DailyCollection> dc = new List<DailyCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["date"] = string.Empty;
                ViewData["newagentid"] = string.Empty;
                ViewData["opid"] = string.Empty;
                return View(dc);
            }
        }
        [HttpPost]
        public ActionResult OperatorDailyCollection(DateTime date, string opid, string newagentid, int filter, int year)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["date"] = date;
                ViewData["newagentid"] = newagentid;
                var pr = db.Operators.Single(o => o.OperatorId == opid);
                var bbb = db.Branchtabs.Single(bc => bc.BranchCode == pr.BranchCode);
                ViewData["opid"] = pr.OperatorId;

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                List<DailyCollection> dc = new List<DailyCollection>();
                List<Installment> inl = new List<Installment>();
                List<Memberfees> mfeeslist = new List<Memberfees>();
                Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0, dipositsaving = 0, widthdrawsaving = 0;
                Double formsumB = 0, appsumB = 0, memberfeesB = 0;
                var pst = db.Plans.Single(c => c.Plancode == 4);
                var ttbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                dipositsaving = (from j in db.TransactionTabs where j.pdate == date && j.opid == pr.OperatorId select j.credit).DefaultIfEmpty(0).Sum();
                widthdrawsaving = (from j in db.TransactionTabs where j.pdate == date && j.opid == pr.OperatorId select j.debit).DefaultIfEmpty(0).Sum();
                totalvoucher = (from ag in db.Voucher_Reports where ag.date == date && ag.Operatorid == pr.OperatorId select ag.netamount).DefaultIfEmpty(0).Sum();
                totalexp = (from ag in db.Expenses where ag.date_time == date && ag.opid == pr.OperatorId select ag.amount).DefaultIfEmpty(0).Sum();
                appsum = (from b in db.appltabs where b.formdate == date && b.opid == pr.OperatorId && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
                formsum = (from ag in db.AgentDetails where ag.Doj == date && ag.operatorid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                memberfees = (from ag in db.Member_tabs where ag.Cdate == date && ag.Opid == pr.OperatorId select ag.Fee).DefaultIfEmpty(0).Sum();
                acformfees = (from ag in db.SavingAccountInfos where ag.Doj == date && ag.opid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();

                if (newagentid != null && newagentid != "")
                {
                    switch (filter)
                    {
                        case 1:
                            Double fee = 0;
                            var tbd = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                            var bd = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd.Contains(p.bondid) && p.opid == pr.OperatorId select new { p.bondid }).Distinct();
                            appsumB = (from ag in db.appltabs where ag.formdate == date && ag.newintroducerid == newagentid && ag.opid == pr.OperatorId && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.NewAgentId == newagentid && ag.operatorid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                            var agent = db.appltabs.Where(s => s.formdate == date && s.newintroducerid == newagentid && s.opid == pr.OperatorId && s.status == 1).ToList();
                            var agent1 = db.AgentDetails.Where(s => s.Doj == date && s.NewAgentId == newagentid && s.operatorid == pr.OperatorId).ToList();
                            foreach (var a in agent)
                            {

                                mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                            }
                            foreach (var b in agent1)
                            {
                                mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                            }
                            var result = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                            foreach (var mf in result)
                            {
                                var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                                if (mem1.Cdate == date)
                                {

                                    fee = mem1.Fee + fee;
                                }
                            }
                            memberfeesB = fee;
                            if (bd.Count() > 0)
                            {
                                foreach (var t in bd.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsumB,
                                            formfee = formsumB,
                                            memberfee = memberfeesB,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }


                                //------Viewdata for display in page------------------------------------------


                            }
                            else if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = appsum,
                                    formfee = formsum,
                                    totalexp = totalexp,
                                    acformfee = 0,
                                    Voucher = totalvoucher,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = 0,
                                    widthdrawsaving = 0,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;

                        case 2:
                            Double fee1 = 0;
                            var tbd2 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                            appsumB = (from ag in db.appltabs where ag.formdate == date && ag.newintroducerid == newagentid && ag.opid == pr.OperatorId && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.NewAgentId == newagentid && ag.operatorid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                            var agentB = db.appltabs.Where(s => s.formdate == date && s.newintroducerid == newagentid && s.opid == pr.OperatorId && s.status == 1).ToList();
                            var agentB1 = db.AgentDetails.Where(s => s.Doj == date && s.NewAgentId == newagentid && s.operatorid == pr.OperatorId).ToList();
                            foreach (var a in agentB)
                            {

                                mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                            }
                            foreach (var b in agentB1)
                            {
                                mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                            }
                            var resultB = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                            foreach (var mf in resultB)
                            {
                                var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                                if (mem1.Cdate == date)
                                {

                                    fee1 = mem1.Fee + fee1;
                                }
                            }
                            memberfeesB = fee1;
                            var bd2 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd2.Contains(p.bondid) && p.opid == pr.OperatorId select new { p.bondid }).Distinct();
                            if (bd2.Count() > 0)
                            {
                                foreach (var t in bd2.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,
                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsumB,
                                            formfee = formsumB,
                                            memberfee = memberfeesB,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;
                        case 3:
                            if (year > 0)
                            {
                                var tbd3 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.opid == pr.OperatorId select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.year == year && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            else
                            {
                                var tbd3 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.opid == pr.OperatorId select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            break;
                        case 4:

                            if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = 0,
                                    formfee = 0,
                                    totalexp = 0,
                                    acformfee = 0,
                                    Voucher = 0,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = 0,
                                    widthdrawsaving = 0,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }

                            break;
                    }
                }
                else if (newagentid == null || newagentid == "")
                {
                    switch (filter)
                    {
                        case 1:

                            var bd = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.opid == pr.OperatorId && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd.Count() > 0)
                            {
                                foreach (var t in bd.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsum,
                                            formfee = formsum,
                                            memberfee = memberfees,
                                            acformfee = acformfees,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = dipositsaving,
                                            widthdrawsaving = widthdrawsaving,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }


                                //------Viewdata for display in page------------------------------------------


                            }
                            else if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = appsum,
                                    formfee = formsum,
                                    totalexp = totalexp,
                                    acformfee = acformfees,
                                    Voucher = totalvoucher,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = dipositsaving,
                                    widthdrawsaving = widthdrawsaving,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;

                        case 2:

                            var bd2 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.opid == pr.OperatorId && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd2.Count() > 0)
                            {
                                foreach (var t in bd2.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,
                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsum,
                                            formfee = formsum,
                                            memberfee = memberfees,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;
                        case 3:
                            if (year > 0)
                            {
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.opid == pr.OperatorId && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.year == year && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            else
                            {

                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.opid == pr.OperatorId && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }

                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            break;
                        case 4:

                            if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = 0,
                                    formfee = 0,
                                    totalexp = 0,
                                    acformfee = acformfees,
                                    Voucher = 0,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = dipositsaving,
                                    widthdrawsaving = widthdrawsaving,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }

                            break;
                    }
                }

                ViewData["ondate"] = date;
                pdate = date;
                NewAgentid = newagentid;
                vvyear = year;
                sfilter = filter;
                OperatorId = opid;
                return View(dc);
            }
        }
        public ActionResult PrintOperatorDailyCollection()
        {
            var pr = db.Operators.Single(o => o.OperatorId == OperatorId);
            var bbb = db.Branchtabs.Single(bc => bc.BranchCode == pr.BranchCode);
            ViewData["opid"] = pr.OperatorId;

            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            List<DailyCollection> dc = new List<DailyCollection>();
            List<Installment> inl = new List<Installment>();
            List<Memberfees> mfeeslist = new List<Memberfees>();
            Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0, dipositsaving = 0, widthdrawsaving = 0;
            Double formsumB = 0, appsumB = 0, memberfeesB = 0;
            var pst = db.Plans.Single(c => c.Plancode == 4);
            var ttbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
            dipositsaving = (from j in db.TransactionTabs where j.pdate == pdate && j.opid == pr.OperatorId select j.credit).DefaultIfEmpty(0).Sum();
            widthdrawsaving = (from j in db.TransactionTabs where j.pdate == pdate && j.opid == pr.OperatorId select j.debit).DefaultIfEmpty(0).Sum();
            totalvoucher = (from ag in db.Voucher_Reports where ag.date == pdate && ag.Operatorid == pr.OperatorId select ag.netamount).DefaultIfEmpty(0).Sum();
            totalexp = (from ag in db.Expenses where ag.date_time == pdate && ag.opid == pr.OperatorId select ag.amount).DefaultIfEmpty(0).Sum();
            appsum = (from b in db.appltabs where b.formdate == pdate && b.opid == pr.OperatorId && b.status == 1 select b.applicationcharge).DefaultIfEmpty(0).Sum();
            formsum = (from ag in db.AgentDetails where ag.Doj == pdate && ag.operatorid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
            memberfees = (from ag in db.Member_tabs where ag.Cdate == pdate && ag.Opid == pr.OperatorId select ag.Fee).DefaultIfEmpty(0).Sum();
            acformfees = (from ag in db.SavingAccountInfos where ag.Doj == pdate && ag.opid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();

            if (NewAgentid != null && NewAgentid != "")
            {
                switch (sfilter)
                {
                    case 1:
                        Double fee = 0;
                        var tbd = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                        var bd = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd.Contains(p.bondid) && p.opid == pr.OperatorId select new { p.bondid }).Distinct();
                        appsumB = (from ag in db.appltabs where ag.formdate == pdate && ag.newintroducerid == NewAgentid && ag.opid == pr.OperatorId && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsumB = (from ag in db.AgentDetails where ag.Doj == pdate && ag.NewAgentId == NewAgentid && ag.operatorid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                        var agent = db.appltabs.Where(s => s.formdate == pdate && s.newintroducerid == NewAgentid && s.opid == pr.OperatorId && s.status == 1).ToList();
                        var agent1 = db.AgentDetails.Where(s => s.Doj == pdate && s.NewAgentId == NewAgentid && s.operatorid == pr.OperatorId).ToList();
                        foreach (var a in agent)
                        {

                            mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                        }
                        foreach (var b in agent1)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                        }
                        var result = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                        foreach (var mf in result)
                        {
                            var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                            if (mem1.Cdate == pdate)
                            {

                                fee = mem1.Fee + fee;
                            }
                        }
                        memberfeesB = fee;
                        if (bd.Count() > 0)
                        {
                            foreach (var t in bd.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,

                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            //-------Insertion in Daily Collection Temp Tab--------------------------
                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsumB,
                                        formfee = formsumB,
                                        memberfee = memberfeesB,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }


                            //------Viewdata for display in page------------------------------------------


                        }
                        else if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = appsum,
                                formfee = formsum,
                                totalexp = totalexp,
                                acformfee = 0,
                                Voucher = totalvoucher,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = 0,
                                widthdrawsaving = 0,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;

                    case 2:
                        Double fee1 = 0;
                        var tbd2 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                        appsumB = (from ag in db.appltabs where ag.formdate == pdate && ag.newintroducerid == NewAgentid && ag.opid == pr.OperatorId && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsumB = (from ag in db.AgentDetails where ag.Doj == pdate && ag.NewAgentId == NewAgentid && ag.operatorid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                        var agentB = db.appltabs.Where(s => s.formdate == pdate && s.newintroducerid == NewAgentid && s.opid == pr.OperatorId && s.status == 1).ToList();
                        var agentB1 = db.AgentDetails.Where(s => s.Doj == pdate && s.NewAgentId == NewAgentid && s.operatorid == pr.OperatorId).ToList();
                        foreach (var a in agentB)
                        {

                            mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                        }
                        foreach (var b in agentB1)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                        }
                        var resultB = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                        foreach (var mf in resultB)
                        {
                            var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                            if (mem1.Cdate == pdate)
                            {

                                fee1 = mem1.Fee + fee1;
                            }
                        }
                        memberfeesB = fee1;
                        var bd2 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd2.Contains(p.bondid) && p.opid == pr.OperatorId select new { p.bondid }).Distinct();
                        if (bd2.Count() > 0)
                        {
                            foreach (var t in bd2.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,
                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsumB,
                                        formfee = formsumB,
                                        memberfee = memberfeesB,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }

                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;
                    case 3:
                        if (vvyear > 0)
                        {
                            var tbd3 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.opid == pr.OperatorId select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.year == vvyear && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        else
                        {
                            var tbd3 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.opid == pr.OperatorId select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        break;
                    case 4:

                        if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = 0,
                                formfee = 0,
                                totalexp = 0,
                                acformfee = 0,
                                Voucher = 0,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = 0,
                                widthdrawsaving = 0,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }

                        break;
                }
            }
            else if (NewAgentid == null || NewAgentid == "")
            {
                switch (sfilter)
                {
                    case 1:

                        var bd = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.opid == pr.OperatorId && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                        if (bd.Count() > 0)
                        {
                            foreach (var t in bd.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,

                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            //-------Insertion in Daily Collection Temp Tab--------------------------
                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsum,
                                        formfee = formsum,
                                        memberfee = memberfees,
                                        acformfee = acformfees,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = dipositsaving,
                                        widthdrawsaving = widthdrawsaving,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }


                            //------Viewdata for display in page------------------------------------------


                        }
                        else if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = appsum,
                                formfee = formsum,
                                totalexp = totalexp,
                                acformfee = acformfees,
                                Voucher = totalvoucher,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;

                    case 2:

                        var bd2 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.opid == pr.OperatorId && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                        if (bd2.Count() > 0)
                        {
                            foreach (var t in bd2.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,
                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsum,
                                        formfee = formsum,
                                        memberfee = memberfees,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }

                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;
                    case 3:
                        if (vvyear > 0)
                        {
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.opid == pr.OperatorId && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.year == vvyear && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        else
                        {

                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.opid == pr.OperatorId && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }

                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        break;
                    case 4:

                        if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = 0,
                                formfee = 0,
                                totalexp = 0,
                                acformfee = acformfees,
                                Voucher = 0,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }

                        break;
                }
            }


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "OperatorDailycollection.rpt"));
            rd.SetDataSource(dc);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                string dt = pdate.ToShortDateString();

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View(dc);

        }

        [HttpGet]
        public ActionResult OperatorDateWiseCollection()
        {
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["opid"] = string.Empty;
                ViewData["sdate"] = string.Empty;
                ViewData["edate"] = string.Empty;
                return View(dwclist);
            }
        }
        [HttpPost]
        public ActionResult OperatorDateWiseCollection(DateTime sdate, DateTime edate, string opid)
        {
            List<Memberfees> mfeeslist = new List<Memberfees>();
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["opid"] = opid;
                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;


                DateTime fsdate = sdate;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(p => p.OperatorId == opid);
                var br = db.Branchtabs.Single(b => b.BranchCode == pr.BranchCode);
                var pst = db.Plans.Single(c => c.Plancode == 4);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, expense = 0, totalvoucher = 0, agfee = 0, appfee = 0, memberfee = 0, accfee = 0, deposit = 0, widthdraw = 0, pps = 0, late = 0, rebate = 0;
                while (sdate <= edate)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno == 1 && o.mode != "Single" && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno == 1 && o.mode == "Single" && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 1 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 2 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 3 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 4 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 5 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 6 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year >= 7 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    late = (from o in db.Installmenttabs where o.paymentdate == sdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.latefine).DefaultIfEmpty(0).Sum();
                    rebate = (from o in db.Installmenttabs where o.paymentdate == sdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.reliefrs).DefaultIfEmpty(0).Sum();

                    deposit = (from o in db.appltabs where o.pdate == sdate && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.downpayment).DefaultIfEmpty(0).Sum();
                    memberfee = (from ag in db.Member_tabs where ag.Cdate == sdate && ag.Opid == pr.OperatorId select ag.Fee).DefaultIfEmpty(0).Sum();
                    appfee = (from ag in db.appltabs where ag.formdate == sdate && ag.status == 1 && ag.opid == pr.OperatorId select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                    agfee = (from ag in db.AgentDetails where ag.Doj == sdate && ag.operatorid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                    accfee = (from ag in db.SavingAccountInfos where ag.Doj == sdate && ag.opid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                    widthdraw = (from o in db.spotcommission_tabs where o.date == sdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                    totalvoucher = (from o in db.Voucher_Reports where o.date == sdate && o.Operatorid == pr.OperatorId select o.netamount).DefaultIfEmpty(0).Sum();
                    expense = (from ag in db.Expenses where ag.date_time == sdate && ag.opid == pr.OperatorId select ag.amount).DefaultIfEmpty(0).Sum();

                    if (tsis + tMISFresh + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a + expense + totalvoucher + agfee + appfee + memberfee + accfee + deposit + widthdraw + pps + late + rebate > 0)
                    {
                        dwclist.Add(new OpDatewisecollection { date = sdate, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, Expense = expense, Voucher = totalvoucher, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = fsdate, edate = edate, Appcharge = appfee, Agencyfee = agfee, Accountfee = accfee, Memberfee = memberfee, deposit = deposit, widthdraw = widthdraw, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, pps = pps, late = late, releaf = rebate });
                    }

                    sdate = sdate.AddDays(1);
                }

                stdate = fsdate;
                enddate = edate;
                OperatorId = opid;
                return View(dwclist);
            }
        }
        public ActionResult PrintOperatorDatewiseCollection()
        {
            List<Memberfees> mfeeslist = new List<Memberfees>();
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime fsdate = stdate;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(p => p.OperatorId == OperatorId);
                var br = db.Branchtabs.Single(b => b.BranchCode == pr.BranchCode);
                var pst = db.Plans.Single(c => c.Plancode == 4);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, expense = 0, totalvoucher = 0, agfee = 0, appfee = 0, memberfee = 0, accfee = 0, deposit = 0, widthdraw = 0, pps = 0, late = 0, rebate = 0;
                while (stdate <= enddate)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno == 1 && o.mode != "Single" && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno == 1 && o.mode == "Single" && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 1 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 2 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 3 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 4 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 5 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 6 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year >= 7 && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    late = (from o in db.Installmenttabs where o.paymentdate == stdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.latefine).DefaultIfEmpty(0).Sum();
                    rebate = (from o in db.Installmenttabs where o.paymentdate == stdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.reliefrs).DefaultIfEmpty(0).Sum();

                    deposit = (from o in db.appltabs where o.pdate == stdate && o.opid == pr.OperatorId && tbd.Contains(o.bondid) select o.downpayment).DefaultIfEmpty(0).Sum();
                    memberfee = (from ag in db.Member_tabs where ag.Cdate == stdate && ag.Opid == pr.OperatorId select ag.Fee).DefaultIfEmpty(0).Sum();
                    appfee = (from ag in db.appltabs where ag.formdate == stdate && ag.status == 1 && ag.opid == pr.OperatorId select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                    agfee = (from ag in db.AgentDetails where ag.Doj == stdate && ag.operatorid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                    accfee = (from ag in db.SavingAccountInfos where ag.Doj == stdate && ag.opid == pr.OperatorId select ag.formfee).DefaultIfEmpty(0).Sum();
                    widthdraw = (from o in db.spotcommission_tabs where o.date == stdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                    totalvoucher = (from o in db.Voucher_Reports where o.date == stdate && o.Operatorid == pr.OperatorId select o.netamount).DefaultIfEmpty(0).Sum();
                    expense = (from ag in db.Expenses where ag.date_time == stdate && ag.opid == pr.OperatorId select ag.amount).DefaultIfEmpty(0).Sum();

                    if (tsis + tMISFresh + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a + expense + totalvoucher + agfee + appfee + memberfee + accfee + deposit + widthdraw + pps + late + rebate > 0)
                    {
                        dwclist.Add(new OpDatewisecollection { date = stdate, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, Expense = expense, Voucher = totalvoucher, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = fsdate, edate = enddate, Appcharge = appfee, Agencyfee = agfee, Accountfee = accfee, Memberfee = memberfee, deposit = deposit, widthdraw = widthdraw, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, pps = pps, late = late, releaf = rebate });
                    }

                    stdate = stdate.AddDays(1);
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "DatewiseCollection.rpt"));
                rd.SetDataSource(dwclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult OperatorCsswiseCollection()
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(csswlist);
            }
        }
        [HttpPost]
        public ActionResult OperatorCsswiseCollection(DateTime date, int mincss, int maxcss, string opid)
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(p => p.OperatorId == opid);
                var bb = db.Branchtabs.Single(b => b.BranchCode == pr.BranchCode);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                ViewData["Branch"] = bb.BranchCode;
                var inslist = (from i in db.Installmenttabs orderby i.cssno where i.paymentdate == date && i.cssno >= mincss && i.cssno <= maxcss && i.opid == opid && tbd.Contains(i.bondid) select i).ToList();
                foreach (var ins in inslist)
                {
                    var br = db.appltabs.Single(b => b.bondid == ins.bondid);
                    csswlist.Add(new CsswiseBusiness { paymethod = ins.paymethod, newbondid = ins.newbondid, name = br.name, cssno = Convert.ToInt32(ins.cssno), planname = ins.planname, term = ins.term_plan, mode = ins.mode, amount = ins.amount, latefine = ins.latefine, rebate = ins.reliefrs, payamount = ins.payamount, expirydate = ins.expirydate, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, date = date });
                }
                stdate = date;
                scss = mincss;
                ecss = maxcss;
                OperatorId = opid;
                return View(csswlist);
            }
        }
        public ActionResult PrintOperatorCsswiseBusiness()
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(p => p.OperatorId == OperatorId);
                var bb = db.Branchtabs.Single(b => b.BranchCode == pr.BranchCode);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var inslist = (from i in db.Installmenttabs orderby i.cssno where i.paymentdate == stdate && i.cssno >= scss && i.cssno <= ecss && i.opid == OperatorId && tbd.Contains(i.bondid) select i).ToList();
                foreach (var ins in inslist)
                {
                    var br = db.appltabs.Single(b => b.bondid == ins.bondid);
                    csswlist.Add(new CsswiseBusiness { newbondid = ins.newbondid, name = br.name, cssno = Convert.ToInt32(ins.cssno), planname = ins.planname, term = ins.term_plan, mode = ins.mode, amount = ins.amount, latefine = ins.latefine, rebate = ins.reliefrs, payamount = ins.payamount, expirydate = ins.expirydate, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, date = stdate });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "CSSwiseBusiness.rpt"));
                rd.SetDataSource(csswlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult OperatorFundMobilisation()
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(pwclist);
            }
        }
        [HttpPost]
        public ActionResult OperatorFundMobilisation(DateTime sdate, DateTime edate, string opid)
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(p => p.OperatorId == opid);
                var br = db.Branchtabs.Single(b => b.BranchCode == pr.BranchCode);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                ViewData["Branch"] = br.BranchCode;
                var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= sdate && pl.paymentdate <= edate && pl.opid == opid && tbd.Contains(pl.bondid) select new { pl.planname }).Distinct();
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, total = 0, tpps = 0, tnfp = 0;
                foreach (var plan in planlist)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "RD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tnfp = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "NFS" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode == "Single" && o.plantype == "FD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tpps = (from o in db.appltabs where o.formdate >= sdate && o.formdate <= edate && o.planname == plan.planname && o.mode != "Single" && o.plantype == "PPS" && o.opid == opid && tbd.Contains(o.bondid) select o.totalcon).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 1 && o.plantype == "RD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 2 && o.plantype == "RD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 3 && o.plantype == "RD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 4 && o.plantype == "RD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 5 && o.plantype == "RD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 6 && o.plantype == "RD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year >= 7 && o.plantype == "RD" && o.opid == opid && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    total = tMISFresh + tsis + tpps + tnfp + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a;
                    if (total > 0)
                    {
                        pwclist.Add(new FundMobilization { planname = plan.planname, tPPSFresh = tpps, tNFPFresh = tnfp, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, total = total, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                stdate = sdate;
                enddate = edate;
                OperatorId = opid;
                return View(pwclist);
            }
        }
        public ActionResult PrintOperatorFundMobilisation()
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(p => p.OperatorId == OperatorId);
                var br = db.Branchtabs.Single(b => b.BranchCode == pr.BranchCode);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= stdate && pl.paymentdate <= enddate && pl.opid == OperatorId && tbd.Contains(pl.bondid) select new { pl.planname }).Distinct();
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, total = 0, tpps = 0, tnfp = 0;
                foreach (var plan in planlist)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "RD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tnfp = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "NFS" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode == "Single" && o.plantype == "FD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tpps = (from o in db.appltabs where o.formdate >= stdate && o.formdate <= enddate && o.planname == plan.planname && o.mode != "Single" && o.plantype == "PPS" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.totalcon).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 1 && o.plantype == "RD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 2 && o.plantype == "RD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 3 && o.plantype == "RD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 4 && o.plantype == "RD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 5 && o.plantype == "RD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 6 && o.plantype == "RD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year >= 7 && o.plantype == "RD" && o.opid == OperatorId && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    total = tMISFresh + tsis + tpps + tnfp + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a;
                    if (total > 0)
                    {
                        pwclist.Add(new FundMobilization { planname = plan.planname, tPPSFresh = tpps, tNFPFresh = tnfp, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, total = total, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "FundMobilisation.rpt"));
                rd.SetDataSource(pwclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult DuplicatePrintReportOperator()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateTab> dpt = new List<DuplicateTab>();


                return View(dpt);
            }
        }
        [HttpPost]
        public ActionResult DuplicatePrintReportOperator(DateTime sdate, DateTime edate, string type, string branch)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateTab> dpt = new List<DuplicateTab>();
                dpt = (from g in db.DuplicateTabs where g.date >= sdate && g.date <= edate && g.type == type && g.opid == branch select g).ToList();

                stdate = sdate;
                enddate = edate;
                ptype = type;
                Branchcode = branch;
                ViewData["Type"] = type;
                return View(dpt);

            }
        }
        public ActionResult PrintDuplicateOperatorReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DuplicateTab> dpt = new List<DuplicateTab>();
                dpt = (from g in db.DuplicateTabs where g.date >= stdate && g.date <= enddate && g.type == ptype && g.opid == Branchcode select g).ToList();

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DuplicatePrint.rpt"));
                rd.SetDataSource(dpt);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(dpt);
            }
        }

        [HttpGet]
        public ActionResult OperatorMaturityPaidDetails()
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(mpdlist);
            }
        }
        [HttpPost]
        public ActionResult OperatorMaturityPaidDetails(DateTime sdate, DateTime edate, string opid)
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(p => p.OperatorId == opid);
                var br = db.Branchtabs.Single(b => b.BranchCode == pr.BranchCode);
                ViewData["Branch"] = br.BranchCode;
                var mlist = (from pl in db.MaturityTabs where pl.maturitydate >= sdate && pl.maturitydate <= edate && pl.opid == br.BranchCode select pl).ToList();

                foreach (var m in mlist)
                {
                    mpdlist.Add(new MaturityPaid { newbondid = m.newbondid, name = m.name, newintroducerid = m.newintroducerid, mobileno = m.mobileno, formdate = m.formdate, planname = m.planname, term = m.term, mode = m.mode, payment = m.payment, nolandunit = m.nolandunit, totalcon = m.totalcon, expectedraisablevalue = m.expectedraisablevalue, expirydate = m.expirydate, maturityamount = m.maturityamount, maturitydate = m.maturitydate, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname, sdate = sdate, edate = edate });

                }

                stdate = sdate;
                enddate = edate;
                OperatorId = opid;
                return View(mpdlist);
            }
        }
        public ActionResult PrintOperatorMaturityPaidDetails()
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pr = db.Operators.Single(p => p.OperatorId == OperatorId);
                var br = db.Branchtabs.Single(b => b.BranchCode == pr.BranchCode);

                var mlist = (from pl in db.MaturityTabs where pl.maturitydate >= stdate && pl.maturitydate <= enddate && pl.opid == br.BranchCode select pl).ToList();

                foreach (var m in mlist)
                {
                    mpdlist.Add(new MaturityPaid { newbondid = m.newbondid, name = m.name, newintroducerid = m.newintroducerid, mobileno = m.mobileno, formdate = m.formdate, planname = m.planname, term = m.term, mode = m.mode, payment = m.payment, nolandunit = m.nolandunit, totalcon = m.totalcon, expectedraisablevalue = m.expectedraisablevalue, expirydate = m.expirydate, maturityamount = m.maturityamount, maturitydate = m.maturitydate, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname, sdate = stdate, edate = enddate });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "MaturityPaidDetails.rpt"));
                rd.SetDataSource(mpdlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        #endregion

        #endregion

        #region App Setting Menu Start Here

        [HttpGet]
        public ActionResult SetPaymethod(int Id = 0, int status = 0)
        {
            List<AppSettingTab> appr = new List<AppSettingTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (Id == 0 && status == 0)
                {
                    appr = db.AppSettingTabs.ToList();
                }

                if (Id != 0 && status == 1)
                {
                    AppSettingTab ob = db.AppSettingTabs.Single(p => p.Id == Id);
                    ob.status = status;
                    //db.Entry(ob).State = EntityState.Modified;
                    db.Entry<AppSettingTab>(ob).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    Response.Write("<script>alert('" + ob.type + " Activated successfully ')</script>");
                    appr = (from vf in db.AppSettingTabs select vf).ToList();
                }
                else if (Id != 0 && status == 0)
                {
                    AppSettingTab ob = db.AppSettingTabs.Single(p => p.Id == Id);
                    ob.status = status;
                    //db.Entry(ob).State = EntityState.Modified;
                    db.Entry<AppSettingTab>(ob).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    Response.Write("<script>alert('" + ob.type + " Deactivated successfully ')</script>");
                    appr = (from vf in db.AppSettingTabs select vf).ToList();
                }

                return View(appr);
            }

        }

        [HttpGet]
        public ActionResult Updatecertificate()
        {
            if (authen() == 1)
            {
                List<APIKeyCertificate> list = new List<APIKeyCertificate>();
                list = db.APIKeyCertificates.ToList();
                return View(list);
            }
            else
            {
                return RedirectToAction("Logout", "Admin");
            }
            return View();
        }
        [HttpPost]
        public ActionResult Updatecertificate(APIKeyCertificate jaihind)
        {
            if (authen() == 1)
            {
                List<APIKeyCertificate> list = new List<APIKeyCertificate>();

                var jaibharat = db.APIKeyCertificates.Single(aa => aa.Id == 1);
                jaibharat.livecert = jaihind.livecert;
                jaibharat.mycert = jaihind.mycert;
                jaibharat.status = jaihind.status;
                //db.Entry(jaibharat).State = EntityState.Modified;
                db.Entry<APIKeyCertificate>(jaibharat).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
                Response.Write("<script>alert('Certificate Updated..!!')</script>");
                list = db.APIKeyCertificates.ToList();
                return View(list);
            }
            else 

            {
                return RedirectToAction("Logout", "Admin");
            }

        }

        #endregion

        #region Setting Menu Start Here

        [HttpGet]
        public ActionResult ApproveDisapproveLeave(string empid, int status = 0)
        {
            List<Emp_leave> ad = new List<Emp_leave>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (empid != null && status == 1)
                {
                    Emp_leave ob = db.Emp_leaves.Single(p => p.empid == empid);
                    ob.status = 0;
                    db.SaveChanges();
                    ad = (from pl in db.Emp_leaves select pl).ToList();
                }
                else if (empid != null && status == 0)
                {
                    Emp_leave ob = db.Emp_leaves.Single(p => p.empid == empid);
                    ob.status = 1;
                    db.SaveChanges();
                    ad = (from pl in db.Emp_leaves select pl).ToList();
                }
            }
            return View(ad);
        }
        [HttpPost]
        public ActionResult ApproveDisapproveLeave(string branchcode)
        {
            List<Emp_leave> ad = new List<Emp_leave>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ad = (from dcl in db.Emp_leaves where dcl.branchcode == branchcode select dcl).ToList();
            }
            return View(ad);
        }

        [HttpGet]
        public ActionResult VoucherFormat(int Id = 0, int status = 0)
        {
            List<VFormatTab> formatlist = new List<VFormatTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (Id == 0 && status == 0)
                {
                    formatlist = db.VFormatTabs.ToList();
                }

                if (Id != 0 && status == 1)
                {
                    VFormatTab ob = db.VFormatTabs.Single(p => p.Id == Id);
                    ob.status = status;
                    //db.Entry(ob).State = EntityState.Modified;
                    db.Entry<VFormatTab>(ob).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    Response.Write("<script>alert('Format-" + Id + " Activated successfully ')</script>");
                    formatlist = (from vf in db.VFormatTabs select vf).ToList();
                }
                else if (Id != 0 && status == 0)
                {
                    VFormatTab ob = db.VFormatTabs.Single(p => p.Id == Id);
                    ob.status = status;
                    //db.Entry(ob).State = EntityState.Modified;
                    db.Entry<VFormatTab>(ob).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    Response.Write("<script>alert('Format-" + Id + " Deactivated successfully ')</script>");
                    formatlist = (from vf in db.VFormatTabs select vf).ToList();
                }

                return View(formatlist);
            }

        }

        [HttpGet]
        public ActionResult Loginouttime()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }

        }
        [HttpPost]
        public ActionResult Loginouttime(string login, string logout, int status = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                InOutTime ob = db.InOutTimes.Single(i => i.Id == 1);
                ob.login = login;
                ob.logout = logout;
                ob.status = status;
                //db.Entry(ob).State = EntityState.Modified;
                db.Entry<InOutTime >(ob).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
                Response.Write("<script>alert('Time updated successfully ')</script>");
                return View();
            }

        }

        [HttpGet]
        public ActionResult ChangeMacAddress(string userid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<MacTab> maclist = new List<MacTab>();
                if (userid == null)
                {
                    maclist = (from pl in db.MacTabs select pl).ToList();
                }
                if (userid != null)
                {
                    MacTab ob = db.MacTabs.Single(s => s.userid == userid);
                    DupliMacTab dob = new DupliMacTab();
                    dob.userid = ob.userid;
                    dob.type = ob.type;
                    dob.macaddress = ob.macaddress;
                    dob.status = ob.status;
                    db.DupliMacTabs.Add(dob);
                    db.MacTabs.Remove(ob);
                    db.SaveChanges();

                }
                maclist = (from pl in db.MacTabs select pl).ToList();
                return View(maclist);
            }
        }

        [HttpGet]
        public ActionResult AllowRenewal()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult AllowRenewal(int status)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var dt = db.RPTabs.Single(c => c.Id == 1);
                if (status == 0)
                {

                    dt.status = status;
                    //db.Entry(dt).State = EntityState.Modified;
                    db.Entry<RPTab>(dt).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    Response.Write("<script>alert('Permission of Renewal to other Branch De-activated Sucsessfully..')</script>");
                    ViewBag.msg = "Permission of Renewal to other Branch De-activated Sucsessfully..";
                }
                else if (status == 1)
                {
                    dt.status = status;
                    //db.Entry(dt).State = EntityState.Modified;
                    db.Entry<RPTab>(dt).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    Response.Write("<script>alert('Permission of Renewal to other Branch Activated Sucsessfully..')</script>");
                    ViewBag.msg = "Permission of Renewal to other Branch Activated Sucsessfully..";
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult ActiveDeactivePlan(int Plancode = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        List<NewPlan> prolist = new List<NewPlan>();
                        if (Plancode == 0 && status == 0)
                        {
                            prolist = db.NewPlans.ToList();
                            return View(prolist);

                        }

                        if (Plancode != 0 && status == 1)
                        {

                            NewPlan ob = db.NewPlans.Single(p => p.Plancode == Plancode);
                            ob.status = 0;
                            db.SaveChanges();
                            prolist = (from pl in db.NewPlans select pl).ToList();
                        }
                        else if (Plancode != 0 && status == 0)
                        {

                            NewPlan ob = db.NewPlans.Single(p => p.Plancode == Plancode);
                            ob.status = 1;
                            db.SaveChanges();
                            prolist = (from pl in db.NewPlans select pl).ToList();
                        }

                        return View(prolist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }

        }

        [HttpGet]
        public ActionResult BlockUnblockBranch(string bid, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<Branchtab> prolist = new List<Branchtab>();
                if (bid == null && status == 0)
                {
                    prolist = db.Branchtabs.ToList();
                    return View(prolist);

                }

                if (bid != null && status == 1)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == bid);
                    Branchtab ob = db.Branchtabs.Single(p => p.BranchCode == bid);
                    nl.status = 0;
                    ob.status = 0;
                    db.SaveChanges();

                    var oplist = (from o in db.Operators where o.BranchCode == bid select o).ToList();
                    foreach (var op in oplist)
                    {
                        NewLogin opnl = db.NewLogins.Single(a => a.UserName == op.OperatorId);
                        Operator opob = db.Operators.Single(p => p.OperatorId == op.OperatorId);
                        opnl.status = 0;
                        opob.Status = 0;
                        db.SaveChanges();
                    }

                    prolist = (from pl in db.Branchtabs select pl).ToList();
                }
                else if (bid != null && status == 0)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == bid);
                    Branchtab ob = db.Branchtabs.Single(p => p.BranchCode == bid);
                    nl.status = 1;
                    ob.status = 1;
                    db.SaveChanges();

                    var oplist = (from o in db.Operators where o.BranchCode == bid select o).ToList();
                    foreach (var op in oplist)
                    {
                        NewLogin opnl = db.NewLogins.Single(a => a.UserName == op.OperatorId);
                        Operator opob = db.Operators.Single(p => p.OperatorId == op.OperatorId);
                        opnl.status = 1;
                        opob.Status = 1;
                        db.SaveChanges();
                    }
                    prolist = (from pl in db.Branchtabs select pl).ToList();
                }

                return View(prolist);
            }
        }

        [HttpGet]
        public ActionResult BlockUnblockOperator(string opid, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<Operator> prolist = new List<Operator>();
                if (opid == null && status == 0)
                {
                    prolist = db.Operators.ToList();
                    return View(prolist);
                }

                if (opid != null && status == 1)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == opid);
                    Operator ob = db.Operators.Single(p => p.OperatorId == opid);
                    nl.status = 0;
                    ob.Status = 0;
                    db.SaveChanges();
                    prolist = (from pl in db.Operators select pl).ToList();
                }
                else if (opid != null && status == 0)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == opid);
                    Operator ob = db.Operators.Single(p => p.OperatorId == opid);
                    nl.status = 1;
                    ob.Status = 1;
                    db.SaveChanges();
                    prolist = (from pl in db.Operators select pl).ToList();
                }

                return View(prolist);
            }
        }
        [HttpGet]
        public ActionResult BlockUnblockHR(string hrid, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<HRTab> hrlist = new List<HRTab>();
                if (hrid == null && status == 0)
                {
                    hrlist = db.HRTabs.ToList();
                    return View(hrlist);
                }

                if (hrid != null && status == 1)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == hrid);
                    HRTab ob = db.HRTabs.Single(p => p.HRId == hrid);
                    nl.status = 0;
                    ob.Status = 0;
                    db.SaveChanges();
                    hrlist = (from pl in db.HRTabs select pl).ToList();
                }
                else if (hrid != null && status == 0)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == hrid);
                    HRTab ob = db.HRTabs.Single(p => p.HRId == hrid);
                    nl.status = 1;
                    ob.Status = 1;
                    db.SaveChanges();
                    hrlist = (from pl in db.HRTabs select pl).ToList();
                }

                return View(hrlist);
            }
        }

        [HttpGet]
        public ActionResult BlockUnblockBroker(string NewAgentId, int Status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<AgentDetail> brolist = new List<AgentDetail>();
                if (NewAgentId == null && Status == 0)
                {
                    brolist = db.AgentDetails.ToList();
                    return View(brolist);

                }

                if (NewAgentId != null && Status == 1)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == NewAgentId);
                    AgentDetail ob = db.AgentDetails.Single(p => p.NewAgentId == NewAgentId);
                    nl.status = 0;
                    ob.Status = 0;
                    db.SaveChanges();
                    brolist = (from pl in db.AgentDetails select pl).ToList();
                    MyClass.Sendmsg(ob.Mobile, "Dear " + ob.name + " Your User ID - " + NewAgentId + " has been blocked. Please contact Administrator / Company for unblocked - Regards :- ODH GROUP");
                    
                    return RedirectToAction("BlockUnblockBroker");
                }
                else if (NewAgentId != null && Status == 0)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == NewAgentId);
                    AgentDetail ob = db.AgentDetails.Single(p => p.NewAgentId == NewAgentId);
                    nl.status = 1;
                    ob.Status = 1;
                    db.SaveChanges();
                    brolist = (from pl in db.AgentDetails select pl).ToList();
                    MyClass.Sendmsg(ob.Mobile, "Dear " + ob.name + " Your User ID - " + NewAgentId + " has been unblocked Regards :- ODH GROUP");

                    return RedirectToAction("BlockUnblockBroker");

                }

                return View(brolist);
            }
        }
        [HttpGet]
        public ActionResult BlockUnblockCustomer(string newbondid, int status = 0)
        {
            List<Appltab> Custlist = new List<Appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {



                if (newbondid == null && status == 0)
                {
                    try
                    {
                        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString);
                        SqlCommand cmd = new SqlCommand();
                        cmd.Connection = con;
                        cmd.CommandText = "pr_appltabList";
                        cmd.CommandType = CommandType.StoredProcedure;
                        con.Open();
                        SqlDataReader rdr = cmd.ExecuteReader();
                        while (rdr.Read())
                        {
                            Appltab ap = new Appltab();
                            ap.status = Convert.ToInt32(rdr["status"]);
                            ap.newbondid = Convert.ToString(rdr["newbondid"]);
                            ap.name = Convert.ToString(rdr["name"]);
                            ap.newintroducerid = Convert.ToString(rdr["newintroducerid"]);
                            ap.planname = Convert.ToString(rdr["planname"]);
                            ap.mode = Convert.ToString(rdr["mode"]);
                            ap.payment = Convert.ToDouble(rdr["payment"]);
                            ap.mobileno = Convert.ToString(rdr["mobileno"]);
                            ap.formdate = Convert.ToDateTime(rdr["formdate"]);
                            ap.dueamount = Convert.ToDouble(rdr["dueamount"]);
                            ap.dueinstall = Convert.ToInt32(rdr["dueinstall"]);
                            Custlist.Add(ap);
                        }

                        return View(Custlist);

                    }
                    catch { }
                    finally { con.Close(); }

                }

                if (newbondid != null && status == 1)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == newbondid);
                    appltab ob = db.appltabs.Single(p => p.newbondid == newbondid);
                    nl.status = 0;
                    ob.status = 0;
                    db.SaveChanges();
                    return RedirectToAction("BlockUnblockCustomer", "Admin");
                }
                else if (newbondid != null && status == 0)
                {
                    NewLogin nl = db.NewLogins.Single(a => a.UserName == newbondid);
                    appltab ob = db.appltabs.Single(p => p.newbondid == newbondid);
                    nl.status = 1;
                    ob.status = 1;
                    db.SaveChanges();
                    return RedirectToAction("BlockUnblockCustomer", "Admin");
                }

                return View(Custlist);
            }
        }
        [HttpGet]
        public ActionResult DeactiveList(string newbondid, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int int1 = db.Database.SqlQuery<int>("exec getdeactiverevival").Single();
                var ccr = db.CompanyInfos.Single(c => c.Id == 1);
                List<CustomerDeactiveList> custlist = new List<CustomerDeactiveList>();
                DateTime cdate = DateTime.Now.Date;
                if (newbondid == null && status == 0)
                {
                    //var dlist = db.appltabs.Where(d => d.status == 0);
                    var dlist = db.RevivalTabs.Where(d => d.status == 0);
                    foreach (var d in dlist)
                    {
                        var cr = db.appltabs.Single(c => c.newbondid == d.newbondid);

                        var countins = (from f in db.Installmenttabs where f.payamount == 0 && f.newbondid == d.newbondid select f.installmentno).Count();

                        if (countins != 0 || cr.plantype == "PPS")
                        {
                            if (cr.plantype == "RD")
                            {

                                #region Calculate Latefine Start Here
                                Double totallatefine = 0;
                                Double amountsum = 0;

                                var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
                                var count = (from ii in db.Installmenttabs where ii.newbondid == d.newbondid && ii.payamount == 0 && ii.prevexpirydate < cdate select ii).Count();
                                var froms = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.payamount == 0 select u.installmentno).DefaultIfEmpty(1).Min();
                                var to = froms + count - 1;
                                amountsum = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.installmentno >= froms && u.installmentno <= to select u.amount).DefaultIfEmpty(0).Sum();
                                var rsl = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == to);
                                while (froms <= to)
                                {
                                    Double latefine = 0;
                                    var sredr = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == froms);

                                    if (sredr.mode == "Monthly")
                                    {
                                        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddDays(15);
                                        if (DateTime.Now.Date > pdate.Date)
                                        {
                                            int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                            int r = diff / 30;
                                            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                            //latefine = (sredr.amount * llr.latefine) / 100;
                                            totallatefine = totallatefine + latefine;

                                        }
                                    }
                                    else if (sredr.mode == "Quarterly")
                                    {
                                        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                        if (DateTime.Now.Date > pdate.Date)
                                        {
                                            int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                            int r = diff / 91;
                                            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                            //latefine = (sredr.amount * llr.latefine) / 100;
                                            totallatefine = totallatefine + latefine;
                                        }
                                    }
                                    else if (sredr.mode == "Halfyearly")
                                    {
                                        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                        if (DateTime.Now.Date > pdate.Date)
                                        {
                                            int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                            int r = diff / 182;
                                            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                            //latefine = (sredr.amount * llr.latefine) / 100;
                                            totallatefine = totallatefine + latefine;
                                        }
                                    }
                                    else if (sredr.mode == "Yearly")
                                    {
                                        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                        if (DateTime.Now.Date > pdate.Date)
                                        {
                                            int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                            int r = diff / 365;
                                            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                            //latefine = (sredr.amount * llr.latefine) / 100;
                                            totallatefine = totallatefine + latefine;
                                        }
                                    }
                                    froms = froms + 1;

                                }

                                Double amount = amountsum + totallatefine;
                                #endregion Calculate Latefine End Here


                                if (cr.expirydate >= cdate)
                                {
                                    custlist.Add(new CustomerDeactiveList { newbondid = cr.newbondid, name = cr.name, newintroducerid = cr.newintroducerid, planname = cr.planname, mode = cr.mode, payment = amountsum, formdate = cr.formdate, status = d.status, totalsum = amount, latefine = totallatefine, companyname = ccr.CompanyName, address = ccr.Address, emailid = ccr.Emailid, contact = ccr.Contact, domainname = ccr.HeadOffice });
                                }
                                else
                                {
                                    custlist.Add(new CustomerDeactiveList { newbondid = cr.newbondid, name = cr.name, newintroducerid = cr.newintroducerid, planname = cr.planname, mode = cr.mode, payment = amountsum, formdate = cr.formdate, status = 1, totalsum = amount, latefine = totallatefine, companyname = ccr.CompanyName, address = ccr.Address, emailid = ccr.Emailid, contact = ccr.Contact, domainname = ccr.HeadOffice });
                                }
                            }
                        }
                    }
                    return View(custlist);

                }

                else if (newbondid != null && status == 0)
                {
                    //appltab ob = db.appltabs.Single(p => p.newbondid == newbondid);
                    //ob.status = 1;
                    //db.SaveChanges();

                    //var dlist = db.appltabs.Where(d => d.status == 0);
                    var r1 = db.RevivalTabs.Single(d => d.newbondid == newbondid);
                    r1.status = 2;
                    //db.Entry(r1).State = EntityState.Modified;
                    db.Entry<RevivalTab>(r1).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();

                    var dlist = db.RevivalTabs.Where(d => d.status == 0);
                    foreach (var d in dlist)
                    {
                        var cr = db.appltabs.Single(c => c.newbondid == d.newbondid);
                        #region Calculate Latefine Start Here
                        Double totallatefine = 0;
                        Double amountsum = 0;

                        var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
                        var count = (from ii in db.Installmenttabs where ii.newbondid == d.newbondid && ii.payamount == 0 && ii.prevexpirydate < cdate select ii).Count();
                        var froms = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.payamount == 0 select u.installmentno).DefaultIfEmpty(1).Min();
                        var to = froms + count - 1;
                        amountsum = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.installmentno >= froms && u.installmentno <= to select u.amount).DefaultIfEmpty(0).Sum();
                        if (to > 0)
                        {
                            var rsl = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == to);
                            while (froms <= to)
                            {
                                Double latefine = 0;
                                var sredr = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == froms);

                                if (sredr.mode == "Monthly")
                                {
                                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddDays(15);
                                    if (DateTime.Now.Date > pdate.Date)
                                    {
                                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                        int r = diff / 30;
                                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                        //latefine = (sredr.amount * llr.latefine) / 100;
                                        totallatefine = totallatefine + latefine;

                                    }
                                }
                                else if (sredr.mode == "Quarterly")
                                {
                                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                    if (DateTime.Now.Date > pdate.Date)
                                    {
                                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                        int r = diff / 91;
                                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                        //latefine = (sredr.amount * llr.latefine) / 100;
                                        totallatefine = totallatefine + latefine;
                                    }
                                }
                                else if (sredr.mode == "Halfyearly")
                                {
                                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                    if (DateTime.Now.Date > pdate.Date)
                                    {
                                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                        int r = diff / 182;
                                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                        //latefine = (sredr.amount * llr.latefine) / 100;
                                        totallatefine = totallatefine + latefine;
                                    }
                                }
                                else if (sredr.mode == "Yearly")
                                {
                                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                    if (DateTime.Now.Date > pdate.Date)
                                    {
                                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                        int r = diff / 365;
                                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                        //latefine = (sredr.amount * llr.latefine) / 100;
                                        totallatefine = totallatefine + latefine;
                                    }
                                }
                                froms = froms + 1;

                            }
                        }
                        Double amount = amountsum + totallatefine;
                        #endregion Calculate Latefine End Here

                        if (cr.expirydate >= cdate)
                        {
                            custlist.Add(new CustomerDeactiveList { newbondid = cr.newbondid, name = cr.name, newintroducerid = cr.newintroducerid, planname = cr.planname, mode = cr.mode, payment = amountsum, formdate = cr.formdate, status = d.status, totalsum = amount, latefine = 0, companyname = ccr.CompanyName, address = ccr.Address, emailid = ccr.Emailid, contact = ccr.Contact, domainname = ccr.HeadOffice });
                        }
                        else
                        {
                            custlist.Add(new CustomerDeactiveList { newbondid = cr.newbondid, name = cr.name, newintroducerid = cr.newintroducerid, planname = cr.planname, mode = cr.mode, payment = amountsum, formdate = cr.formdate, status = 1, totalsum = amount, latefine = 0, companyname = ccr.CompanyName, address = ccr.Address, emailid = ccr.Emailid, contact = ccr.Contact, domainname = ccr.HeadOffice });
                        }
                    }
                }


                return View(custlist);
            }
        }
        public ActionResult PrintDeactiveList()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var ccr = db.CompanyInfos.Single(c => c.Id == 1);
                List<CustomerDeactiveList> custlist = new List<CustomerDeactiveList>();
                DateTime cdate = DateTime.Now.Date;

                var dlist = db.appltabs.Where(d => d.status == 0);
                foreach (var d in dlist)
                {
                    var cr = db.appltabs.Single(c => c.newbondid == d.newbondid);

                    #region Calculate Latefine Start Here
                    Double totallatefine = 0;
                    Double amountsum = 0;

                    var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
                    var count = (from ii in db.Installmenttabs where ii.newbondid == d.newbondid && ii.payamount == 0 && ii.prevexpirydate < cdate select ii).Count();
                    var froms = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.payamount == 0 select u.installmentno).Min();
                    var to = froms + count - 1;
                    amountsum = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.installmentno >= froms && u.installmentno <= to select u.amount).DefaultIfEmpty(0).Sum();
                    var rsl = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == to);
                    //while (froms <= to)
                    //{
                    //    Double latefine = 0;
                    //    var sredr = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == froms);

                    //    if (sredr.mode == "Monthly")
                    //    {
                    //        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddDays(15);
                    //        if (DateTime.Now.Date > pdate.Date)
                    //        {
                    //            int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    //            int r = diff / 30;
                    //            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                    //            //latefine = (sredr.amount * llr.latefine) / 100;
                    //            totallatefine = totallatefine + latefine;

                    //        }
                    //    }
                    //    else if (sredr.mode == "Quarterly")
                    //    {
                    //        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                    //        if (DateTime.Now.Date > pdate.Date)
                    //        {
                    //            int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    //            int r = diff / 91;
                    //            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                    //            //latefine = (sredr.amount * llr.latefine) / 100;
                    //            totallatefine = totallatefine + latefine;
                    //        }
                    //    }
                    //    else if (sredr.mode == "Halfyearly")
                    //    {
                    //        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                    //        if (DateTime.Now.Date > pdate.Date)
                    //        {
                    //            int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    //            int r = diff / 182;
                    //            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                    //            //latefine = (sredr.amount * llr.latefine) / 100;
                    //            totallatefine = totallatefine + latefine;
                    //        }
                    //    }
                    //    else if (sredr.mode == "Yearly")
                    //    {
                    //        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                    //        if (DateTime.Now.Date > pdate.Date)
                    //        {
                    //            int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    //            int r = diff / 365;
                    //            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                    //            //latefine = (sredr.amount * llr.latefine) / 100;
                    //            totallatefine = totallatefine + latefine;
                    //        }
                    //    }
                    //    froms = froms + 1;

                    //}

                    Double amount = amountsum + totallatefine;
                    #endregion Calculate Latefine End Here
                    custlist.Add(new CustomerDeactiveList { newbondid = cr.newbondid, name = cr.name, newintroducerid = cr.newintroducerid, planname = cr.planname, mode = cr.mode, payment = amountsum, formdate = cr.formdate, status = d.status, totalsum = amount, latefine = 0, companyname = ccr.CompanyName, address = ccr.Address, emailid = ccr.Emailid, contact = ccr.Contact, domainname = ccr.HeadOffice });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DeactiveList.rpt"));
                rd.SetDataSource(custlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();

            }
        }

        [HttpGet]
        public ActionResult ResetBranch()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult ResetBranch(string type)
        {
            if (ModelState.IsValid)
            {
                var count = (from dbc in db.NewLogins where dbc.type == type select dbc).Count();
                if (count > 0)
                {
                    var panellist = (from dbc in db.NewLogins where dbc.type == type select dbc).ToList();
                    foreach (var a in panellist)
                    {
                        string pass = gid();
                        var row = db.Members.Single(c => c.Id == 1);
                        NewLogin ob = db.NewLogins.Single(o => o.type == type && o.UserName == a.UserName);
                        if (type == row.branchname)
                        {
                            Branchtab bob = db.Branchtabs.Single(bb => bb.BranchCode == a.UserName);
                            bob.password = pass;
                            //db.Entry(bob).State = EntityState.Modified;
                            db.Entry<Branchtab>(bob).State = System.Data.Entity.EntityState.Modified;
                        }
                        if (type == "Operator")
                        {
                            Operator oob = db.Operators.Single(bb => bb.OperatorId == a.UserName);
                            oob.OperatorPassword = pass;
                            //db.Entry(oob).State = EntityState.Modified;
                            db.Entry<Operator>(oob).State = System.Data.Entity.EntityState.Modified;
                        }
                        if (type == "HR")
                        {
                            HRTab hob = db.HRTabs.Single(ho => ho.HRId == a.UserName);
                            hob.Password = pass;
                            //db.Entry(hob).State = EntityState.Modified;
                            db.Entry<HRTab>(hob).State = System.Data.Entity.EntityState.Modified;
                        }
                        ob.Password = pass;
                        //db.Entry(ob).State = EntityState.Modified;
                        db.Entry<NewLogin>(ob).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();
                        MyClass.Sendmsg(a.Mobile, "Your Password Reset by admin which is:" + pass + "and User Id is " + a.UserName + " ");

                    }
                    ViewBag.msg = type + " Panel Password Changed Successfully..";
                }
                else
                {
                    ViewBag.msg = "There is no data";
                }
            }
            return View();
        }

        [HttpGet]
        public ActionResult ResetAll()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult ResetAll(NewLogin model)
        {
            if (ModelState.IsValid)
            {

                var panellist = (from dbc in db.NewLogins where dbc.type == "Operator" || dbc.type == "Branch" || dbc.type == "HR" select dbc).ToList();
                foreach (var a in panellist)
                {
                    string pass = gid();
                    NewLogin ob = db.NewLogins.Single(o => o.UserName == a.UserName);
                    if (ob.type == "Branch")
                    {
                        Branchtab bob = db.Branchtabs.Single(bb => bb.BranchCode == a.UserName);
                        bob.password = pass;
                        //db.Entry(bob).State = EntityState.Modified;
                        db.Entry<Branchtab>(bob).State = System.Data.Entity.EntityState.Modified;
                    }
                    if (ob.type == "Operator")
                    {
                        Operator oob = db.Operators.Single(bb => bb.OperatorId == a.UserName);
                        oob.OperatorPassword = pass;
                        //db.Entry(oob).State = EntityState.Modified;
                        db.Entry<Operator>(oob).State = System.Data.Entity.EntityState.Modified;
                    }
                    if (ob.type == "HR")
                    {
                        HRTab hob = db.HRTabs.Single(ho => ho.HRId == a.UserName);
                        hob.Password = pass;
                        //db.Entry(hob).State = EntityState.Modified;
                        db.Entry<HRTab>(hob).State = System.Data.Entity.EntityState.Modified;
                    }
                    ob.Password = pass;
                    //db.Entry(ob).State = EntityState.Modified;
                    db.Entry<NewLogin>(ob).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    //MyClass.Sendmsg(a.Mobile,"Your Password Reset by admin which is "+ pass);
                }
                ViewBag.msg = "All Panels password changed successfully..";
            }
            return View();
        }
        [HttpGet]
        public ActionResult AgentPrmote()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status >= 1 && log.type == "Admin")
                    {

                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult AgentPrmote(string intro, int promoterank)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                int rcount = db.Ranktabs.Where(p => p.RankCode == promoterank).Count();
                if (rcount == 0)
                {
                    Response.Write("<script>alert('Enter A valid " + mr.rankname + "')</script>");

                }
                else
                {


                    var rname = db.Ranktabs.Single(u => u.RankCode == promoterank);
                    AgentDetail df = db.AgentDetails.Single(c => c.NewAgentId == intro);
                    df.RankName = rname.RankName;
                    df.RankCode = rname.RankCode;
                    //db.Entry(df).State = EntityState.Modified;
                    db.Entry<AgentDetail>(df).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    var nar = db.AgentDetails.Single(c => c.NewAgentId == intro);
                    MyClass.Sendmsg(nar.Mobile, "Congratulations " + nar.name + " you are promoted by admin at " + mr.rankname + ":" + nar.RankName + " Please Visit "+cg.HeadOffice);
                    Response.Write("<script>alert('Agent Successfully Updated')</script>");

                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult Approvecheque()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult Approvecheque(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var Arv = db.appltabs.Single(b => b.newbondid == newbondid);
                if (Arv.status == 0)
                {
                    appltab cr = db.appltabs.Single(b => b.newbondid == newbondid);
                    cr.status = 1;
                    //db.Entry(cr).State = EntityState.Modified;
                    db.Entry<appltab>(cr).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    Response.Write("<script>alert('Successfully approved..')</script>");
                }
                else
                {
                    Response.Write("<script>alert('Already approved..')</script>");
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult SendSMS()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Login", "Home");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult SendSMS(string command, int day)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Login", "Home");
            }
            else
            {

                //var pty = db.Plans.Single(c => c.Plancode == 1);
                if (command == "send")
                {
                    DateTime dt = DateTime.Now.AddDays(day).Date;
                    int count = (from ss in db.SMSSpotCommTabs where ss.business == 1 select ss).Count();
                    if (count >= 0)
                    {

                        //var tsr = (from a in db.SMSSpotCommTabs where a.business == 1 select a.date).Max();
                        //var diff = dt.Subtract(tsr.Date).TotalDays;
                        //if (diff >= 1)
                        //{
                            SMSSpotCommTab ob = new SMSSpotCommTab();
                            ob.newagentid = "NA";
                            ob.date = DateTime.Now.Date;
                            ob.business = 1;
                            ob.commission = 0;
                            db.SMSSpotCommTabs.Add(ob);
                            db.SaveChanges();

                            var bondlist = (from ii in db.Installmenttabs where ii.prevexpirydate <= dt && ii.payamount == 0 select ii).Distinct().ToList();
                            var bb = bondlist.Count();
                            foreach (var bond in bondlist)
                            {

                                var br = db.appltabs.Single(b => b.newbondid == bond.newbondid);
                                var min = (from u in db.Installmenttabs where u.prevexpirydate <= dt && u.newbondid == bond.newbondid && u.payamount == 0 select u.installmentno).Min();
                                var max = (from u in db.Installmenttabs where u.prevexpirydate <= dt && u.newbondid == bond.newbondid && u.payamount == 0 select u.installmentno).Max();
                                var dueamount = (from ii in db.Installmenttabs where ii.prevexpirydate <= dt && ii.payamount == 0 && ii.newbondid == br.newbondid select ii.amount).DefaultIfEmpty(0).Sum();

                                #region Calculate Latefine Start Here

                                //Double totallatefine = 0;
                                //var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
                                //var mr = db.Members.Single(m => m.Id == 1);
                                //while (min <= max)
                                //{
                                //    Double latefine = 0;
                                //    var sredr = db.Installmenttabs.Single(i => i.newbondid == bond.newbondid && i.installmentno == min);

                                //    if (sredr.mode == "Monthly")
                                //    {
                                //        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddDays(15);
                                //        if (DateTime.Now.Date > pdate.Date)
                                //        {
                                //            int diffe = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                //            int r = diffe / 30;
                                //            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                //            //latefine = (sredr.amount * llr.latefine) / 100;
                                //            totallatefine = totallatefine + latefine;

                                //        }
                                //    }
                                //    else if (sredr.mode == "Quarterly")
                                //    {
                                //        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                //        if (DateTime.Now.Date > pdate.Date)
                                //        {
                                //            int diffe = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                //            int r = diffe / 91;
                                //            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                //            //latefine = (sredr.amount * llr.latefine) / 100;
                                //            totallatefine = totallatefine + latefine;
                                //        }
                                //    }
                                //    else if (sredr.mode == "Halfyearly")
                                //    {
                                //        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                //        if (DateTime.Now.Date > pdate.Date)
                                //        {
                                //            int diffe = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                //            int r = diffe / 182;
                                //            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                //            //latefine = (sredr.amount * llr.latefine) / 100;
                                //            totallatefine = totallatefine + latefine;
                                //        }
                                //    }
                                //    else if (sredr.mode == "Yearly")
                                //    {
                                //        DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                //        if (DateTime.Now.Date > pdate.Date)
                                //        {
                                //            int diffe = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                //            int r = diffe / 365;
                                //            latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                //            //latefine = (sredr.amount * llr.latefine) / 100;
                                //            totallatefine = totallatefine + latefine;
                                //        }
                                //    }

                                //    min = min + 1;

                                //}

                                //Double amount = dueamount + totallatefine;

                                #endregion
                                var cm = db.CompanyInfos.Single(aa => aa.Id == 1);
                                var pdt = bond.prevexpirydate.ToString("MMM/yyyy");
                                //MyClass.Sendmsg(br.mobileno, "Dear " + mr.custname + " Kindly deposit your installment amount " + amount + " Rs. for A/c no- " + bond.newbondid + "on or before date- " + pdt + " Regards ODHDEVELOPERS Nidhi Ltd.");
                                MyClass.Sendmsg(br.mobileno, "Dear " + br.name + "inspite of reminders your emi of " + pdt + "  for Rs. " + dueamount + " is still overdue. Please pay immediately to avoid late payment charges . Regards-" + cm + ".");
                                }
                            if (bondlist.Count > 0)
                            {
                                Response.Write("<script>alert('Message Sent Successfully...')</script>");
                            }
                            else
                            {
                                Response.Write("<script>alert('Message Not Send. Due to no due installments')</script>");
                            }
                        //}
                        //else if (diff < 30)
                        //{
                        //    Response.Write("<script>alert('You can send message interval of 30 days')</script>");
                        //}
                    }

                    
                }

          
                return View();
            }
        }

        [HttpGet]
        public ActionResult Updateformdate()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult Updateformdate(string opid, string date, string command, string type)
        {
            System.Threading.Thread.Sleep(3000);
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (opid == "Select")
                {
                    Response.Write("<script>alert('Please Select Id)</script>");
                }
                else
                {
                    if (command == "Activate")
                    {

                        if (type == "Select")
                        {
                            Response.Write("<script>alert('Please Select Date Type')</script>");
                        }
                        else
                        {
                            DateTime dt = DateTime.Parse(date, new CultureInfo("en-CA"));
                            
                            string cdmm = dt.ToString("MM/dd/yyyy");
                            //DateTime newdate = DateTime.Parse(cdmm, new CultureInfo("en-CA"));
                            //DateTime newdate = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            DateTime newdate = Convert.ToDateTime(cdmm);
                            if (opid == "All")
                            {
                                var count = db.Formdates.Where(c => c.branchcode == User.Identity.Name).Count();
                                if (count == 0)
                                {
                                    var dmm = db.Branchtabs.Where(c => c.status == 1).ToList();
                                    foreach (var item in dmm)
                                    {
                                        Formdate dd = new Formdate();
                                        if (type == "1")
                                        {
                                            dd.status = 1;
                                            ViewBag.msg = "Back Date Entry Activate .";
                                        }
                                        else if (type == "2")
                                        {
                                            dd.status = 2;
                                            ViewBag.msg = "Fix Date Entry Activate .";
                                        }

                                        dd.opid = item.BranchCode;
                                        dd.formdate = newdate;
                                        dd.branchcode = User.Identity.Name;
                                        db.Formdates.Add(dd);
                                        db.SaveChanges();
                                    }

                                }
                                else
                                {
                                    var dd = db.Formdates.Where(c => c.branchcode == User.Identity.Name).ToList();
                                    var dmm = db.Branchtabs.Where(c => c.status == 1).ToList();
                                    foreach (var itemm in dd)
                                    {
                                        itemm.formdate = newdate;
                                        itemm.branchcode = User.Identity.Name;
                                        if (type == "1")
                                        {
                                            itemm.status = 1;
                                            ViewBag.msg = "Back Date Entry Activate .";
                                        }
                                        else if (type == "2")
                                        {
                                            itemm.status = 2;
                                            ViewBag.msg = "Fix Date Entry Activate .";
                                        }
                                        db.SaveChanges();

                                    }

                                }
                            }
                            else
                            {

                                var count = db.Formdates.Where(c => c.branchcode == User.Identity.Name && c.opid == opid).Count();
                                if (count == 0)
                                {
                                    Formdate dd = new Formdate();
                                    if (type == "1")
                                    {
                                        dd.status = 1;
                                        ViewBag.msg = "Back Date Entry Activate .";
                                    }
                                    else if (type == "2")
                                    {
                                        dd.status = 2;
                                        ViewBag.msg = "Fix Date Entry Activate .";
                                    }

                                    dd.opid = opid;
                                    dd.formdate = newdate;
                                    dd.branchcode = User.Identity.Name;

                                    db.Formdates.Add(dd);
                                    db.SaveChanges();
                                }
                                else
                                {
                                    Formdate dd = db.Formdates.Single(c => c.opid == opid && c.branchcode == User.Identity.Name);
                                    dd.opid = opid;
                                    dd.formdate = newdate;
                                    dd.branchcode = User.Identity.Name;
                                    if (type == "1")
                                    {
                                        dd.status = 1;
                                        ViewBag.msg = "Back Date Entry Activate .";
                                    }
                                    else if (type == "2")
                                    {
                                        dd.status = 2;
                                        ViewBag.msg = "Fix Date Entry Activate .";
                                    }
                                    //db.Entry(dd).State = EntityState.Modified;
                                    db.Entry<Formdate>(dd).State = System.Data.Entity.EntityState.Modified;
                                    db.SaveChanges();

                                }
                            }
                        }
                    }
                    else if (command == "Deactivate")
                    {
                        if (opid == "All")
                        {
                            var count = db.Formdates.Where(c => c.branchcode == User.Identity.Name).Count();
                            if (count == 0)
                            {
                                var dmm = db.Branchtabs.Where(c => c.status == 1).ToList();
                                foreach (var item in dmm)
                                {
                                    Formdate dd = new Formdate();
                                    dd.opid = item.BranchCode;
                                    dd.formdate = DateTime.Now;
                                    dd.status = 0;
                                    dd.branchcode = User.Identity.Name;
                                    db.Formdates.Add(dd);
                                    db.SaveChanges();
                                    ViewBag.msg = "Back Date Entry Deactivate .";
                                }
                                ViewBag.msg = "Back Date Entry Deactivate .";
                            }
                            else
                            {

                                var dd = db.Formdates.Where(c => c.branchcode == User.Identity.Name).ToList();
                                var dmm = db.Branchtabs.Where(c => c.status == 1).ToList();
                                foreach (var item in dd)
                                {


                                    item.formdate = DateTime.Now;
                                    item.branchcode = User.Identity.Name;
                                    item.status = 0;

                                    db.SaveChanges();
                                }
                                ViewBag.msg = "Back Date Entry Deactivate .";
                            }

                        }
                        else
                        {
                            var count = db.Formdates.Where(c => c.opid == opid && c.branchcode == User.Identity.Name).Count();
                            if (count == 0)
                            {
                                Formdate dd = new Formdate();
                                dd.opid = opid;
                                dd.formdate = DateTime.Now;
                                dd.status = 0;
                                dd.branchcode = User.Identity.Name;
                                db.Formdates.Add(dd);
                                db.SaveChanges();
                                ViewBag.msg = "Back Date Entry Deactivate .";
                            }
                            else
                            {
                                Formdate dd = db.Formdates.Single(c => c.opid == opid && c.branchcode == User.Identity.Name);
                                dd.opid = opid;
                                dd.formdate = DateTime.Now;
                                dd.branchcode = User.Identity.Name;
                                dd.status = 0;
                                //db.Entry(dd).State = EntityState.Modified;
                                db.Entry<Formdate>(dd).State = System.Data.Entity.EntityState.Modified;
                                db.SaveChanges();
                                ViewBag.msg = "Back Date Entry Deactivate .";
                            }
                        }
                    }
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult Renewalsms(string newbondid, string receiptno)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Login", "Home");
            }
            else
            {
                List<Installmenttab> rllist = new List<Installmenttab>();

                if (newbondid != null)
                {
                    var cr = db.appltabs.Single(c => c.newbondid == newbondid);
                    ViewData["mob"] = cr.mobileno;


                    var ob = db.Installmenttabs.Single(i => i.newbondid == newbondid && i.receiptno == receiptno);
                    ob.chequeno = ob.chequeno == null ? "" : "no. " + ob.chequeno;
                    var cm = db.CompanyInfos.Single(d => d.Id == 1);
                    //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ",Your renewal of Rs " + ob.payamount + " is received for plan " + cr.planname + " for Bond: " + newbondid + " on date: " + ob.paymentdate + " please visit "+cg.HeadOffice);
                    //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your EMI of Rs." + ob.payamount + " for the month " + ob.prevexpirydate.ToString("MMMM") + " for loan a/c no. " + cr.loanid + " vide " + ob.paymethod + "cheque no " + ob.chequeno + " has been deposited successfully. Regards- " + cm.CompanyName);
                    string Paymethod = "", chequeno = "";
                    if (ob.paymethod == "banktransaction")
                    {
                        Paymethod = "Bank Transaction" + "/" + ob.transactiontype;
                        chequeno = "Transaction Id " + ob.chequeno;
                    }
                    else if (ob.paymethod != "Cash")
                    {
                        chequeno = ob.paymethod + ", No. " + ob.chequeno;
                        Paymethod = ob.paymethod;
                    }
                    else
                    {
                        Paymethod = ob.paymethod;
                    }
                   /* if (cr.paymenttype == "EMI")
                    {
                        MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your EMI of Rs." + ob.payamount + " for the month " + Convert.ToDateTime(ob.paymentdate).ToString("MMMM") + " for loan a/c no. " + cr.loanid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards- " + cm.CompanyName);
                    }
                    else {*/
                        MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your PAYMENT of Rs." + ob.payamount + ",OF YOUR ID NO.-" + cr.newbondid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards-" + cg.CompanyName);
                    /*}*/
                    Response.Write("<script>alert('SMS sent to " + cr.name + "(" + cr.newbondid + ") successfully...')</script>");
                    rllist = (from rl in db.Installmenttabs where rl.newbondid == newbondid && rl.payamount != 0 select rl).ToList();

                }
                return View(rllist);
            }
        }
        [HttpPost]
        public ActionResult Renewalsms(string newbondid)
        {
            List<Installmenttab> rllist = new List<Installmenttab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Login", "Home");
            }
            else
            {
                var btype = db.appltabs.Single(p => p.newbondid == newbondid);
                ViewData["mob"] = btype.mobileno;

                rllist = (from rl in db.Installmenttabs where rl.newbondid == newbondid && rl.payamount != 0 select rl).ToList();


                return View(rllist);
            }
        }

        [HttpGet]
        public ActionResult SetAdvanceDeduction()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult SetAdvanceDeduction(AdvDeductionVoucher ob)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                Double balance = 0;
                var paymentsum = (from df in db.AdvBrokerPaymentTabs where df.newagentid == ob.newagentid select df.amount).DefaultIfEmpty(0).Sum();
                var receivesum = (from df in db.AdvBrokerPaymentTabs where df.newagentid == ob.newagentid select df.returnamount).DefaultIfEmpty(0).Sum();
                balance = (paymentsum - ob.amount - receivesum);
                var remaining = paymentsum - receivesum;
                if (balance >= 0)
                {
                    AdvDeductionVoucher cob = new AdvDeductionVoucher();
                    cob.newagentid = ob.newagentid;
                    cob.amount = ob.amount;
                    cob.month = ob.month;
                    cob.year = ob.year;
                    cob.date = DateTime.Now.Date;
                    cob.Remark = ob.Remark;
                    db.AdvDeductionVouchers.Add(cob);
                    db.SaveChanges();

                    AdvBrokerPaymentTab ccob = new AdvBrokerPaymentTab();
                    ccob.newagentid = ob.newagentid;
                    ccob.Remark = ob.Remark;
                    ccob.amount = 0;
                    ccob.returnamount = ob.amount;
                    ccob.balanceamount = balance;
                    ccob.date = DateTime.Now.Date;
                    ccob.branchcode = User.Identity.Name;
                    ccob.opid = User.Identity.Name;
                    ccob.type = 1;
                    db.AdvBrokerPaymentTabs.Add(ccob);
                    db.SaveChanges();

                    Response.Write("<script>alert('Deduction done Successfully')</script>");
                }
                else
                {
                    Response.Write("<script>alert('Sorry!Please Enter amount less than or equal to " + remaining + "')</script>");
                }
                return View();
            }
        }

        #endregion

        #region Delete Menu Start here

        [HttpGet]
        public ActionResult DeleteReciept(string newbondid, string receiptno)
        {
            List<Installmenttab> rllist = new List<Installmenttab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (newbondid != null)
                {
                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }

                    var ba = db.appltabs.Single(c => c.newbondid == newbondid);
                    Cancel_Receipt cr = new Cancel_Receipt();
                    Installmenttab ob = db.Installmenttabs.Single(i => i.newbondid == newbondid && i.receiptno == receiptno);

                    cr.amount = ob.amount;
                    cr.payamount = ob.payamount;
                    cr.bondid = ob.bondid;
                    cr.latefine = ob.latefine;
                    cr.reliefrs = ob.reliefrs;
                    cr.expirydate = ob.expirydate;
                    cr.paymentdate = Convert.ToDateTime(ob.paymentdate);
                    cr.prevexpirydate = ob.prevexpirydate;
                    cr.year = ob.year;
                    cr.cssno = Convert.ToInt32(ob.cssno);
                    cr.installmentno = ob.installmentno;
                    cr.receiptno = ob.receiptno;
                    cr.planname = ob.planname;
                    cr.term = ob.term_plan;
                    cr.mode = ob.mode;
                    cr.paymethod = ob.paymethod;
                    cr.chekddno = ob.chekddno;
                    cr.drawno = ob.drawno;
                    cr.branch = ob.branch;
                    cr.amountinword = ob.amountinword;
                    cr.newbondid = ob.newbondid;
                    cr.opid = User.Identity.Name;
                    cr.Macaddress = localIP;
                    cr.Time = DateTime.Now.ToShortTimeString();
                    cr.paymentno = ob.paymentno;
                    db.Cancel_Receipts.Add(cr);
                    db.SaveChanges();

                    ob.payamount = 0;
                    ob.paymentdate = null;
                    ob.latefine = 0;
                    ob.reliefrs = 0;
                    ob.cssno = null;
                    ob.paymethod = null;
                    ob.amountinword = null;
                    ob.opid = null;
                    ob.Macaddress = null;
                    ob.Time = null;
                    ob.paymentno = 0;
                    ob.branch = ba.branchcode;
                    //db.Entry(ob).State = EntityState.Modified;
                    db.Entry<Installmenttab>(ob).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();

                    List<commission_tab> ctab = new List<commission_tab>();
                    ctab = (from i in db.commission_tabs where i.newbondid == newbondid && i.receiptno == receiptno select i).ToList();
                    foreach (var r in ctab.ToList())
                    {
                        db.commission_tabs.Remove(r);
                    }
                    db.SaveChanges();
                    rllist = (from rl in db.Installmenttabs where rl.newbondid == newbondid && rl.payamount != 0 select rl).ToList();

                }
                return View(rllist.OrderBy(x => x.installmentno));
            }
        }
        [HttpPost]
        public ActionResult DeleteReciept(string newbondid)
        {
            List<Installmenttab> rllist = new List<Installmenttab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                rllist = (from rl in db.Installmenttabs where rl.newbondid == newbondid && rl.payamount != 0 select rl).ToList();
                return View(rllist.OrderBy(x => x.installmentno));
            }
        }

        [HttpGet]
        public ActionResult DeleteBond(string newbondid)
        {
            List<appltab> pinlist = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (newbondid == null)
                {
                    pinlist = (from pl in db.appltabs where pl.status == 0 select pl).ToList();

                }

                return View(pinlist);
            }
        }
        [HttpPost]
        public ActionResult DeleteBond(string newbondid, appltab model, int status = 0)
        {
            List<appltab> dclist = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (newbondid != null && status == 0)
                {
                    dclist = (from dcl in db.appltabs where dcl.newbondid == newbondid select dcl).ToList();

                }
                else if (newbondid != null && status != 0)
                {
                    dclist = (from dcl in db.appltabs where dcl.newbondid == newbondid && dcl.status != null select dcl).ToList();
                    foreach (var row in dclist.ToList())
                    {
                        db.appltabs.Remove(row);
                    }
                    db.SaveChanges();

                }
            }

            return View(dclist);
        }

        [HttpGet]
        public ActionResult DeleteExpanse(string branchcode, int Id = 0)
        {
            List<Expense> co = new List<Expense>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (branchcode == null)
                {
                    return View(co);

                }
                else
                {
                    var row = db.Expenses.Single(r => r.Id == Id);
                    db.Expenses.Remove(row);
                    db.SaveChanges();
                    co = (from pl in db.Expenses where pl.branchcode == branchcode select pl).ToList();

                }
                return View(co);
            }
        }
        [HttpPost]
        public ActionResult DeleteExpanse(string branchcode)
        {
            List<Expense> co = new List<Expense>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                co = (from pl in db.Expenses where pl.branchcode == branchcode select pl).ToList();
                return View(co);
            }
        }

        #endregion

        #region Change Password Start Here

        [HttpGet]
        public ActionResult ChangePassword()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();

            }
        }
        [HttpPost]
        public ActionResult ChangePassword(string Password, string NewPassword, string ConfirmPassword)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (NewPassword == ConfirmPassword)
                {

                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;

                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "changepassword";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Connection = con;
                    cmd.Parameters.AddWithValue("@user", User.Identity.Name);
                    cmd.Parameters.AddWithValue("@oldpass", Password);
                    cmd.Parameters.AddWithValue("@newpass", NewPassword);

                    SqlParameter p = new SqlParameter("@ans", SqlDbType.Int);
                    p.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(p);
                    try
                    {

                        con.Open();
                        cmd.ExecuteNonQuery();


                        string response1 = cmd.Parameters["@ans"].Value.ToString();
                        int a = Convert.ToInt32(response1);

                        if (a == 0)
                        {
                            ViewBag.msg = "Sorry,Old Password Not matching";

                        }
                        else if (a == 1)
                        {
                            ViewBag.msg = "Password Changed successfully";

                        }
                    }

                    catch (SqlException e)
                    {
                        ViewBag.msg = e.Message;

                    }
                    finally
                    {
                        con.Close();
                    }
                }
                else
                {
                    ViewBag.msg = "Password not matching";
                }
            }
            return View();
        }
        #endregion

        #region Maturity Menu Start Here

        [HttpGet]
        public ActionResult MaturityAppDis(string newbondid, int status = 0)
        {
            List<MaturityStatus> rllist = new List<MaturityStatus>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (newbondid == null)
                {
                    return View(rllist);
                }
                else
                {
                    var info = db.appltabs.Single(s => s.newbondid == newbondid);
                    if (status == 0)
                    {
                        var ba = db.MaturityStatuss.Single(c => c.newbondid == newbondid);
                        ba.newstatus = "Reject";
                        ba.status = 1;
                        //db.Entry(ba).State = EntityState.Modified;
                        db.Entry<MaturityStatus>(ba).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();

                    }
                    else if (status == 1)
                    {
                        var ba = db.MaturityStatuss.Single(c => c.newbondid == newbondid);
                        ba.newstatus = "Accept";
                        ba.status = 1;
                        //db.Entry(ba).State = EntityState.Modified;
                        db.Entry<MaturityStatus>(ba).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();
                        var cr = db.CompanyInfos.Single(c => c.Id == 1);
                        //var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                        var mr = db.Members.Single(m => m.Id == 1);
                        appltab br = db.appltabs.Single(a => a.newbondid == newbondid);
                        MaturityStatus mstatus = db.MaturityStatuss.Single(a => a.newbondid == newbondid);
                        MaturityTab pmt = new MaturityTab();
                        pmt.bondid = br.bondid;
                        pmt.branchcode = br.branchcode;
                        pmt.newbondid = br.newbondid;
                        pmt.name = br.name;
                        pmt.RelationOf = br.RelationOf;
                        pmt.fathername = br.fathername;
                        pmt.addr = br.addr;
                        pmt.mobileno = br.mobileno;
                        pmt.introducerid = br.introducerid;
                        pmt.newintroducerid = br.newintroducerid;
                        pmt.intrankcode = br.intrankcode;
                        pmt.intrankname = br.intrankname;
                        pmt.formdate = br.formdate;
                        pmt.dob = br.dob;
                        pmt.age = br.age;
                        pmt.nationality = br.nationality;
                        pmt.guardianname = br.guardianname;
                        pmt.gurage = br.gurage;
                        pmt.gurrel = br.gurrel;
                        pmt.guraddr = br.guraddr;
                        pmt.photo = br.photo;
                        pmt.panno = br.panno;
                        pmt.bankname = br.bankname;
                        pmt.accountno = br.accountno;
                        pmt.plantype = br.plantype;
                        pmt.plancode = br.plancode;
                        pmt.planname = br.planname;
                        pmt.term = br.term;
                        pmt.mode = br.mode;
                        pmt.payment = br.payment;
                        pmt.nolandunit = br.nolandunit;
                        pmt.totalcon = ba.totalcon;
                        pmt.expectedraisablevalue = ba.maturityamount;
                        pmt.applicationcharge = br.applicationcharge;
                        pmt.bonusper = br.bonusper;
                        pmt.expirydate = br.expirydate;
                        pmt.nomineename = br.nomineename;
                        pmt.nomage = br.nomage;
                        pmt.nomrel = br.nomrel;
                        pmt.nomaddr = br.nomaddr;
                        pmt.paymethod = br.paymethod;
                        pmt.pdate = br.pdate;
                        pmt.checkorddno = br.checkorddno;
                        pmt.drawno = br.drawno;
                        pmt.branchpay = br.branchpay;
                        pmt.amountword = br.amountword;
                        pmt.opid = br.opid;
                        pmt.status = br.status;
                        pmt.type = br.type;
                        pmt.Macaddress = br.Macaddress;
                        pmt.Time = br.Time;
                        pmt.maturityamount = mstatus.maturityamount;
                        pmt.maturitydate = DateTime.Now.Date;
                        db.MaturityTabs.Add(pmt);
                        br.status = 2;
                        db.SaveChanges();
                        ViewBag.cpy = "Maturity Done Successfully..";
                        MyClass.Sendmsg(info.mobileno, "Dear Customer your Bond no- " + newbondid + " .You request for maturity is accepted. Thank you for your kind believe us for help contact. "+cg.CompanyName);

                    }
                }
                return View(rllist);

            }
        }

        #endregion

        #region Search menu start here

        [HttpGet]
        public ActionResult SearchBroker()
        {
            List<AgentDetail> a = new List<AgentDetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(a);
            }
        }

        [HttpPost]
        public ActionResult SearchBroker(string NewAgentId, string command, string brokerid)
        {
            if (command == "Search")
            {
                List<AgentDetail> ad = new List<AgentDetail>();
                if (!IsLoggedIn())
                {
                    return RedirectToAction("Logout", "Admin");
                }
                else
                {

                    ad = (from dcl in db.AgentDetails where dcl.NewAgentId == NewAgentId select dcl).ToList();
                    return View(ad);
                }
            }
            else if (command == "PDF")
            {

                var dn = (from a in db.AgentDetails where a.NewAgentId == brokerid select a).ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Broker.rpt"));
                rd.SetDataSource(dn);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }

                return View(dn);
            }
            return View();
        }

        [HttpGet]
        public ActionResult SearchBond()
        {
            List<appltab> ad = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(ad);
            }
        }

        [HttpPost]
        public ActionResult SearchBond(string NewBondId, string command, string newbondid)
        {
            if (command == "Search")
            {
                List<appltab> ad = new List<appltab>();
                if (!IsLoggedIn())
                {
                    return RedirectToAction("Logout", "Admin");
                }
                else
                {

                    ad = (from dcl in db.appltabs where dcl.newbondid == NewBondId select dcl).ToList();
                    return View(ad);
                }
            }
            else if (command == "PDF")
            {
                var dn = (from a in db.appltabs where a.newbondid == newbondid select a).ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Customer.rpt"));
                rd.SetDataSource(dn);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }

                return View(dn);

            }
            return View();
        }



        #endregion

        [HttpGet]
        public ActionResult Approvewebsite(int Id = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (Id > 0)
                {
                    var list = db.PC_Tabs.Single(o => o.Id == Id);
                    if (status == 2)
                    {
                        db.PC_Tabs.Remove(list);
                        db.SaveChanges();
                    }
                    else
                    {
                        list.status = status;
                        db.SaveChanges();
                    }
                }
                return View(db.PC_Tabs);
            }
        }

        [HttpGet]
        public ActionResult DailyHolding()
        {
            List<HoldingPlot> holdlist = new List<HoldingPlot>();
            var count = db.HoldingPlots.Where(a => a.holdstatus == 1).Count();
            if (count != 0)
            {
                holdlist = db.HoldingPlots.Where(a => a.holdstatus == 1).ToList();
            }
            return View(holdlist);
        }

        public ActionResult Logout()
        {
            FormsAuthentication.SignOut();
            return RedirectToAction("Login", "Home");
        }

        #region divya

        [HttpGet]
        public ActionResult PlotRegistry()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<plotReglist> bt = new List<plotReglist>();


                return View(bt);

            }

        }
        [HttpPost]
        public ActionResult PlotRegistry(Plotregistry pr, string newbondid, string bondid, string command, HttpPostedFileBase reciept, HttpPostedFileBase bond, HttpPostedFileBase registry)
        {
            List<plotReglist> bt = new List<plotReglist>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        var mem = db.appltabs.Single(c => c.newbondid == newbondid);
                        var payamt = (from am in db.Installmenttabs where am.newbondid == mem.newbondid select am.payamount).DefaultIfEmpty(0).Sum();
                        bt.Add(new plotReglist { newbondid = mem.newbondid, name = mem.name, plotno = mem.plotno, block = mem.block, amount = payamt });

                        break;

                    case "submit":
                        var dt = DateTime.Now.Date;
                        var totalamount = db.appltabs.Single(c => c.newbondid == bondid);

                        Plotregistry model = new Plotregistry();
                        if (reciept != null)
                        {
                            string imgname = gid();
                            model.Reciept = "~/Photo/" + imgname + ".jpg";
                            reciept.SaveAs(HttpContext.Server.MapPath("~/Photo/") + imgname + ".jpg");

                        }
                        else
                        {
                            model.Reciept = "~/Photo/default.jpg";

                        }

                        if (bond != null)
                        {
                            string imgname = gid();
                            model.bond = "~/Photo/" + imgname + ".jpg";
                            bond.SaveAs(HttpContext.Server.MapPath("~/Photo/") + imgname + ".jpg");

                        }
                        else
                        {
                            model.bond = "~/Photo/default.jpg";

                        }
                        if (registry != null)
                        {
                            string imgname = gid();
                            model.registry = "~/Photo/" + imgname + ".jpg";
                            registry.SaveAs(HttpContext.Server.MapPath("~/Photo/") + imgname + ".jpg");

                        }
                        else
                        {
                            model.registry = "~/Photo/default.jpg";

                        }

                        model.newbondid = bondid;
                        model.name = pr.name;
                        model.plotno = pr.plotno;
                        model.block = pr.block;
                        model.amount = pr.amount;
                        model.bookingamount = 0;
                        model.commission = 0;
                        model.deductionamount = 0;
                        model.remainingamount = 0;
                        model.Date = dt;
                        model.type = "Registry";
                        model.status = 1;
                        db.Plotregistrys.Add(model);
                        db.SaveChanges();

                        appltab ob = db.appltabs.Single(i => i.newbondid == bondid);
                        ob.status = 4;
                        //db.Entry(ob).State = EntityState.Modified;
                        db.Entry<appltab>(ob).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();
                        ViewBag.prmsg = "registry Successfull";


                        break;
                }
                return View(bt);
            }
        }

        private ImageCodecInfo GetEncoder(ImageFormat format)
        {
            ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();

            foreach (ImageCodecInfo codec in codecs)
            {
                if (codec.FormatID == format.Guid)
                {
                    return codec;
                }
            }
            return null;
        }
        [HttpGet]

        public ActionResult PlotRegistryReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<plotReglist> bt = new List<plotReglist>();


                return View(bt);

            }

        }
        [HttpPost]
        public ActionResult PlotRegistryReport(DateTime sdate, DateTime edate, int Type = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                double bmt = 0;
                List<plotReglist> bt = new List<plotReglist>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                if (Type == 1)
                {
                    var blist = (from g in db.Plotregistrys where g.Date >= sdate && g.Date <= edate && g.status == 1 orderby g.newbondid select g).ToList();
                    bmt = (from bm in db.Plotregistrys where bm.Date >= sdate && bm.Date <= edate && bm.status == 1 select bm.amount).DefaultIfEmpty().Sum();
                    foreach (var b in blist)
                    {
                        bt.Add(new plotReglist { totalamount = bmt, amount = b.amount, type = b.type, newbondid = b.newbondid, name = b.name, plotno = b.plotno, block = b.block, date = b.Date, sdate = sdate, edate = edate, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                    }
                }
                if (Type == 0)
                {
                    var blist = (from g in db.Plotregistrys where g.Date >= sdate && g.Date <= edate && g.status == 0 orderby g.newbondid select g).ToList();
                    bmt = (from bm in db.Plotregistrys where bm.Date >= sdate && bm.Date <= edate && bm.status == 0 select bm.amount).DefaultIfEmpty().Sum(); ;
                    foreach (var b in blist)
                    {
                        bt.Add(new plotReglist { totalamount = bmt, amount = b.amount, type = b.type, newbondid = b.newbondid, name = b.name, plotno = b.plotno, block = b.block, date = b.Date, sdate = sdate, edate = edate, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                    }
                }
                if (Type == 2)
                {
                    var blist = (from g in db.Plotregistrys where g.Date >= sdate && g.Date <= edate orderby g.newbondid select g).ToList();
                    bmt = (from g in db.Plotregistrys where g.Date >= sdate && g.Date <= edate select g.amount).DefaultIfEmpty().Sum();
                    foreach (var b in blist)
                    {
                        bt.Add(new plotReglist { totalamount = bmt, amount = b.amount, type = b.type, newbondid = b.newbondid, name = b.name, plotno = b.plotno, block = b.block, date = b.Date, sdate = sdate, edate = edate, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }
                ViewData["Total"] = bmt;
                stdate = sdate;
                enddate = edate;
                Ttype = Type;
                return View(bt);

            }

        }

        public ActionResult PrintPlotRegistry()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<plotReglist> bt = new List<plotReglist>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                if (Ttype == 1)
                {
                    var blist = (from g in db.Plotregistrys where g.Date >= stdate && g.Date <= enddate && g.status == 1 orderby g.newbondid select g).ToList();

                    foreach (var b in blist)
                    {
                        bt.Add(new plotReglist { amount = b.amount, type = b.type, newbondid = b.newbondid, name = b.name, plotno = b.plotno, block = b.block, date = b.Date, sdate = stdate, edate = enddate, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }
                if (Ttype == 0)
                {
                    var blist = (from g in db.Plotregistrys where g.Date >= stdate && g.Date <= enddate && g.status == 0 orderby g.newbondid select g).ToList();

                    foreach (var b in blist)
                    {
                        bt.Add(new plotReglist { amount = b.amount, type = b.type, newbondid = b.newbondid, name = b.name, plotno = b.plotno, block = b.block, date = b.Date, sdate = stdate, edate = enddate, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }
                if (Ttype == 2)
                {
                    var blist = (from g in db.Plotregistrys where g.Date >= stdate && g.Date <= enddate orderby g.newbondid select g).ToList();

                    foreach (var b in blist)
                    {
                        bt.Add(new plotReglist { amount = b.amount, type = b.type, newbondid = b.newbondid, name = b.name, plotno = b.plotno, block = b.block, date = b.Date, sdate = stdate, edate = enddate, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PlotRegistry.rpt"));
                rd.SetDataSource(bt);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();
                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(bt);
            }
        }


        [HttpGet]
        public ActionResult PreSurrender()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<plotReglist> bt = new List<plotReglist>();
                return View(bt);
            }

        }
        [HttpPost]
        public ActionResult PreSurrender(string command, string bondid, string newbondid, Plotregistry pr)
        {
            List<plotReglist> bt = new List<plotReglist>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                switch (command)
                {

                    case "Search":

                        var mem = db.appltabs.Single(c => c.newbondid == newbondid);
                        //double bookingamt = mem.bookingamount;
                        double commission = (from cm in db.commission_tabs where cm.newbondid == newbondid select cm.commission).DefaultIfEmpty(0).Sum();
                        double spcommission = (from cm in db.spotcommission_tabs where cm.newbondid == newbondid select cm.commission).DefaultIfEmpty(0).Sum();
                        double totalcommission = commission + spcommission;
                        double payamt = (from am in db.Installmenttabs where am.newbondid == mem.newbondid select am.payamount).DefaultIfEmpty(0).Sum();
                        double remainingamt = (payamt) - (totalcommission);
                        double Bussinessamt = payamt;
                        bamt = Bussinessamt;
                        bt.Add(new plotReglist { totalamount = bamt, newbondid = mem.newbondid, name = mem.name, plotno = mem.plotno, block = mem.block, bookingamount = mem.bookingamount, commission = totalcommission, Remainingamount = remainingamt });

                        break;
                    case "submit":
                        var count = (from c in db.Plotregistrys where c.newbondid == bondid select c).Count();
                        if (count == 0)
                        {
                            double bbamt = bamt;
                            var dt = DateTime.Now.Date;
                            Plotregistry model = new Plotregistry();
                            model.newbondid = bondid;
                            model.registry = "NA";
                            model.Reciept = "NA";
                            model.bond = "NA";
                            model.name = pr.name;
                            model.plotno = pr.plotno;
                            model.block = pr.block;
                            model.amount = bbamt;
                            model.bookingamount = pr.bookingamount;
                            model.commission = pr.commission;
                            model.deductionamount = pr.deductionamount;
                            model.remainingamount = pr.remainingamount;
                            model.type = "PreSurrender";
                            model.Date = dt;
                            model.status = 0;
                            db.Plotregistrys.Add(model);
                            db.SaveChanges();
                            appltab apt = db.appltabs.Single(p => p.newbondid == bondid);
                            apt.status = 2;
                            apt.block = "NA";
                            apt.plotno = 0;
                            apt.PYN = "YN";
                            db.SaveChanges();
                            ViewBag.prmsg = "Customer PreSurrender Successfully";

                        }
                        else
                        {
                            Response.Write("<script>alert('This Customer already PreSurrender')</script>");
                        }
                        break;

                }
                newbond = bondid;
                return View(bt);
            }

        }

        public ActionResult Printpresurrenderreciept()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<plotReglist> bt = new List<plotReglist>();
                var plist = db.Plotregistrys.Single(a => a.newbondid == newbond);
                var cr = db.CompanyInfos.Single(a => a.Id == 1);
                var deduct = plist.commission + plist.deductionamount;
                var remainingamt = plist.amount - deduct;
                bt.Add(new plotReglist { newbondid = plist.newbondid, name = plist.name, totalamount = plist.amount, commission = plist.commission, Remainingamount = remainingamt, deductamount = plist.deductionamount, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PreSurrenderReciept.rpt"));
                rd.SetDataSource(bt);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();
                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(bt);
            }
        }
        [HttpGet]
        public ActionResult PreSurrenderReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<Plotregistry> vlist = new List<Plotregistry>();
                return View(vlist);
            }
        }

        [HttpPost]
        public ActionResult PreSurrenderReport(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<Plotregistry> vlist = (from vl in db.Plotregistrys where vl.Date >= sdate && vl.Date <= edate && vl.type == "PreSurrender" select vl).ToList();
                return View(vlist);
            }
        }
        [HttpGet]
        public ActionResult Registry()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }

        [HttpGet]
        public ActionResult RevivalCustomerList(string newbondid, string status)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {


                List<plotFree> rvl = new List<plotFree>();
                if (newbondid != null)
                {
                    appltab ob = db.appltabs.Single(i => i.newbondid == newbondid);
                    ob.PYN = "YN";
                    ob.plotno = 0;
                    ob.block = "NA";
                    //db.Entry(ob).State = EntityState.Modified;
                    db.Entry<appltab>(ob).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    ViewBag.msg = "Unrelease successfully";
                }
                return View(rvl);
            }
        }
        [HttpPost]
        public ActionResult RevivalCustomerList(string projectid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                //var date = DateTime.Now.Date;
                List<plotFree> rvl = new List<plotFree>();
                try
                {
                    SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString);
                    SqlCommand cmd = new SqlCommand();
                    cmd.Connection = con;
                    cmd.CommandText = "RevivalCustomerList";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@projectid", projectid);
                    cmd.CommandTimeout = 100000;
                    con.Open();
                    SqlDataReader rdr = cmd.ExecuteReader();
                    while (rdr.Read())
                    {
                        plotFree pl = new plotFree();
                        pl.newbondid = Convert.ToString(rdr["newbondid"]);
                        pl.name = Convert.ToString(rdr["name"]);
                        pl.Introducer = Convert.ToString(rdr["Introducer"]);
                        pl.plotno = Convert.ToInt32(rdr["plotno"]);
                        pl.block = Convert.ToString(rdr["block"]);
                        pl.plotcost = Convert.ToDouble(rdr["plotcost"]);
                        pl.paidamount = Convert.ToDouble(rdr["paidamount"]);
                        pl.due = Convert.ToInt32(rdr["due"]);
                        pl.totalamount = Convert.ToDouble(rdr["totalamount"]);
                        rvl.Add(pl);
                    }
                }
                catch (Exception ex) { TempData["Error"] = "Error is: " + ex.Message; }
                finally { con.Close(); }


                return View(rvl);
            }
        }

        [HttpGet]
        public ActionResult RevivalReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<appltab> rvl = new List<appltab>();

                return View(rvl);
            }
        }
        [HttpPost]
        public ActionResult RevivalReport(int plancode)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<appltab> rvl = new List<appltab>();
                if (plancode == 0)
                {
                    rvl = (from a in db.appltabs where a.PYN == "YN" select a).ToList();


                }
                else
                {

                    rvl = (from a in db.appltabs where a.PYN == "YN" && a.projectid == plancode select a).ToList();


                }
                return View(rvl);
            }
        }

        [HttpGet]
        public ActionResult VisitorReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<Visitortab> vlist = new List<Visitortab>();
                return View(vlist);

            }
        }
        [HttpPost]
        public ActionResult VisitorReport(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<Visitortab> vlist = (from vl in db.Visitortabs where vl.date >= sdate && vl.date <= edate select vl).ToList();
                return View(vlist);

            }
        }

        [HttpGet]
        public ActionResult BondApproval(string nnewbondid, string branchcode, string newintroducerid, string newmemberid, string formdate, string dob, int printstatus = 0, int projectid = 0, double term = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
               // List<tempappltab> vlist = (from vl in db.tempappltabs where vl.discountper > 2 select vl).ToList();
                List<tempappltab> vlist = (from vl in db.tempappltabs select vl).ToList();
                if (nnewbondid != null && printstatus == 1)
                {
                    var pt = db.Plans.Single(c => c.Plancode == projectid);
                    var mr = db.Members.Single(m => m.Id == 1);
                    var br = db.Branchtabs.Single(bc => bc.BranchCode == branchcode);
                    var adr = db.AgentDetails.Single(ad => ad.NewAgentId == newintroducerid);
                    var cr = db.CompanyInfos.Single(csn => csn.Id==1);
                    //var pr = db.ProTerms.Single(p => p.projectid == projectid && p.term == term);
                    int max = (from a in db.appltabs select a).Count();
                    var bondid = max + 1;
                    DateTime chequeappdate = DateTime.Now.Date;
                    string dd = DateTime.Now.Date.Month.ToString("00");
                    int yr = DateTime.Now.Date.Year;
                   // var newbondid = br.prefix + branchcode + "/C0" + dd + bondid.ToString().Substring(0, 2) + DateTime.Now.Date.Day.ToString("00") + bondid.ToString().Substring(2) + yr.ToString().Substring(2);
                    var newbondid = br.prefix + br.BranchCode + "/C0" + bondid;
                    #region APPLTAB

                    var List = db.tempappltabs.Single(ui => ui.newbondid == nnewbondid);

                    appltab bd = new appltab();
                    bd.branchcode = List.branchcode;
                    bd.bondid = bondid;
                    bd.newbondid = newbondid;
                    bd.name = List.name;
                    bd.RelationOf = List.RelationOf;
                    bd.fathername = List.fathername;
                    bd.addr = List.addr;
                    bd.mobileno = List.mobileno;
                    bd.introducerid = List.introducerid;
                    bd.intrankcode = List.intrankcode;
                    bd.intrankname = List.intrankname;
                    bd.newintroducerid = List.newintroducerid;
                    bd.formdate = List.formdate;
                    bd.dob = List.dob;
                    bd.age = List.age;
                    bd.nationality = List.nationality;
                    bd.newmemberid = List.newmemberid;
                    bd.memberid = List.memberid;
                    bd.guardianname = List.guardianname;
                    bd.gurage = List.gurage;
                    bd.gurrel = List.gurrel;
                    bd.guraddr = List.guraddr;
                    bd.photo = List.photo;

                    bd.panno = List.panno;
                    bd.bankname = List.bankname;
                    bd.accountno = List.accountno;
                    bd.IFSC = List.IFSC;

                    bd.plantype = List.plantype;
                    bd.planname = List.planname;
                    bd.plancode = List.plancode;
                    bd.bonusper = List.bonusper;
                    bd.amountword = List.amountword;
                    bd.term = List.term;
                    bd.mode = List.mode;
                    bd.payment = List.payment;
                    bd.applicationcharge = List.applicationcharge;
                    bd.nolandunit = List.nolandunit;
                    bd.totalcon = List.totalcon;
                    bd.expectedraisablevalue = List.expectedraisablevalue;
                    bd.expirydate = List.expirydate;

                    bd.nomineename = List.nomineename;
                    bd.nomage = List.nomage;
                    bd.nomrel = List.nomrel;
                    bd.nomaddr = List.nomaddr;

                    bd.paymethod = List.paymethod;
                    bd.pdate = List.pdate;
                    bd.checkorddno = List.checkorddno;
                    bd.drawno = List.drawno;
                    bd.branchpay = List.branchpay;
                    bd.opid = List.opid;
                    bd.status = List.status;

                    bd.type = List.type;
                    bd.Macaddress = List.Macaddress;
                    bd.discountper = List.discountper;
                    bd.bookingamount = List.bookingamount;
                    bd.downpayment = List.downpayment;
                    bd.Time = List.Time;
                    bd.plotno = List.plotno;
                    bd.PYN = List.PYN;
                    bd.projectid = List.projectid;
                    bd.block = List.block;
                    bd.phaseid = List.phaseid;
                    bd.phase = List.phase;
                    bd.printstatus = List.printstatus;

                    bd.bank = List.bank;
                    bd.Account = List.Account;
                    bd.chequeno = List.chequeno;
                    bd.ACholdername = List.ACholdername;
                    bd.Branch = List.Branch;
                    bd.IFSCCode = List.IFSCCode;
                    bd.ChequeAmount = List.ChequeAmount;
                    bd.Chequedate = List.Chequedate;
                    bd.Chequeimage = List.Chequeimage;
                    bd.chequeappdate = chequeappdate;
                    bd.transactiontype = List.transactiontype;

                    bd.Aadhaar_No = List.Aadhaar_No;
                    bd.Aadhaar_ReqDate = List.Aadhaar_ReqDate;
                    bd.Aadhaar_status = List.Aadhaar_status;
                    bd.Aadhaar_AppDate = List.Aadhaar_AppDate;
                    bd.PAN_AppDate = List.PAN_AppDate;
                    bd.PAN_ReqDate = List.PAN_ReqDate;
                    bd.PanStatus = List.PanStatus;
                    //
                    bd.paymenttype = List.paymenttype;
                    bd.propertyaddress = List.propertyaddress;
                    bd.propertypreference = List.propertypreference;
                    bd.plccost = List.plccost;
                    bd.refno = List.refno;
                    bd.propertyid = List.propertyid;
                    bd.loanid = List.loanid;
                    bd.propertytype = List.propertytype;
                    bd.incomegroup = List.incomegroup;
                    bd.phase = List.phase;
                    bd.plotdesp = List.plotdesp;
                    bd.northwest = List.northwest;
                    bd.northeast = List.northeast;
                    bd.southwest = List.southwest;
                    bd.southeast = List.southeast;
                    bd.sapplicantname = List.sapplicantname;
                    bd.sfathername = List.sfathername;
                    bd.smothername = List.smothername;
                    bd.scategory = List.scategory;
                    bd.scorraddress = List.scorraddress;
                    bd.spermanentaddress = List.spermanentaddress;
                    bd.scity = List.scity;
                    bd.sstate = List.sstate;
                    bd.spincode = List.spincode;
                    bd.snationality = List.snationality;
                    bd.squalification = List.squalification;
                    bd.smobileno = List.smobileno;
                    bd.salternatemobileno = List.salternatemobileno;
                    bd.semailid = List.semailid;
                    bd.sdob = List.sdob;
                    bd.spanno = List.spanno;
                    bd.saadharno = List.saadharno;
                    bd.smaritialstatus = List.smaritialstatus;
                    bd.sanniversarydate = List.sanniversarydate;
                    bd.soccupation = List.soccupation;
                    bd.spassport = List.spassport;
                    bd.sresidentialstatus = List.sresidentialstatus;
                    bd.sphoto = List.sphoto;
                    bd.saadharphoto = List.saadharphoto;
                    bd.spanphoto = List.spanphoto;
                    bd.category = List.category;
                    bd.pcity = List.pcity;
                    bd.pstate = List.pstate;
                    bd.ppincode = List.ppincode;
                    
                    var csr = gidref();

                    int year = DateTime.Now.Year, syear = year + 1;
                    string refyear = year.ToString().Substring(2, 2) + "-" + syear.ToString().Substring(2, 2);
                    string refno = "ODH HOMES/" + refyear + "/" + csr;
                    //                                
                    bd.refno = refno;

                    int propertyid = 0, count = 0; string loanid = ""; Int64 om = 0;
                    if (bd.mobileno != null && Int64.TryParse(bd.mobileno, out om))
                    {
                        propertyid = Convert.ToInt32(bd.mobileno.Substring(bd.mobileno.Length - 4));
                        count = db.appltabs.Count(d => d.propertyid == propertyid);
                        while (count > 0)
                        {
                            propertyid = Convert.ToInt32(gid().Substring(0, 4));
                            count = db.appltabs.Count(d => d.propertyid == propertyid);
                        }
                        if (bd.paymenttype == "EMI")
                        {
                            loanid = bd.mobileno + "0";
                            count = db.appltabs.Count(d => d.loanid == loanid);
                            while (count > 0)
                            {
                                loanid = gid() + "A";
                                count = db.appltabs.Count(d => d.propertyid == propertyid);
                            }
                        }
                    }
                    else
                    {
                        propertyid = Convert.ToInt32(bd.mobileno.Substring(bd.mobileno.Length - 4));
                        count = db.appltabs.Count(d => d.propertyid == propertyid);
                        while (count > 0)
                        {
                            propertyid = Convert.ToInt32(gid().Substring(0, 4));
                            count = db.appltabs.Count(d => d.propertyid == propertyid);
                        }
                        if (bd.paymenttype == "EMI")
                        {
                            loanid = loanid = gid() + "A";
                            count = db.appltabs.Count(d => d.loanid == loanid);
                            while (count > 0)
                            {
                                loanid = gid() + "A";
                                count = db.appltabs.Count(d => d.propertyid == propertyid);
                            }
                        }
                    }
                    bd.propertyid = propertyid;
                    bd.loanid = loanid;
                    db.appltabs.Add(bd);
                    db.SaveChanges();

                    RevivalTab rt = new RevivalTab();
                    rt.newbondid = newbondid;
                    rt.status = 1;
                    db.RevivalTabs.Add(rt);
                    db.SaveChanges();

                    NewLogin nl = new NewLogin();
                    nl.UserName = newbondid;
                    nl.Password = List.mobileno;
                    nl.Mobile = List.mobileno;
                    nl.type = "Customer";
                    nl.status = 1;
                    nl.loginstatus = 0;
                    db.NewLogins.Add(nl);
                    db.SaveChanges();

                    ViewData["newbondid"] = newbondid;
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "InsertAppTab";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@introducerid", adr.AgencyCode);
                    cmd.Parameters.AddWithValue("@plancode", List.plancode);
                    cmd.Parameters.AddWithValue("@planname", pt.shortcutname);
                    cmd.Parameters.AddWithValue("@payment", List.payment);
                    cmd.Parameters.AddWithValue("@bondid", bondid);
                    cmd.Parameters.AddWithValue("@mode", List.mode);
                    cmd.Parameters.AddWithValue("@formdate", List.formdate);
                    cmd.Parameters.AddWithValue("@pdate", List.pdate);
                    cmd.Parameters.AddWithValue("@term", List.term);
                    cmd.Parameters.AddWithValue("@opid", List.opid);

                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                        if (List.PYN == "y" || List.PYN == "Y")
                        {
                            MyClass.Sendmsg(bd.mobileno, "Dear " + List.name + ", Thank you for purchasing a plot in " + pt.Planname + ". Your Plot No. " + List.plotno + "," + List.block + " ," + List.phase + " at " + pt.Planname + " is Allotted Successfully. Regards- " + cr.CompanyName);

                        }
                        else
                        {
                            MyClass.Sendmsg(bd.mobileno, "Dear " + bd.name + ", Thank you for purchasing a plot in " + pt.Planname + ". Regards- " + cr.CompanyName);

                        }
                        MyClass.Sendmsg(bd.mobileno, "Dear " + bd.name + ", login on " + cr.HeadOffice + " with your user ID as " + nl.UserName + " and password is " + nl.Password + ". Regards- " + cr.CompanyName);
                        Response.Write("<script>alert('" + mr.custname + " created Successfully....')</script>");
                        ViewBag.msg = mr.custname + " created Successfully....";
                        NewBondid = nnewbondid;

                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }
                    tempappltab ob = db.tempappltabs.Single(i => i.newbondid == nnewbondid);
                    db.tempappltabs.Remove(ob);
                    db.SaveChanges();
                    return RedirectToAction("BondApproval");
                }
                if (nnewbondid != null && printstatus == 2)
                {
                    tempappltab ob = db.tempappltabs.Single(i => i.newbondid == nnewbondid);
                    db.tempappltabs.Remove(ob);
                    db.SaveChanges();
                    var cr = db.CompanyInfos.Single(d => d.Id == 1);
                    MyClass.Sendmsg(ob.mobileno, "Dear " + ob.name + "Your Plot Agreement of Rs. " + ob.bookingamount + " vide "+ob.paymethod +" has dishonoured. Please contact " + cr.CompanyName + ".");
         

                    return RedirectToAction("BondApproval");
                }

                    #endregion
                return View(vlist);
            }
        }

        [HttpGet]
        public ActionResult ApproveRenewal(string nnewbondid, int status = 0, int payno = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<InstallmentList> dplist = new List<InstallmentList>();
                if (status == 0)
                {
                    int b = 0;
                    double penality = 0;
                    var Inslist = (from a in db.TempInstallmenttabs where a.status == 1 select new { a.newbondid }).Distinct();
                    Double payamount = 1;
                    foreach (var i in Inslist.ToList())
                    {
                        var rlist = (from p in db.TempInstallmenttabs where p.newbondid == i.newbondid && p.status == 1 select new { p.paymentno }).Distinct();
                        foreach (var r in rlist.ToList())
                        {
                            var ll = (from p in db.TempInstallmenttabs where p.newbondid == i.newbondid && p.paymentno == r.paymentno && p.status == 1 select p.installmentno).Max();
                            var dd = db.TempInstallmenttabs.Single(s => s.newbondid == i.newbondid && s.paymentno == r.paymentno && s.installmentno == ll && s.status == 1);
                            var insta = db.Installmenttabs.FirstOrDefault(s => s.newbondid == i.newbondid && s.installmentno == ll);
                            penality = insta == null ? 0 : insta.Penality;
                            payamount = (from u in db.TempInstallmenttabs where u.newbondid == i.newbondid && u.paymentno == r.paymentno && u.installmentno == ll && u.status == 1 select u.payamount).DefaultIfEmpty(0).Sum();
                            dplist.Add(new InstallmentList { id2 = "m" + b, penality = penality, paymentdate = Convert.ToDateTime(dd.paymentdate), IIDD = "R" + b, Id = b, newbondid = i.newbondid, paymentno = r.paymentno, payamount = payamount, latefine = dd.latefine, reliefrs = dd.reliefrs, chequeno = dd.chequeno, bank = dd.bank, Chequedate = Convert.ToDateTime(dd.Chequedate), Chequeamount = dd.ChequeAmount, IFSC = dd.IFSCCode, Bbranch = dd.Bbranch, ACholdername = dd.ACholdername, paymethod = dd.paymethod });
                        }
                        b = b + 1;
                    }
                }
                if (status == 1)
                {
                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }
                    var cr = db.appltabs.Single(c => c.newbondid == nnewbondid);
                    var min = (from l in db.TempInstallmenttabs where l.newbondid == nnewbondid && l.paymentno == payno select l.installmentno).Min();
                    var max = (from l in db.TempInstallmenttabs where l.newbondid == nnewbondid && l.paymentno == payno select l.installmentno).Max();
                    var list = db.TempInstallmenttabs.Single(n => n.newbondid == nnewbondid && n.installmentno == max && n.paymentno == payno);
                    var cm = db.CompanyInfos.Single(d => d.Id == 1);
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "insertrcptinfo";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@newbondid", cr.newbondid);
                    cmd.Parameters.AddWithValue("@planname", cr.planname);
                    cmd.Parameters.AddWithValue("@term", cr.term);
                    cmd.Parameters.AddWithValue("@mode", cr.mode);
                    cmd.Parameters.AddWithValue("@latefine", list.latefine);
                    cmd.Parameters.AddWithValue("@from", min);
                    cmd.Parameters.AddWithValue("@to", max);
                    cmd.Parameters.AddWithValue("@paymethod", list.paymethod);
                    cmd.Parameters.AddWithValue("@pdate", list.paymentdate);
                    cmd.Parameters.AddWithValue("@checkorddno", list.chekddno);
                    cmd.Parameters.AddWithValue("@drawno", list.drawno);
                    cmd.Parameters.AddWithValue("@relief", list.reliefrs);
                    cmd.Parameters.AddWithValue("@payamount", (list.payamount - (list.latefine - list.reliefrs)));
                    cmd.Parameters.AddWithValue("@amountinword", list.amountinword);
                    cmd.Parameters.AddWithValue("@opid", list.opid);
                    cmd.Parameters.AddWithValue("@macaddress", localIP);
                    cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                    cmd.Parameters.AddWithValue("@transactiontype", list.transactiontype);

                    SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                    p.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(p);

                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                        paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                        var tlist = (from n in db.TempInstallmenttabs where n.newbondid == nnewbondid && n.paymentno == payno select n).ToList();
                        foreach (var comm in tlist)
                        {
                            db.TempInstallmenttabs.Remove(comm);
                        }
                        db.SaveChanges();
                        var tins = db.Installmenttabs.Single(a => a.newbondid == nnewbondid && a.installmentno == max);
                        //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ",Your renewal of Rs " + list.payamount + " is received for plan " + cr.planname + " for Bond: " + nnewbondid + " on date: " + list.paymentdate);
                        //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your EMI of Rs." + list.payamount + " for the month " + tins.prevexpirydate.ToString("MMMM") + " for loan a/c no. " + cr.loanid + " vide " + list.paymethod + "cheque no " + list.chequeno + " has been deposited successfully. Regards- " + cm.CompanyName);
                        string Paymethod = "", chequeno = "";
                        if (list.paymethod == "banktransaction")
                        {
                            Paymethod = "Bank Transaction" + "/" + list.transactiontype;
                            chequeno = "Transaction Id " + list.chequeno;
                        }
                        else if (list.paymethod != "Cash")
                        {
                            chequeno = list.paymethod + " No " + list.chequeno;
                            Paymethod = list.paymethod;
                        }
                        else
                        {
                            Paymethod = list.paymethod;
                        }
                        //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your EMI of Rs." + list.payamount + " for the month " + Convert.ToDateTime(list.paymentdate).ToString("MMMM") + " for loan a/c no. " + cr.loanid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards- " + cg.CompanyName);
                        MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your PAYMENT of Rs." + list.payamount + ",OF YOUR ID NO.-" + cr.newbondid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards-" + cg.CompanyName);
                        ViewBag.msg = "Renewel Done Successfully....";

                        return RedirectToAction("ApproveRenewal");
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }
                    return RedirectToAction("ApproveRenewal");
                }
                return View(dplist);

            }
        }
        [HttpPost]
        public ActionResult ApproveRenewal(string reason, string bond, int paymentno = 0, int penality = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var cm = db.CompanyInfos.Single(d => d.Id == 1);
                var ap = db.appltabs.Single(a => a.newbondid == bond);
                var Amount = (from n in db.TempInstallmenttabs where n.newbondid == bond && n.paymentno == paymentno && n.status == 1 select n.payamount).Sum();
                var insta = (from n in db.TempInstallmenttabs where n.newbondid == bond && n.paymentno == paymentno && n.status == 1 select n.installmentno).Max();
                var tlist = (from n in db.TempInstallmenttabs where n.newbondid == bond && n.paymentno == paymentno && n.status == 1 select n).ToList();
                foreach (var comm in tlist)
                {
                    comm.status = 2;
                    comm.Reason = reason;
                    comm.Penality = penality;
                    //db.Entry(comm).State = EntityState.Modified;
                    db.Entry<TempInstallmenttab>(comm).State = System.Data.Entity.EntityState.Modified;
                   
                    var tins = db.Installmenttabs.FirstOrDefault(a => a.newbondid == comm.newbondid && a.installmentno == comm.installmentno);
                    DateTime prevexpirydate = tins == null ? Convert.ToDateTime(comm.paymentdate) : Convert.ToDateTime(tins.prevexpirydate);
                    MyClass.Sendmsg(ap.mobileno, "Dear " + ap.name + ", Your Payment of Rs. " + Amount + " for the month " + prevexpirydate.ToString("MMMMMMMMMM") + "for loan a/c no. " + ap.loanid + " vide ECS has dishonoured. Please contact " + cm.CompanyName + " at earliest.");

                    //Installmenttab bcd = db.Installmenttabs.Single(c => c.newbondid == comm.newbondid && c.installmentno==comm.installmentno);
                    //bcd.Penality = bcd.Penality+penality;
                    //db.Entry(bcd).State = EntityState.Modified;

                }
                db.SaveChanges();
       return RedirectToAction("ApproveRenewal");
            }
        }

        [HttpGet]
        public ActionResult ChequeDuplicateReceipt()
        {
            List<DupliReceipt> dplist = new List<DupliReceipt>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }

        [HttpPost]
        public ActionResult ChequeDuplicateReceipt(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {


                var ta = db.tempappltabs.Single(t => t.newbondid == newbondid);
                if (ta.paymethod == "Cheque")
                {
                    List<tempcheque> bond = new List<tempcheque>();
                    bond.Add(new tempcheque { newbondid = ta.newbondid, name = ta.name, nolandunit = ta.nolandunit, opid = ta.opid, bookingamount = ta.bookingamount, bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Branch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = ta.Chequedate, Chequeimage = ta.Chequeimage });

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MasterAckReceipt.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");


                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                    return View();
                }
                else
                {
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "TempBond";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;
                    cmd.Parameters.AddWithValue("@newbondid", newbondid);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }

                    List<Bond_report> bond = new List<Bond_report>();
                    bond = db.Bond_reports.ToList();
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "report.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");



                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                    return View();
                }
            }
        }

        [HttpGet]
        public ActionResult ChequeDuplicateRenewalReceipt()
        {
            List<DupliReceipt> dplist = new List<DupliReceipt>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }

        [HttpPost]
        public ActionResult ChequeDuplicateRenewalReceipt(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {



                var count = db.TempInstallmenttabs.Where(t => t.newbondid == newbondid && t.status == 1).Count();

                if (count > 0)
                {
                    var ap = db.appltabs.Single(t => t.newbondid == newbondid);
                    var tp = db.TempInstallmenttabs.Single(t => t.newbondid == newbondid && t.status == 1);
                    List<tempcheque> bond = new List<tempcheque>();
                    var max = (from t in db.TempInstallmenttabs where t.newbondid == newbondid && t.status == 1 select t.installmentno).Max();
                    var ta = db.TempInstallmenttabs.Single(t => t.newbondid == newbondid && t.status == 1 && t.installmentno == max);
                    var amount = (from t in db.TempInstallmenttabs where t.newbondid == newbondid && t.status == 1 select t.payamount).Sum();
                    var list = db.appltabs.Single(a => a.newbondid == newbondid);
                    bond.Add(new tempcheque { newbondid = ta.newbondid, name = list.name, nolandunit = list.nolandunit, opid = ta.opid, bookingamount = (amount + (ta.latefine - ta.reliefrs)), bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Bbranch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = Convert.ToDateTime(ta.Chequedate), Chequeimage = ta.Chequeimage });

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MasterRenewAckReceipt.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");


                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                    return View();
                }
                else
                {
                    Response.Write("<script>alert('No Pending Installments Of this Customer')</script>");
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult PromotionList()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<promotiondetail> plist = new List<promotiondetail>();
                return View(plist);
            }
        }
        [HttpPost]
        public ActionResult PromotionList(DateTime sdate, DateTime edate)
        {
            List<promotiondetail> plist = new List<promotiondetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {
                    var com = db.CompanyInfos.Single(s => s.Id == 1);
                    //DateTime ssdate = Convert.ToDateTime(sdate);
                    //DateTime eedate = Convert.ToDateTime(edate);
                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("promotion", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandTimeout = 100000;
                    cmd.Parameters.AddWithValue("@sdate", sdate);
                    cmd.Parameters.AddWithValue("@edate", edate);
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {

                        var rs = new promotiondetail();
                        rs.newagentid = sdr["newagentid"].ToString();
                        rs.name = sdr["name"].ToString();
                        rs.rank = Convert.ToInt32(sdr["rank"]);
                        rs.selfjoining = Convert.ToInt32(sdr["selfjoining"]);
                        rs.business = Convert.ToDouble(sdr["business"]);
                        rs.joining = Convert.ToDouble(sdr["joining"]);
                        rs.target = Convert.ToDouble(sdr["target"]);
                        rs.status = sdr["status"].ToString();
                        rs.advjoining = Convert.ToInt32(sdr["advjoining"]);
                        rs.sdate = sdate;
                        rs.edate = edate;
                        rs.companyname = com.CompanyName;
                        rs.domainname = com.HeadOffice;
                        rs.emailid = com.Emailid;
                        rs.address = com.Address;
                        rs.contact = com.Contact;
                        plist.Add(rs);
                    }


                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PromotionReport.rpt"));
                    rd.SetDataSource(plist);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();
                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    con.Close();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult RewardList()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<AgentDetail> alist = new List<AgentDetail>();
                return View(alist);
            }
        }
        [HttpPost]
        public ActionResult RewardList(DateTime sdate, DateTime edate, int RankCode)
        {
            List<AgentDetail> alist = new List<AgentDetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                TempData["sdate"] = sdate;
                TempData["edate"] = edate;
                alist = db.AgentDetails.Where(u => u.Status == 1 && u.Doj <= edate && u.RankCode == RankCode).ToList();
                return View(alist);
            }
        }

        [HttpGet]
        public ActionResult RejectedCheque()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<TempInstallmenttab> tlist = (from l in db.TempInstallmenttabs where l.status == 2 select l).ToList();
                return View(tlist);
            }
        }

        [HttpGet]
        public ActionResult DatewisepaidSVoucherList()
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View(sclist);
            }
        }
        [HttpPost]
        public ActionResult DatewisepaidSVoucherList(DateTime sdate, DateTime edate)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                DateTime paydate = DateTime.Now.Date;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var datelist = (from sc in db.spotcommission_tabs where sc.date >= sdate && sc.date <= edate && sc.status == 1 orderby sc.newagentid select sc).ToList();
                foreach (var d in datelist.ToList())
                {
                    Double bsum = (from o in db.spotcommission_tabs where o.newbondid == d.newbondid && o.status == 1 select o.amount).DefaultIfEmpty(0).Sum();
                    Double csum = (from o in db.spotcommission_tabs where o.newbondid == d.newbondid && o.status == 1 select o.commission).DefaultIfEmpty(0).Sum();
                    sclist.Add(new SpotCommList { newagentid = d.newagentid, agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bsum, Commission = csum, date = paydate, sdate = sdate, edate = edate, companyname = cr.CompanyName, branchname = User.Identity.Name });
                }
                stdate = sdate;
                enddate = edate;
                return View(sclist);
            }
        }

        public ActionResult PrintDatewisePaidSVoucherList()
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                DateTime paydate = DateTime.Now.Date;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var datelist = (from sc in db.spotcommission_tabs where sc.date >= stdate && sc.date <= enddate && sc.status == 1 orderby sc.newagentid select sc).ToList();
                foreach (var d in datelist.ToList())
                {
                    Double bsum = (from o in db.spotcommission_tabs where o.newbondid == d.newbondid && o.status == 1 select o.amount).DefaultIfEmpty(0).Sum();
                    Double csum = (from o in db.spotcommission_tabs where o.newbondid == d.newbondid && o.status == 1 select o.commission).DefaultIfEmpty(0).Sum();
                    sclist.Add(new SpotCommList { newagentid = d.newagentid, agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bsum, Commission = csum, date = paydate, sdate = stdate, edate = enddate, companyname = cr.CompanyName, branchname = User.Identity.Name });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DatewisePaidSVoucherList.rpt"));
                rd.SetDataSource(sclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult Plotholding(string project, string block, int plotno = 0,int phaseid=0, int status = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<plotlist> plist = new List<plotlist>();
                if (project != null && status == 1)
                {
                    var bl = db.BlockTabs.Single(a => a.Planname == project && a.phaseid==phaseid && a.block == block);
                    //var bl = db.BlockTabs.Single(a =>a.phaseid==phaseid && a.block == block);
                    HoldingPlot hp = new HoldingPlot();
                    hp.holddate = DateTime.Now.Date;
                    hp.holdby = User.Identity.Name;
                    hp.holdblock = bl.Id;
                    hp.holdplotno = plotno;
                    hp.holdprojectid = bl.Plancode;
                    hp.holdphaseid = bl.phaseid;
                    hp.holdstatus = 1;
                    db.HoldingPlots.Add(hp);
                    db.SaveChanges();
                    return RedirectToAction("Plotholding");
                }
                else if (project != null && status == 2)
                {
                    var blist = db.BlockTabs.Single(a => a.Planname == project && a.phaseid == phaseid && a.block == block);
                    HoldingPlot hh = db.HoldingPlots.Single(a => a.holdprojectid == blist.Plancode && a.holdphaseid==blist.phaseid && a.holdblock == blist.Id && a.holdplotno == plotno);
                    db.HoldingPlots.Remove(hh);
                    db.SaveChanges();
                    return RedirectToAction("Plotholding");
                }
                return View(plist);
            }
        }
        [HttpPost]
        public ActionResult Plotholding(string block, int projectid = 0, int phaseid=0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<plotlist> plist = new List<plotlist>();
                if (block == "NA" || projectid == 0 || phaseid==0)
                {
                    Response.Write("<script>alert('Please select block and project')</script>");
                }
                else
                {
                    var br = db.BlockTabs.Single(p => p.block == block && p.Plancode == projectid && p.phaseid == phaseid);
                    int min = br.min;
                    int max = br.max;

                    var blockid = db.BlockTabs.Single(a => a.Plancode == projectid && a.phaseid == phaseid && a.block == block);
                    var chelist = (from sp in db.tempappltabs where sp.PYN != "N" && sp.block == block && sp.projectid == projectid && sp.phaseid == phaseid && sp.status == 1 select new { sp.plotno }).Distinct().ToList();
                    var splist = (from sp in db.appltabs where sp.block == block && sp.projectid == projectid && sp.phaseid == phaseid && sp.status == 1 select new { sp.plotno }).Distinct().ToList();
                    var holdlist = (from sp in db.HoldingPlots where sp.holdblock == blockid.Id && sp.holdprojectid == projectid && sp.holdphaseid == phaseid && sp.holdstatus == 1 select new { sp.holdplotno }).Distinct().ToList();
                    var pr = db.Plans.Single(a => a.Plancode == projectid);
                    
                    while (min <= max)
                    {
                        plist.Add(new plotlist { plotno = min, block = block, project = pr.Planname, phaseid = phaseid });
                        min = min + 1;
                    }
                    foreach (var p in splist)
                    {
                        plist.Remove(plist.Single(rr => rr.plotno == p.plotno));
                    }

                    //foreach (var h in holdlist)
                    //{
                    //    plist.Remove(plist.Single(rr => rr.plotno == h.holdplotno));
                    //}
                  
                    foreach (var c in chelist)
                    {
                        plist.Remove(plist.Single(rr => rr.plotno == c.plotno));
                    }
                }
                return View(plist);
            }
        }

        [HttpGet]
        public ActionResult Addbank(int Id = 0)
        {

            List<BankDetail_Tab> blist = new List<BankDetail_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "MSP");
            }
            else
            {
                if (Id != 0)
                {
                    BankDetail_Tab cr = db.BankDetail_Tabs.Single(c => c.Id == Id);
                    db.BankDetail_Tabs.Remove(cr);
                    db.SaveChanges();
                }
                blist = db.BankDetail_Tabs.ToList();
                return View(blist.OrderBy(b => b.bankname));
            }
        }
        [HttpPost]
        public ActionResult Addbank(BankDetail_Tab model, DateTime acopendate, int status = 0)
        {
            List<BankDetail_Tab> blist = new List<BankDetail_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "MSP");
            }
            else
            {

                var row = (from ob in db.BankDetail_Tabs where ob.accountno == model.accountno select ob).ToList();
                if (status == 1)
                {
                    if (row.Count > 0)
                    {
                        ViewBag.msg = "This A/c already exists";
                    }
                    else
                    {
                        //DateTime date = DateTime.ParseExact(acopendate, "dd/MM/yyyy", new CultureInfo("en-CA"));
                        BankDetail_Tab br = new BankDetail_Tab();
                        br.accountype = model.accountype;
                        br.companyname = model.companyname;
                        br.accountno = model.accountno;
                        br.branchname = model.branchname;
                        br.bankname = model.bankname;
                        br.ifsccode = model.ifsccode;
                        br.branchaddress = model.branchaddress;
                        br.acopendate = model.acopendate;
                        br.Authorisedsignatory1 = model.Authorisedsignatory1;
                        br.Authorisedsignatory2 = model.Authorisedsignatory2;
                        br.contact1 = model.contact1;
                        br.contact2 = model.contact2;
                        br.panno1 = model.panno1;
                        br.panno2 = model.panno2;
                        br.acopendate = acopendate;
                        br.opid = User.Identity.Name;
                        db.BankDetail_Tabs.Add(br);
                        db.SaveChanges();
                        ViewBag.msg = "Bank Info Added Successfully....";
                    }
                }
                else if (status == 2)
                {
                    var br = db.BankDetail_Tabs.Single(b => b.Id == model.Id);
                    br.accountype = model.accountype;
                    br.companyname = model.companyname;
                    br.accountno = model.accountno;
                    br.branchname = model.branchname;
                    br.bankname = model.bankname;
                    br.ifsccode = model.ifsccode;
                    br.branchaddress = model.branchaddress;
                    br.Authorisedsignatory1 = model.Authorisedsignatory1;
                    br.Authorisedsignatory2 = model.Authorisedsignatory2;
                    br.contact1 = model.contact1;
                    br.contact2 = model.contact2;
                    br.panno1 = model.panno1;
                    br.panno2 = model.panno2;
                    br.acopendate = br.acopendate;
                    db.SaveChanges();
                }

                blist = db.BankDetail_Tabs.ToList();
                return View(blist.OrderBy(b => b.bankname));
            }

        }

        #endregion

        #region with commission
        [HttpGet]
        public ActionResult AgentBankDetail()
        {
            if (User.Identity.IsAuthenticated)
            {
                List<VoucherList> vlist = new List<VoucherList>();
                return View(vlist);
            }
            return RedirectToAction("Logout");
        }
        [HttpPost]
        public ActionResult AgentBankDetail(int year = 0, int month = 0)
        {
            if (User.Identity.IsAuthenticated)
            {
                var yr = (year).ToString();
                var count = (from a in db.ReleaseTabs where a.year == yr && a.month == month select a).Count();

                var com = db.CompanyInfos.Single(a => a.Id == 1);
                List<VoucherList> vlist = new List<VoucherList>();
                if (count > 0)
                {
                    SqlCommand cmd = new SqlCommand();
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    cmd.Connection = con;
                    SqlDataReader sdr;
                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("brokercommissionReport", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Mon", month);
                    cmd.Parameters.AddWithValue("@Year", year);
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {
                        var rs = new VoucherList();
                        rs.newagentid = sdr["newagentid"].ToString();
                        rs.name = sdr["name"].ToString();
                        rs.BankAccountno = sdr["bankaccountno"].ToString();
                        rs.IFCCode = sdr["ifccode"].ToString();
                        rs.OtherMobile = Convert.ToInt64(sdr["othermobile"]);
                        rs.Panno = sdr["panno"].ToString();
                        rs.GrossAmount = Convert.ToDouble(sdr["Gcommission"]);
                        rs.amount = Convert.ToDouble(sdr["netamount"]);
                        rs.TDSAmount = Convert.ToDouble(sdr["TDSAMT"]);
                        rs.CompanyName = com.CompanyName;
                        rs.CompanyAddress = com.Address;
                        vlist.Add(rs);
                    }
                }
                else
                {
                    Response.Write("<script>alert('Voucher is not Release of this month')</script>");
                }
                Yr = year;
                Mon = month;
                return View(vlist);
            }
            else
            {
                return RedirectToAction("Logout");
            }

        }

        public ActionResult AgentBankDetail_excel()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {

                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {
                        MonthName mn = new MonthName();
                        var monthname = mn.numbertomonthname(Mon);
                        var com = db.CompanyInfos.Single(a => a.Id == 1);
                        List<VoucherList> vlist = new List<VoucherList>();
                        SqlCommand cmd = new SqlCommand();
                        con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                        cmd.Connection = con;
                        SqlDataReader sdr;
                        SqlDataAdapter da = new SqlDataAdapter();
                        cmd = new SqlCommand("brokercommissionReport", con);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Mon", Mon);
                        cmd.Parameters.AddWithValue("@Year", Yr);
                        con.Open();
                        sdr = cmd.ExecuteReader();
                        while (sdr.Read())
                        {
                            var rs = new VoucherList();
                            rs.newagentid = sdr["newagentid"].ToString();
                            rs.name = sdr["name"].ToString();
                            rs.BankAccountno = sdr["bankaccountno"].ToString();
                            rs.IFCCode = sdr["ifccode"].ToString();
                            rs.OtherMobile = Convert.ToInt64(sdr["othermobile"]);
                            rs.Panno = sdr["panno"].ToString();
                            rs.GrossAmount = Convert.ToDouble(sdr["Gcommission"]);
                            rs.amount = Convert.ToDouble(sdr["netamount"]);
                            rs.TDSAmount = Convert.ToDouble(sdr["TDSAMT"]);
                            rs.CompanyName = com.CompanyName;
                            rs.CompanyAddress = com.Address;
                            vlist.Add(rs);
                        }


                        WebGrid grid = new WebGrid(null, rowsPerPage: vlist.Count());
                        grid.Bind(vlist, autoSortAndPage: true, rowCount: vlist.Count());
                        string griddata = grid.GetHtml(
                        columns: grid.Columns(
                        grid.Column("newagentid", "Agent Id"),
                        grid.Column("name", "Name"),
                        grid.Column("OtherMobile", "Mobile"),
                        grid.Column("Panno", "Pan No"),
                        grid.Column("BankAccountno", "Bank A/C No"),
                        grid.Column("IFCCode", "IFSC Code"),
                        grid.Column("business", "Bussiness"),
                        grid.Column("GrossAmount", "Gross Amount"),
                        grid.Column("TDSAmount", "TDS"),
                        grid.Column("amount", "Net Amount")
                        )).ToString();
                        Response.ClearContent();
                        Response.AddHeader("content-disposition", "attachment; filename=Bank_Report_" + monthname + "_" + Yr + ".xls");
                        Response.ContentType = "application/excel";
                        Response.Write(griddata);
                        Response.End();

                    }
                    else
                    {
                        return RedirectToAction("logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("logout", "Admin");
                }
            }
            return View();
        }

        public ActionResult AgentBankDetail_PDF()
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var com = db.CompanyInfos.Single(a => a.Id == 1);
                List<VoucherList> vlist = new List<VoucherList>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                SqlDataAdapter da = new SqlDataAdapter();
                cmd = new SqlCommand("brokercommissionReport", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Mon", Mon);
                cmd.Parameters.AddWithValue("@Year", Yr);
                con.Open();
                sdr = cmd.ExecuteReader();
                while (sdr.Read())
                {
                    var rs = new VoucherList();
                    rs.newagentid = sdr["newagentid"].ToString();
                    rs.name = sdr["name"].ToString();
                    rs.BankAccountno = sdr["bankaccountno"].ToString();
                    rs.IFCCode = sdr["ifccode"].ToString();
                    rs.OtherMobile = Convert.ToInt64(sdr["othermobile"]);
                    rs.Panno = sdr["panno"].ToString();
                    rs.GrossAmount = Convert.ToDouble(sdr["Gcommission"]);
                    rs.amount = Convert.ToDouble(sdr["netamount"]);
                    rs.TDSAmount = Convert.ToDouble(sdr["TDSAMT"]);
                    rs.CompanyName = com.CompanyName;
                    rs.CompanyAddress = com.Address;
                    vlist.Add(rs);
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AgentBankDetailReport.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }
        #endregion

        [HttpGet]
        public ActionResult ApproveDailyClosing(string opid, int id = 0)
        {
            if (User.Identity.IsAuthenticated)
            {
                List<DailyDepositTab> daily = new List<DailyDepositTab>();

                if (opid != null)
                {
                    DailyDepositTab dt = db.DailyDepositTabs.Single(a => a.opid == opid && a.Id == id && a.transfertype == "Bank");
                    dt.bankapp = 1;
                    dt.bankappdate = DateTime.Now.Date;
                    db.SaveChanges();
                    return RedirectToAction("ApproveDailyClosing");
                }
                return View(daily);
            }
            else
            {
                return RedirectToAction("Logout");
            }
        }
        [HttpPost]
        public ActionResult ApproveDailyClosing(DateTime sdate, DateTime edate)
        {
            if (User.Identity.IsAuthenticated)
            {
                List<DailyDepositTab> daily = (from a in db.DailyDepositTabs where a.date >= sdate && a.date <= edate select a).ToList();
                return View(daily);
            }
            else
            {
                return RedirectToAction("Logout");
            }
        }

        [HttpGet]
        public ActionResult AllotMentLetter()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }

            return View();
        }
        [HttpPost]
        public ActionResult AllotMentLetter(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<AllotmentLetter> dl = new List<AllotmentLetter>();
                var st = db.appltabs.Single(a => a.newbondid == newbondid);
                if (st.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block!')</script>");
                }
                else
                {
                   ReportDocument rd = new ReportDocument();
                   if (st.paymenttype == "EMI")
                    {
                        dl = db.Database.SqlQuery<AllotmentLetter>("select format (a.formdate,'dd/MM/yyyy') as bookingdate, a.newmemberid customerid,a.name customername,a.addr customeraddress,a.propertyid,a.refno,a.plotno propertyno,m.category,a.incomegroup,a.bookingamount,a.totalcon propertycost,a.planname projectname,a.phase,a.propertytype,a.nolandunit propertyarea,a.block prppertyblock,a.propertyaddress,a.propertypreference,a.plotdesp,a.northeast,a.northwest,a.southeast,a.southwest,i.installmentno,(case when i.installmentno <> 1 then format(i.prevexpirydate,'dd/MM/yyyy') else NULL end) as paymentdate,i.amount installmentamount,i.paymentno,a.northwest,a.northeast,a.southwest,a.southeast from appltab a right join Installmenttab i on a.newbondid=i.newbondid join Member_tab m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "' and i.installmentno>1").ToList();
                        if (dl.Count > 0)
                        {
                            int v = dl.Max(d => d.installmentno);
                            dl[0].installmentno = v;

                            var gender = db.Member_tabs.Single(aa => aa.NewMemberId == st.newmemberid).Gender;
                            dl[0].Gender = "Mr.";
                            dl[0].totalinstallment = dl.Count();
                            if (gender == "Female")
                            {
                                dl[0].Gender = "Mrs.";
                            }
                        }
                        rd.Load(Server.MapPath("/Reports/EMIAllotmentLetter.rpt"));
                    }
                   //else if (st.paymenttype == "FULL")
                   //{
                   //    dl = db.Database.SqlQuery<fullwellcome>("select a.newmemberid,a.newbondid,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.projectid,a.newintroducerid,a.addr,a.mobileno,a.bookingamount,a.payment from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                   //    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "EMIWelcomeLetter.rpt"));
                   //}
                   
                    rd.SetDataSource(dl);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();

                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }
            }

            return View();
        }
        [HttpGet]
        public ActionResult agreementmodeEMI()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult agreementmodeEMI(string customerid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var list = db.appltabs.Where(x => x.newbondid == customerid).ToList();
                return View(list);
            }
        }

        [HttpGet]
        public ActionResult agreementmodePART()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult agreementmodePART(string customerid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var list = db.appltabs.Where(x => x.newbondid == customerid).ToList();
                return View(list);
            }
        }
        [HttpGet]
        public ActionResult PartAllotMentLetter()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }

            return View();
        }
        [HttpPost]
        public ActionResult PartAllotMentLetter(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<AllotmentLetter> dl = new List<AllotmentLetter>();
                var st = db.appltabs.Single(a => a.newbondid == newbondid);
                if (st.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block!')</script>");
                }
                else
                {
                    ReportDocument rd = new ReportDocument();
                    if (st.paymenttype.ToUpper() == "Full".ToUpper())
                    {
                        //dl = db.Database.SqlQuery<fullwellcome>("select a.newmemberid,a.newbondid,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.projectid,a.newintroducerid,a.addr,a.mobileno,a.bookingamount,a.payment from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        dl = db.Database.SqlQuery<AllotmentLetter>("select a.newmemberid,a.newbondid,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.projectid,a.newintroducerid,a.addr,a.mobileno,a.bookingamount,a.payment,a.paymenttype,a.chequeno,a.bankname,a.propertyid,a.phaseid,a.block,a.propertytype,a.propertypreference,a.phase,a.propertyaddress,a.northeast,a.northwest,a.southeast,a.southwest,a.planname from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        rd.Load(Path.Combine(Server.MapPath("~/Reports"), "EMIAllotmentFullpayLetter.rpt"));


                        rd.SetDataSource(dl);
                        Response.Buffer = false;
                        Response.ClearContent();
                        Response.ClearHeaders();

                        try
                        {
                            Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            stream.Seek(0, SeekOrigin.Begin);
                            return new FileStreamResult(stream, "application/pdf");
                        }
                        catch (Exception ex)
                        {
                            Response.Write("<script>alert('" + ex.Message + "')</script>");
                        }
                        finally
                        {
                            rd.Close();
                            rd.Dispose();
                        }
                    }
                    else
                    {
                        Response.Write("<script>alert('Please Enter Full Payment Customerid!!! ')</script>");
                    }
                }
            }

            return View();
        }
        [HttpGet]
        public ActionResult DealSheetReportbyuserid(string Userid, string Recogniser)
        {
            if (Recogniser == "Print")
            {

                var l = db.DealSheets.Where(o => o.userid.ToUpper().Contains(Userid.ToUpper())).Select(o => new { o.userid, o.customername }).ToList();
                return Json(l, 0);
            }

            return View();
        }
        [HttpPost]
        public ActionResult DealSheetReportbyuserid(string Userid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<DealSheet> ta = new List<DealSheet>();
                ta = db.DealSheets.Where(d => d.userid == Userid).ToList();

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Dealsheetreportwo.rpt"));
                rd.SetDataSource(ta);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");


                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();
            }
        }
        [HttpGet]
        public JsonResult AutoCompletememberid(string term)
        {
            var list = (from r in db.Member_tabs where r.NewMemberId.ToLower().Contains(term.ToLower()) || r.MemberName.ToLower().Contains(term.ToLower()) select new { r.NewMemberId, r.MemberName }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult AgentWelcomeLetter(string AgentId, string Recogniser)
        {
            if (Recogniser == "Print")
            {
                var l = db.AgentDetails.Where(o => o.NewAgentId.ToUpper().Contains(AgentId.ToUpper())).Select(o => new { o.NewAgentId, o.name }).ToList();
                
                return Json(l, 0);
            }

            return View();
        }

        #region vishal
        public ActionResult PrintReport<T>(List<T> DataSource, string ReportName)
        {
            ReportDocument rd = new ReportDocument();
            Stream stream = null;
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), ReportName));
            rd.SetDataSource(DataSource);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return new FileStreamResult(stream, "application/pdf");
            }
            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {

                rd.Dispose();
                rd.Close();
            }

            return View();
        }
        #endregion
        
        [HttpPost]
        public ActionResult AgentWelcomeLetter(string AgentId)
        {
            List<AgentDetail> list = db.AgentDetails.Where(o => o.NewAgentId == AgentId).ToList();
            foreach (var i in list)
            {
                i.BloodGroup = i.refno; 
                if (i.Mobile != i.Mobileno)
                {
                    i.Mobileno = i.Mobile;
                }
            }
            return PrintReport<AgentDetail>(list, "AgentWelcomeLetter.rpt");

        }

        public bool IsLoggedIn()
        {

            try
            {
                if (User.Identity.IsAuthenticated)
                {
                    int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                    if (count == 1)
                    {
                        var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                        if (log.status == 1 && log.type == "Admin")
                        {
                            GetLogged.logId = log.UserName;
                            GetLogged.logType = log.type;
                            return true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;
        }

        #region DailyVisitorDetail -> Vishal

        [HttpGet]
        public ActionResult DailyVisitorDetail()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            { }

            return View();
        }

        //[HttpPost]
        //public ActionResult DailyVisitorDetail(DailyVisitor model)
        //{

        //    return View();
        //}

        [HttpGet]
        public ActionResult AgentVehicleRequest()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            { }

            return View();
        }
        [HttpPost]
        public ActionResult AgentVehicleRequest(string RequestToken, string Remark)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                var count = db.VehicleRequestDetails.Where(o => o.RequestToken == RequestToken).Count();
                if (count == 1)
                {
                    var a = db.VehicleRequestDetails.Single(o => o.RequestToken == RequestToken);
                    a.Status = 3;
                    a.Remark = Remark;
                    a.ApprovedDate = DateTime.Now.Date;
                    a.ApprovTime = DateTime.Now.ToShortTimeString();
                    //db.Entry(a).State = EntityState.Modified;
                    db.Entry<VehicleRequestDetail>(a).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                }
            }

            return View();
        }

        public ActionResult AgentVehicleRequestHistory()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            { }
            return View();
        }

        public JsonResult VehicleApproveCancel(string RequestToken, string Recogniser, int status)
        {
            if (Recogniser == "Approved")
            {
                var count = db.VehicleRequestDetails.Where(o => o.RequestToken == RequestToken).Count();
                if (count == 1)
                {
                    var a = db.VehicleRequestDetails.Single(o => o.RequestToken == RequestToken);
                    a.Status = 2;
                    a.ApprovedDate = DateTime.Now.Date;
                    a.ApprovTime = DateTime.Now.ToShortTimeString();
                    //db.Entry(a).State = EntityState.Modified;
                    db.Entry<VehicleRequestDetail>(a).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();

                }

                return Json(1, 0);
            }
            else if (status != null && Recogniser == "Active")
            {
                var a = db.DailyVisitors.Single(o => o.ReceptionistId == RequestToken);
                var b = db.NewLogins.Single(o => o.UserName == a.UserName);
                if (status == 0)
                {
                    status = 1;
                }
                else
                {
                    status = 1;
                }
                b.status = Convert.ToInt16(status);
                a.Status = status;
                //db.Entry(a).State = EntityState.Modified;
                db.Entry<DailyVisitor>(a).State = System.Data.Entity.EntityState.Modified;

                //db.Entry(b).State = EntityState.Modified;
                db.Entry<NewLogin>(b).State = System.Data.Entity.EntityState.Modified;

                db.SaveChanges();
                return Json(status, 0);

            }
            else if (Recogniser == "Message" && status != null)
            {

                var a = db.DailyVisitors.Single(o => o.ReceptionistId == RequestToken);
                a.Password = Guid.NewGuid().ToString().Substring(0, 5).ToUpper() + status;
                //db.Entry(a).State = EntityState.Modified;
                db.Entry<DailyVisitor>(a).State = System.Data.Entity.EntityState.Modified;
                int k = db.SaveChanges();
                var b = db.NewLogins.FirstOrDefault(o => o.UserName == a.UserName);
                b.Password = a.Password;
                //db.Entry(b).State = EntityState.Modified;
                db.Entry<NewLogin>(b).State = System.Data.Entity.EntityState.Modified;
                var l = db.SaveChanges();
                if (k == l)
                {
                    MyClass.Sendmsg(a.MobileNo, "Dear " + a.ReceptionistName + ", Your new UserId is: " + a.UserName + " and Password is: " + a.Password + " created on dated:" + DateTime.Now.ToString("dd/MM/yyyy") + " by Admin , Thank You!");
                }
                return Json(1, 0);
            }
            //else if (Recogniser == "activate")
            //{
            //    var a = db.DailyVisitors.Single(o => o.ReceptionistId == RequestToken);
            //    a.Status = "1";
            //    db.Entry(a).State = EntityState.Modified;
            //    db.SaveChanges();
            //    return Json(1, 0);
            //}
            else if (Recogniser == "getDetail")
            {
                return Json(JsonConvert.SerializeObject(db.DailyVisitors.Single(o => o.ReceptionistId == RequestToken)), 0);
            }

            return Json(0, 0);
        }

        public ActionResult Vehicle()
        {

            return View();
        }
       
        [HttpGet]
        public ActionResult ReceptionistList()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            { }

            return View();
        }
        [HttpPost]
        public ActionResult ReceptionistList(DailyVisitor model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var a = db.DailyVisitors.Single(o => o.ReceptionistId == model.ReceptionistId);
                a.ReceptionistId = model.ReceptionistId;
                a.ReceptionistName = model.ReceptionistName;
                a.MobileNo = model.MobileNo;
                a.EmailId = model.EmailId;
                a.Address = model.Address;
                //db.Entry(a).State = EntityState.Modified;
                db.Entry<DailyVisitor>(a).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();

            }
            return View();
        }

        public ActionResult SendCredential()
        {


            return View();
        }

        #endregion

        [HttpGet]
        public ActionResult Achievers()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult Achievers(HttpPostedFileBase Slide1, string Slide2, string Slide3, string Slide4, string command, string Upload, int newid = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (Upload == "Upload")
                {
                    if (Slide1 != null)
                    {
                        Achevier dd = new Achevier();
                        string imgname = gid();
                        Slide1.SaveAs(HttpContext.Server.MapPath("../slider/" + imgname + ".jpg"));
                        dd.Slide1 = "~/slider/" + imgname + ".jpg";
                        dd.Slide2 = Slide2;
                        dd.Slide3 = Slide3;
                        dd.Slide4 = Slide4;
                        dd.Cdate = DateTime.Now;
                        dd.status = 1;
                        db.Acheviers.Add(dd);
                        db.SaveChanges();
                        TempData["sliderfirst"] = dd;
                        TempData["msg"] = "Achievers Upload Succesfully.";
                        return RedirectToAction("Achievers", "Admin");
                    }
                    else
                    {
                        TempData["msg"] = "Please Upload Specific Size Of  Image for Slider!!";
                    }
                }

                if (command == "Update")
                {
                    Achevier obj = new Achevier();
                    var achi = db.Acheviers.Single(x => x.Id == newid);
                    string imgname = gid();
                    if (Slide1 != null)
                    {
                        Slide1.SaveAs(HttpContext.Server.MapPath("../slider/" + imgname + ".jpg"));
                        achi.Slide1 = "~/slider/" + imgname + ".jpg";
                    }
                    else
                    {
                        achi.Slide1 = achi.Slide1;
                    }
                    achi.Slide2 = Slide2;
                    achi.Slide3 = Slide3;
                    achi.Slide4 = Slide4;

                    //db.Entry(achi).State = EntityState.Modified;
                    db.Entry<Achevier>(achi).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    TempData["msg"] = "Update succesfully!!";
                    return RedirectToAction("Achievers", "Admin");
                }
                return View();
            }
        }
       
        public ActionResult statuschange2(int s, int m)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var getstatus = db.Acheviers.Single(x => x.Id == s && x.status == m);
                if (m == 1)
                {
                    getstatus.status = 0;
                }
                else
                {
                    getstatus.status = 1;
                }
                //db.Entry(getstatus).State = EntityState.Modified;
                db.Entry<Achevier>(getstatus).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("Achievers", "Admin");
        }
       
        public JsonResult getachiverlist(int newid)
        {
            var list = db.Acheviers.Where(x => x.Id == newid).ToList();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public JsonResult medieagalleries(int newid)
        {
            var list = db.Mediagallerys.Where(x => x.Id == newid).ToList();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public JsonResult medieagalleries1(int newid)
        {
            var list = db.banner_tabs.Where(x => x.Id == newid).ToList();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult Media_Centre()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult Media_Centre(Mediagallery ns, HttpPostedFileBase Image, string command,string Heading,  int newid=0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (command == "Upload")
                {
                    var dd = new Mediagallery();
                    dd.Heading = ns.Heading;
                    dd.Summary = ns.Summary;
                    dd.status = 1;
                    dd.Cdate = DateTime.Now.Date;

                    if (Image != null) // News Image
                    {
                        string imgname = gid();
                        Image.SaveAs(HttpContext.Server.MapPath("../slider/" + imgname + ".jpg"));
                        dd.Image = "~/slider/" + imgname + ".jpg";
                    }
                    else
                    {
                        dd.Image = "~/Images/noImage.jpg";
                    }
                    db.Mediagallerys.Add(dd);
                    db.SaveChanges();
                    TempData["msg"] = "Added Gallery Successfully !";

                    return RedirectToAction("Media_Centre", "Admin");
                }
                if (command == "Update")
                {
                    Mediagallery obj = new Mediagallery();
                    var achi = db.Mediagallerys.Single(x => x.Id == newid);
                    string imgname = gid();
                    if (Image != null)
                    {
                        Image.SaveAs(HttpContext.Server.MapPath("../slider/" + imgname + ".jpg"));
                        achi.Image = "~/slider/" + imgname + ".jpg";
                    }
                    else
                    {
                        achi.Image = achi.Image;
                    }
                    achi.Heading = Heading;

                    //db.Entry(achi).State = EntityState.Modified;
                    db.Entry<Mediagallery>(achi).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    TempData["msg"] = "Update succesfully!!";
                    return RedirectToAction("Media_Centre", "Admin");
                }
                return View();
            }
        }
        public ActionResult mediastatus1(int opid = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("logout", "Home");
            }
            else
            {
                var getstatus = db.banner_tabs.Single(x => x.Id == opid && x.status == status);

                if (status == 1)
                {
                    getstatus.status = 0;
                }
                else
                {
                    getstatus.status = 1;
                }

                //db.Entry(getstatus).State = EntityState.Modified;
                db.Entry<banner_tab>(getstatus).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("banner_upload", "Admin");

        }

        public ActionResult mediastatus(int opid = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("logout", "Home");
            }
            else
            {
                var getstatus = db.Mediagallerys.Single(x => x.Id == opid && x.status == status);

                if (status == 1)
                {
                    getstatus.status = 0;
                }
                else
                {
                    getstatus.status = 1;
                }

                //db.Entry(getstatus).State = EntityState.Modified;
                db.Entry<Mediagallery>(getstatus).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("Media_Centre", "Admin");

        }

        public ActionResult media_deletee(int opid = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("logout", "Home");
            }
            else
            {
                var getstatus = db.banner_tabs.Single(x => x.Id == opid && x.status == status);
                getstatus.status = 3;
                //db.Entry(getstatus).State = EntityState.Modified;
                db.Entry<banner_tab>(getstatus).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("banner_upload", "Admin");

        }
        public ActionResult mediadelete(int opid = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("logout", "Home");
            }
            else
            {
                var getstatus = db.Mediagallerys.Single(x => x.Id == opid && x.status == status);
                getstatus.status = 3;
                //db.Entry(getstatus).State = EntityState.Modified;
                db.Entry<Mediagallery>(getstatus).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("Media_Centre", "Admin");

        }
       
        [HttpGet]
        public ActionResult banner_upload()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult banner_upload(banner_tab ns, HttpPostedFileBase Image, string command, string Heading, int newid = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (command == "Upload")
                {
                    var dd = new banner_tab();
                    dd.Heading = ns.Heading;
                    dd.Summary = ns.Summary;
                    dd.status = 1;
                    dd.Cdate = DateTime.Now.Date;

                    if (Image != null) // News Image
                    {
                        string imgname = gid();
                        Image.SaveAs(HttpContext.Server.MapPath("../slider/" + imgname + ".jpg"));
                        dd.Image = "~/slider/" + imgname + ".jpg";
                    }
                    else
                    {
                        dd.Image = "~/Images/noImage.jpg";
                    }
                    db.banner_tabs.Add(dd);
                    db.SaveChanges();
                    TempData["msg"] = "Added Banner Successfully !";

                    return RedirectToAction("banner_upload", "Admin");
                }
                if (command == "Update")
                {
                    banner_tab obj = new banner_tab();
                    var achi = db.banner_tabs.Single(x => x.Id == newid);
                    string imgname = gid();
                    if (Image != null)
                    {
                        Image.SaveAs(HttpContext.Server.MapPath("../slider/" + imgname + ".jpg"));
                        achi.Image = "~/slider/" + imgname + ".jpg";
                    }
                    else
                    {
                        achi.Image = achi.Image;
                    }


                    //db.Entry(achi).State = EntityState.Modified;
                    db.Entry<banner_tab>(achi).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    TempData["msg"] = "Update succesfully!!";
                    return RedirectToAction("banner_upload", "Admin");
                }
                return View();
            }
        }
        [HttpGet]
        public ActionResult upload_video()
        {
            return View();
        }
        [HttpPost]
        public ActionResult upload_video(upload_video_tab nt)
        {
            upload_video_tab at = new upload_video_tab();
            at.Cdate = DateTime.Now;
            at.file = nt.file;
            at.status = 1;
            db.upload_video_tabs.Add(at);
            db.SaveChanges();
            Response.Write("<script>alert('Successfully!!!!')</script>");
            return View();
        }
        [HttpGet]
        public ActionResult Enquary_list()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                return View();
            }
        }
        [HttpGet]
        public ActionResult EmiManualDate()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Admin")
                    {

                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Admin");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Admin");
                }
            }
        }
        [HttpPost]
        public ActionResult EmiManualDate(string opid, string date, string command, string type)
        {
            System.Threading.Thread.Sleep(3000);
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                if (opid == "Select")
                {
                    Response.Write("<script>alert('Please Select Id)</script>");
                }
                else
                {
                    if (command == "Activate")
                    {

                        if (type == "Select")
                        {
                            Response.Write("<script>alert('Please Select Date Type')</script>");
                        }
                        else
                        {
                            DateTime dt = DateTime.Parse(date, new CultureInfo("en-CA"));

                            string cdmm = dt.ToString("MM/dd/yyyy");
                            //DateTime newdate = DateTime.Parse(cdmm, new CultureInfo("en-CA"));
                            //DateTime newdate = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                            DateTime newdate = Convert.ToDateTime(cdmm);
                            if (opid == "All")
                            {
                                var count = db.EMISetDates.Where(c => c.branchcode == User.Identity.Name).Count();
                                if (count == 0)
                                {
                                    var dmm = db.Branchtabs.Where(c => c.status == 1).ToList();
                                    foreach (var item in dmm)
                                    {
                                        EMISetDate dd = new EMISetDate();
                                        if (type == "1")
                                        {
                                            dd.status = 1;
                                            ViewBag.msg = "Back Date Entry Activate .";
                                        }
                                        else if (type == "2")
                                        {
                                            dd.status = 2;
                                            ViewBag.msg = "Fix Date Entry Activate .";
                                        }

                                        dd.opid = item.BranchCode;
                                        dd.formdate = newdate;
                                        dd.branchcode = User.Identity.Name;
                                        db.EMISetDates.Add(dd);
                                        db.SaveChanges();
                                        ViewBag.msg = "EMI Date active successfully";
                                    }

                                }
                                else
                                {
                                    var dd = db.EMISetDates.Where(c => c.branchcode == User.Identity.Name).ToList();
                                    var dmm = db.Branchtabs.Where(c => c.status == 1).ToList();
                                    foreach (var itemm in dd)
                                    {
                                        itemm.formdate = newdate;
                                        itemm.branchcode = User.Identity.Name;
                                        if (type == "1")
                                        {
                                            itemm.status = 1;
                                            ViewBag.msg = "Back Date Entry Activate .";
                                        }
                                        else if (type == "2")
                                        {
                                            itemm.status = 2;
                                            ViewBag.msg = "Fix Date Entry Activate .";
                                        }
                                        db.SaveChanges();
                                        ViewBag.msg = "EMI Date active successfully";
                                    }

                                }
                            }
                            else
                            {

                                var count = db.EMISetDates.Where(c => c.branchcode == User.Identity.Name && c.opid == opid).Count();
                                if (count == 0)
                                {
                                    EMISetDate dd = new EMISetDate();
                                    if (type == "1")
                                    {
                                        dd.status = 1;
                                        ViewBag.msg = "Back Date Entry Activate .";
                                    }
                                    else if (type == "2")
                                    {
                                        dd.status = 2;
                                        ViewBag.msg = "Fix Date Entry Activate .";
                                    }

                                    dd.opid = opid;
                                    dd.formdate = newdate;
                                    dd.branchcode = User.Identity.Name;

                                    db.EMISetDates.Add(dd);
                                    db.SaveChanges();
                                    ViewBag.msg = "EMI Date active successfully";
                                }
                                else
                                {
                                    EMISetDate dd = db.EMISetDates.Single(c => c.opid == opid && c.branchcode == User.Identity.Name);
                                    dd.opid = opid;
                                    dd.formdate = newdate;
                                    dd.branchcode = User.Identity.Name;
                                    if (type == "1")
                                    {
                                        dd.status = 1;
                                        ViewBag.msg = "Back Date Entry Activate .";
                                    }
                                    else if (type == "2")
                                    {
                                        dd.status = 2;
                                        ViewBag.msg = "Fix Date Entry Activate .";
                                    }
                                    //db.Entry(dd).State = EntityState.Modified;
                                    db.Entry<EMISetDate>(dd).State = System.Data.Entity.EntityState.Modified;
                                    db.SaveChanges();
                                    ViewBag.msg = "EMI Date active successfully";
                                }
                            }
                        }
                    }
                    else if (command == "Deactivate")
                    {
                        if (opid == "All")
                        {
                            var count = db.EMISetDates.Where(c => c.branchcode == User.Identity.Name).Count();
                            if (count == 0)
                            {
                                var dmm = db.Branchtabs.Where(c => c.status == 1).ToList();
                                foreach (var item in dmm)
                                {
                                    EMISetDate dd = new EMISetDate();
                                    dd.opid = item.BranchCode;
                                    dd.formdate = DateTime.Now;
                                    dd.status = 0;
                                    dd.branchcode = User.Identity.Name;
                                    db.EMISetDates.Add(dd);
                                    db.SaveChanges();
                                    ViewBag.msg = "Back Date Entry Deactivate .";
                                }
                                ViewBag.msg = "EMI Date Entry Deactivate .";
                            }
                            else
                            {

                                var dd = db.EMISetDates.Where(c => c.branchcode == User.Identity.Name).ToList();
                                var dmm = db.Branchtabs.Where(c => c.status == 1).ToList();
                                foreach (var item in dd)
                                {


                                    item.formdate = DateTime.Now;
                                    item.branchcode = User.Identity.Name;
                                    item.status = 0;

                                    db.SaveChanges();
                                }
                                ViewBag.msg = "EMI Date Entry Deactivate .";
                            }

                        }
                        else
                        {
                            var count = db.EMISetDates.Where(c => c.opid == opid && c.branchcode == User.Identity.Name).Count();
                            if (count == 0)
                            {
                                EMISetDate dd = new EMISetDate();
                                dd.opid = opid;
                                dd.formdate = DateTime.Now;
                                dd.status = 0;
                                dd.branchcode = User.Identity.Name;
                                db.EMISetDates.Add(dd);
                                db.SaveChanges();
                                ViewBag.msg = "EMI Date Entry Deactivate .";
                            }
                            else
                            {
                                EMISetDate dd = db.EMISetDates.Single(c => c.opid == opid && c.branchcode == User.Identity.Name);
                                dd.opid = opid;
                                dd.formdate = DateTime.Now;
                                dd.branchcode = User.Identity.Name;
                                dd.status = 0;
                                //db.Entry(dd).State = EntityState.Modified;
                                db.Entry<EMISetDate>(dd).State = System.Data.Entity.EntityState.Modified;
                                db.SaveChanges();
                                ViewBag.msg = "EMI Date Entry Deactivate .";
                            }
                        }
                    }
                }
                return View();
            }
        }
        [HttpGet]
        public ActionResult PossessionReport()
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Logout", "Admin");
            }
            return View();
        }

        [HttpPost]

        public ActionResult PossessionReport(string newbondid)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Logout", "Admin");
            }
            List<PossessionReport> li = new List<PossessionReport>();
            li = db.Database.SqlQuery<PossessionReport>("select * from appltab where newbondid='" + newbondid + "' and status=1").ToList();
            var m1 = new Member_tab();

            if (li.Count() > 0)
            {
                var memberid = li[0].newmemberid;
                m1 = db.Member_tabs.Single(af => af.NewMemberId == memberid);
                li[0].city = m1.District;
                li[0].state = m1.state;
                li[0].pincode = m1.Pin;
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PosessionReport.rpt"));
            rd.SetDataSource(li);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View(li);
        }

        #region 27-Mar-2019 Renewal Option

      [HttpGet]
      public ActionResult PaymentRenewal()
      {

          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Branch");
          }
          else
          {
              DateTime maxdate1 = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name select a.date).DefaultIfEmpty().Max();
              int trid = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.date == maxdate1 select a.trid).DefaultIfEmpty().Max();
              DateTime maxdate = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.trid == trid select a.date).DefaultIfEmpty().Max();
              var clcount = (from c in db.ClosingMatchingTabs where c.date == maxdate && c.opid == User.Identity.Name && c.pagename == "PaymentRenewal" select c).Count();
              int dcount = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.trid == trid && a.date == maxdate select a).Count();
              if (dcount > 0)
              {
                  if (clcount == 0)
                  {
                      TempData["pagename"] = "PaymentRenewal";
                      return RedirectToAction("MatchingDailyClosing", "Branch");
                  }
              }
              return View();
          }
      }
      [HttpPost]
      public ActionResult PaymentRenewal(TempInstallmenttab tp, HttpPostedFileBase Chequeimage, string newbondid2, string planname, Double term, string mode, Double latefine, int from, int to, string paymethod, DateTime pdate, string checkorddno, string drawno, Double relief, Double payamount, string amountinword, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, DateTime prevexpirydate)
      {
          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Branch");
          }
          else
          {
              var tempcount = db.TempInstallmenttabs.Where(c => c.newbondid == newbondid2 && c.status == 1).Count();
              var ds = db.Blockdates.Where(c => c.date == pdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
              if (ds > 0)
              {
                  Response.Write("<script>alert('This Date is closed please select another date')</script>");
              }
              else
              {
                  string localIP = "";
                  foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                  {
                      if (nic.OperationalStatus == OperationalStatus.Up)
                      {
                          localIP += nic.GetPhysicalAddress().ToString();
                          break;
                      }
                  }
                  if (tempcount == 0)
                  {
                      if (paymethod == "Cheque" || paymethod == "banktransaction")
                      {
                          if (paymethod == "Cheque" && (tp.chequeno == null || tp.Chequedate == null || tp.ChequeAmount == null || tp.Bbranch == null || tp.bank == null || tp.Account == null || tp.Account == null || tp.IFSCCode == null))
                          {
                              Response.Write("<script>alert('Please Complete Cheque Detail')</script>");
                          }
                          else
                          {
                              var cr = db.appltabs.Single(c => c.newbondid == newbondid2);
                              con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                              SqlCommand cmd = new SqlCommand();
                              cmd.CommandText = "tempinsertrcptinfo";
                              cmd.CommandType = CommandType.StoredProcedure;
                              cmd.Connection = con;

                              cmd.Parameters.AddWithValue("@newbondid", newbondid2);
                              cmd.Parameters.AddWithValue("@planname", planname);
                              cmd.Parameters.AddWithValue("@term", term);
                              cmd.Parameters.AddWithValue("@mode", mode);
                              cmd.Parameters.AddWithValue("@latefine", latefine);
                              cmd.Parameters.AddWithValue("@from", from);
                              cmd.Parameters.AddWithValue("@to", to);
                              cmd.Parameters.AddWithValue("@paymethod", paymethod);
                              cmd.Parameters.AddWithValue("@pdate", pdate);
                              cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                              cmd.Parameters.AddWithValue("@drawno", drawno);
                              cmd.Parameters.AddWithValue("@relief", relief);
                              cmd.Parameters.AddWithValue("@payamount", (payamount) - (latefine - relief));
                              cmd.Parameters.AddWithValue("@amountinword", amountinword);
                              cmd.Parameters.AddWithValue("@opid", User.Identity.Name);

                              cmd.Parameters.AddWithValue("@macaddress", localIP);
                              if (paymethod == "Cheque")
                              {
                                  cmd.Parameters.AddWithValue("@Chequeno", tp.chequeno);
                                  cmd.Parameters.AddWithValue("@Account", tp.Account);
                                  cmd.Parameters.AddWithValue("@acholdername", tp.ACholdername);
                                  cmd.Parameters.AddWithValue("@bank", tp.bank);
                                  cmd.Parameters.AddWithValue("@branch", tp.Bbranch);
                                  cmd.Parameters.AddWithValue("@chequedate", tp.Chequedate);
                                  if (Chequeimage != null)
                                  {

                                      string imgname = gid();
                                      //  tp.Chequeimage = "~/Photo/" + imgname + ".jpg";
                                      Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                      cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/" + imgname + ".jpg");
                                  }
                                  else
                                  {
                                      cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/default.jpg");
                                  }
                                  cmd.Parameters.AddWithValue("@chequeamount", tp.ChequeAmount);
                                  cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                                  cmd.Parameters.AddWithValue("@IFSCCode", tp.IFSCCode);
                                  cmd.Parameters.AddWithValue("@transactiontype", "NA");
                              }

                              else if (paymethod == "banktransaction")
                              {
                                  cmd.Parameters.AddWithValue("@Chequeno", transactionid);
                                  cmd.Parameters.AddWithValue("@Account", holderacno);
                                  cmd.Parameters.AddWithValue("@acholdername", "NA");
                                  cmd.Parameters.AddWithValue("@bank", trbank);
                                  cmd.Parameters.AddWithValue("@branch", "NA");
                                  cmd.Parameters.AddWithValue("@chequedate", transactiondate);
                                  cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/default.jpg");
                                  cmd.Parameters.AddWithValue("@chequeamount", tramount);
                                  cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                                  cmd.Parameters.AddWithValue("@IFSCCode", "NA");
                                  cmd.Parameters.AddWithValue("@transactiontype", tp.transactiontype);
                              }

                              SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                              p.Direction = ParameterDirection.Output;
                              cmd.Parameters.Add(p);

                              try
                              {
                                  con.Open();
                                  cmd.ExecuteNonQuery();

                                  paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                                  ViewData["newbondid"] = newbondid2;
                                  ViewData["paymethod"] = paymethod;
                                  ViewData["paymentno"] = paymentno;

                                  ViewBag.msg = "Renewel pending...";
                                  return View();
                              }

                              catch (Exception e)
                              {
                                  ViewBag.msg = e.Message;
                              }
                              finally
                              {
                                  con.Close();
                              }
                          }
                      }

                      else
                      {

                          var cr = db.appltabs.Single(c => c.newbondid == newbondid2);
                          con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                          SqlCommand cmd = new SqlCommand();
                          cmd.CommandText = "insertrcptinfo";
                          cmd.CommandType = CommandType.StoredProcedure;
                          cmd.Connection = con;
                          var Payamount = (payamount) - (latefine - relief);
                          cmd.Parameters.AddWithValue("@newbondid", newbondid2);
                          cmd.Parameters.AddWithValue("@planname", planname);
                          cmd.Parameters.AddWithValue("@term", term);
                          cmd.Parameters.AddWithValue("@mode", mode);
                          cmd.Parameters.AddWithValue("@latefine", latefine);
                          cmd.Parameters.AddWithValue("@from", from);
                          cmd.Parameters.AddWithValue("@to", to);
                          cmd.Parameters.AddWithValue("@paymethod", paymethod);
                          cmd.Parameters.AddWithValue("@pdate", pdate);
                          cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                          cmd.Parameters.AddWithValue("@drawno", drawno);
                          cmd.Parameters.AddWithValue("@relief", relief);
                          cmd.Parameters.AddWithValue("@payamount", Payamount);
                          cmd.Parameters.AddWithValue("@amountinword", amountinword);
                          cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                          cmd.Parameters.AddWithValue("@macaddress", localIP);
                          cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                          cmd.Parameters.AddWithValue("@transactiontype", "NA");

                          SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                          p.Direction = ParameterDirection.Output;
                          cmd.Parameters.Add(p);

                          try
                          {
                              con.Open();
                              cmd.ExecuteNonQuery();
                              paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                              ViewData["newbondid"] = newbondid2;
                              ViewData["paymethod"] = paymethod;
                              ViewData["paymentno"] = paymentno;
                              tp.chequeno = tp.chequeno == null ? "" : "no. " + tp.chequeno;
                              var cm = db.CompanyInfos.Single(d => d.Id == 1);
                              //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ",Your renewal of Rs " + payamount + " is received for plan " + planname + " for Bond: " + newbondid2 + " on date: " + pdate.ToString("dd/MM/yyyy"));
                              //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your EMI of Rs." + payamount + " for the month " + prevexpirydate.ToString("MMMM") + " for loan a/c no. " + cr.loanid + " vide " + paymethod + "cheque no " + tp.chequeno + " has been deposited successfully. Regards- " + cm.CompanyName);
                              string Paymethod = "", chequeno = "";
                              if (paymethod == "banktransaction")
                              {
                                  Paymethod = "Bank Transaction" + "/" + tp.transactiontype;
                                  chequeno = "Transaction Id " + tp.chequeno;
                              }
                              else if (paymethod != "Cash")
                              {
                                  chequeno = paymethod + " No " + tp.chequeno;
                                  Paymethod = paymethod;
                              }
                              else
                              {
                                  Paymethod = paymethod;
                              }
                              //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your EMI of Rs." + payamount + " for the month " + prevexpirydate.ToString("MMMM") + " for loan a/c no. " + cr.loanid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards- " + cg.CompanyName);
                              MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your PAYMENT of Rs." + payamount + ",OF YOUR ID NO.-" + cr.newbondid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards-" + cg.CompanyName);
                              ViewBag.msg = "Renewel Done Successfully....";
                              return View();
                          }

                          catch (Exception e)
                          {
                              ViewBag.msg = e.Message;
                          }
                          finally
                          {
                              con.Close();
                          }
                      }
                  }
                  else
                  {
                      Response.Write("<script>alert('Your Last Renewal is pending Please Contact to Admin')</script>");
                  }



              }
          }
          return View();
      }
      public ActionResult PrintRenewalReport()
      {
          List<RecieptTab> bond = new List<RecieptTab>();
          bond = db.RecieptTabs.ToList();
          ReportDocument rd = new ReportDocument();
          rd.Load(Path.Combine(Server.MapPath("~/Reports"), "NewRenewal.rpt"));
          rd.SetDataSource(bond);

          Response.Buffer = false;
          Response.ClearContent();
          Response.ClearHeaders();


          try
          {
              Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
              stream.Seek(0, SeekOrigin.Begin);

              return new FileStreamResult(stream, "application/pdf");
          }

          catch (Exception ex)
          {
              Response.Write("<script>alert('" + ex.Message + "')</script>");
          }
          finally
          {
              rd.Close();
              rd.Dispose();
          }
          return View();


      }
      public ActionResult PrintRenewalReportCheque(string newbondid, int paymentno = 0)
      {

          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Branch");
          }
          else
          {
              List<tempcheque> bond = new List<tempcheque>();


              var max = (from t in db.TempInstallmenttabs where t.newbondid == newbondid && t.paymentno == paymentno && t.status == 1 select t.installmentno).Max();
              var ta = db.TempInstallmenttabs.Single(t => t.newbondid == newbondid && t.paymentno == paymentno && t.installmentno == max && t.status == 1);
              var list = db.appltabs.Single(a => a.newbondid == newbondid);
              bond.Add(new tempcheque { newbondid = ta.newbondid, name = list.name, nolandunit = list.nolandunit, opid = ta.opid, bookingamount = ta.payamount, bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Bbranch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = Convert.ToDateTime(ta.Chequedate), Chequeimage = ta.Chequeimage });

              ReportDocument rd = new ReportDocument();
              rd.Load(Path.Combine(Server.MapPath("~/Reports"), "RenewAckReceipt.rpt"));
              rd.SetDataSource(bond);

              Response.Buffer = false;
              Response.ClearContent();
              Response.ClearHeaders();


              try
              {
                  Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                  stream.Seek(0, SeekOrigin.Begin);
                  return new FileStreamResult(stream, "application/pdf");


              }
              catch (Exception ex)
              {
                  Response.Write("<script>alert('" + ex.Message + "')</script>");
              }
              finally
              {
                  rd.Close();
                  rd.Dispose();
              }
              return View();

          }
      }
      [HttpGet]
      public ActionResult PartPayment()
      {

          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Branch");
          }
          else
          {

              return View();
          }
      }
      [HttpPost]
      public ActionResult PartPayment(TempInstallmenttab tp, HttpPostedFileBase Chequeimage, string newbondid2, string planname, Double term, string mode, Double latefine, int from, string paymethod, DateTime pdate, string checkorddno, string drawno, Double payamount, string amountinword, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno)
      {
          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Branch");
          }
          else
          {
              var tempcount = db.TempInstallmenttabs.Where(c => c.newbondid == newbondid2 && c.status == 1).Count();
              var ds = db.Blockdates.Where(c => c.date == pdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
              if (ds > 0)
              {
                  Response.Write("<script>alert('This Date is closed please select another date')</script>");
              }
              else
              {
                  string localIP = "";
                  foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                  {
                      if (nic.OperationalStatus == OperationalStatus.Up)
                      {
                          localIP += nic.GetPhysicalAddress().ToString();
                          break;
                      }
                  }
                  if (tempcount == 0)
                  {
                      if (paymethod == "Cheque" || paymethod == "banktransaction")
                      {
                          if (paymethod == "Cheque" && (tp.chequeno == null || tp.Chequedate == null || tp.ChequeAmount == null || tp.Bbranch == null || tp.bank == null || tp.Account == null || tp.Account == null || tp.IFSCCode == null))
                          {
                              Response.Write("<script>alert('Please Complete Cheque Detail')</script>");
                          }
                          else
                          {
                              var cr = db.appltabs.Single(c => c.newbondid == newbondid2);
                              con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                              SqlCommand cmd = new SqlCommand();
                              cmd.CommandText = "tempinsertrcptinfo";
                              cmd.CommandType = CommandType.StoredProcedure;
                              cmd.Connection = con;

                              cmd.Parameters.AddWithValue("@newbondid", newbondid2);
                              cmd.Parameters.AddWithValue("@planname", planname);
                              cmd.Parameters.AddWithValue("@term", term);
                              cmd.Parameters.AddWithValue("@mode", mode);
                              cmd.Parameters.AddWithValue("@latefine", latefine);
                              cmd.Parameters.AddWithValue("@from", from);
                              cmd.Parameters.AddWithValue("@to", from);
                              cmd.Parameters.AddWithValue("@paymethod", paymethod);
                              cmd.Parameters.AddWithValue("@pdate", pdate);
                              cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                              cmd.Parameters.AddWithValue("@drawno", drawno);
                              cmd.Parameters.AddWithValue("@relief", 0);
                              cmd.Parameters.AddWithValue("@payamount", payamount - latefine);
                              cmd.Parameters.AddWithValue("@amountinword", amountinword);
                              cmd.Parameters.AddWithValue("@opid", User.Identity.Name);

                              cmd.Parameters.AddWithValue("@macaddress", localIP);
                              if (paymethod == "Cheque")
                              {
                                  cmd.Parameters.AddWithValue("@Chequeno", tp.chequeno);
                                  cmd.Parameters.AddWithValue("@Account", tp.Account);
                                  cmd.Parameters.AddWithValue("@acholdername", tp.ACholdername);
                                  cmd.Parameters.AddWithValue("@bank", tp.bank);
                                  cmd.Parameters.AddWithValue("@branch", tp.Bbranch);
                                  cmd.Parameters.AddWithValue("@chequedate", tp.Chequedate);
                                  if (Chequeimage != null)
                                  {

                                      string imgname = gid();
                                      //  tp.Chequeimage = "~/Photo/" + imgname + ".jpg";
                                      Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                      cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/" + imgname + ".jpg");
                                  }
                                  else
                                  {
                                      cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/default.jpg");
                                  }
                                  cmd.Parameters.AddWithValue("@chequeamount", tp.ChequeAmount);
                                  cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                                  cmd.Parameters.AddWithValue("@IFSCCode", tp.IFSCCode);
                                  cmd.Parameters.AddWithValue("@transactiontype", "NA");
                              }

                              else if (paymethod == "banktransaction")
                              {
                                  cmd.Parameters.AddWithValue("@Chequeno", transactionid);
                                  cmd.Parameters.AddWithValue("@Account", holderacno);
                                  cmd.Parameters.AddWithValue("@acholdername", "NA");
                                  cmd.Parameters.AddWithValue("@bank", trbank);
                                  cmd.Parameters.AddWithValue("@branch", "NA");
                                  cmd.Parameters.AddWithValue("@chequedate", transactiondate);
                                  cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/default.jpg");
                                  cmd.Parameters.AddWithValue("@chequeamount", tramount);
                                  cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                                  cmd.Parameters.AddWithValue("@IFSCCode", "NA");
                                  cmd.Parameters.AddWithValue("@transactiontype", tp.transactiontype);
                              }

                              SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                              p.Direction = ParameterDirection.Output;
                              cmd.Parameters.Add(p);

                              try
                              {
                                  con.Open();
                                  cmd.ExecuteNonQuery();

                                  paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                                  ViewData["newbondid"] = newbondid2;
                                  ViewData["paymethod"] = paymethod;
                                  ViewData["paymentno"] = paymentno;

                                  ViewBag.msg = "Renewel pending...";
                                  return View();
                              }

                              catch (Exception e)
                              {
                                  ViewBag.msg = e.Message;
                              }
                              finally
                              {
                                  con.Close();
                              }
                          }
                      }

                      else
                      {

                          var cr = db.appltabs.Single(c => c.newbondid == newbondid2);
                          con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                          SqlCommand cmd = new SqlCommand();
                          cmd.CommandText = "insertrcptinfo";
                          cmd.CommandType = CommandType.StoredProcedure;
                          cmd.Connection = con;
                          var Payamount = payamount - latefine;
                          cmd.Parameters.AddWithValue("@newbondid", newbondid2);
                          cmd.Parameters.AddWithValue("@planname", planname);
                          cmd.Parameters.AddWithValue("@term", term);
                          cmd.Parameters.AddWithValue("@mode", mode);
                          cmd.Parameters.AddWithValue("@latefine", latefine);
                          cmd.Parameters.AddWithValue("@from", from);
                          cmd.Parameters.AddWithValue("@to", from);
                          cmd.Parameters.AddWithValue("@paymethod", paymethod);
                          cmd.Parameters.AddWithValue("@pdate", pdate);
                          cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                          cmd.Parameters.AddWithValue("@drawno", drawno);
                          cmd.Parameters.AddWithValue("@relief", 0);
                          cmd.Parameters.AddWithValue("@payamount", Payamount);
                          cmd.Parameters.AddWithValue("@amountinword", amountinword);
                          cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                          cmd.Parameters.AddWithValue("@macaddress", localIP);
                          cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                          cmd.Parameters.AddWithValue("@transactiontype", "NA");

                          SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                          p.Direction = ParameterDirection.Output;
                          cmd.Parameters.Add(p);

                          try
                          {
                              con.Open();
                              cmd.ExecuteNonQuery();
                              paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                              ViewData["newbondid"] = newbondid2;
                              ViewData["paymethod"] = paymethod;
                              ViewData["paymentno"] = paymentno;
                              //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ",Your renewal of Rs " + payamount + " is received for plan " + planname + " for Bond: " + newbondid2 + " on date: " + pdate.ToString("dd/MM/yyyy"));
                              string Paymethod = "", chequeno = "";
                              if (paymethod == "banktransaction")
                              {
                                  Paymethod = "Bank Transaction" + "/" + tp.transactiontype;
                                  chequeno = "Transaction Id " + tp.chequeno;
                              }
                              else if (paymethod != "Cash")
                              {
                                  chequeno = paymethod + ", No. " + tp.chequeno;
                                  Paymethod = paymethod;
                              }
                              else
                              {
                                  Paymethod = paymethod;
                              }
                              MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your PAYMENT of Rs." + payamount + ",OF YOUR ID NO.-" + cr.newbondid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards-" + cg.CompanyName);
                                
                              ViewBag.msg = "Renewel Done Successfully....";
                              return View();
                          }

                          catch (Exception e)
                          {
                              ViewBag.msg = e.Message;
                          }
                          finally
                          {
                              con.Close();
                          }
                      }
                  }
                  else
                  {
                      Response.Write("<script>alert('Your Last Renewal is pending Please Contact to Admin')</script>");
                  }



              }
          }
          return View();
      }

      [HttpGet]
      public ActionResult BrokerAdvancePayment()
      {

          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Admin");
          }
          else
          {
              int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
              if (count == 1)
              {
                  var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                  if (log.status == 1 && log.type == "Admin")
                  {
                      DateTime maxdate1 = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name select a.date).DefaultIfEmpty().Max();
                      int trid = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.date == maxdate1 select a.trid).DefaultIfEmpty().Max();
                      DateTime maxdate = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.trid == trid select a.date).DefaultIfEmpty().Max();
                      var clcount = (from c in db.ClosingMatchingTabs where c.date == maxdate && c.opid == User.Identity.Name && c.pagename == "BrokerAdvancePayment" select c).Count();
                      if (clcount == 0)
                      {
                          TempData["pagename"] = "BrokerAdvancePayment";

                      }
                      return View();
                  }
                  else
                  {
                      return RedirectToAction("Logout", "Branch");
                  }
              }
              else
              {
                  return RedirectToAction("Logout", "Branch");
              }
          }
      }
      [HttpPost]
      public ActionResult BrokerAdvancePayment(AdvBrokerPaymentTab ob)
      {
          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Branch");
          }
          else
          {
              var ds = db.Blockdates.Where(c => c.date == ob.date && c.branchcode == User.Identity.Name && c.status == 0).Count();
              if (ds > 0)
              {
                  Response.Write("<script>alert('This Date is closed please select another date')</script>");
              }
              else
              {
                  Double balance = 0;
                  var paymentsum = (from df in db.AdvBrokerPaymentTabs where df.newagentid == ob.newagentid select df.amount).DefaultIfEmpty(0).Sum();
                  var receivesum = (from df in db.AdvBrokerPaymentTabs where df.newagentid == ob.newagentid select df.returnamount).DefaultIfEmpty(0).Sum();
                  if (ob.type == 0)
                  {
                      balance = (paymentsum + ob.amount - receivesum);
                  }
                  else if (ob.type == 1)
                  {
                      balance = (paymentsum - ob.amount - receivesum);
                  }
                  var agt = db.AgentDetails.Single(d => d.NewAgentId == ob.newagentid);
                  AdvBrokerPaymentTab cob = new AdvBrokerPaymentTab();
                  cob.newagentid = ob.newagentid;
                  cob.Remark = ob.Remark;
                  if (ob.type == 0)
                  {
                      cob.amount = ob.amount;
                      cob.returnamount = 0;
                  }
                  else if (ob.type == 1)
                  {
                      cob.amount = 0;
                      cob.returnamount = ob.amount;
                  }
                  cob.balanceamount = balance;
                  cob.date = ob.date;
                  cob.branchcode = agt.BranchCode;
                  cob.opid = User.Identity.Name;
                  cob.type = ob.type;
                  db.AdvBrokerPaymentTabs.Add(cob);
                  db.SaveChanges();
                  Response.Write("<script>alert('Payment done Successfully')</script>");
              }
              return View();
          }
      }
      [HttpGet]
      public ActionResult SearchPendingBond()
      {
          List<tempappltab> ad = new List<tempappltab>();
          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Admin");
          }
          else
          {
              return View(ad);
          }
      }
      [HttpPost]
      public ActionResult SearchPendingBond(string NewBondId, string command, string newbondid)
      {
          if (command == "Search")
          {
              List<tempappltab> ad = new List<tempappltab>();
              if (!IsLoggedIn())
              {
                  return RedirectToAction("Logout", "Admin");
              }
              else
              {

                  ad = (from dcl in db.tempappltabs where dcl.newbondid == NewBondId select dcl).ToList();
                  return View(ad);
              }
          }
          else if (command == "PDF")
          {
              var dn = (from a in db.tempappltabs where a.newbondid == newbondid select a).ToList();
              ReportDocument rd = new ReportDocument();
              rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Customer.rpt"));
              rd.SetDataSource(dn);

              Response.Buffer = false;
              Response.ClearContent();
              Response.ClearHeaders();


              try
              {
                  Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                  stream.Seek(0, SeekOrigin.Begin);
                  return new FileStreamResult(stream, "application/pdf");
              }
              catch (Exception ex)
              {
                  Response.Write("<script>alert('" + ex.Message + "')</script>");
              }

              return View(dn);

          }
          return View();
      }
      public ActionResult Block_unblock_video(int opid = 0, int status = 0)
      {
          if (!IsLoggedIn())
          {
              return RedirectToAction("logout", "Home");
          }
          else
          {
              var getstatus = db.upload_video_tabs.Single(x => x.Id == opid && x.status == status);

              if (status == 1)
              {
                  getstatus.status = 0;
              }
              else
              {
                  getstatus.status = 1;
              }

                //db.Entry(getstatus).State = EntityState.Modified;
                db.Entry<upload_video_tab>(getstatus).State = System.Data.Entity.EntityState.Modified;
                db.SaveChanges();
          }
          return RedirectToAction("upload_video", "Admin");

      }
      [HttpGet]
      public ActionResult Website()
      {
          if (!IsLoggedIn())
          {
              return RedirectToAction("Logout", "Admin");
          }
          else
          {
              return View();
          }
      }
      [HttpPost]
      public JsonResult AllBroker(string smsid)
      {

          string sms_result = "Record not found!";
          var count = db.appltabs.Count(d => d.newbondid == smsid);
          if (count == 1)
          {
              var ad = db.appltabs.Single(d => d.newbondid == smsid);
              var nl = db.NewLogins.Single(d => d.UserName == ad.newbondid);
              var cr = db.CompanyInfos.Single(d => d.Id == 1);
              MyClass.Sendmsg(ad.mobileno, "Dear " + ad.name + ",Thank you for Being a part of " + cr.CompanyName + " Login on " + cr.HeadOffice + " with your user ID as " + nl.UserName + " and password is " + nl.Password + ". Use " + nl.UserName + " as referral ID. Regards- " + cr.CompanyName + ".");
              sms_result = "SMS sent successfully to " + ad.name;
          }
          return Json(sms_result, JsonRequestBehavior.DenyGet);
      }
      [HttpPost]
      public JsonResult AllBroker_List(string smsid)
      {

          string sms_result = "Record not found!";
          var count = db.AgentDetails.Count(d => d.NewAgentId == smsid);
          if (count == 1)
          {
              var ad = db.AgentDetails.Single(d => d.NewAgentId == smsid);
              var nl = db.NewLogins.Single(d => d.UserName == ad.NewAgentId);
              var cr = db.CompanyInfos.Single(d => d.Id == 1);
              MyClass.Sendmsg(ad.Mobile, "Dear " + ad.name + ",Thank you for Being a part of " + cr.CompanyName + " Login on " + cr.HeadOffice + " with your user ID as " + nl.UserName + " and password is " + nl.Password + ". Use " + nl.UserName + " as referral ID. Regards- " + cr.CompanyName + ".");
              sms_result = "SMS sent successfully to " + ad.name;
          }
          return Json(sms_result, JsonRequestBehavior.DenyGet);
      }
      #endregion 27-Mar-2019 Renewal Option
      


        #region Amit Receptionist

      public ActionResult ReceptionList()
      {
          var model = db.DailyVisitors.ToList();
          return View(model);
      }
        
        #endregion


      public ActionResult PayoutReport(double sumamount1, double sumcommission1, double advancepayment1, double bonusamount1, double lesstds1, double netpayamount1)
      {
          if (!User.Identity.IsAuthenticated)
          {
              return RedirectToAction("Logout", "Admin");
          }
          double teamincome = 0;
          List<require> rlist = new List<require>();
          var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
          var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
          ViewData["bonusamount"] = bonusamount;
          var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
          List<plan> pclist = new List<plan>();
          MonthName mn = new MonthName();
          var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
          var mon = mn.numbertomonthname(vmonth);
          var br = db.BrokerCommLists.Single(a => a.newagentid == vnewagentid && a.month == mon && a.Year == vvyear);
          var car = db.AgentDetails.Single(rrr => rrr.NewAgentId == vnewagentid);
          Double tdsper = 0;
          if (br.panno == null || br.panno == "Form-61")
          {
              tdsper = tdsr.NPCTDS;
          }
          else
          {
              tdsper = tdsr.TDS;
          }

          var introname = db.AgentDetails.Single(ad => ad.NewAgentId == vnewagentid).name;
          var broker = db.AgentDetails.Single(adg => adg.NewAgentId == vnewagentid);
          var fathername = broker.Father;
          var address = broker.Address;
          var extradetails = db.Member_tabs.Single(mt => mt.NewMemberId == broker.newmemberid);
          var city = extradetails.District;
          var pincode = extradetails.Pin;
          var dob = broker.Dob;
          string stryear = vvyear.ToString();
          var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
          string paystatus = "";
          var voucherpaystatus = db.Voucher_Reports.Where(vc => vc.agentid == br.agencycode && vc.month == vmonth && vc.year == stryear).Count();

          if (voucherpaystatus > 0)
          {
              paystatus = "PAID";
          }
          else
          {
              paystatus = "UNPAID";
          }
          var rankname = string.Empty;
          //------Inserting self voucher------------
          var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == vnewagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
          foreach (var p in spclist.ToList())
          {
              pclist.Add(new plan { planname = p.planname });
          }


          foreach (var pc in pclist)
          {

              var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == vnewagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
              foreach (var spy in spylist.ToList())
              {
                  var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Voucher" select cts.amount).DefaultIfEmpty(0).Sum();
                  var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Voucher" select cts.commission).DefaultIfEmpty(0).Sum();
                  if (business > 0)
                  {
                      var percentage = (commission / business) * 100;
                      rlist.Add(new require { agentid = br.agencycode, newagentid = br.newagentid, name = br.name, emailid = br.panno, rankname = car.RankName, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = br.panno, commtype = "Voucher", fathername = fathername, address = address, city = city, pincode = pincode, sumamount1 = sumamount1, sumcommission1 = sumcommission1, advancepayment1 = advancepayment1, bonusamount1 = bonusamount1, lesstds1 = lesstds1, netpayamount1 = netpayamount1, paystatus = paystatus });
                  }

                  var sbusiness = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Spot" select cts.amount).DefaultIfEmpty(0).Sum();
                  var scommission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Spot" select cts.commission).DefaultIfEmpty(0).Sum();
                  if (sbusiness > 0)
                  {
                      var spercentage = (scommission / sbusiness) * 100;
                      rlist.Add(new require { agentid = br.agencycode, newagentid = br.newagentid, name = br.name, emailid = br.panno, rankname = car.RankName, planname = pc.planname, year = spy.year, business = sbusiness, percentage = spercentage, commission = scommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = br.panno, commtype = "Spot", fathername = fathername, address = address, city = city, pincode = pincode, sumamount1 = sumamount1, sumcommission1 = sumcommission1, advancepayment1 = advancepayment1, bonusamount1 = bonusamount1, lesstds1 = lesstds1, netpayamount1 = netpayamount1, paystatus = paystatus });
                  }
              }
          }

          var directincome = rlist.Select(ad => ad.commission).DefaultIfEmpty(0).Sum();

          //------End Inserting self voucher----------------

          //----------selecting team business and commission of selected month---------------

          var arlist = (from a in db.BrokerCommLists where a.newintroducerid == vnewagentid && a.month == mon && a.Year == vvyear select a).ToList();
          List<agents> alist = new List<agents>();
          foreach (var aar in arlist)
          {
              alist.Add(new agents { agentcode = aar.agencycode });
          }


          foreach (var a in alist)
          {

              List<teamagents> tlist = new List<teamagents>();
              List<trequire> trlist = new List<trequire>();
              var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == vvyear);
              int rcount = 0;
              rcount = rcount + 1;
              tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
              var maxsragent = tlist.Count;
              var minsragent = 1;
              while (minsragent <= maxsragent)
              {

                  var da = tlist.Where(t => t.sr == minsragent);
                  foreach (var d in da.ToList())
                  {
                      var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                      foreach (var aa in aalist)
                      {
                          rcount = rcount + 1;
                          tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                      }

                  }
                  minsragent = minsragent + 1;
                  maxsragent = tlist.Count;
              }

              foreach (var tt in tlist)
              {
                  var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == vvyear);

                  var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == vnewagentid && nn.date.Month == vmonth && nn.date.Year == vvyear select nn).ToList();
                  foreach (var nctr in nctrlist)
                  {
                      trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, plancode = nctr.plancode, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission, commtype = nctr.comtype });

                  }

              }

              var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == vvyear);
              var tcar = db.AgentDetails.Single(trrr => trrr.AgencyCode == a.agentcode);
              var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();

              foreach (var dpc in dpclist)
              {
                  var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                  foreach (var dpy in dpylist)
                  {

                      var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Voucher").Sum(tr => tr.business);
                      var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Voucher").Sum(tr => tr.commission);
                      if (tbusiness > 0)
                      {
                          var tpercentage = (tcommission / tbusiness) * 100;
                          rlist.Add(new require { agentid = nagentid.agencycode, newagentid = tnrname.newagentid, name = tnrname.name, rankname = tcar.RankName, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, commtype = "Voucher", fathername = fathername, address = address, city = city, pincode = pincode, directincome = directincome, sumamount1 = sumamount1, sumcommission1 = sumcommission1, advancepayment1 = advancepayment1, bonusamount1 = bonusamount1, lesstds1 = lesstds1, netpayamount1 = netpayamount1, paystatus = paystatus });
                      }

                      var stbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Spot").Sum(tr => tr.business);
                      var stcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Spot").Sum(tr => tr.commission);
                      if (stbusiness > 0)
                      {
                          var stpercentage = (stcommission / stbusiness) * 100;


                          rlist.Add(new require { agentid = nagentid.agencycode, newagentid = tnrname.newagentid, name = tnrname.name, rankname = tcar.RankName, planname = dpc.planname, year = dpy.year, business = stbusiness, percentage = stpercentage, commission = stcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, panno = br.panno, newintroducerid = br.newintroducerid, introducername = introname, month = monthname, voucherno = voucherno + 1, commtype = "Spot", fathername = fathername, address = address, city = city, pincode = pincode, directincome = directincome, sumamount1 = sumamount1, sumcommission1 = sumcommission1, advancepayment1 = advancepayment1, bonusamount1 = bonusamount1, lesstds1 = lesstds1, netpayamount1 = netpayamount1, paystatus = paystatus });
                      }
                  }
              }
          }

          var newrlist = rlist.Select(af => af.commission).DefaultIfEmpty(0).Sum();
          if (directincome > newrlist)
          {
              teamincome = directincome - newrlist;
          }
          else if (directincome == newrlist)
          {
              teamincome = directincome;
          }

          else if (directincome < newrlist)
          {
              teamincome = newrlist - directincome;
          }


          if (rlist.Count() > 0)
          {
              rlist[0].directincome = directincome;
              rlist[0].teamincome = teamincome;
          }
          try
          {

              ReportDocument rd = new ReportDocument();
              rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PayoutReportrpt.rpt"));

              //rd.Subreports[0].SetDataSource(rlist);
              rd.SetDataSource(rlist);




              Response.Buffer = false;
              Response.ClearContent();
              Response.ClearHeaders();


              try
              {
                  Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                  stream.Seek(0, SeekOrigin.Begin);
                  string dt = pdate.ToShortDateString();

                  return new FileStreamResult(stream, "application/pdf");
              }

              catch (Exception ex)
              {
                  Response.Write("<script>alert('" + ex.Message + "')</script>");
              }
              finally
              {
                  rd.Close();
                  rd.Dispose();
              }
          }
          catch (Exception ex)
          {
              Response.Write(ex.Message);
              return Content("Erro : <br></br>" + ex.Message + "<br></<br>" + ex.ToString());
          }

          return View();
      }

    }
}