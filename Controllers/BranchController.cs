using ODHDEVELOPERS.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using System.IO;
using System.Net.NetworkInformation;
using CrystalDecisions.CrystalReports.Engine;
using System.Globalization;
using System.Drawing;
using System.Drawing.Imaging;
using System.Data.Entity;
using System.Threading;

namespace ODHDEVELOPERS.Controllers
{
    public class BranchController : Controller
    {

        public String GenerateImageTag(HttpPostedFileBase up)
        {
            String image = "";
            var imgtemp = Guid.NewGuid().ToString();
            if (up != null)
            {

                var chfl = true;
                while (chfl)
                {
                    image = "/images/original/" + imgtemp + ".jpg";
                    FileInfo fl = new FileInfo(Server.MapPath(image));
                    chfl = fl.Exists;
                    imgtemp = Guid.NewGuid().ToString();
                }
                Image im = Image.FromStream(up.InputStream);
                im.Save(Server.MapPath(image), ImageFormat.Jpeg);
            }
            return image;
        }
        public DateTime GetCleanDate(string date) {
            DateTime dt = new DateTime(1990, 1, 1);
            DateTime.TryParse(date,out dt);
            return dt;
        }
        
        #region Public Variable Start Here

        SqlConnection con = new SqlConnection();
        UsersContext db = new UsersContext();
        public static int plancode = 0, PId;
        public static string NewAgentid = string.Empty, newaccountid = string.Empty, NewMemberid, spaymethod = string.Empty, scheckorddno = string.Empty, nnewagentid = string.Empty;
        public static string NewBondid, bond, acno, typ;
        public static int paymentno = 0, vmonth = 0, vvyear = 0, scss = 0, ecss, lstsr = 0, ltsr = 0, sfilter = 0, check = 0;
        public static string ptype, Year, transactionid = string.Empty;
        public static string vnewagentid = string.Empty, opid = string.Empty, BondType = string.Empty;
        public static DateTime stdate = DateTime.Now.Date, enddate = DateTime.Now.Date, pdate = DateTime.Now.Date;
        public static DateTime ab = DateTime.Now.Date, b = DateTime.Now.Date;
        private static DateTime edate1 = DateTime.ParseExact("10/14/1774 12:00:00 AM", "MM/dd/yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
        private static DateTime sdate1 = DateTime.ParseExact("10/14/1774 12:00:00 AM", "MM/dd/yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
        Member mrg = new Member();
        CompanyInfo cg = new CompanyInfo();
        #endregion

        public BranchController() {
            mrg = db.Members.Single(d => d.Id == 1);
            cg = db.CompanyInfos.Single(d => d.Id == 1);
        }

        #region Public Class Start Here
        string gid()
        {

            long i = 1;
            foreach (byte b in Guid.NewGuid().ToByteArray())
            {

                i *= ((int)b + 1);
            }


            if (i < 0)
            {
                i = -i;
            }
            string s = i.ToString();
            return s.Substring(0, 10);


        }
        string gidref()
        {

            long i = 1;
            foreach (byte b in Guid.NewGuid().ToByteArray())
            {

                i *= ((int)b + 1);
            }


            if (i < 0)
            {
                i = -i;
            }
            string s = i.ToString();
            return s.Substring(0, 4);


        }
        public void SaveVoucher(Voucher_Report vt, string newagentid, int month, int year, DateTime paymentdate, string chkimg, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string ddamount, string ddno, string cashamount)
        {
            UsersContext db = new UsersContext();
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month) + "," + year;
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
            var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
            var mon = mn.numbertomonthname(month);

            List<plan> pclist = new List<plan>();
            List<require> rlist = new List<require>();
            var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }
            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = year.ToString();

            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
            //------Inserting self voucher------------
            var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
            foreach (var p in spclist.ToList())
            {
                pclist.Add(new plan { planname = p.planname });
            }

            foreach (var pc in pclist)
            {
                var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                foreach (var spy in spylist.ToList())
                {

                    var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                    var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                    if (business > 0)
                    {
                        var percentage = (commission / business) * 100;
                        rlist.Add(new require { agentid = br.agencycode, newagentid = newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                    }
                }
            }

            //------End Inserting self voucher----------------

            //----------selecting team business and commission of selected month---------------

            var arlist = (from a in db.BrokerCommLists where a.newintroducerid == newagentid && a.month == mon && a.Year == year select a).ToList();
            List<agents> alist = new List<agents>();
            foreach (var aar in arlist)
            {
                alist.Add(new agents { agentcode = aar.agencycode });
            }

            foreach (var a in alist)
            {
                List<teamagents> tlist = new List<teamagents>();
                List<trequire> trlist = new List<trequire>();
                var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                int rcount = 0;
                rcount = rcount + 1;
                tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                var maxsragent = tlist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = tlist.Where(t => t.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = tlist.Count;
                }

                foreach (var tt in tlist)
                {
                    var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == year);
                    var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                    foreach (var nctr in nctrlist)
                    {
                        trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, plancode = nctr.plancode, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                    }

                }

                var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == year);
                var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                foreach (var dpc in dpclist)
                {
                    var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                    foreach (var dpy in dpylist)
                    {
                        var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                        var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                        if (tbusiness > 0)
                        {
                            var tpercentage = (tcommission / tbusiness) * 100;
                            rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                        }
                    }
                }

            }


            //----------End selecting team business and commission of selected month---------------

            var gbusiness = rlist.Sum(tr => tr.business);
            var gcommission = rlist.Sum(tr => tr.commission);
            var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
            var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);

            DateTime sdt, edt;
            string sdate = string.Empty;
            //----------End selecting team business and commission of selected month---------------
            if (month < 10)
            {
                sdate = "0" + month.ToString() + "/01/" + year.ToString();
            }
            else if (month >= 10)
            {
                sdate = month.ToString() + "/01/" + year.ToString();
            }
            sdt = Convert.ToDateTime(sdate);
            edt = sdt.AddMonths(1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);

            Voucher_Report vob = new Voucher_Report();
            vob.agentid = br.agencycode;
            vob.bussiness = gbusiness;
            vob.commission = gcommission;
            vob.tds = lesstds;
            vob.netamount = netamount;
            vob.sdate = sdt.Date;
            vob.edate = edt.Date;
            vob.date = paymentdate.Date;
            vob.month = month;
            vob.year = year.ToString();
            vob.branchcode = br.branchcode;
            vob.Operatorid = User.Identity.Name;
            /////---------paymethod------------
            vob.paymethod = vt.paymethod;
            if (vt.paymethod == "Cheque")
            {
                vob.bank = vt.bank;
                vob.Account = vt.Account;
                vob.chequeno = vt.chequeno;
                vob.ACholdername = vt.ACholdername;
                vob.Branch = vt.Branch;
                vob.IFSCCode = vt.IFSCCode;
                vob.ChequeAmount = vt.ChequeAmount;
                vob.Chequedate = vt.Chequedate;
                vob.transactiontype = "NA";
                vob.Chequeimage = chkimg;
            }
            else if (vob.paymethod == "banktransaction")
            {
                vob.bank = trbank;
                vob.Account = holderacno;
                vob.chequeno = transactionid;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = tramount;
                vob.Chequedate = Convert.ToDateTime(transactiondate);
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = vt.transactiontype;
            }
            else if (vob.paymethod == "DD")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = ddno;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = ddamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            else if (vob.paymethod == "Cash")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = "NA";
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = cashamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            db.Voucher_Reports.Add(vob);
            db.SaveChanges();

            Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
            Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
            Double total = credit - debit;

            var bn = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);

            var pr = db.AppSettingTabs.Single(a => a.status == 1);
            if (pr.status == 1)
            {
                WalletBalance objWB = new WalletBalance();
                objWB.username = br.newagentid;
                objWB.mobile = br.mobile;
                objWB.customer_name = br.name;
                objWB.transactionid = db.Database.SqlQuery<string>("exec AutoGenerateWalletId").FirstOrDefault();
                objWB.transactiondate = DateTime.Now;
                objWB.amount = netamount;
                objWB.type = "Credit";
                objWB.referenceno = objWB.transactionid;
                objWB.txn_status = 1;
                objWB.trxnmessage = "Rs. " + netamount + " /- will be credited in your wallet";
                db.WalletBalances.Add(objWB);
                db.SaveChanges();
            }

            MyClass.Sendmsg(br.mobile, "Dear " + br.name + ", Your Voucher for " + monthname + " has been paid of amount:" + netamount + " on dated:" + DateTime.Now.ToString("dd/MM/yyyy") + " by Branch");

        }

        public void BWSaveVoucher(Voucher_Report vt, string newagentid, int month, int year, DateTime paymentdate, string chkimg, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string ddamount, string ddno, string cashamount)
        {

            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month) + "," + year;

            List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
            List<AgentDetail> blist = new List<AgentDetail>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(m => m.Id == 1);
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            var mon = mn.numbertomonthname(month);
            var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }


            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;

            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = year.ToString();
            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
            var commlist = (from co in db.commission_tabs where co.newagentid == newagentid && co.date.Month == month && co.date.Year == year select co).ToList();
            foreach (var com in commlist)
            {
                var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
            }

            var gbusiness = bwvlist.Sum(tr => tr.business);
            var gcommission = bwvlist.Sum(tr => tr.commission);
            var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
            var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);

            DateTime sdt, edt;
            string sdate = string.Empty;
            //----------End selecting team business and commission of selected month---------------
            if (month < 10)
            {
                sdate = "0" + month.ToString() + "/01/" + year.ToString();
            }
            else if (month >= 10)
            {
                sdate = month.ToString() + "/01/" + year.ToString();
            }
            sdt = Convert.ToDateTime(sdate);
            edt = sdt.AddMonths(1);


            Voucher_Report vob = new Voucher_Report();
            vob.agentid = br.agencycode;
            vob.bussiness = gbusiness;
            vob.commission = gcommission;
            vob.tds = lesstds;
            vob.netamount = netamount;
            vob.sdate = sdt.Date;
            vob.edate = edt.Date;
            vob.date = paymentdate;
            vob.month = month;
            vob.year = year.ToString();
            vob.branchcode = br.branchcode;
            vob.Operatorid = User.Identity.Name;
            /////---------paymethod------------
            vob.paymethod = vt.paymethod;
            if (vt.paymethod == "Cheque")
            {
                vob.bank = vt.bank;
                vob.Account = vt.Account;
                vob.chequeno = vt.chequeno;
                vob.ACholdername = vt.ACholdername;
                vob.Branch = vt.Branch;
                vob.IFSCCode = vt.IFSCCode;
                vob.ChequeAmount = vt.ChequeAmount;
                vob.Chequedate = vt.Chequedate;
                vob.transactiontype = "NA";
                vob.Chequeimage = chkimg;
            }
            else if (vob.paymethod == "banktransaction")
            {
                vob.bank = trbank;
                vob.Account = holderacno;
                vob.chequeno = transactionid;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = tramount;
                vob.Chequedate = Convert.ToDateTime(transactiondate);
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = vt.transactiontype;
            }
            else if (vob.paymethod == "DD")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = ddno;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = ddamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            else if (vob.paymethod == "Cash")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = "NA";
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = cashamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            db.Voucher_Reports.Add(vob);
            db.SaveChanges();
            Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
            Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
            Double total = credit - debit;

            var bn = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);
            
            var pr = db.AppSettingTabs.Single(a => a.status == 1);
            if (pr.status == 1)
            {
                WalletBalance objWB = new WalletBalance();
                objWB.username = br.newagentid;
                objWB.mobile = br.mobile;
                objWB.customer_name = br.name;
                objWB.transactionid = db.Database.SqlQuery<string>("exec AutoGenerateWalletId").FirstOrDefault();
                objWB.transactiondate = DateTime.Now;
                objWB.amount = netamount;
                objWB.type = "Credit";
                objWB.referenceno = objWB.transactionid;
                objWB.txn_status = 1;
                objWB.trxnmessage = "Rs. " + netamount + " /- will be credited in your wallet";
                db.WalletBalances.Add(objWB);
                db.SaveChanges();
            }

            MyClass.Sendmsg(br.mobile, "Dear " + br.name + ", Your Voucher for " + monthname + "  has been paid of amount:" + netamount + " on dated:" + DateTime.Now.ToString("dd/MM/yyyy") + " by Admin");

        }

        public void CCSaveVoucher(Voucher_Report vt, string newagentid, int month, int year, DateTime paymentdate, string chkimg, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string ddamount, string ddno, string cashamount)
        {

            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(month) + "," + year;
            var mon = mn.numbertomonthname(month);
            #region Selecting Complete Chain Start Here

            int rcount = 0;
            List<BrokerChain> bclist = new List<BrokerChain>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(m => m.Id == 1);
            var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }

            bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name });
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.BrokerCommLists where al.newintroducerid == newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

            }

            #endregion

            #region Selecting CC Voucher Start Here

            List<require> rlist = new List<require>();
            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;
            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = year.ToString();
            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();

            foreach (var bc in bclist)
            {

                var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == year);
                List<plan> pclist = new List<plan>();

                //------Inserting self voucher------------
                var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.plancode select new { ct.plancode }).Distinct();
                foreach (var p in spclist.ToList())
                {
                    pclist.Add(new plan { plancode = p.plancode });
                }

                foreach (var pc in pclist)
                {

                    //var pr = db.NewPlans.Single(p => p.Plancode == pc.plancode);
                    var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == month && sct.date.Year == year && sct.plancode == pc.plancode orderby sct.year select new { sct.year }).Distinct();
                    foreach (var spy in spylist.ToList())
                    {

                        var business = (from cts in db.commission_tabs where cts.plancode == pc.plancode && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                        var commission = (from cts in db.commission_tabs where cts.plancode == pc.plancode && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                        var percentage = (commission / business) * 100;
                        rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });

                    }
                }

                //------End Inserting self voucher----------------

            }
            var gbusiness = rlist.Sum(tr => tr.business);
            var gcommission = rlist.Sum(tr => tr.commission);
            var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
            var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);


            #endregion

            DateTime sdt, edt;
            string sdate = string.Empty;

            if (month < 10)
            {
                sdate = "0" + month.ToString() + "/01/" + year.ToString();
            }
            else if (month >= 10)
            {
                sdate = month.ToString() + "/01/" + year.ToString();
            }
            sdt = Convert.ToDateTime(sdate);
            edt = sdt.AddMonths(1);


            Voucher_Report vob = new Voucher_Report();
            vob.agentid = br.agencycode;
            vob.bussiness = gbusiness;
            vob.commission = gcommission;
            vob.tds = lesstds;
            vob.netamount = netamount;
            vob.sdate = sdt.Date;
            vob.edate = edt.Date;
            vob.date = paymentdate;
            vob.month = month;
            vob.year = year.ToString();
            vob.branchcode = br.branchcode;
            vob.Operatorid = User.Identity.Name;
            /////---------paymethod------------
            vob.paymethod = vt.paymethod;
            if (vt.paymethod == "Cheque")
            {
                vob.bank = vt.bank;
                vob.Account = vt.Account;
                vob.chequeno = vt.chequeno;
                vob.ACholdername = vt.ACholdername;
                vob.Branch = vt.Branch;
                vob.IFSCCode = vt.IFSCCode;
                vob.ChequeAmount = vt.ChequeAmount;
                vob.Chequedate = vt.Chequedate;
                vob.transactiontype = "NA";
                vob.Chequeimage = chkimg;
            }
            else if (vob.paymethod == "banktransaction")
            {
                vob.bank = trbank;
                vob.Account = holderacno;
                vob.chequeno = transactionid;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = tramount;
                vob.Chequedate = Convert.ToDateTime(transactiondate);
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = vt.transactiontype;
            }
            else if (vob.paymethod == "DD")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = ddno;
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = ddamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            else if (vob.paymethod == "Cash")
            {
                vob.bank = "NA";
                vob.Account = "NA";
                vob.chequeno = "NA";
                vob.ACholdername = "NA";
                vob.Branch = "NA";
                vob.IFSCCode = "NA";
                vob.ChequeAmount = cashamount;
                vob.Chequedate = DateTime.Now.Date;
                vob.Chequeimage = "~/Photo/default.jpg";
                vob.transactiontype = "NA";
            }
            db.Voucher_Reports.Add(vob);
            db.SaveChanges();
            Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
            Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
            Double total = credit - debit;

            var bn = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);

            var pr = db.AppSettingTabs.Single(a => a.status == 1);
            if (pr.status == 1)
            {
                WalletBalance objWB = new WalletBalance();
                objWB.username = br.newagentid;
                objWB.mobile = br.mobile;
                objWB.customer_name = br.name;
                objWB.transactionid = db.Database.SqlQuery<string>("exec AutoGenerateWalletId").FirstOrDefault();
                objWB.transactiondate = DateTime.Now;
                objWB.amount = netamount;
                objWB.type = "Credit";
                objWB.referenceno = objWB.transactionid;
                objWB.txn_status = 1;
                objWB.trxnmessage = "Rs. " + netamount + " /- will be credited in your wallet";
                db.WalletBalances.Add(objWB);
                db.SaveChanges();
            }

            MyClass.Sendmsg(br.mobile, "Dear " + br.name + ", Your Voucher for " + monthname + "  has been paid of amount:" + netamount + " on dated:" + DateTime.Now.ToString("dd/MM/yyyy") + " by Admin");

        }

        #endregion

        #region Printcrystal report method
        public ActionResult PrintReport<T>(List<T> DataSource, string ReportName)
        {
            ReportDocument rd = new ReportDocument();
            Stream stream = null;
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), ReportName));
            rd.SetDataSource(DataSource);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return new FileStreamResult(stream, "application/pdf");
            }
            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {

                rd.Dispose();
                rd.Close();
            }

            return View();
        }
        #endregion  

        #region Json Method Start Here

        public JsonResult AutoCompleteEMIBondId(string term)
        {
            var mlist = db.appltabs.Where(g => g.mode != "PART" && g.mode != "FULL" && g.status == 1).ToList();
            var list = (from r in mlist where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompletePartBondId(string term)
        {
            var mlist = db.appltabs.Where(g => (g.mode == "PART" || g.mode == "CLP" || g.mode == "50-50") && g.status == 1).ToList();
            var list = (from r in mlist where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SearchPartRenewal(string newbondid, string opid)
        {
            var msg = string.Empty;
            int months = 0;
            List<RenewalMsg> rmsg = new List<RenewalMsg>();
            List<RenewalDetails> rdmsg = new List<RenewalDetails>();
            var br = db.appltabs.Single(a => a.newbondid == newbondid);
            RevivalTab revt = db.RevivalTabs.Single(rev => rev.newbondid == newbondid);
            var rt = db.RevivalTabs.Single(rr => rr.newbondid == newbondid);
            var count = (from u in db.Installmenttabs where u.newbondid == newbondid select u).Count();
            //var ir = db.Installmenttabs.Single(ii => ii.newbondid == newbondid && ii.installmentno == count);
            DateTime pdate = DateTime.Now.Date;
            //if (br.plantype == "RD")
            //{
            //    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(ir.prevexpirydate).TotalDays);
            //    months = diff / 30;
            //}
            //else
            //{
            //    months = 0;
            //}
            if (br.status == 1)
            {
                var rp = db.RPTabs.Single(r => r.Id == 1);
                var nlr = db.NewLogins.Single(n => n.UserName == opid);
                var branchcode = string.Empty;
                if (nlr.type == "Branch")
                {
                    branchcode = opid;
                }
                else if (nlr.type == "Operator")
                {
                    var opr = db.Operators.Single(o => o.OperatorId == opid);
                    branchcode = opr.BranchCode;
                }
                if (br.branchcode != branchcode && rp.status == 0)
                {
                    msg = "Sorry! You have not permission to renewal of this bond,Please Contact Admin";
                    rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                    return Json(rmsg, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    if (count != 0)
                    {
                        if (br.mode == "Single")
                        {
                            msg = "Sorry,this is Single Installment Plan,Its renewal is not available";
                            rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                            return Json(rmsg, JsonRequestBehavior.AllowGet);

                        }
                        else if (br.mode == "PART" || br.mode == "CLP" || br.mode == "50-50")
                        {
                            var business = (from u in db.Installmenttabs where u.newbondid == newbondid select u.payamount).DefaultIfEmpty(0).Sum();
                            if (business < br.totalcon)
                            {
                                var rd = db.appltabs.Single(ap => ap.newbondid == newbondid);
                                var agentinfo = db.AgentDetails.Single(s => s.NewAgentId == rd.newintroducerid);
                                rdmsg.Add(new RenewalDetails { bondname = rd.name, introname = agentinfo.name, newbondid = newbondid, name = rd.name, newintroducerid = rd.newintroducerid, previnstall = count, mobileno = rd.mobileno, type = 1 }); ;
                                return Json(rdmsg, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {
                                msg = "Plot Cost already deposited..";
                                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                                return Json(rmsg, JsonRequestBehavior.AllowGet);
                            }
                        }
                        return Json(rdmsg, JsonRequestBehavior.AllowGet);

                    }
                    else
                    {
                        msg = "This Bond Does Not Exist in Intallment";
                        rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                        return Json(rmsg, JsonRequestBehavior.AllowGet);
                    }
                }
            }
            else
            {
                msg = "Sorry! This Bond Locked..";
                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                return Json(rmsg, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult selectpartdetail(string newbondid)
        {
            DateTime cdate = DateTime.Now.Date;
            List<selectrenewaldetail> srlist = new List<selectrenewaldetail>();
            var appinfo = db.appltabs.Single(s => s.newbondid == newbondid);
            var agentinfo = db.AgentDetails.Single(s => s.NewAgentId == appinfo.newintroducerid);
            var count = (from u in db.Installmenttabs where u.newbondid == newbondid select u).Count();
            //
            double paidamount = db.Installmenttabs.Where(d => d.newbondid == newbondid).Sum(d => d.payamount);
            //
            srlist.Add(new selectrenewaldetail { penality = 0, bondname = appinfo.name, introname = agentinfo.name, planname = appinfo.planname, term = appinfo.term, prevexpirydate = cdate, expirydate = cdate, latefine = 0, from = count + 1, installmentno = count + 1, relief = 0, payamount = 0, amountinwords = "NA",/**/totalplotcost = appinfo.totalcon, paidamount = paidamount, dueamount = appinfo.totalcon - paidamount, mode = appinfo.mode/**/  });
            return Json(srlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SetPayamount(string newbondid, double amount, double latefine)
        {
            DateTime cdate = DateTime.Now.Date;
            List<ResetRenewel> rrlist = new List<ResetRenewel>();
            Double payamount = amount + latefine;
            NumberToEnglish nw = new NumberToEnglish();
            var amountinwords = nw.changeToWords(payamount.ToString(), true);
            rrlist.Add(new ResetRenewel { expirydate = cdate, latefine = latefine, payamount = payamount, amountinwords = amountinwords });
            return Json(rrlist, JsonRequestBehavior.AllowGet);

        }

        public JsonResult AutoCompleteMBondId(string term)
        {
            var custlist = db.appltabs.Where(c => c.status == 2);
            var list = (from r in custlist where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SelectPanno(string intro)
        {
            var list = (from o in db.AgentDetails where o.NewAgentId == intro select new { o.Panno });
            return Json(list, JsonRequestBehavior.AllowGet);

        }

        public JsonResult AutoCompleteAccountno(string term)
        {
            var list = (from r in db.SavingAccountInfos where r.accountno.ToLower().Contains(term.ToLower()) || r.acholdername.ToLower().Contains(term.ToLower()) select new { r.accountno, r.acholdername }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteOpId(string term)
        {
            var list = (from r in db.Operators where r.OperatorId.ToLower().Contains(term.ToLower()) || r.OperatorName.ToLower().Contains(term.ToLower()) && r.BranchCode == User.Identity.Name select new { r.OperatorId, r.OperatorName }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult advisiorvalidation(string advisiorid)
        {

            var count = db.AgentDetails.Where(a => a.NewAgentId == advisiorid).Count();

            int status = 0;

            if (count != 0)
            {
                status = 1;
            }
            else
            {
                status = 0;
            }

            return Json(status, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompletePPSBondId(string term)
        {
            var p4 = db.Plans.Single(c => c.Plancode == 4);
            var plist = (from b in db.appltabs where b.plantype == p4.shortcutname select b);
            var list = (from r in plist where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public JsonResult AutoCompleteBondId_Part(string term)
        {
            var list = (from r in db.appltabs where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) && r.paymenttype=="PART" select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public JsonResult AutoCompleteBondId_EMI(string term)
        {
            var applist = db.appltabs.Where(d => d.status == 1 && d.paymenttype == "EMI").ToList();
            var list = (from r in applist where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public JsonResult AutoCompleteBondId(string term)
        {
            var mlist = db.appltabs.Where(g => g.plantype != "FI").ToList();
            var list = (from r in db.appltabs where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompletetempBondId(string term)
        {
            var list = (from r in db.tempappltabs where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteManualBondId(string term)
        {
            var mlist = db.appltabs.Where(g => g.plantype == "FI").ToList();
            var list = (from r in mlist where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteMoneyBack(string term)
        {
            var future = db.appltabs.Where(g => g.plantype == "PPS").ToList();
            var list = (from r in future where r.newbondid.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.newbondid, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SelectIntroName(string intro)
        {
            var list = (from o in db.AgentDetails where o.NewAgentId == intro select o.name);
            return Json(list, JsonRequestBehavior.AllowGet);

        }

        public JsonResult selectcssno(DateTime date)
        {
            var cssnolist = (from ins in db.Installmenttabs where ins.paymentdate == date && ins.branch == User.Identity.Name orderby ins.cssno select new { ins.cssno }).Distinct();
            return Json(cssnolist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult checkintrank(string intcode, int rank)
        {
            string msg = string.Empty;
            List<DisplayMsg> msglist = new List<DisplayMsg>();
            var ar = db.AgentDetails.Single(pl => pl.NewAgentId == intcode);
            if (ar.RankCode < rank)
            {
                msg = "Please,select less or equal to introducer rank";
                msglist.Add(new DisplayMsg { msg = msg, type = 0 });
            }
            else
            {
                msg = "Ok";
                msglist.Add(new DisplayMsg { msg = msg, type = 1 });
            }
            return Json(msglist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult reset(Double openingamount)
        {
            string msg = string.Empty;
            List<DisplayMsg> msglist = new List<DisplayMsg>();
            var ar = db.TDSLF_tabs.Single(pl => pl.Id == 1);
            if (ar.accountopeningfee > openingamount)
            {
                msg = "Please,Input greater or equal to " + ar.accountopeningfee;
                msglist.Add(new DisplayMsg { msg = msg, type = 0 });
            }
            else
            {
                msg = "Ok";
                msglist.Add(new DisplayMsg { msg = msg, type = 1 });
            }
            return Json(msglist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult checkbalance(string newagentid)
        {
            List<advbalance> msglist = new List<advbalance>();
            var paymentsum = (from df in db.AdvBrokerPaymentTabs where df.newagentid == newagentid select df.amount).DefaultIfEmpty(0).Sum();
            var receivesum = (from df in db.AdvBrokerPaymentTabs where df.newagentid == newagentid select df.returnamount).DefaultIfEmpty(0).Sum();
            var balanceamount = paymentsum - receivesum;
            msglist.Add(new advbalance { balanceamount = balanceamount });
            return Json(msglist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SelectPlan(string fno)
        {
            var plist = db.NewPlans.Where(pl => pl.status == 1);
            var Planlist = (from pl in plist where pl.Type == fno select new { pl.Planname, pl.Plancode }).Distinct();
            return Json(Planlist, JsonRequestBehavior.AllowGet);
        }


        public JsonResult selectproject(string ptype)
        {
           
            //if (ptype == "Residential")
            //{

            //    var Plantype = (from p in db.Plans where p.Plancode <= 2  && p.status == 1 select new { p.Planname, p.Plancode }).ToList();
            //    return Json(Plantype, JsonRequestBehavior.AllowGet);
            //}
            //else if (ptype == "Commercial")
            //{
            //    var Plantype = (from p in db.Plans where p.Plancode > 2 && p.status == 1 select new { p.Planname, p.Plancode }).ToList();
            //    return Json(Plantype, JsonRequestBehavior.AllowGet);
            //}
            //else
            //{
            //    return Json(null, JsonRequestBehavior.AllowGet);
            //}
            var Plantype = (from p in db.Plans where p.type == ptype && p.status == 1 && p.shortcutname != "FD" select new { p.Planname, p.Plancode }).ToList();
            return Json(Plantype, JsonRequestBehavior.AllowGet);
        }
        public JsonResult selectmode(int cpplan, DateTime formdate)
        {
            List<ModeTerm> mtlist = new List<ModeTerm>();
            var pr = db.NewPlans.Single(t => t.Plancode == cpplan);
            var yr = db.NewPlans.Single(y => y.Plancode == cpplan);
            int yy = 0;
            int mm = 0;
            DateTime expirydate;

            if ((yr.Term.ToString()).Contains("."))
            {
                yy = new System.Version(yr.Term.ToString()).Major;
                mm = new System.Version(yr.Term.ToString()).Minor;
                DateTime expirydateyy = formdate.AddYears(yy);
                expirydate = expirydateyy.AddMonths(mm);

            }
            else
            {
                int y = Convert.ToInt32(yr.Term.ToString());
                expirydate = formdate.AddYears(y);

            }

            if (pr.Type == "RD")
            {

                mtlist.Add(new ModeTerm { mode = "Monthly", term = Math.Round(yr.Term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Quarterly", term = Math.Round(yr.Term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Halfyearly", term = Math.Round(yr.Term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Yearly", term = Math.Round(yr.Term, 1), expirydate = expirydate });
            }

            if (pr.Type == "FD")
            {

                mtlist.Add(new ModeTerm { mode = "Single", term = Math.Round(yr.Term, 1), expirydate = expirydate });

            }
            if (pr.Type == "NFP")
            {

                mtlist.Add(new ModeTerm { mode = "Yearly", term = Math.Round(yr.Term, 1), expirydate = expirydate });

            }
            if (pr.Type == "PPS")
            {

                mtlist.Add(new ModeTerm { mode = "Monthly", term = Math.Round(yr.Term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Quarterly", term = Math.Round(yr.Term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Halfyearly", term = Math.Round(yr.Term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Yearly", term = Math.Round(yr.Term, 1), expirydate = expirydate });

            }
            return Json(mtlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectterm(int cpplan)
        {
            List<ModeTerm> mtlist = new List<ModeTerm>();
            var plist = db.ProTerms.Where(a => a.projectid == cpplan && a.status == 1).ToList();
            foreach (var p in plist)
            {
                mtlist.Add(new ModeTerm { mode = "NA", term = p.term, expirydate = DateTime.Now.Date });
            }
            return Json(mtlist.OrderBy(o => o.term), JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectphase(int projectid)
        {
            var plist = db.PhaseTabs.Where(a => a.projectid == projectid).ToList();
            return Json(plist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectexpiry(int projectid, int plotsize, DateTime formdate, Double term = 0, int plccost = 0, int Devcharge = 0, double discountper=0)
        {
            List<PaymentList> mtlist = new List<PaymentList>();
            int yy = 0;
            int mm = 0;
            DateTime expirydate;
            Double totalcon = 0;
            if ((term.ToString()).Contains("."))
            {
                yy = new System.Version(term.ToString()).Major;
                mm = new System.Version(term.ToString()).Minor;
                DateTime expirydateyy = formdate.AddYears(yy);
                expirydate = expirydateyy.AddMonths(mm);
            }
            else
            {
                int y = Convert.ToInt32(term.ToString());
                expirydate = formdate.AddYears(y);

            }

            var rt = db.RateTabs.FirstOrDefault(t => t.projectid == projectid  && t.term == term);
            //var rp = plotsize / 50;
            double rp = Convert.ToDouble(plotsize) / 50;
            totalcon = rt.plotcost * rp;
            var totplccost = (totalcon * plccost / 100);
            var totDevcharge = (plotsize * Devcharge);
            //var totdiscountper = (totalcon * discountper / 100);
            var totdiscountper = discountper;
            totalcon = ((totalcon + totplccost + totDevcharge) - totdiscountper);
            mtlist.Add(new PaymentList { totalcon = Math.Round(totalcon), payment = 0, maturityamount = totalcon, expirydate = expirydate });
            return Json(mtlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetPlotList(string block, string introid, int projectid, int phaseid)
        {
            var br = db.BlockTabs.Single(p => p.block == block && p.Plancode == projectid && p.phaseid == phaseid);
            int min = br.min;
            int max = br.max;
            List<plotlist> plist = new List<plotlist>();
            var blockid = db.BlockTabs.Single(a => a.Plancode == projectid && a.block == block && a.phaseid == phaseid);
            var chelist = (from sp in db.tempappltabs where sp.PYN != "N" && sp.block == block && sp.projectid == projectid && sp.phaseid == phaseid && sp.status == 1 select new { sp.plotno }).Distinct().ToList();
            var splist = (from sp in db.appltabs where sp.block == block && sp.projectid == projectid && sp.phaseid == phaseid && sp.status != 4 && sp.status != 2 select new { sp.plotno }).Distinct().ToList();

            var holdlist = (from sp in db.HoldingPlots where sp.holdblock == blockid.Id && sp.holdprojectid == projectid && sp.holdphaseid == phaseid && sp.holdstatus == 1 select new { sp.holdplotno }).Distinct().ToList();
            
            while (min <= max)
            {
                plist.Add(new plotlist { plotno = min });
                min = min + 1;
            }
            foreach (var p in splist)
            {
                var rc = plist.Count(d => d.plotno == p.plotno);
                if (rc == 1)
                {
                    plist.Remove(plist.Single(rr => rr.plotno == p.plotno));
                }

            }

            foreach (var h in holdlist)
            {
                 var rc = plist.Count(d => d.plotno == h.holdplotno);
                 if (rc == 1)
                 {
                     plist.Remove(plist.Single(rr => rr.plotno == h.holdplotno));
                 }
            }
            //foreach (var l in holdlist)
            //{
            //    plist.Add(new plotlist { plotno = l.holdplotno });
            //}
            foreach (var c in chelist)
            { var rc = plist.Count(d => d.plotno == c.plotno);
            if (rc == 1)
            {
                plist.Remove(plist.Single(rr => rr.plotno == c.plotno));
            }
            }
            return Json(plist.OrderBy(a => a.plotno), JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetBlockList(string plotstatus, int projectid, int phaseid)
        {
            var blist = db.BlockTabs.Where(p => p.status == 1 && p.Plancode == projectid && p.phaseid == phaseid);
            List<blocklist> plist = new List<blocklist>();
            foreach (var b in blist)
            {
                plist.Add(new blocklist { block = b.block });
            }
            return Json(plist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult checkplan(int projectid, int plotsize, Double term, Double discountper = 0, Double plccost = 0)
        {
            List<PaymentList> installlist = new List<PaymentList>();
            var rt = db.RateTabs.Single(t => t.projectid == projectid && t.term == term && t.plotsize == 50);
            var rp = plotsize / 50;
            Double totalcon = rt.plotcost * rp;
            //var damount = Math.Round(totalcon * (discountper / 100), 0);
            var damount = discountper;
            Double plotcost = totalcon - damount;
            var plcamount = Math.Round(totalcon * (plccost / 100), 0);
            plotcost = plotcost + plcamount;
            installlist.Add(new PaymentList { totalcon =Math.Round( plotcost), maturityamount = plotcost });
            return Json(installlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectpayment(Double term, Double bookingamount, Double discountper, int projectid, int plotsize, string mode, Double plccost = 0,Double Devcharge=0)
        {

            List<PaymentList> installlist = new List<PaymentList>();
            var amountinwords = string.Empty;
            NumberToEnglish n = new NumberToEnglish();
            amountinwords = n.changeToWords(bookingamount.ToString(), true);
            var noi = 0.0;
            Double emiamount = 0;
            Double totalcon = 0;
            var rt = db.RateTabs.Single(t => t.projectid == projectid && t.term == term && t.plotsize == 50);
            var rp = plotsize / 50;
            totalcon = rt.plotcost * rp;
         
                totalcon = totalcon + (Math.Round(totalcon * (plccost / 100))) + Math.Round((plotsize * Devcharge));
         
            //
                //var damount = Math.Round(totalcon * (discountper / 100), 0);
                var damount = discountper;
            Double ramount = totalcon - bookingamount - damount;
            Double plotcost = totalcon - damount;
            

            if (mode == "Monthly")
            {
                noi = Convert.ToDouble(rt.noi);
                emiamount = Math.Round(ramount / noi, 0);
          
                installlist.Add(new PaymentList { totalcon = plotcost, maturityamount = plotcost, payment = emiamount, amountinwords = amountinwords });
            }
            else if (mode == "Quarterly")
            {
                noi = rt.noi / 3;
                emiamount = Math.Round(ramount / noi, 0);
                installlist.Add(new PaymentList { totalcon = plotcost, maturityamount = plotcost, payment = emiamount, amountinwords = amountinwords });
            }
            else if (mode == "Halfyearly")
            {
                noi = rt.noi / 6;
                emiamount = Math.Round(ramount / noi, 0);
                installlist.Add(new PaymentList { totalcon = plotcost, maturityamount = plotcost, payment = emiamount, amountinwords = amountinwords });
            }
            else if (mode == "Yearly")
            {
                noi = rt.noi / 12;
                emiamount = Math.Round(ramount / term, 0);
                installlist.Add(new PaymentList { totalcon = Math.Round(plotcost), maturityamount = plotcost, payment = emiamount, amountinwords = amountinwords });
            }
            return Json(installlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectduedate(string mode, DateTime formdate)
        {
            List<ModeTerm> mtlist = new List<ModeTerm>();
            DateTime expirydate = formdate;

            if (mode == "Monthly")
            {

                expirydate = formdate.AddMonths(1);

            }
            else if (mode == "Quarterly")
            {

                expirydate = formdate.AddMonths(3);

            }
            else if (mode == "Halfyearly")
            {

                expirydate = formdate.AddMonths(6);

            }
            else if (mode == "Yearly")
            {

                expirydate = formdate.AddYears(1);

            }
            mtlist.Add(new ModeTerm { mode = mode, term = 0, expirydate = expirydate });
            return Json(mtlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectplotsize(int plan, string planmode, double amount)
        {
            var prr = db.NewPlans.Single(t => t.Plancode == plan);
            List<CalculateAmount> data = new List<CalculateAmount>();
            NumberToEnglish n = new NumberToEnglish();
            var amountinwords = string.Empty;
            var bar = db.BookingTabs.Single(b => b.Id == 1);
            Double bookingamount = 0;
            if (prr.Type == "FD")
            {
                var pr = db.Fixed_Tabs.Single(s => s.Plancode == plan && s.Amount == amount);
                bookingamount = pr.Plotsize * prr.bookingrate;
                amountinwords = n.changeToWords(bookingamount.ToString(), true);
                data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, bookingamount = bookingamount });
                return Json(data, JsonRequestBehavior.AllowGet);
            }
            else if (prr.Type == "RD")
            {
                if (planmode == "Monthly")
                {
                    var pr = db.Plan_Tabs.Single(s => s.Plancode == plan && s.Monthly == amount);
                    bookingamount = pr.Plotsize * prr.bookingrate;
                    amountinwords = n.changeToWords(bookingamount.ToString(), true);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, bookingamount = bookingamount });
                }
                else if (planmode == "Quarterly")
                {
                    var pr = db.Plan_Tabs.Single(s => s.Plancode == plan && s.Quarterly == amount);
                    bookingamount = pr.Plotsize * prr.bookingrate;
                    amountinwords = n.changeToWords(bookingamount.ToString(), true);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, bookingamount = bookingamount });
                }
                else if (planmode == "Halfyearly")
                {
                    var pr = db.Plan_Tabs.Single(s => s.Plancode == plan && s.Halfyearly == amount);
                    bookingamount = pr.Plotsize * prr.bookingrate;
                    amountinwords = n.changeToWords(bookingamount.ToString(), true);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, bookingamount = bookingamount });
                }
                else if (planmode == "Yearly")
                {
                    var pr = db.Plan_Tabs.Single(s => s.Plancode == plan && s.Yearly == amount);
                    bookingamount = pr.Plotsize * prr.bookingrate;
                    amountinwords = n.changeToWords(bookingamount.ToString(), true);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, bookingamount = bookingamount });
                }
            }
            else if (prr.Type == "NFP")
            {
                var pr = db.MIPP_tabs.Single(s => s.plancode == plan && s.amount == amount);
                bookingamount = pr.plotsize * prr.bookingrate;
                amountinwords = n.changeToWords(bookingamount.ToString(), true);
                data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.amount, maturityamount = pr.FiveERV, plotsize = pr.plotsize, bookingamount = bookingamount });
                return Json(data, JsonRequestBehavior.AllowGet);
            }

            else if (prr.Type == "PPS")
            {
                if (planmode == "Monthly")
                {
                    var pr = db.Pension_Tabs.Single(s => s.Plancode == plan && s.Monthly == amount);
                    bookingamount = pr.Plotsize * prr.bookingrate;
                    amountinwords = n.changeToWords(bookingamount.ToString(), true);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Profit, bookingamount = bookingamount });
                }
                else if (planmode == "Quarterly")
                {
                    var pr = db.Pension_Tabs.Single(s => s.Plancode == plan && s.Quarterly == amount);
                    bookingamount = pr.Plotsize * prr.bookingrate;
                    amountinwords = n.changeToWords(bookingamount.ToString(), true);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Profit, bookingamount = bookingamount });
                }
                else if (planmode == "Halfyearly")
                {
                    var pr = db.Pension_Tabs.Single(s => s.Plancode == plan && s.Halfyearly == amount);
                    bookingamount = pr.Plotsize * prr.bookingrate;
                    amountinwords = n.changeToWords(bookingamount.ToString(), true);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Profit, bookingamount = bookingamount });
                }
                else if (planmode == "Yearly")
                {
                    var pr = db.Pension_Tabs.Single(s => s.Plancode == plan && s.Yearly == amount);
                    bookingamount = pr.Plotsize * prr.bookingrate;
                    amountinwords = n.changeToWords(bookingamount.ToString(), true);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Profit, bookingamount = bookingamount });
                }
            }
            return Json(data, JsonRequestBehavior.AllowGet);
        }

        public JsonResult CalBooking(Double plotsize)
        {
            var bar = db.BookingTabs.Single(b => b.Id == 1);
            Double bookingamount = bar.bookingrate * plotsize;
            List<booking> blist = new List<booking>();
            blist.Add(new booking { bookingamount = bookingamount });
            return Json(blist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SetAmountinword(Double payment)
        {
            NumberToEnglish n = new NumberToEnglish();
            var amountinwords = n.changeToWords(payment.ToString(), true);
            List<booking> blist = new List<booking>();
            blist.Add(new booking { amountword = amountinwords });
            return Json(blist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SearchRenewal(string newbondid, string opid)
        {
            var msg = string.Empty;
            int months = 0;
            List<RenewalMsg> rmsg = new List<RenewalMsg>();
            List<RenewalDetails> rdmsg = new List<RenewalDetails>();
            var br = db.appltabs.Single(a => a.newbondid == newbondid);
            RevivalTab revt = db.RevivalTabs.Single(rev => rev.newbondid == newbondid);
            var rt = db.RevivalTabs.Single(rr => rr.newbondid == newbondid);
            //var np = db.NewPlans.Single(nn => nn.Plancode == br.plancode);
            var max = (from u in db.Installmenttabs where u.newbondid == newbondid && u.payamount == 0 select u.installmentno).DefaultIfEmpty().Min();
            var ir = db.Installmenttabs.Single(ii => ii.newbondid == newbondid && ii.installmentno == max);
            DateTime pdate = DateTime.Now.Date;
            if (br.plantype == "RD")
            {
                int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(ir.prevexpirydate).TotalDays);
                months = diff / 30;
            }
            else
            {
                months = 0;
            }
            if (br.status == 1)
            {
                var rp = db.RPTabs.Single(r => r.Id == 1);
                var nlr = db.NewLogins.Single(n => n.UserName == opid);
                var branchcode = string.Empty;
                if (nlr.type == "Branch")
                {
                    branchcode = opid;
                }
                else if (nlr.type == "Operator")
                {
                    var opr = db.Operators.Single(o => o.OperatorId == opid);
                    branchcode = opr.BranchCode;
                }
                if (br.branchcode != branchcode && rp.status == 0)
                {
                    msg = "Sorry! You have not permission to renewal of this bond,Please Contact Admin";
                    rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                    return Json(rmsg, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    int count = (from p in db.Installmenttabs where p.newbondid == newbondid select p.newbondid).Count();

                    if (count != 0)
                    {

                        if (br.mode == "Single")
                        {

                            msg = "Sorry,this is Single Installment Plan,Its renewal is not available";
                            rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                            return Json(rmsg, JsonRequestBehavior.AllowGet);

                        }
                        else if (br.mode == "Monthly" || br.mode == "Quarterly" || br.mode == "Halfyearly" || br.mode == "Yearly")
                        {
                            var min = (from u in db.Installmenttabs where u.newbondid == newbondid && u.payamount == 0 select u.installmentno).DefaultIfEmpty(0).Min();
                            if (min <= count && min != 0)
                            {

                                var inspay = db.Installmenttabs.Single(d => d.installmentno == min && d.newbondid == newbondid);
                                double latedays = DateTime.Now.Date.Subtract(inspay.prevexpirydate).TotalDays > 0 ? DateTime.Now.Date.Subtract(inspay.prevexpirydate).TotalDays : 0;
                                var rd = db.appltabs.Single(ap => ap.newbondid == newbondid);
                                var rstatus = db.RevivalTabs.Single(d => d.newbondid == newbondid).status;
                                if (rstatus != 2)
                                {
                                   // var revivaldays = db.NewPlans.Single(d => d.Plancode == rd.plancode).revivaltime;
                                    if (latedays >= 365)
                                    {
                                        msg = "EMI payment is blocked for " + rd.newbondid + "," + rd.planname + ", term: " + rd.term + ", latedays: " + latedays + " Please activate emi payment.";
                                        rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                                        return Json(rmsg, JsonRequestBehavior.AllowGet);
                                    }
                                    if (rstatus == 0)
                                    {
                                        msg = "EMI payment is blocked by admin. Please activate emi payment.";
                                        rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                                        return Json(rmsg, JsonRequestBehavior.AllowGet);
                                    }
                                }
                                var agentinfo = db.AgentDetails.Single(s => s.NewAgentId == rd.newintroducerid);
                                rdmsg.Add(new RenewalDetails { bondname = rd.name, introname = agentinfo.name, newbondid = newbondid, name = rd.name, newintroducerid = rd.newintroducerid, previnstall = min - 1, mobileno = rd.mobileno, type = 1 }); ;
                                return Json(rdmsg, JsonRequestBehavior.AllowGet);
                            }
                            else
                            {

                                msg = "Its renewal are Over";
                                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                                return Json(rmsg, JsonRequestBehavior.AllowGet);
                            }
                        }
                        return Json(rdmsg, JsonRequestBehavior.AllowGet);

                    }
                    else
                    {

                        msg = "This Bond Does Not Exist in Intallment";
                        rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                        return Json(rmsg, JsonRequestBehavior.AllowGet);
                    }
                }
            }
            else
            {
                //revt.status = 0;
                //db.SaveChanges();
                msg = "Sorry! This Bond Locked..";
                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                return Json(rmsg, JsonRequestBehavior.AllowGet);
            }

        }

        public JsonResult Searchcheque(string receiptno)
        {
            var newbondid = string.Empty;
            var msg = string.Empty;
            List<RenewalMsg> rmsg = new List<RenewalMsg>();
            List<RenewalDetails> rdmsg = new List<RenewalDetails>();
            int count = (from p in db.Installmenttabs where p.receiptno == receiptno select p.newbondid).Count();
            var min = (from u in db.Installmenttabs where u.receiptno == receiptno select u.installmentno).Min();
            if (count != 0)
            {
                var rc = db.Installmenttabs.Single(c => c.receiptno == receiptno);
                newbondid = rc.newbondid;
                var br = db.appltabs.Single(a => a.newbondid == newbondid);
                if (br.mode == "Single")
                {

                    msg = "Sorry,this is Single Installment Plan,Its renewal is not available";
                    rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                    return Json(rmsg, JsonRequestBehavior.AllowGet);

                }
                else if (br.mode == "Monthly" || br.mode == "Quarterly" || br.mode == "Halfyearly" || br.mode == "Yearly")
                {

                    if (rc.payamount == 0)
                    {

                        var rd = db.appltabs.Single(ap => ap.newbondid == newbondid);
                        rdmsg.Add(new RenewalDetails { newbondid = newbondid, name = rd.name, newintroducerid = rd.newintroducerid, previnstall = min - 1, mobileno = rd.mobileno, type = 1 }); ;
                        return Json(rdmsg, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {

                        msg = "This voucher is already paid...";
                        rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                        return Json(rmsg, JsonRequestBehavior.AllowGet);
                    }
                }
                return Json(rdmsg, JsonRequestBehavior.AllowGet);

            }
            else
            {

                msg = "This Bond Does Not Exist in Intallment";
                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                return Json(rmsg, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult selectdetail(string newbondid)
        {

            Double latefine = 0;
            List<selectrenewaldetail> srlist = new List<selectrenewaldetail>();
            var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
            var min = (from u in db.Installmenttabs where u.newbondid == newbondid && u.payamount == 0 select u.installmentno).Min();
            
            var appinfo = db.appltabs.Single(s => s.newbondid == newbondid);
            var agentinfo = db.AgentDetails.Single(s => s.NewAgentId == appinfo.newintroducerid);
            var count = (from u in db.Installmenttabs where u.newbondid == newbondid select u).Count();
            var rsl = db.Installmenttabs.Single(i => i.newbondid == newbondid && i.installmentno == min);
            if (rsl.mode == "Monthly")
            {
                DateTime pdate = Convert.ToDateTime(rsl.prevexpirydate).AddDays(15);
                if (DateTime.Now.Date > pdate.Date)
                {
                    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    int r = diff / 30;
                    latefine = Math.Round(((rsl.amount * llr.latefine) / 100) * (r + 1), 2);
                    //latefine = (rsl.amount * llr.latefine) / 100;

                }
            }
            else if (rsl.mode == "Quarterly")
            {
                DateTime pdate = Convert.ToDateTime(rsl.prevexpirydate).AddMonths(1);
                if (DateTime.Now.Date > pdate.Date)
                {
                    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    int r = diff / 91;
                    latefine = Math.Round(((rsl.amount * llr.latefine) / 100) * (r + 1), 2);
                    //latefine = (rsl.amount * llr.latefine) / 100;

                }
            }

            else if (rsl.mode == "Halfyearly")
            {
                DateTime pdate = Convert.ToDateTime(rsl.prevexpirydate).AddMonths(1);
                if (DateTime.Now.Date > pdate.Date)
                {
                    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    int r = diff / 182;
                    latefine = Math.Round(((rsl.amount * llr.latefine) / 100) * (r + 1), 2);
                    //latefine = (rsl.amount * llr.latefine) / 100;

                }
            }

            else if (rsl.mode == "Yearly")
            {
                DateTime pdate = Convert.ToDateTime(rsl.prevexpirydate).AddMonths(1);
                if (DateTime.Now.Date > pdate.Date)
                {
                    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    int r = diff / 365;
                    latefine = Math.Round(((rsl.amount * llr.latefine) / 100) * (r + 1), 2);
                    //latefine = (rsl.amount * llr.latefine) / 100;

                }
            }

            Double amount = rsl.amount + latefine + rsl.Penality;
            NumberToEnglish nw = new NumberToEnglish();
            var amountinwords = nw.changeToWords(amount.ToString(), true);
            int from = min;
            while (min <= count)
            {
                srlist.Add(new selectrenewaldetail { penality = rsl.Penality, bondname = appinfo.name, introname = agentinfo.name, planname = rsl.planname, term = rsl.term_plan, mode = rsl.mode, prevexpirydate = rsl.prevexpirydate, expirydate = rsl.expirydate, latefine = latefine, from = from, installmentno = min, relief = rsl.reliefrs, payamount = amount, amountinwords = amountinwords});
                min = min + 1;
            }
            return Json(srlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectppsdetail(string newbondid)
        {

            Double latefine = 0;
            List<selectrenewaldetail> srlist = new List<selectrenewaldetail>();
            var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
            var min = (from u in db.Installmenttabs where u.receiptno == newbondid select u.installmentno).Min();
            var rsl = db.Installmenttabs.Single(i => i.receiptno == newbondid && i.installmentno == min);
            var count = (from u in db.Installmenttabs where u.receiptno == newbondid select u).Count();

            if (rsl.mode == "Monthly")
            {
                DateTime pdate = Convert.ToDateTime(rsl.prevexpirydate).AddDays(15);
                if (DateTime.Now.Date > pdate.Date)
                {
                    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    int r = diff / 30;
                    latefine = Math.Round(((rsl.amount * llr.latefine) / 100) * (r + 1), 2);
                    //latefine = (rsl.amount * llr.latefine) / 100;

                }
            }

            else if (rsl.mode == "Quarterly")
            {
                DateTime pdate = Convert.ToDateTime(rsl.prevexpirydate).AddMonths(1);
                if (DateTime.Now.Date > pdate.Date)
                {
                    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    int r = diff / 91;
                    latefine = Math.Round(((rsl.amount * llr.latefine) / 100) * (r + 1), 2);
                    //latefine = (rsl.amount * llr.latefine) / 100;

                }
            }

            else if (rsl.mode == "Halfyearly")
            {
                DateTime pdate = Convert.ToDateTime(rsl.prevexpirydate).AddMonths(1);
                if (DateTime.Now.Date > pdate.Date)
                {
                    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    int r = diff / 182;
                    latefine = Math.Round(((rsl.amount * llr.latefine) / 100) * (r + 1), 2);
                    //latefine = (rsl.amount * llr.latefine) / 100;

                }
            }

            else if (rsl.mode == "Yearly")
            {
                DateTime pdate = Convert.ToDateTime(rsl.prevexpirydate).AddMonths(1);
                if (DateTime.Now.Date > pdate.Date)
                {
                    int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                    int r = diff / 365;
                    latefine = Math.Round(((rsl.amount * llr.latefine) / 100) * (r + 1), 2);
                    //latefine = (rsl.amount * llr.latefine) / 100;

                }
            }
            Double amount = rsl.amount + latefine + rsl.Penality;
            NumberToEnglish nw = new NumberToEnglish();
            var amountinwords = nw.changeToWords(amount.ToString(), true);
            int from = min;
            while (min <= count)
            {
                srlist.Add(new selectrenewaldetail { penality = rsl.Penality, planname = rsl.planname, term = rsl.term_plan, mode = rsl.mode, prevexpirydate = rsl.prevexpirydate, expirydate = rsl.expirydate, latefine = latefine, from = from, installmentno = min, relief = rsl.reliefrs, payamount = amount, amountinwords = amountinwords });
                min = min + 1;
            }
            return Json(srlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectreset(string newbondid, int froms, int to)
        {

            Double totallatefine = 0;
            Double amountsum = 0;
            List<ResetRenewel> rrlist = new List<ResetRenewel>();
            var llr = db.TDSLF_tabs.Single(l => l.Id == 1);

            amountsum = (from u in db.Installmenttabs where u.newbondid == newbondid && u.installmentno >= froms && u.installmentno <= to select u.amount).DefaultIfEmpty(0).Sum();
            var rsl = db.Installmenttabs.Single(i => i.newbondid == newbondid && i.installmentno == to);
            while (froms <= to)
            {
                Double latefine = 0;
                var sredr = db.Installmenttabs.Single(i => i.newbondid == newbondid && i.installmentno == froms);

                if (sredr.mode == "Monthly")
                {
                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddDays(15);
                    if (DateTime.Now.Date > pdate.Date)
                    {
                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                        int r = diff / 30;
                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                        //latefine = (sredr.amount * llr.latefine) / 100;
                        totallatefine = totallatefine + latefine;

                    }
                }
                else if (sredr.mode == "Quarterly")
                {
                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                    if (DateTime.Now.Date > pdate.Date)
                    {
                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                        int r = diff / 91;
                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                        //latefine = (sredr.amount * llr.latefine) / 100;
                        totallatefine = totallatefine + latefine;
                    }
                }
                else if (sredr.mode == "Halfyearly")
                {
                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                    if (DateTime.Now.Date > pdate.Date)
                    {
                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                        int r = diff / 182;
                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                        //latefine = (sredr.amount * llr.latefine) / 100;
                        totallatefine = totallatefine + latefine;
                    }
                }
                else if (sredr.mode == "Yearly")
                {
                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                    if (DateTime.Now.Date > pdate.Date)
                    {
                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                        int r = diff / 365;
                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                        //latefine = (sredr.amount * llr.latefine) / 100;
                        totallatefine = totallatefine + latefine;
                    }
                }
                froms = froms + 1;

            }

            Double amount = amountsum + totallatefine;
            NumberToEnglish nw = new NumberToEnglish();
            var amountinwords = nw.changeToWords(amount.ToString(), true);
            rrlist.Add(new ResetRenewel { expirydate = rsl.expirydate, latefine = totallatefine, payamount = amount, amountinwords = amountinwords });
            return Json(rrlist, JsonRequestBehavior.AllowGet);

        }

        public JsonResult chekrelief(Double relief, Double payamount, Double latefine)
        {

            string msg = string.Empty;
            int type = 0;
            List<CheckRelief> crlist = new List<CheckRelief>();
            if (relief > latefine)
            {
                relief = 0;
                msg = "Please,Enter relief less than or equal to latefine";
                type = 0;
            }
            else if (relief <= latefine)
            {
                msg = "OK";
                type = 1;
            }

            Double amount = payamount - relief;
            NumberToEnglish nw = new NumberToEnglish();
            var amountinwords = nw.changeToWords(amount.ToString(), true);
            crlist.Add(new CheckRelief { relief = relief, latefine = latefine, payamount = amount, amountinwords = amountinwords, msg = msg, type = type });
            return Json(crlist, JsonRequestBehavior.AllowGet);

        }

        public JsonResult selectdistrict(string state)
        {
            List<CityStateTab> ct = new List<CityStateTab>();
            ct = (from dcl in db.CityStateTabs where dcl.state == state orderby dcl.city select dcl).ToList();
            return Json(ct, JsonRequestBehavior.AllowGet);

        }

        public JsonResult SearchPension(string newbondid, string opid)
        {

            var msg = string.Empty;
            List<RenewalMsg> rmsg = new List<RenewalMsg>();
            List<RenewalDetails> rdmsg = new List<RenewalDetails>();
            var br = db.appltabs.Single(a => a.newbondid == newbondid);
            var rp = db.RPTabs.Single(r => r.Id == 1);
            var nlr = db.NewLogins.Single(n => n.UserName == opid);
            var branchcode = string.Empty;
            if (nlr.type == "Branch")
            {
                branchcode = opid;
            }
            else if (nlr.type == "Operator")
            {
                var opr = db.Operators.Single(o => o.OperatorId == opid);
                branchcode = opr.BranchCode;
            }
            if (br.branchcode != branchcode && rp.status == 0)
            {
                msg = "This Bond Does Not Exist in your Branch";
                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                return Json(rmsg, JsonRequestBehavior.AllowGet);
            }
            else
            {
                int count = (from p in db.Installmenttabs where p.newbondid == newbondid select p.newbondid).Count();
                var min = (from u in db.Installmenttabs where u.newbondid == newbondid && u.payamount == 0 select u.installmentno).Min();
                if (count != 0)
                {
                    if (br.mode == "Single")
                    {

                        msg = "Sorry,this is Single Installment Plan,Its pension is not available";
                        rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                        return Json(rmsg, JsonRequestBehavior.AllowGet);

                    }
                    else if (br.mode == "Monthly" || br.mode == "Quarterly" || br.mode == "Halfyearly" || br.mode == "Yearly")
                    {


                        if (min <= count && min != 0)
                        {

                            var rd = db.appltabs.Single(ap => ap.newbondid == newbondid);
                            rdmsg.Add(new RenewalDetails { newbondid = newbondid, name = rd.name, newintroducerid = rd.newintroducerid, previnstall = min - 1, mobileno = rd.mobileno, type = 1 }); ;
                            return Json(rdmsg, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {

                            msg = "Its payment are Over";
                            rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                            return Json(rmsg, JsonRequestBehavior.AllowGet);
                        }
                    }
                    return Json(rdmsg, JsonRequestBehavior.AllowGet);

                }
                else
                {

                    msg = "This agreement Does Not Exist in Intallment";
                    rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                    return Json(rmsg, JsonRequestBehavior.AllowGet);
                }
            }
        }

        public JsonResult Pensiondetail(string newbondid)
        {

            List<selectrenewaldetail> srlist = new List<selectrenewaldetail>();
            var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
            var min = (from u in db.Installmenttabs where u.newbondid == newbondid && u.payamount == 0 select u.installmentno).Min();
            var rsl = db.Installmenttabs.Single(i => i.newbondid == newbondid && i.installmentno == min);
            var count = (from u in db.Installmenttabs where u.newbondid == newbondid select u).Count();
            NumberToEnglish nw = new NumberToEnglish();
            var amountinwords = nw.changeToWords(rsl.amount.ToString(), true);
            int from = min;
            while (min <= count)
            {
                srlist.Add(new selectrenewaldetail { planname = rsl.planname, term = rsl.term_plan, mode = rsl.mode, prevexpirydate = rsl.prevexpirydate, expirydate = rsl.expirydate, from = from, installmentno = min, payamount = rsl.amount, amountinwords = amountinwords });
                min = min + 1;
            }
            return Json(srlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult sumamount(string newbondid, int froms, int to)
        {
            Double amountsum = 0;
            List<ResetRenewel> rrlist = new List<ResetRenewel>();
            var llr = db.TDSLF_tabs.Single(l => l.Id == 1);

            amountsum = (from u in db.Installmenttabs where u.newbondid == newbondid && u.installmentno >= froms && u.installmentno <= to select u.amount).DefaultIfEmpty(0).Sum();
            var rsl = db.Installmenttabs.Single(i => i.newbondid == newbondid && i.installmentno == to);

            NumberToEnglish nw = new NumberToEnglish();
            var amountinwords = nw.changeToWords(amountsum.ToString(), true);
            rrlist.Add(new ResetRenewel { expirydate = rsl.expirydate, payamount = amountsum, amountinwords = amountinwords });
            return Json(rrlist, JsonRequestBehavior.AllowGet);

        }

        public JsonResult CheckMaturity(string newbondid)
        {
            var mr = db.Members.Single(m => m.Id == 1);
            var msg = string.Empty;
            List<RenewalMsg> rmsg = new List<RenewalMsg>();
            List<MaturityDetails> rdmsg = new List<MaturityDetails>();
            int count = (from p in db.Installmenttabs where p.newbondid == newbondid select p.newbondid).Count();
            //  int count1 = (from p in db.DailyInstallments where p.newbondid == newbondid select p.newbondid).Count();
            if (count != 0)
            {
                Double amountsum = 0;
                var br = db.appltabs.Single(a => a.newbondid == newbondid);
                if (br.expirydate < DateTime.Now.Date)
                {

                    amountsum = (from u in db.Installmenttabs where u.newbondid == newbondid select u.payamount).DefaultIfEmpty(0).Sum();
                    if (amountsum >= br.totalcon)
                    {
                        rdmsg.Add(new MaturityDetails { newbondid = newbondid, name = br.name, newintroducerid = br.newintroducerid, totalcon = br.totalcon, mamount = br.expectedraisablevalue, type = 1 });
                    }
                    else
                    {
                        msg = "Total collection less than desire amount";
                        rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                        return Json(rmsg, JsonRequestBehavior.AllowGet);
                    }

                }
                else
                {
                    msg = "This " + mr.custname + " Does Not Expired till now";
                    rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                    return Json(rmsg, JsonRequestBehavior.AllowGet);
                }

                return Json(rdmsg, JsonRequestBehavior.AllowGet);

            }
            else
            {

                msg = "This " + mr.custname + " Does Not Exist in Intallment";
                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                return Json(rmsg, JsonRequestBehavior.AllowGet);
            }

        }

        public JsonResult CheckLapsMaturity(string newbondid)
        {
            var mr = db.Members.Single(m => m.Id == 1);
            var msg = string.Empty;
            List<RenewalMsg> rmsg = new List<RenewalMsg>();
            List<MaturityDetails> rdmsg = new List<MaturityDetails>();
            int count = (from p in db.Installmenttabs where p.newbondid == newbondid select p.newbondid).Count();
            //  int count1 = (from p in db.DailyInstallments where p.newbondid == newbondid select p.newbondid).Count();
            if (count != 0)
            {
                Double amountsum = 0;
                var br = db.appltabs.Single(a => a.newbondid == newbondid);
                if (br.expirydate < DateTime.Now.Date)
                {
                    amountsum = (from u in db.Installmenttabs where u.newbondid == newbondid select u.payamount).DefaultIfEmpty(0).Sum();
                    rdmsg.Add(new MaturityDetails { newbondid = newbondid, name = br.name, newintroducerid = br.newintroducerid, totalcon = br.totalcon, mamount = br.expectedraisablevalue, type = 1 });

                }
                else
                {
                    msg = "This " + mr.custname + " Does Not Expired till now";
                    rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                    return Json(rmsg, JsonRequestBehavior.AllowGet);
                }

                return Json(rdmsg, JsonRequestBehavior.AllowGet);

            }
            else
            {

                msg = "This " + mr.custname + " Does Not Exist in Intallment";
                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                return Json(rmsg, JsonRequestBehavior.AllowGet);
            }

        }

        public JsonResult CheckIncompleteMaturity(string newbondid)
        {
            var mr = db.Members.Single(m => m.Id == 1);
            var msg = string.Empty;
            List<RenewalMsg> rmsg = new List<RenewalMsg>();
            List<MaturityDetails> rdmsg = new List<MaturityDetails>();
            int count = (from p in db.Installmenttabs where p.newbondid == newbondid select p.newbondid).Count();
            //  int count1 = (from p in db.DailyInstallments where p.newbondid == newbondid select p.newbondid).Count();
            if (count != 0)
            {
                Double amountsum = 0;
                var br = db.appltabs.Single(a => a.newbondid == newbondid);


                amountsum = (from u in db.Installmenttabs where u.newbondid == newbondid select u.payamount).DefaultIfEmpty(0).Sum();
                rdmsg.Add(new MaturityDetails { newbondid = newbondid, name = br.name, newintroducerid = br.newintroducerid, totalcon = br.totalcon, mamount = br.expectedraisablevalue, type = 1 });


                return Json(rdmsg, JsonRequestBehavior.AllowGet);

            }
            else
            {

                msg = "This " + mr.custname + " Does Not Exist in Intallment";
                rmsg.Add(new RenewalMsg { newbondid = newbondid, msg = msg, type = 2 });
                return Json(rmsg, JsonRequestBehavior.AllowGet);
            }

        }

        public JsonResult SelectMaturity(string newbondid)
        {
            Double totaldeposit = 0, pendingamount = 0;
            List<CustomerDetails> cd = new List<CustomerDetails>();
            appltab br = db.appltabs.Single(a => a.newbondid == newbondid);

            totaldeposit = (from u in db.Installmenttabs where u.newbondid == newbondid && u.payamount != 0 select u.amount).DefaultIfEmpty(0).Sum();
            pendingamount = (from u in db.Installmenttabs where u.newbondid == newbondid && u.payamount == 0 select u.amount).DefaultIfEmpty(0).Sum();


            cd.Add(new CustomerDetails { newbondid = newbondid, totalcon = totaldeposit, pendingamount = pendingamount, extraamount = 0 });
            return Json(cd, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SelectIncompleteMaturity(string newbondid)
        {

            Double totaldeposit = 0, pendingamount = 0, commamount = 0;
            List<CustomerDetails> cd = new List<CustomerDetails>();
            appltab br = db.appltabs.Single(a => a.newbondid == newbondid);
            var comm = (from u in db.commission_tabs where u.newbondid == newbondid select u.commission).DefaultIfEmpty(0).Sum();
            commamount = Math.Round(comm, 2);
            var totald = (from u in db.Installmenttabs where u.newbondid == newbondid && u.payamount != 0 select u.amount).DefaultIfEmpty(0).Sum();
            totaldeposit = Math.Round(totald, 2);
            pendingamount = totaldeposit - commamount;


            cd.Add(new CustomerDetails { newbondid = newbondid, totalcon = totaldeposit, commamount = commamount, pendingamount = pendingamount, extraamount = 0 });
            return Json(cd, JsonRequestBehavior.AllowGet);
        }

        public JsonResult SetMaturity(Double totalcon, Double commamount, Double pendingamount, Double extraamount)
        {
            List<CustomerDetails> cd = new List<CustomerDetails>();
            Double maturityamount = totalcon - (commamount + extraamount);
            cd.Add(new CustomerDetails { totalcon = totalcon, commamount = commamount, pendingamount = maturityamount, extraamount = extraamount });
            return Json(cd, JsonRequestBehavior.AllowGet);

        }

        #endregion

        #region Menu Start Here

        [HttpGet]
        public ActionResult Index()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["msg"] = TempData["msg"];
                var aa = ViewData["msg"];
                if (ViewData["msg"] != null)
                {
                    Response.Write("<script>alert('" + aa + "')</script>");
                }
                //--------Tol fill refno in agentdetails tab automatic
                //var list =db.Installmenttabs.Where(a=>a.payamount>0).ToList();
                //foreach (var i in list)
                //{
                //    var up = db.Installmenttabs.Single(a => a.newbondid == i.newbondid && a.installmentno==i.installmentno);
                //    var amt = (up.amount+(up.latefine-up.reliefrs));
                //    NumberToEnglish nw = new NumberToEnglish();
                //    var amountinwords = nw.changeToWords(amt.ToString(), true);
                //    up.amountinword = amountinwords;
                //    db.Entry(up).State = EntityState.Modified;
                //    db.SaveChanges();

                //}
                return View();
            }
        }

        [HttpGet]
        public ActionResult CreateMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult PaymentMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        public ActionResult PassBookMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        //public ActionResult Print()
        //{
        //    if (!IsLoggedIn())
        //    {
        //        return RedirectToAction("Logout", "Branch");
        //    }
        //    else
        //    {
        //        return View();
        //    }
        //}
        [HttpGet]
        public ActionResult DuplicateMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Voucher()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult UpdateMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult MaturityMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult FieldReportsMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult OfficialReportsMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult SearchMenu()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult Setting()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        #endregion

        #region Create Menu Start Here

        [HttpGet]
        public ActionResult SetFormdate()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {

                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        [HttpPost]
        public ActionResult SetFormdate(string opid, string date, string command, string type)
        {
            System.Threading.Thread.Sleep(3000);
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                if (opid == "Select")
                {
                    Response.Write("<script>alert('Please Select Id')</script>");
                }
                else
                {
                    if (command == "Activate")
                    {

                        if (type == "Select")
                        {
                            Response.Write("<script>alert('Please Select Date Type')</script>");
                        }
                        else
                        {
                            DateTime dt = DateTime.Parse(date, new CultureInfo("en-CA"));
                            string cdmm = dt.ToString("dd/MM/yyyy");
                            DateTime newdate = DateTime.Parse(cdmm, new CultureInfo("en-CA"));
                            if (opid == "All")
                            {
                                var count = db.Formdates.Where(c => c.branchcode == User.Identity.Name).Count();
                                if (count == 0)
                                {
                                    var dmm = db.Operators.Where(c => c.Status == 1).ToList();
                                    foreach (var item in dmm)
                                    {
                                        Formdate dd = new Formdate();
                                        if (type == "1")
                                        {
                                            dd.status = 1;
                                            ViewBag.msg = "Back Date Entry Activate .";
                                        }
                                        else if (type == "2")
                                        {
                                            dd.status = 2;
                                            ViewBag.msg = "Fix Date Entry Activate .";
                                        }

                                        dd.opid = item.OperatorId;
                                        dd.formdate = newdate;

                                        dd.branchcode = User.Identity.Name;
                                        db.Formdates.Add(dd);
                                        db.SaveChanges();
                                    }

                                }
                                else
                                {
                                    var dd = db.Formdates.Where(c => c.branchcode == User.Identity.Name).ToList();
                                    var dmm = db.Operators.Where(c => c.Status == 1).ToList();
                                    foreach (var itemm in dd)
                                    {
                                        itemm.formdate = newdate;
                                        itemm.branchcode = User.Identity.Name;
                                        if (type == "1")
                                        {
                                            itemm.status = 1;
                                            ViewBag.msg = "Back Date Entry Activate .";
                                        }
                                        else if (type == "2")
                                        {
                                            itemm.status = 2;
                                            ViewBag.msg = "Fix Date Entry Activate .";
                                        }

                                        db.SaveChanges();

                                    }

                                }
                            }
                            else
                            {

                                var count = db.Formdates.Where(c => c.branchcode == User.Identity.Name && c.opid == opid).Count();
                                if (count == 0)
                                {
                                    Formdate dd = new Formdate();
                                    if (type == "1")
                                    {
                                        dd.status = 1;
                                        ViewBag.msg = "Back Date Entry Activate .";
                                    }
                                    else if (type == "2")
                                    {
                                        dd.status = 2;
                                        ViewBag.msg = "Fix Date Entry Activate .";
                                    }

                                    dd.opid = opid;
                                    dd.formdate = newdate;

                                    dd.branchcode = User.Identity.Name;
                                    db.Formdates.Add(dd);
                                    db.SaveChanges();

                                }
                                else
                                {
                                    Formdate dd = db.Formdates.Single(c => c.opid == opid && c.branchcode == User.Identity.Name);
                                    dd.opid = opid;
                                    dd.formdate = newdate;
                                    dd.branchcode = User.Identity.Name;
                                    if (type == "1")
                                    {
                                        dd.status = 1;
                                        ViewBag.msg = "Back Date Entry Activate .";
                                    }
                                    else if (type == "2")
                                    {
                                        dd.status = 2;
                                        ViewBag.msg = "Fix Date Entry Activate .";
                                    }
                                    //db.Entry(dd).State = EntityState.Modified;
                                    db.Entry<Formdate>(dd).State = System.Data.Entity.EntityState.Modified;
                                    db.SaveChanges();

                                }
                            }
                        }
                    }
                    else if (command == "Deactivate")
                    {
                        if (opid == "All")
                        {
                            var count = db.Formdates.Where(c => c.branchcode == User.Identity.Name).Count();
                            if (count == 0)
                            {
                                var dmm = db.Operators.Where(c => c.Status == 1).ToList();
                                foreach (var item in dmm)
                                {
                                    Formdate dd = new Formdate();
                                    dd.opid = item.OperatorId;
                                    dd.formdate = DateTime.Now;
                                    dd.status = 0;
                                    dd.branchcode = User.Identity.Name;
                                    db.Formdates.Add(dd);
                                    db.SaveChanges();
                                    ViewBag.msg = "Back Date Entry Deactivate .";
                                }
                                ViewBag.msg = "Back Date Entry Deactivate .";
                            }
                            else
                            {

                                var dd = db.Formdates.Where(c => c.branchcode == User.Identity.Name).ToList();
                                var dmm = db.Operators.Where(c => c.Status == 1).ToList();
                                foreach (var item in dd)
                                {
                                    item.formdate = DateTime.Now;
                                    item.branchcode = User.Identity.Name;
                                    item.status = 0;

                                    db.SaveChanges();
                                }
                                ViewBag.msg = "Back Date Entry Deactivate .";
                            }

                        }
                        else
                        {
                            var count = db.Formdates.Where(c => c.opid == opid && c.branchcode == User.Identity.Name).Count();
                            if (count == 0)
                            {
                                Formdate dd = new Formdate();
                                dd.opid = opid;
                                dd.formdate = DateTime.Now;
                                dd.status = 0;
                                dd.branchcode = User.Identity.Name;
                                db.Formdates.Add(dd);
                                db.SaveChanges();
                                ViewBag.msg = "Back Date Entry Deactivate .";
                            }
                            else
                            {
                                Formdate dd = db.Formdates.Single(c => c.opid == opid && c.branchcode == User.Identity.Name);
                                dd.opid = opid;
                                dd.formdate = DateTime.Now;
                                dd.branchcode = User.Identity.Name;
                                dd.status = 0;
                                //db.Entry(dd).State = EntityState.Modified;
                                db.Entry<Formdate>(dd).State = System.Data.Entity.EntityState.Modified;
                                db.SaveChanges();
                                ViewBag.msg = "Back Date Entry Deactivate .";
                            }
                        }
                    }
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult blockdate()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["customer"] = "";
                return View();
            }
        }
        [HttpPost]
        public ActionResult blockdate(string command, string sdate, Blockdate model)
        {
            System.Threading.Thread.Sleep(2000);
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                DateTime pdate = Convert.ToDateTime(sdate);
                switch (command)
                {
                    case "Search":

                        var aa = db.Blockdates.Where(c => c.date == pdate).Count();
                        if (aa > 0)
                        {
                            Response.Write("<script>alert('This Date is already closed...')</script>");
                            ViewData["customer"] = "";
                        }
                        else
                        {
                            var Renewal = (from o in db.Installmenttabs where o.paymentdate == pdate && o.branch == User.Identity.Name && o.installmentno != 1 select o.payamount).DefaultIfEmpty(0).Sum();
                            var Payment = (from o in db.Expenses where o.date_time == pdate && o.branchcode == User.Identity.Name && o.type == 0 select o.amount).DefaultIfEmpty(0).Sum();
                            var received = (from o in db.Expenses where o.date_time == pdate && o.branchcode == User.Identity.Name && o.type == 1 select o.amount).DefaultIfEmpty(0).Sum();
                            var customer = (from o in db.appltabs where o.pdate == pdate && o.branchcode == User.Identity.Name select o.payment).DefaultIfEmpty(0).Sum();
                            var member = (from o in db.Member_tabs where o.Cdate == pdate && o.BranchCode == User.Identity.Name select o.Fee).DefaultIfEmpty(0).Sum();
                            var custfee = (from o in db.appltabs where o.pdate == pdate && o.branchcode == User.Identity.Name select o.applicationcharge).DefaultIfEmpty(0).Sum();
                            var agentfee = (from o in db.AgentDetails where o.Doj == pdate && o.BranchCode == User.Identity.Name select o.formfee).DefaultIfEmpty(0).Sum();
                            //var bankentry = (from o in db.Bankentrys where o.date == pdate && o.branchcode == User.Identity.Name select o.Amount).DefaultIfEmpty(0).Sum();

                            ViewData["Payment"] = Payment;
                            ViewData["Fresh"] = customer;
                            ViewData["Renewal"] = Renewal;
                            ViewData["received"] = received;
                            ViewData["member"] = member;
                            //ViewData["bankentry"] = bankentry;
                            ViewData["pdate"] = pdate;
                            ViewData["custfee"] = custfee;
                            ViewData["agentfee"] = agentfee;
                        }

                        break;

                    case "Submit":

                        Blockdate bt = new Blockdate();
                        bt.Fresh = model.Fresh;
                        bt.Renewal = model.Renewal;
                        bt.Payment = model.Payment;
                        bt.received = model.received;
                        bt.bankentry = 0;
                        bt.member = model.member;
                        bt.agentfee = model.agentfee;
                        bt.custfee = model.custfee;
                        bt.date = model.date;
                        bt.status = 0;
                        bt.branchcode = User.Identity.Name;
                        db.Blockdates.Add(bt);
                        db.SaveChanges();
                        var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                        var totalcoll = (model.Fresh + model.Renewal - model.Payment + model.received + model.member + model.agentfee + model.custfee);
                        Response.Write("<script>alert('Date Closed Successfully...')</script>");
                        MyClass.Sendmsg("9198464416", "Dated: " + model.date.ToString("dd/MM/yyyy" + " of Branch:" + br.BranchName + " Closed Successfully with Collection Rs. " + totalcoll));
                        ViewData["customer"] = "";
                        break;


                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult CreateOperator()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult CreateOperator(Operator model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var row = (from ob in db.Operators where ob.OperatorId == model.OperatorId select ob).ToList();
                if (row.Count > 0)
                {
                    ViewBag.msg = "This Operator already exists";
                }
                else
                {


                    string pass = gid();
                    var ci = db.CompanyInfos.Single(c => c.Id == 1);
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "createoperator";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;
                    cmd.Parameters.AddWithValue("@opid", model.OperatorId);
                    cmd.Parameters.AddWithValue("@opname", model.OperatorName);
                    cmd.Parameters.AddWithValue("@opmobileno", model.OperatorMobile);
                    cmd.Parameters.AddWithValue("@opaddress", model.OperatorAddress);
                    cmd.Parameters.AddWithValue("@opemailid", model.Operator_Mail);
                    cmd.Parameters.AddWithValue("@BranchCode", model.BranchCode);
                    cmd.Parameters.AddWithValue("@pass", pass);
                    cmd.Parameters.AddWithValue("@date", model.Cdate);

                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                        MyClass.Sendmsg(model.OperatorMobile, "Dear " + model.OperatorName + " Welcome to joining " + ci.CompanyName + ", your UserId is " + model.OperatorId + " and Password: " + pass + " Please Visit "+cg.HeadOffice);
                        ViewBag.msg = "Operator Created Successfully....";
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult Member()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
               
                return View();
            }
        }
        [HttpPost]
        public ActionResult Member(Member_tab model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var ds = db.Blockdates.Where(c => c.date == model.Cdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
                if (ds > 0)
                {
                    Response.Write("<script>alert('This Date is closed please select another date')</script>");
                }
                else
                {
                    var row1 = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);
                    var csrt = db.CompanyInfos.Single(a => a.AdminId == row1.companyid);
                    int max = 0;
                    int count = (from a in db.Member_tabs select a.MemberId).Count();
                    if (count == 0)
                    {
                        max = 1;
                    }
                    else
                    {
                        max = count + 1;
                    }

                    int bwcount = (from a in db.Member_tabs where a.BranchCode == row1.BranchCode select a).Count();
                    var newmemberid = row1.prefix + row1.BranchCode + "/M0" + (bwcount + 1);

                    var Duplicate = (from o in db.Member_tabs where o.MemberName == model.MemberName && o.Father == model.Father select o).ToList();

                    if (Duplicate.Count > 0)
                    {
                        Response.Write("<script>alert('This Member Already exist ')</script>");
                    }


                    else
                    {
                        //var r = new Member_tab();
                        model.MemberId = max;//
                        model.NewMemberId = newmemberid;//
                        model.BranchCode = User.Identity.Name;//
                        model.Opid = User.Identity.Name;//
                        db.Member_tabs.Add(model);
                        db.SaveChanges();
                        ViewBag.msg = "Member Created Successfully Your Member Id is " + newmemberid + " ....";
                    }
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult CreateAccount()
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(mt);
            }
        }
        [HttpPost]
        public ActionResult CreateAccount(SavingAccountInfo model, HttpPostedFileBase photo, HttpPostedFileBase idproof, HttpPostedFileBase sign, string command, string memberid, Double openingamount = 0)
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {


                switch (command)
                {
                    case "Search":

                        switch (memberid)
                        {
                            case "":
                                Response.Write("<script>alert('Please Select Member Id First')</script>");
                                break;
                            default:

                                mt = db.Member_tabs.Where(c => c.NewMemberId == memberid).ToList();
                                return View(mt);
                        }

                        break;

                    case "Submit":


                        var count = (from c in db.SavingAccountInfos where c.newmemberid == model.newmemberid select c).Count();
                        if (count == 0)
                        {
                            var r = new SavingAccountInfo();
                            var row1 = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);
                            var csrt = db.CompanyInfos.Single(a => a.AdminId == row1.companyid);

                            var count2 = db.SavingAccountInfos.Where(s => s.branchcode == row1.BranchCode).Count();

                            var aa = "S" + System.DateTime.Now.Year.ToString() + row1.BranchCode + "00" + Convert.ToInt32(count2 + 1);
                            SavingAccountInfo ad = new SavingAccountInfo();

                            ad.formfee = model.formfee;
                            ad.branchcode = User.Identity.Name;
                            ad.accountno = aa;
                            ad.actype = model.actype;
                            ad.acholdername = model.acholdername;
                            ad.fathername = model.fathername;
                            ad.address = model.address;
                            ad.mobileno = model.mobileno;
                            ad.emailid = model.emailid;
                            ad.gender = model.gender;
                            ad.newmemberid = model.newmemberid;
                            ad.dob = model.dob;
                            ad.Doj = model.Doj;
                            ad.bloodgroup = model.bloodgroup;
                            ad.occupation = model.occupation;
                            ad.education = model.education;

                            ad.annualincome = model.annualincome;
                            ad.panno = model.panno;
                            ad.ifsccode = model.ifsccode;
                            ad.bankname = model.bankname;
                            ad.bankaddress = model.bankaddress;

                            ad.guardianname = model.guardianname;
                            ad.gurage = model.gurage;
                            ad.gurrel = model.gurrel;
                            ad.guraddr = model.guraddr;


                            ad.nomineename = model.nomineename;
                            ad.nomage = model.nomage;
                            ad.nomrel = model.nomrel;
                            ad.nomaddr = model.nomaddr;



                            if (photo != null)
                            {
                                string imgname = gid();
                                ad.photo = "~/Photo/" + imgname + ".jpg";
                                photo.SaveAs(HttpContext.Server.MapPath("~/Photo/") + imgname + ".jpg");

                            }
                            else
                            {
                                ad.photo = "~/Photo/default.jpg";

                            }

                            if (idproof != null)
                            {
                                string imgname = gid();
                                ad.idproof = "~/Photo/" + imgname + ".jpg";
                                idproof.SaveAs(HttpContext.Server.MapPath("~/Photo/") + imgname + ".jpg");

                            }
                            else
                            {
                                ad.idproof = "~/Photo/default.jpg";

                            }

                            if (sign != null)
                            {
                                string imgname = gid();
                                ad.sign = "~/Photo/" + imgname + ".jpg";
                                sign.SaveAs(HttpContext.Server.MapPath("~/Photo/") + imgname + ".jpg");

                            }
                            else
                            {
                                ad.sign = "~/Photo/default.jpg";

                            }

                            ad.opid = User.Identity.Name;
                            ad.status = 1;
                            ad.Time = DateTime.Now.ToShortTimeString();

                            string trid = gid();
                            TransactionTab td = new TransactionTab();
                            var j = db.TransactionTabs.Where(s => s.accountno == aa).Count();
                            td.transactionid = trid;
                            td.branchcode = row1.BranchCode;
                            td.accountno = aa;
                            td.actype = model.actype;
                            td.acholdername = model.acholdername;
                            td.paymethod = "CASH";
                            td.pdate = model.Doj;
                            td.credit = openingamount;
                            td.debit = 0;
                            td.balance = openingamount;
                            td.remark = "OPEN";
                            td.opid = User.Identity.Name;
                            td.status = (j + 1);
                            td.type = "Credit";
                            td.Time = DateTime.Now.ToShortTimeString();

                            db.TransactionTabs.Add(td);
                            db.SavingAccountInfos.Add(ad);
                            db.SaveChanges();
                            MyClass.Sendmsg(model.mobileno, "Dear " + model.acholdername + ", Your A/c no. " + aa + " credited with INR " + openingamount + " is successfully in " + csrt.CompanyName + " Visit us "+cg.HeadOffice);
                            if (model.mobileno2 != "" || model.mobileno2 != null)
                            {
                                MyClass.Sendmsg(model.mobileno2, "Dear " + model.acholdername2 + ", Your A/c no. " + aa + " credited with INR " + openingamount + " is successfully in " + csrt.CompanyName + " Visit us "+cg.HeadOffice);
                            }
                            ViewBag.msg = "Dear " + model.acholdername + ", Your A/c has been created successfully in " + csrt.CompanyName + ", your A/c no: " + aa;
                        }
                        else
                        {
                            Response.Write("<script>alert('Sorry,Your A/c already created')</script>");
                        }
                        break;
                }
            }
            return View(mt);
        }

        [HttpGet]
        public ActionResult CreateBroker()
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                return View(mt);
            }
        }
        [HttpPost]
        public ActionResult CreateBroker(AgentDetail model, HttpPostedFileBase Photo, string command, string memberid)
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {


                switch (command)
                {
                    case "Search":

                        switch (memberid)
                        {
                            case "":
                                Response.Write("<script>alert('Please Select Member Id First')</script>");
                                break;
                            default:

                                mt = db.Member_tabs.Where(c => c.NewMemberId == memberid).ToList();
                                return View(mt);
                        }

                        break;

                    case "Submit":
                        var ds = db.Blockdates.Where(c => c.date == model.Doj && c.branchcode == User.Identity.Name && c.status == 0).Count();
                        if (ds > 0)
                        {
                            Response.Write("<script>alert('This Date is closed please select another date')</script>");
                        }
                        else
                        {
                            string localIP = "";
                            foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                            {
                                if (nic.OperationalStatus == OperationalStatus.Up)
                                {
                                    localIP += nic.GetPhysicalAddress().ToString();
                                    break;
                                }
                            }

                            var Duplicate = (from o in db.AgentDetails where o.newmemberid == model.newmemberid select o).ToList();
                            if (Duplicate.Count > 0)
                            {
                                Response.Write("<script>alert('This Member already exist as a Broker')</script>");
                            }
                            else
                            {
                                string passw = gid();
                                var r = new AgentDetail();
                                var row1 = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);
                                var csrt = db.CompanyInfos.Single(a => a.AdminId == row1.companyid);
                                int max = (from a in db.AgentDetails select a).Count();
                                int bwcount = (from a in db.AgentDetails where a.BranchCode == User.Identity.Name select a).Count();
                                var row = db.Ranktabs.Single(c => c.RankCode == model.RankCode);
                                var newagentid = row1.prefix + "-" + row1.BranchCode + "/A0" + (bwcount + 1);
                                int bcnt = bwcount;
                                var mrow = db.Member_tabs.Single(p => p.NewMemberId == model.newmemberid);

                                if (max > 0)
                                {
                                    r = db.AgentDetails.Single(c => c.NewAgentId == model.NewIntroducerId);
                                }

                                TimeSpan span = model.Doj.Subtract(model.Dob);
                                int years = (int)(span.Days / 365.25);
                                int remainder = (int)(span.Days % 365.25);
                                int months = remainder / 30;
                                if (months >= 12)
                                {
                                    int y = months / 12;
                                    int m = months % 12;
                                    months = m;
                                    years = years + y; 
                                }
                                int days = remainder % 30;
                                var age = years + " years " + months + " months " + days + " days";
                             
                                AgentDetail ad = new AgentDetail();

                                ad.formfee = model.formfee;
                                ad.BranchCode = model.BranchCode;
                                ad.name = model.name;
                                ad.Father = model.Father;
                                ad.Mother = model.Mother;
                                ad.Gender = model.Gender;
                                ad.NewAgentId = newagentid;
                                if (max > 0)
                                {
                                    ad.IntroducerCode = r.AgencyCode;
                                }
                                else
                                {
                                    ad.IntroducerCode = max;
                                }
                                ad.NewIntroducerId = model.NewIntroducerId;
                                ad.IntroName = model.IntroName;
                                ad.RankCode = model.RankCode;
                                ad.Nationality = model.Nationality;
                                ad.Dob = model.Dob;
                                ad.Age = age;
                                ad.BloodGroup = model.BloodGroup;
                                ad.Occupation = model.Occupation;
                                ad.Qualification = model.Qualification;
                                ad.Panno = model.Panno;
                                ad.Passportno = model.Passportno;
                                ad.Drivinglno = model.Drivinglno;
                                ad.Icardno = model.Icardno;
                                ad.Issueon = model.Doj;
                                ad.Validupto = model.Doj.AddYears(1);
                                ad.BankName = model.BankName;
                                ad.BankAccountno = model.BankAccountno;
                                ad.IFCCode = model.IFCCode;
                                ad.BankAddress = model.BankAddress;
                                ad.Address = model.Address;
                                ad.District = model.District;
                                ad.State = model.State;
                                ad.PinCode = model.PinCode;
                                ad.Landlineno = model.Landlineno;
                                ad.Mobile = model.Mobile;
                                ad.Email = model.Email;
                                ad.NomineeName = model.NomineeName;
                                ad.NomineeAge = model.NomineeAge;
                                ad.NomineeAddress = model.NomineeAddress;
                                ad.Organization = model.Organization;
                                ad.Doj = model.Doj;
                                ad.areaofoccupation = model.areaofoccupation;
                                ad.approximatenoofactive = model.approximatenoofactive;
                                ad.operatorid = User.Identity.Name;
                                ad.Company = model.Company;
                                ad.Yoe = model.Yoe;
                                ad.Mobileno = model.Mobileno;
                                ad.cmpnyaddress = model.cmpnyaddress;
                                ad.Experience = model.Experience;
                                ad.Password = passw;
                                ad.RankName = row.RankName;
                            
                                ad.newmemberid = model.newmemberid;
                                ad.memberid = mrow.MemberId;
                                var ro = db.Member_tabs.Single(ui => ui.NewMemberId == model.newmemberid);
                                ad.memberid = ro.MemberId;
                                if (Photo != null)
                                {
                                    string imgname = gid();
                                    ad.Photo = "~/Photo/" + imgname + ".jpg";
                                    Photo.SaveAs(HttpContext.Server.MapPath("~/Photo/") + imgname + ".jpg");


                                }
                                else
                                {
                                    ad.Photo = "~/Photo/default.jpg";

                                }
                                ad.Type = "Agent";
                                ad.Status = 1;
                                ad.Macaddress = localIP;
                                ad.Time = DateTime.Now.ToShortTimeString();
                                /**/
                                ad.BankBranchName = "N/A";
                                ad.OtherMobile = 0;

                                ad.Aadhaar_No = "N/A";
                                ad.Aadhaar_ReqDate = Convert.ToDateTime("1991-01-01");
                                ad.Aadhaar_status = 0;
                                ad.Aadhaar_AppDate = Convert.ToDateTime("1991-01-01");
                                ad.PAN_AppDate = Convert.ToDateTime("1991-01-01");
                                ad.PAN_ReqDate = Convert.ToDateTime("1991-01-01");
                                ad.PanStatus = 0;
                                var csr = gidref();
                                int year = DateTime.Now.Year, syear = year + 1;
                                string refyear = year.ToString().Substring(2, 2) + "-" + syear.ToString().Substring(2, 2);
                                string refno = "ODH/WEL/" + refyear + "/" + csr;
                                ad.refno = refno;
                                /**/
                                NewLogin nl = new NewLogin();
                                nl.UserName = newagentid;
                                nl.Password = passw;
                                nl.Mobile = model.Mobile;
                                nl.type = "Agent";
                                nl.status = 1;
                                nl.loginstatus = 0;
                                db.NewLogins.Add(nl);
                                db.AgentDetails.Add(ad);
                                db.SaveChanges();
                                var cr = db.CompanyInfos.Single(d => d.Id == 1);
                                //MyClass.Sendmsg(model.Mobile, "Dear " + model.name + " Thank you for Being a part of " + cr.CompanyName+" . Regards- " + cr.CompanyName + ".");
                                MyClass.Sendmsg(model.Mobile, "Dear " + ad.name + ",Thank you for Being a part of " + cr.CompanyName + " Login on " + cr.HeadOffice + " with your user ID as " + nl.UserName + " and password is " + nl.Password + ". Use " + nl.UserName + " as referral ID. Regards- " + cr.CompanyName + ".");
                                var memag = db.Members.Single(agm => agm.Id == 1);
                                Response.Write("<script>alert('" + memag.agentname + " SuccessFully Created Your Id is " + newagentid + " ')</script>");
                                ViewBag.msg = "" + memag.agentname + " SuccessFully Created Your Id is " + newagentid + " ";
                            
                            }
                        }
                        break;
                }

            }
            return View(mt);
        }

        [HttpGet]
        public ActionResult Bond()
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(mt);
            }
        }
        [HttpPost]
        public ActionResult Bond(appltab bd, tempappltab tbd, HttpPostedFileBase photo, HttpPostedFileBase Chequeimage, HttpPostedFileBase spanphoto, HttpPostedFileBase sphoto, HttpPostedFileBase saadharphoto, string command, string memberid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string sdob="", string dob="", string sanniversarydate="")
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                switch (command)
                {
                    case "Search":

                        switch (memberid)
                        {
                            case "":
                                Response.Write("<script>alert('Please Select Contributor Id First')</script>");
                                break;
                            default:

                                mt = db.Member_tabs.Where(c => c.NewMemberId == memberid).ToList();
                                return View(mt);
                        }
                        break;

                    case "Submit":
                        var ds = db.Blockdates.Where(c => c.date == bd.formdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
                        if (ds > 0)
                        {
                            Response.Write("<script>alert('This Date is closed please select another date')</script>");
                        }
                        else
                        {
                            string localIP = "";
                            foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                            {
                                if (nic.OperationalStatus == OperationalStatus.Up)
                                {
                                    localIP += nic.GetPhysicalAddress().ToString();
                                    break;
                                }
                            }
                            
                            var phr = db.PhaseTabs.FirstOrDefault(c => c.Id == bd.phaseid);
                            var pt = db.Plans.Single(c => c.Plancode == bd.projectid);
                            var mr = db.Members.Single(m => m.Id == 1);
                            var br = db.Branchtabs.Single(bc => bc.BranchCode == bd.branchcode);
                            var cr = db.CompanyInfos.Single(csn => csn.AdminId == br.companyid);
                            int max = (from a in db.appltabs select a).Count();
                            var bondid = max + 1;
                            string dd = DateTime.Now.Date.Month.ToString("00");

                            int yr = DateTime.Now.Date.Year;
                            var newbondid = br.prefix + bd.branchcode + "/C0" + bondid;
                            //var newbondid = br.prefix + bd.branchcode + "/C0" + dd + bondid.ToString().Substring(0, 2) + DateTime.Now.Date.Day.ToString("00") + bondid.ToString().Substring(2) + yr.ToString().Substring(2);
                            var adr = db.AgentDetails.Single(ad => ad.NewAgentId == bd.newintroducerid);
                            
                            ProTerm pr = new ProTerm();
                            
                            pr = db.ProTerms.Single(p => p.projectid == bd.projectid && p.term == bd.term);
                            
                            if (bd.paymenttype == "FULL") { bd.bookingamount = bd.totalcon; }
                            TimeSpan span = bd.formdate.Subtract(bd.dob);
                            int years = (int)(span.Days / 365.25);
                            int remainder = (int)(span.Days % 365.25);
                            int months = remainder / 30;
                            if (months >= 12)
                            {
                                int y = months / 12;
                                int m = months % 12;
                                months = m;
                                years = years + y;
                            }
                            int days = remainder % 30;
                            var age = years + " years " + months + " months " + days + " days";

                            var row = db.Member_tabs.Single(ui => ui.NewMemberId == bd.newmemberid);

                            #region APPLTAB
                            if (bd.paymethod != "Cheque" && bd.paymethod != "banktransaction" && bd.discountper == 0)
                            {

                                bd.bondid = bondid;//
                                bd.newbondid = newbondid;//

                                bd.introducerid = adr.AgencyCode;//
                                bd.intrankcode = adr.RankCode;//
                                bd.intrankname = adr.RankName;//
                             
                                bd.age = age;//
                              
                                bd.memberid = row.MemberId;//
                               

                                if (photo != null)
                                {
                                    string imgname = gid();
                                    bd.photo = "~/Photo/" + imgname + ".jpg";
                                    photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                }
                                else
                                {
                                    bd.photo = "~/Photo/default.jpg";

                                }

                                bd.plantype = "RD";
                                bd.planname = pt.shortcutname;//
                                bd.plancode = pr.Id;//
                                bd.bonusper = 0;//
                               
                               
                                bd.pdate = bd.formdate;                               
                                bd.opid = User.Identity.Name;//
                                bd.status = 1;//

                                bd.type = "Customer";//
                                bd.Macaddress = localIP;//

                                bd.downpayment = 0;//
                                bd.Time = DateTime.Now.ToShortTimeString();//

                                bd.printstatus = 0;//
                                bd.phaseid = bd.phaseid;
                                bd.phase = phr == null ? "NA" : phr.Phase;

                                bd.Chequedate = bd.pdate;
                                bd.transactiontype = "NA";//
                                if (Chequeimage != null)
                                {
                                    string imgname = gid();
                                    bd.Chequeimage = "~/Photo/" + imgname + ".jpg";
                                    Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                }
                                else
                                {
                                    bd.Chequeimage = "~/Photo/default.jpg";
                                }
                                bd.chequeappdate = bd.pdate;

                                bd.Aadhaar_No = "N/A";//
                                bd.Aadhaar_ReqDate = Convert.ToDateTime("1991-01-01");//
                                bd.Aadhaar_status = 0;//
                                bd.Aadhaar_AppDate = Convert.ToDateTime("1991-01-01");//
                                bd.PAN_AppDate = Convert.ToDateTime("1991-01-01");//
                                bd.PAN_ReqDate = Convert.ToDateTime("1991-01-01");//
                                bd.PanStatus = 0;//
                                if (sphoto != null) {
                                    bd.sphoto = GenerateImageTag(sphoto);
                                }
                                if (spanphoto != null)
                                {
                                    bd.spanphoto = GenerateImageTag(spanphoto);
                                }
                                if (saadharphoto != null)
                                {
                                    bd.saadharphoto = GenerateImageTag(saadharphoto);
                                }
                                //date section
                                
                                bd.dob = GetCleanDate(dob);
                               // bd.sanniversarydate = GetCleanDate(sanniversarydate);
                               // bd.sdob = GetCleanDate(sdob);
                                //
                                int propertyid = 0, count = 0; string loanid = ""; Int64 om = 0;
                                if (bd.mobileno != null && Int64.TryParse(bd.mobileno,out om))
                                {
                                    propertyid = Convert.ToInt32(bd.mobileno.Substring(bd.mobileno.Length - 4));
                                    count = db.appltabs.Count(d => d.propertyid == propertyid);
                                    while (count > 0)
                                    {
                                        propertyid = Convert.ToInt32(gid().Substring(0, 4));
                                        count = db.appltabs.Count(d => d.propertyid == propertyid);
                                    }
                                    if (bd.paymenttype == "EMI")
                                    {
                                        loanid = bd.mobileno + "0";
                                        count = db.appltabs.Count(d => d.loanid == loanid);
                                        while (count > 0)
                                        {
                                            loanid = gid() + "A";
                                            count = db.appltabs.Count(d => d.propertyid == propertyid);
                                        }
                                    }
                                }
                                else
                                {
                                    propertyid = Convert.ToInt32(bd.mobileno.Substring(bd.mobileno.Length - 4));
                                    count = db.appltabs.Count(d => d.propertyid == propertyid);
                                    while (count > 0)
                                    {
                                        propertyid = Convert.ToInt32(gid().Substring(0, 4));
                                        count = db.appltabs.Count(d => d.propertyid == propertyid);
                                    }
                                    if (bd.paymenttype == "EMI")
                                    {
                                        loanid = loanid = gid()+"A";
                                       
                                    }
                                }
                                //set propertyid
                                bd.propertyid = propertyid;
                                bd.loanid = loanid;
                                /*---------------------------------ref no----------------**/
                                //count = 0;
                                //count = db.appltabs.Count();
                                //string csr = "";
                                //if (count == 0) { csr = "001"; }
                                //else
                                //{
                                //    count = count + 1;
                                //    if (count < 10)
                                //    {
                                //        csr = "00" + count;
                                //    }
                                //    else if (count >= 10 && count < 100)
                                //    {
                                //        csr = "0" + count;
                                //    }
                                //    else if (count >= 100)
                                //    {
                                //        csr = count.ToString();
                                //    }
                                //}
                                var csr = gidref();

                                int year = DateTime.Now.Year, syear = year + 1;
                                string refyear = year.ToString().Substring(2, 2) + "-" + syear.ToString().Substring(2, 2);
                                string refno = "ODH HOMES/" + refyear + "/" + csr;
                                //                                
                                bd.refno = refno;

                                db.appltabs.Add(bd);
                                db.SaveChanges();

                                RevivalTab rt = new RevivalTab();
                                rt.newbondid = newbondid;
                                rt.status = 1;
                                db.RevivalTabs.Add(rt);
                                db.SaveChanges();

                                NewLogin nl = new NewLogin();
                                nl.UserName = newbondid;
                                nl.Password = bd.mobileno;
                                nl.Mobile = bd.mobileno;
                                nl.type = "Customer";
                                nl.status = 1;
                                nl.loginstatus = 0;
                                db.NewLogins.Add(nl);
                                db.SaveChanges();

                                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                                SqlCommand cmd = new SqlCommand();
                                cmd.CommandText = "InsertAppTab";
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Connection = con;

                                cmd.Parameters.AddWithValue("@introducerid", adr.AgencyCode);
                                cmd.Parameters.AddWithValue("@plancode", pr.Id);
                                cmd.Parameters.AddWithValue("@planname", pt.shortcutname);
                                cmd.Parameters.AddWithValue("@payment", bd.payment);
                                cmd.Parameters.AddWithValue("@bondid", bondid);
                                cmd.Parameters.AddWithValue("@mode", bd.mode);
                                cmd.Parameters.AddWithValue("@formdate", bd.formdate);
                                cmd.Parameters.AddWithValue("@pdate", bd.pdate);
                                cmd.Parameters.AddWithValue("@term", bd.term);
                                cmd.Parameters.AddWithValue("@opid", User.Identity.Name);


                                try
                                {
                                    con.Open();
                                    cmd.ExecuteNonQuery();
                                    //MyClass.Sendmsg(bd.mobileno, "Dear " + bd.name + ", your Loginid:" + newbondid + " Password:" + bd.mobileno + " For your A/c details please visit "+cg.HeadOffice);
                                    //MyClass.Sendmsg(bd.mobileno, "Dear Customer your Application no- " + newbondid + " has been activated with Rs. " + bd.bookingamount + " in the plan " + pt.Planname + "Thank you for your kind believe us for help contact. "+cg.CompanyName);
                                    if (bd.PYN == "y" || bd.PYN == "Y")
                                    {
                                        MyClass.Sendmsg(bd.mobileno, "Dear " + bd.name + ", Thank you for purchasing a plot in " + pr.projectname + ". Your Plot No. " + bd.plotno + "," + bd.block + " ," + bd.phase + " at " + pr.projectname + " is Allotted Successfully. Regards- " + cr.CompanyName);

                                    }
                                    else
                                    {
                                        MyClass.Sendmsg(bd.mobileno, "Dear " + bd.name + ", Thank you for purchasing a plot in " + pr.projectname + ". Regards- " + cr.CompanyName);

                                    } 
                                    MyClass.Sendmsg(bd.mobileno, "Dear " + bd.name + ", login on " + cr.HeadOffice + " with your user ID as " + nl.UserName + " and password is " + nl.Password + ". Regards- " + cr.CompanyName);
                                    
                                    Response.Write("<script>alert('" + mr.custname + " created Successfully....')</script>");
                                    ViewBag.msg = mr.custname + " created Successfully....";
                                    NewBondid = newbondid;
                                    ViewData["bondtype"] = "Normal";
                                    ViewData["newbondid"] = newbondid;
                                    ViewData["discount"] = bd.discountper;
                                    BondType = "Normal";

                                }

                                catch (Exception e)
                                {
                                    ViewBag.msg = e.Message;
                                }
                                finally
                                {
                                    con.Close();
                                }
                            }
                            #endregion

                            #region tempappltab
                            else
                            {
                                
                                int bid = (from a in db.tempappltabs select a.bondid).DefaultIfEmpty(0).Max();
                                int bond = bid + 1;
                                tempappltab td = new tempappltab();
                                td.branchcode = tbd.branchcode;
                                td.bondid = bond;
                                td.newbondid = bond.ToString();
                                td.name = tbd.name;
                                td.RelationOf = tbd.RelationOf;
                                td.fathername = tbd.fathername;
                                td.addr = tbd.addr;
                                td.mobileno = tbd.mobileno;
                                td.introducerid = adr.AgencyCode;
                                td.intrankcode = adr.RankCode;
                                td.intrankname = adr.RankName;
                                td.newintroducerid = bd.newintroducerid;
                                td.formdate = Convert.ToDateTime(bd.formdate);
                                td.dob = bd.dob;
                                td.age = age;
                                td.nationality = tbd.nationality;
                                td.newmemberid = tbd.newmemberid;
                                td.memberid = row.MemberId;
                                td.guardianname = tbd.guardianname;
                                td.gurage = tbd.gurage;
                                td.gurrel = tbd.gurrel;
                                td.guraddr = tbd.guraddr;
                                

                                if (photo != null)
                                {
                                    string imgname = gid();
                                    td.photo = "~/Photo/" + imgname + ".jpg";
                                    photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                }
                                else
                                {
                                    td.photo = "~/Photo/default.jpg";

                                }

                                td.panno = tbd.panno;
                                td.bankname = tbd.bankname;
                                td.accountno = tbd.accountno;
                                td.IFSC = tbd.IFSC;

                                td.plantype = "RD";
                                td.planname = pt.shortcutname;
                                td.plancode = pr.Id;
                                td.bonusper = 0;
                                td.amountword = tbd.amountword;
                                td.term = tbd.term;
                                td.mode = tbd.mode;
                                td.payment = tbd.payment;
                                td.applicationcharge = tbd.applicationcharge;
                                td.nolandunit = tbd.nolandunit;
                                td.totalcon = tbd.totalcon;
                                td.expectedraisablevalue = tbd.expectedraisablevalue;
                                td.expirydate = tbd.expirydate;

                                td.nomineename = tbd.nomineename;
                                td.nomage = tbd.nomage;
                                td.nomrel = tbd.nomrel;
                                td.nomaddr = tbd.nomaddr;

                                td.paymethod = tbd.paymethod;
                                td.pdate = tbd.pdate;
                                td.checkorddno = tbd.checkorddno;
                                td.drawno = tbd.drawno;
                                td.branchpay = tbd.branchpay;
                                td.opid = User.Identity.Name;
                                td.status = 1;

                                td.type = "Customer";
                                td.Macaddress = localIP;
                                td.discountper = tbd.discountper;
                                td.bookingamount = tbd.bookingamount;
                                td.downpayment = 0;
                                td.Time = DateTime.Now.ToShortTimeString();
                                td.plotno = tbd.plotno;
                                td.PYN = tbd.PYN;
                                td.projectid = tbd.projectid;
                                td.block = tbd.block;
                                td.phaseid = bd.phaseid;
                                td.phase = phr == null ? "NA" : phr.Phase;

                                td.Aadhaar_No = "N/A";
                                td.Aadhaar_ReqDate = Convert.ToDateTime("1991-01-01");
                                td.Aadhaar_status = 0;
                                td.Aadhaar_AppDate = Convert.ToDateTime("1991-01-01");
                                td.PAN_AppDate = Convert.ToDateTime("1991-01-01");
                                td.PAN_ReqDate = Convert.ToDateTime("1991-01-01");
                                td.PanStatus = 0;
                                td.paymenttype = tbd.paymenttype;

                                if (td.paymethod == "Cheque")
                                {
                                    td.bank = tbd.bank;
                                    td.Account = tbd.Account;
                                    td.chequeno = tbd.chequeno;
                                    td.ACholdername = tbd.ACholdername;
                                    td.Branch = tbd.Branch;
                                    td.IFSCCode = tbd.IFSCCode;
                                    td.ChequeAmount = tbd.ChequeAmount;
                                    td.Chequedate = tbd.Chequedate;
                                    td.transactiontype = "NA";
                                    if (Chequeimage != null)
                                    {
                                        string img = gid();
                                        td.Chequeimage = "~/Photo/" + img + ".jpg";
                                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                                    }
                                    else
                                    {
                                        td.Chequeimage = "~/Photo/default.jpg";

                                    }
                                }
                                else if (td.paymethod == "banktransaction")
                                {
                                    td.bank = trbank;
                                    td.Account = holderacno;
                                    td.chequeno = transactionid;
                                    td.ACholdername = "NA";
                                    td.Branch = "NA";
                                    td.IFSCCode = "NA";
                                    td.ChequeAmount = tramount;
                                    td.Chequedate = Convert.ToDateTime(transactiondate);
                                    td.Chequeimage = "~/Photo/default.jpg";
                                    td.transactiontype = tbd.transactiontype;
                                }
                                else
                                {
                                    td.bank = tbd.bank;
                                    td.Account = tbd.Account;
                                    td.chequeno = tbd.chequeno;
                                    td.ACholdername = tbd.ACholdername;
                                    td.Branch = tbd.Branch;
                                    td.IFSCCode = tbd.IFSCCode;
                                    td.ChequeAmount = tbd.ChequeAmount;
                                    td.Chequedate = DateTime.Now.Date;
                                    td.Chequeimage = "~/Photo/default.jpg";
                                    td.transactiontype = "NA";
                                }
                                db.tempappltabs.Add(td);
                                db.SaveChanges();

                                if (td.discountper > 2)
                                {
                                    Response.Write("<script>alert('your request is pending please contact to Admin')</script>");
                                    ViewBag.msg = " your request is pending please contact to Admin";
                                }
                                else
                                {
                                    Response.Write("<script>alert('your request is pending So Approve Bond')</script>");
                                    ViewBag.msg = " your request is pending So Approve Bond";
                                }

                                ViewData["bondtype"] = "Discount";
                                ViewData["newbondid"] = bond.ToString();
                                ViewData["discount"] = tbd.discountper;
                                BondType = "Discount";
                            }
                            #endregion

                            ViewData["paymethod"] = bd.paymethod;
                            var count1 = db.BlockTabs.Where(ui => ui.Plancode == bd.projectid && ui.phaseid == bd.phaseid && ui.block == bd.block).Count();
                            if (count1 > 0)
                            {
                                var block = db.BlockTabs.Single(ui => ui.Plancode == bd.projectid && ui.phaseid==bd.phaseid && ui.block == bd.block);
                                var cnt = db.HoldingPlots.Where(a => a.holdby == bd.newintroducerid && a.holdplotno == bd.plotno && a.holdblock == block.Id && a.holdprojectid == block.Plancode).Count();

                                if (cnt > 0)
                                {
                                    HoldingPlot cb = db.HoldingPlots.Single(a => a.holdby == bd.newintroducerid && a.holdplotno == bd.plotno && a.holdblock == block.Id && a.holdprojectid == block.Plancode);
                                    cb.holdstatus = 0;
                                    db.SaveChanges();
                                }
                            }
                        }
                        break;
                }

            }

            return View(mt);

        }


        [HttpGet]
        public ActionResult FDBond()
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {

                        return View(mt);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
            }
       
        [HttpPost]
        public ActionResult FDBond(appltab model, HttpPostedFileBase photo, HttpPostedFileBase Chequeimage, string command, string memberid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, int token = 0, int subcss = 0, Double payment1 = 0, Double payment2 = 0, double totalcon = 0, double totalcon2 = 0, string sdob = "", string dob = "", string sanniversarydate = "")
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                switch (command)
                {
                    case "Search":

                        switch (memberid)
                        {
                            case "":
                                Response.Write("<script>alert('Please Select Member Id First')</script>");
                                break;
                            default:

                                mt = db.Member_tabs.Where(c => c.NewMemberId == memberid).ToList();
                                return View(mt);
                        }


                        break;

                    case "Submit":
                        Thread.Sleep(1500);
                        string localIP = "";

                        foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                        {
                            if (nic.OperationalStatus == OperationalStatus.Up)
                            {
                                localIP += nic.GetPhysicalAddress().ToString();
                                break;
                            }
                        }

                        var mr = db.Members.Single(m => m.Id == 1);
                        var br = db.Branchtabs.Single(bc => bc.BranchCode == model.branchcode);
                        int max = (from a in db.appltabs select a.bondid).DefaultIfEmpty(0).Max();
                        var bondid = max + 1;
                        //int count = (from a in db.appltabs where a.branchcode == model.branchcode select a.suffix).DefaultIfEmpty(0).Max();
                        int count = db.appltabs.Count();
                        var cr = db.CompanyInfos.Single(csn => csn.Id == 1);
                        var adr = db.AgentDetails.Single(ad => ad.NewAgentId == model.newintroducerid);
                        var pr = db.RateTabs.Single(pt => pt.Id == model.projectid);

                        string yr = string.Empty;
                        if (pr.term < 10)
                        {
                            yr = "0" + pr.term;
                        }
                        else if (pr.term > 9)
                        {
                            yr = pr.term.ToString();
                        }

                        var newbondid = string.Empty;
                        var row = db.Member_tabs.Single(ui => ui.NewMemberId == model.newmemberid);

                        TimeSpan span = model.formdate.Subtract(model.dob);
                            int years = (int)(span.Days / 365.25);
                            int remainder = (int)(span.Days % 365.25);
                            int months = remainder / 30;
                            if (months >= 12)
                            {
                                int y = months / 12;
                                int m = months % 12;
                                months = m;
                                years = years + y;
                            }
                            int days = remainder % 30;
                            var age = years + " years " + months + " months " + days + " days";
                        #region appltab
                        if (model.paymethod != "Cheque" && model.paymethod != "banktransaction" && model.discountper == 0)
                        {
                            newbondid = br.prefix + br.BranchCode + "/C0" + bondid;
                            appltab bd = new appltab();
                            bd.newmemberid = model.newmemberid;
                            bd.memberid = row.MemberId;
                            bd.branchcode = model.branchcode;
                            bd.bondid = bondid;
                            bd.newbondid = newbondid;
                            bd.name = model.name.ToUpper();
                            bd.RelationOf = model.RelationOf.ToUpper();
                            bd.fathername = model.fathername.ToUpper();
                            bd.addr = model.addr.ToUpper();
                            //bd.State = model.State.ToUpper();
                            //bd.District = model.District.ToUpper();
                            bd.mobileno = model.mobileno;
                            bd.introducerid = adr.AgencyCode;
                            bd.intrankcode = adr.RankCode;
                            bd.intrankname = adr.RankName.ToUpper();
                            bd.newintroducerid = model.newintroducerid.ToUpper();
                            bd.formdate = Convert.ToDateTime(model.formdate);
                            bd.dob = DateTime.Now.Date;
                            bd.age = model.age;
                            bd.nationality = model.nationality;

                            bd.guardianname = model.guardianname;
                            bd.gurage = model.gurage;
                            bd.gurrel = model.gurrel;
                            bd.guraddr = model.guraddr;

                            //if (row.Photonew != null)
                            //{
                            //    bd.photo = row.photo;
                            //    bd.Photonew = row.Photonew;
                            //}
                            //else
                            //{
                            //    bd.photo = "~/Photo/default.jpg";
                            //    bd.Photonew = new byte[] { };

                            //}

                            bd.panno = model.panno;
                            bd.bankname = model.bankname;
                            bd.accountno = model.accountno;
                            bd.IFSC = model.IFSC;

                            bd.plantype = model.plantype;
                            bd.planname = model.planname;
                            bd.plancode = pr.Id;
                            bd.projectid = pr.projectid;
                            bd.bonusper = 0;

                            bd.term = model.term;
                            bd.mode = model.mode;
                            if (payment1 != 0)
                            {
                                bd.payment = payment1;
                                bd.totalcon = totalcon;
                            }
                            else
                            {
                                bd.payment = payment2;
                                bd.totalcon = totalcon2;
                            }
                            bd.bookingamount = bd.payment;
                            bd.applicationcharge = model.applicationcharge;
                            bd.nolandunit = model.nolandunit;

                            bd.expectedraisablevalue = model.expectedraisablevalue;
                            bd.expirydate = model.expirydate;

                            bd.nomineename = model.nomineename.ToUpper();
                            bd.nomage = model.nomage;
                            bd.nomrel = model.nomrel.ToUpper();
                            bd.nomaddr = model.nomaddr.ToUpper();

                            bd.paymethod = model.paymethod;
                            bd.pdate = model.pdate;
                            bd.checkorddno = model.checkorddno;
                            bd.drawno = model.drawno;
                            bd.branchpay = model.branchpay;
                            bd.amountword = model.amountword;
                            bd.opid = User.Identity.Name;
                            bd.status = 1;
                            bd.type = "Customer";
                            bd.Macaddress = localIP;
                            bd.Time = DateTime.Now.ToShortTimeString();
                            //bd.suffix = count + 1;
                            bd.Chequedate = bd.pdate;
                            bd.chequeappdate = bd.pdate;

                            bd.Aadhaar_No = "N/A";//
                            bd.Aadhaar_ReqDate = Convert.ToDateTime("1991-01-01");//
                            bd.Aadhaar_status = 0;//
                            bd.Aadhaar_AppDate = Convert.ToDateTime("1991-01-01");//
                            bd.PAN_AppDate = Convert.ToDateTime("1991-01-01");//
                            bd.PAN_ReqDate = Convert.ToDateTime("1991-01-01");//
                            bd.PYN = "N";
                            bd.phaseid = 0;
                            bd.phase = "NA";
                            bd.block = "NA";
                            bd.plotno = 0;
                            RevivalTab rt = new RevivalTab();
                            rt.newbondid = newbondid;
                            rt.status = 1;
                            db.RevivalTabs.Add(rt);

                            NewLogin nl = new NewLogin();
                            nl.UserName = newbondid;
                            nl.Password = model.mobileno;
                            nl.Mobile = model.mobileno;
                            nl.type = "Customer";
                            nl.status = 1;
                            nl.loginstatus = 0;
                            db.NewLogins.Add(nl);

                            db.appltabs.Add(bd);
                            db.SaveChanges();
                            ViewData["newbondid"] = newbondid;

                            //string cssno = (token.ToString() + "/" + subcss.ToString());
                            //Csstab ct = new Csstab();
                            //ct.cssdate = model.pdate;
                            //ct.Opid = User.Identity.Name;
                            //ct.Branch = model.branchcode;
                            //ct.Token = token;
                            //ct.Subcss = subcss;
                            //ct.cssno = cssno;
                            //ct.Type = 1;
                            //db.Csstabs.Add(ct);
                            //db.SaveChanges();

                            con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                            SqlCommand cmd = new SqlCommand();
                            cmd.CommandText = "InsertAppTab";
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;

                            cmd.Parameters.AddWithValue("@introducerid", adr.AgencyCode);
                            cmd.Parameters.AddWithValue("@plancode", pr.projectid);
                            cmd.Parameters.AddWithValue("@planname", model.planname);
                            cmd.Parameters.AddWithValue("@payment", bd.payment);
                            cmd.Parameters.AddWithValue("@bondid", bondid);
                            cmd.Parameters.AddWithValue("@mode", model.mode);
                            cmd.Parameters.AddWithValue("@pdate", model.formdate);
                            cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                            //cmd.Parameters.AddWithValue("@cssno", cssno);
                            //cmd.Parameters.AddWithValue("@subcss", subcss);
                            cmd.Parameters.AddWithValue("@formdate", model.formdate);
                            cmd.Parameters.AddWithValue("@term", bd.term);


                            try
                            {
                                con.Open();
                                cmd.ExecuteNonQuery();
                                var ir = db.Installmenttabs.Single(i => i.newbondid == newbondid && i.installmentno == 1);
                                MyClass.Sendmsg(model.mobileno, "Dear " + model.name.ToUpper() + ", Welcome To  " + cg.CompanyName + " YourID: " + newbondid + " and Password:" + model.mobileno + ".Your Amt of " + bd.payment + " INR is received in mode of " + model.paymethod.ToUpper() + " and receipt no." + ir.receiptno + " on dated:" + model.pdate.ToString("dd/MM/yyyy") + ".Visit " + cg.HeadOffice + "  For Info.");
                                ViewBag.msg = mr.custname + " Created Successfully....";
                                NewBondid = newbondid;

                            }

                            catch (Exception e)
                            {
                                ViewBag.msg = e.Message;
                            }
                            finally
                            {
                                con.Close();
                            }
                        }
                            #endregion
                            #region tempappltab
                            else
                            {
                                
                                int bid = (from a in db.tempappltabs select a.bondid).DefaultIfEmpty(0).Max();
                                int bond = bid + 1;
                                tempappltab td = new tempappltab();
                                td.branchcode = model.branchcode;
                                td.bondid = bond;
                                td.newbondid = bond.ToString();
                                td.name = model.name;
                                td.RelationOf = model.RelationOf;
                                td.fathername = model.fathername;
                                td.addr = model.addr;
                                td.mobileno = model.mobileno;
                                td.introducerid = adr.AgencyCode;
                                td.intrankcode = adr.RankCode;
                                td.intrankname = adr.RankName;
                                td.newintroducerid = model.newintroducerid;
                                td.formdate = Convert.ToDateTime(model.formdate);
                                td.dob = model.dob;
                                td.age = age;
                                td.nationality = model.nationality;
                                td.newmemberid = model.newmemberid;
                                td.memberid = row.MemberId;
                                td.guardianname = model.guardianname;
                                td.gurage = model.gurage;
                                td.gurrel = model.gurrel;
                                td.guraddr = model.guraddr;
                                

                                if (photo != null)
                                {
                                    string imgname = gid();
                                    td.photo = "~/Photo/" + imgname + ".jpg";
                                    photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                }
                                else
                                {
                                    td.photo = "~/Photo/default.jpg";

                                }

                                td.panno = model.panno;
                                td.bankname = model.bankname;
                                td.accountno = model.accountno;
                                td.IFSC = model.IFSC;

                                td.plantype = "RD";
                                td.planname = model.planname;
                                td.plancode = pr.Id;
                                td.projectid = pr.projectid;
                                td.bonusper = 0;
                                td.amountword = model.amountword;
                                td.term = model.term;
                                td.mode = model.mode;
                                td.payment = model.payment;
                                td.applicationcharge = model.applicationcharge;
                                td.nolandunit = model.nolandunit;
                                td.totalcon = model.totalcon;
                                td.expectedraisablevalue = model.expectedraisablevalue;
                                td.expirydate = model.expirydate;

                                td.nomineename = model.nomineename;
                                td.nomage = model.nomage;
                                td.nomrel = model.nomrel;
                                td.nomaddr = model.nomaddr;

                                td.paymethod = model.paymethod;
                                td.pdate = model.formdate;
                                td.checkorddno = model.checkorddno;
                                td.drawno = model.drawno;
                                td.branchpay = model.branchpay;
                                td.opid = User.Identity.Name;
                                td.status = 1;

                                td.type = "Customer";
                                td.Macaddress = localIP;
                                td.discountper = model.discountper;
                                td.bookingamount = model.bookingamount;
                                td.downpayment = 0;
                                td.Time = DateTime.Now.ToShortTimeString();
                                td.plotno = 0;
                                td.PYN = "N";
                                td.block = "NA";
                                td.phaseid = 0;
                                td.phase = "NA";

                                td.Aadhaar_No = "N/A";
                                td.Aadhaar_ReqDate = Convert.ToDateTime("1991-01-01");
                                td.Aadhaar_status = 0;
                                td.Aadhaar_AppDate = Convert.ToDateTime("1991-01-01");
                                td.PAN_AppDate = Convert.ToDateTime("1991-01-01");
                                td.PAN_ReqDate = Convert.ToDateTime("1991-01-01");
                                td.PanStatus = 0;
                                td.paymenttype = model.mode;

                                if (td.paymethod == "Cheque")
                                {
                                    td.bank = model.bank;
                                    td.Account = model.Account;
                                    td.chequeno = model.chequeno;
                                    td.ACholdername = model.ACholdername;
                                    td.Branch = model.Branch;
                                    td.IFSCCode = model.IFSCCode;
                                    td.ChequeAmount = model.ChequeAmount;
                                    td.Chequedate = model.Chequedate;
                                    td.transactiontype = "NA";
                                    if (Chequeimage != null)
                                    {
                                        string img = gid();
                                        td.Chequeimage = "~/Photo/" + img + ".jpg";
                                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                                    }
                                    else
                                    {
                                        td.Chequeimage = "~/Photo/default.jpg";

                                    }
                                }
                                else if (td.paymethod == "banktransaction")
                                {
                                    td.bank = trbank;
                                    td.Account = holderacno;
                                    td.chequeno = transactionid;
                                    td.ACholdername = "NA";
                                    td.Branch = "NA";
                                    td.IFSCCode = "NA";
                                    td.ChequeAmount = tramount;
                                    td.Chequedate = Convert.ToDateTime(transactiondate);
                                    td.Chequeimage = "~/Photo/default.jpg";
                                    td.transactiontype = model.transactiontype;
                                }
                                else
                                {
                                    td.bank = model.bank;
                                    td.Account = model.Account;
                                    td.chequeno = model.chequeno;
                                    td.ACholdername = model.ACholdername;
                                    td.Branch = model.Branch;
                                    td.IFSCCode = model.IFSCCode;
                                    td.ChequeAmount = model.ChequeAmount;
                                    td.Chequedate = DateTime.Now.Date;
                                    td.Chequeimage = "~/Photo/default.jpg";
                                    td.transactiontype = "NA";
                                }
                                db.tempappltabs.Add(td);
                                db.SaveChanges();

                                if (td.discountper > 2)
                                {
                                    Response.Write("<script>alert('your request is pending please contact to Admin')</script>");
                                    ViewBag.msg = " your request is pending please contact to Admin";
                                }
                                else
                                {
                                    Response.Write("<script>alert('your request is pending So Approve Bond')</script>");
                                    ViewBag.msg = " your request is pending So Approve Bond";
                                }

                                ViewData["bondtype"] = "Discount";
                                ViewData["newbondid"] = bond.ToString();
                                ViewData["discount"] = model.discountper;
                                BondType = "Discount";
                            }
                            #endregion

                        break;
                }

            }

            return View(mt);
        }


        public ActionResult PrintFDBond()
        {

            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                appltab aa = db.appltabs.Single(b => b.newbondid == NewBondid);
                NumberToEnglish n = new NumberToEnglish();
                var amountinwords = n.changeToWords(aa.totalcon.ToString(), true);
                var amountinwords1 = n.changeToWords(aa.expectedraisablevalue.ToString(), true);

                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = "Bond";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Connection = con;

                cmd.Parameters.AddWithValue("@newbondid", NewBondid);
                cmd.Parameters.AddWithValue("@totalcon", "( " + amountinwords + " )");
                cmd.Parameters.AddWithValue("@expectedvalue", "( " + amountinwords1 + " )");

                try
                {
                    con.Open();
                    cmd.ExecuteNonQuery();
                }

                catch (Exception e)
                {
                    ViewBag.msg = e.Message;
                }
                finally
                {
                    con.Close();
                }

                List<Bond_report> bond = new List<Bond_report>();
                bond = db.Bond_reports.ToList();
                if (bond.Count() > 0) {

                    bond[0].upnewintroducerid = n.changeToWords(bond[0].total_con.ToString(), true);
                    bond[0].branchaddress = cg.CompanyName;
                    bond[0].agentname = aa.newmemberid;
                    bond[0].upintroducername = n.changeToWords(aa.expectedraisablevalue.ToString(), true);
                    var rt = db.RateTabs.Single(d => d.Id == aa.plancode);
                    bond[0].upintroducerid = (int)rt.quotaper;
                }
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "fd-report.rpt"));
                rd.SetDataSource(bond);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);



                    return new FileStreamResult(stream, "application/pdf");



                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();

            }
        }


        [HttpGet]
        public ActionResult ManualBond()
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(mt);
            }
        }
        [HttpPost]
        public ActionResult ManualBond(appltab model, HttpPostedFileBase photo, string command, string memberid)
        {
            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                switch (command)
                {
                    case "Search":

                        switch (memberid)
                        {
                            case "":
                                Response.Write("<script>alert('Please Select Contributor Id First')</script>");
                                break;
                            default:

                                mt = db.Member_tabs.Where(c => c.NewMemberId == memberid).ToList();
                                return View(mt);
                        }


                        break;

                    case "Submit":
                        var ds = db.Blockdates.Where(c => c.date == model.formdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
                        if (ds > 0)
                        {
                            Response.Write("<script>alert('This Date is closed please select another date')</script>");
                        }
                        else
                        {
                            string localIP = "";

                            foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                            {
                                if (nic.OperationalStatus == OperationalStatus.Up)
                                {
                                    localIP += nic.GetPhysicalAddress().ToString();
                                    break;
                                }
                            }

                            var pty = db.Plans.Single(c => c.Plancode == 4);
                            var mr = db.Members.Single(m => m.Id == 1);
                            var br = db.Branchtabs.Single(bc => bc.BranchCode == model.branchcode);
                            var cr = db.CompanyInfos.Single(csn => csn.AdminId == br.companyid);
                            int max = (from a in db.appltabs select a).Count();
                            var bondid = max + 1;
                            var newbondid = br.prefix + model.branchcode + "/C0" + bondid;
                            var adr = db.AgentDetails.Single(ad => ad.NewAgentId == model.newintroducerid);
                            //var pr = db.NewPlans.Single(pt => pt.Plancode == model.plancode);

                            var discount = Math.Round(model.payment * (model.discountper / 100), 0);
                            var totaldiscount = Math.Round(model.totalcon * (model.discountper / 100), 0);
                            var payment = model.payment - discount;
                            var totalcon = model.totalcon - totaldiscount;

                            TimeSpan span = model.formdate.Subtract(model.dob);
                            int years = (int)(span.Days / 365.25);
                            int remainder = (int)(span.Days % 365.25);
                            int months = remainder / 30;
                            if (months >= 12)
                            {
                                int y = months / 12;
                                int m = months % 12;
                                months = m;
                                years = years + y;
                            }
                            int days = remainder % 30;
                            var age = years + " years " + months + " months " + days + " days";

                            var row = db.Member_tabs.Single(ui => ui.NewMemberId == model.newmemberid);
                            appltab bd = new appltab();
                            bd.branchcode = model.branchcode;
                            bd.bondid = bondid;
                            bd.newbondid = newbondid;
                            bd.name = model.name;
                            bd.RelationOf = model.RelationOf;
                            bd.fathername = model.fathername;
                            bd.addr = model.addr;
                            bd.mobileno = model.mobileno;
                            bd.introducerid = adr.AgencyCode;
                            bd.intrankcode = adr.RankCode;
                            bd.intrankname = adr.RankName;
                            bd.newintroducerid = model.newintroducerid;
                            bd.formdate = Convert.ToDateTime(model.formdate);
                            bd.dob = model.dob;
                            bd.age = age;
                            bd.nationality = model.nationality;
                            bd.newmemberid = model.newmemberid;
                            bd.memberid = row.MemberId;
                            bd.guardianname = model.guardianname;
                            bd.gurage = model.gurage;
                            bd.gurrel = model.gurrel;
                            bd.guraddr = model.guraddr;

                            if (photo != null)
                            {
                                string imgname = gid();
                                bd.photo = "~/Photo/" + imgname + ".jpg";
                                photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                            }
                            else
                            {
                                bd.photo = "~/Photo/default.jpg";

                            }

                            bd.panno = model.panno;
                            bd.bankname = model.bankname;
                            bd.accountno = model.accountno;
                            bd.IFSC = model.IFSC;

                            bd.plantype = model.plantype;
                            bd.planname = model.planname;
                            bd.plancode = 0;
                            bd.bonusper = 0;

                            if (model.plantype == pty.shortcutname)
                            {
                                NumberToEnglish nw = new NumberToEnglish();
                                bd.amountword = nw.changeToWords(totalcon.ToString(), true);

                            }
                            else
                            {
                                bd.amountword = model.amountword;
                            }

                            bd.term = model.term;
                            bd.mode = model.mode;
                            bd.payment = payment;
                            bd.applicationcharge = model.applicationcharge;
                            bd.nolandunit = model.nolandunit;
                            bd.totalcon = totalcon;
                            bd.expectedraisablevalue = model.expectedraisablevalue;
                            bd.expirydate = model.expirydate;

                            bd.nomineename = model.nomineename;
                            bd.nomage = model.nomage;
                            bd.nomrel = model.nomrel;
                            bd.nomaddr = model.nomaddr;

                            bd.paymethod = model.paymethod;
                            bd.pdate = model.formdate;
                            bd.checkorddno = model.checkorddno;
                            bd.drawno = model.drawno;
                            bd.branchpay = model.branchpay;
                            bd.opid = User.Identity.Name;

                            if (model.plantype == pty.shortcutname)
                            {
                                bd.status = 0;
                            }
                            else
                            {
                                bd.status = 1;
                            }

                            bd.type = "Customer";
                            bd.Macaddress = localIP;
                            bd.discountper = model.discountper;
                            bd.bookingamount = model.bookingamount;
                            bd.downpayment = model.downpayment;
                            bd.Time = DateTime.Now.ToShortTimeString();

                            RevivalTab rt = new RevivalTab();
                            rt.newbondid = newbondid;
                            rt.status = 1;
                            db.RevivalTabs.Add(rt);

                            NewLogin nl = new NewLogin();
                            nl.UserName = newbondid;
                            nl.Password = model.mobileno;
                            nl.Mobile = model.mobileno;
                            nl.type = "Customer";
                            nl.status = 1;
                            nl.loginstatus = 0;
                            db.NewLogins.Add(nl);

                            db.appltabs.Add(bd);
                            db.SaveChanges();
                            ViewData["newbondid"] = newbondid;
                            con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                            SqlCommand cmd = new SqlCommand();
                            cmd.CommandText = "InsertAppTab";
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;

                            cmd.Parameters.AddWithValue("@introducerid", adr.AgencyCode);
                            cmd.Parameters.AddWithValue("@plancode", 0);
                            cmd.Parameters.AddWithValue("@planname", model.planname);
                            cmd.Parameters.AddWithValue("@payment", payment);
                            cmd.Parameters.AddWithValue("@bondid", bondid);
                            cmd.Parameters.AddWithValue("@mode", model.mode);
                            cmd.Parameters.AddWithValue("@formdate", model.formdate);
                            cmd.Parameters.AddWithValue("@pdate", model.pdate);
                            cmd.Parameters.AddWithValue("@term", model.term);
                            cmd.Parameters.AddWithValue("@opid", User.Identity.Name);


                            try
                            {
                                con.Open();
                                cmd.ExecuteNonQuery();
                                MyClass.Sendmsg(model.mobileno, "Dear " + model.name + ", your Loginid:" + newbondid + " Password:" + model.mobileno + " For your A/c details please visit "+cg.HeadOffice);
                                MyClass.Sendmsg(model.mobileno, "Dear Customer your Application no- " + newbondid + " has been activated with Rs. " + payment + " in the plan " + model.planname + "Thank you for your kind believe us for help contact. "+cg.CompanyName);
                                Response.Write("<script>alert('" + mr.custname + " created Successfully....')</script>");
                                ViewBag.msg = mr.custname + " created Successfully....";
                                NewBondid = newbondid;

                            }

                            catch (Exception e)
                            {
                                ViewBag.msg = e.Message;
                            }
                            finally
                            {
                                con.Close();
                            }
                        }
                        break;
                }

            }

            return View(mt);

        }

        [HttpGet]
        public ActionResult Adjustmentbond()
        {


            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                DateTime dt = DateTime.Now.Date;
                var tcss = (from cs in db.Installmenttabs where cs.paymentdate == dt && cs.payamount != 0 && cs.branch == User.Identity.Name select cs.cssno).Count();
                var ncss = tcss + 1;
                ViewData["cssno"] = ncss;
                int mmax = (from a in db.appltabs select a).Count();
                mmax = mmax + 1;
                var newbondid = br.prefix + br.BranchCode + "/C0" + mmax;
                ViewData["Abondid"] = newbondid;
                return View(mt);
            }
        }
        [HttpPost]
        public ActionResult Adjustmentbond(appltab model, HttpPostedFileBase photo, string command, string memberid, int noofrenewel = 0)
        {

            List<Member_tab> mt = new List<Member_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        switch (memberid)
                        {
                            case "":
                                Response.Write("<script>alert('Please Select Member Id First')</script>");
                                break;
                            default:

                                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                                mt = db.Member_tabs.Where(c => c.NewMemberId == memberid).ToList();
                                DateTime dt = DateTime.Now.Date;
                                var tcss = (from cs in db.Installmenttabs where cs.paymentdate == dt && cs.payamount != 0 && cs.branch == User.Identity.Name select cs.cssno).Count();
                                var ncss = tcss + 1;
                                ViewData["cssno"] = ncss;
                                int mmax = (from a in db.appltabs select a).Count();
                                mmax = mmax + 1;
                                var newbondid = br.prefix + br.BranchCode + "/C0" + mmax;
                                ViewData["Abondid"] = newbondid;
                                return View(mt);
                        }

                        break;

                    case "Submit":

                        var ds = db.Blockdates.Where(c => c.date == model.formdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
                        if (ds > 0)
                        {
                            Response.Write("<script>alert('This Date is closed please select another date')</script>");
                        }
                        else
                        {
                            var mr = db.Members.Single(m => m.Id == 1);
                            var bcount = (from a in db.appltabs where a.newbondid == model.newbondid select a).Count();
                            if (bcount > 0)
                            {
                                Response.Write("<script>alert('This " + mr.custname + " Id Already Exist')</script>");
                            }
                            else
                            {

                                string localIP = "";

                                foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                                {
                                    if (nic.OperationalStatus == OperationalStatus.Up)
                                    {
                                        localIP += nic.GetPhysicalAddress().ToString();
                                        break;
                                    }
                                }

                                int max = (from a in db.appltabs select a.bondid).Max();
                                int bondid = max + 1;


                                var adr = db.AgentDetails.Single(ad => ad.NewAgentId == model.newintroducerid);
                                var pr = db.NewPlans.Single(pt => pt.Plancode == model.plancode);

                                appltab bd = new appltab();
                                bd.branchcode = model.branchcode;
                                bd.bondid = bondid;
                                bd.newbondid = model.newbondid;
                                bd.name = model.name;
                                bd.RelationOf = model.RelationOf;
                                bd.fathername = model.fathername;
                                bd.addr = model.addr;
                                bd.mobileno = model.mobileno;
                                bd.introducerid = adr.AgencyCode;
                                bd.intrankcode = adr.RankCode;
                                bd.intrankname = adr.RankName;
                                bd.newintroducerid = model.newintroducerid;
                                bd.formdate = Convert.ToDateTime(model.formdate);

                                bd.age = model.age;
                                bd.dob = DateTime.Now.Date;

                                bd.nationality = model.nationality;
                                bd.newmemberid = model.newmemberid;
                                var row = db.Member_tabs.Single(ui => ui.NewMemberId == model.newmemberid);
                                bd.memberid = row.MemberId;
                                bd.guardianname = model.guardianname;
                                bd.gurage = model.gurage;
                                bd.gurrel = model.gurrel;
                                bd.guraddr = model.guraddr;

                                if (photo != null)
                                {
                                    string imgname = gid();
                                    bd.photo = "~/Photo/" + imgname + ".jpg";
                                    photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                }
                                else
                                {
                                    bd.photo = "~/Photo/default.jpg";
                                }

                                bd.panno = model.panno;
                                bd.bankname = model.bankname;
                                bd.accountno = model.accountno;
                                bd.IFSC = model.IFSC;

                                bd.plantype = model.plantype;
                                bd.planname = pr.Planname;
                                bd.plancode = pr.Plancode;
                                bd.bonusper = 0;
                                bd.term = model.term;
                                bd.mode = model.mode;
                                bd.payment = model.payment;
                                bd.applicationcharge = model.applicationcharge;
                                bd.nolandunit = model.nolandunit;
                                bd.totalcon = model.totalcon;
                                bd.expectedraisablevalue = model.expectedraisablevalue;
                                bd.expirydate = model.expirydate;

                                bd.nomineename = model.nomineename;
                                bd.nomage = model.nomage;
                                bd.nomrel = model.nomrel;
                                bd.nomaddr = model.nomaddr;

                                bd.paymethod = model.paymethod;
                                bd.pdate = Convert.ToDateTime(model.formdate);
                                bd.checkorddno = model.checkorddno;
                                bd.drawno = model.drawno;
                                bd.branchpay = model.branchpay;
                                bd.amountword = model.amountword;
                                bd.opid = User.Identity.Name;
                                bd.status = 1;
                                bd.type = "Adjustment";
                                bd.Macaddress = localIP;
                                bd.Time = DateTime.Now.ToShortTimeString();
                                bd.discountper = model.discountper;
                                bd.bookingamount = model.bookingamount;
                                bd.downpayment = 0;

                                RevivalTab rt = new RevivalTab();
                                rt.newbondid = model.newbondid;
                                rt.status = 1;
                                db.RevivalTabs.Add(rt);

                                NewLogin nl = new NewLogin();
                                nl.UserName = model.newbondid;
                                nl.Password = model.mobileno;
                                nl.Mobile = model.mobileno;
                                nl.type = "Customer";
                                nl.status = 1;
                                nl.loginstatus = 0;
                                db.NewLogins.Add(nl);

                                db.appltabs.Add(bd);
                                db.SaveChanges();

                                ViewData["newbondid"] = model.newbondid;
                                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                                SqlCommand cmd = new SqlCommand();
                                cmd.CommandText = "InsertAppTabAdjust";
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Connection = con;

                                cmd.Parameters.AddWithValue("@introducerid", adr.AgencyCode);
                                cmd.Parameters.AddWithValue("@plancode", pr.Plancode);
                                cmd.Parameters.AddWithValue("@planname", pr.Planname);
                                cmd.Parameters.AddWithValue("@payment", model.payment);
                                cmd.Parameters.AddWithValue("@bondid", bondid);
                                cmd.Parameters.AddWithValue("@mode", model.mode);
                                cmd.Parameters.AddWithValue("@formdate", model.formdate);
                                cmd.Parameters.AddWithValue("@pdate", model.pdate);
                                cmd.Parameters.AddWithValue("@term", model.term);
                                cmd.Parameters.AddWithValue("@opid", User.Identity.Name);

                                try
                                {
                                    con.Open();
                                    cmd.ExecuteNonQuery();
                                    con.Close();
                                    //MyClass.Sendmsg(model.mobileno, "Dear " + model.name + ", your Loginid:" + model.newbondid + " Password:" + model.mobileno + " For your A/c details please visit "+cg.HeadOffice);
                                    //MyClass.Sendmsg(model.mobileno, "Dear Customer your Application no- " + model.newbondid + " has been activated with Rs. " + model.payment + " in the plan " + pr.Planname + "Thank you for your kind believe us for help contact. "+cg.CompanyName);
                                    ViewBag.msg = mr.custname + " Created Successfully....";
                                    ViewData["newbondid"] = model.newbondid;

                                    if (noofrenewel > 0)
                                    {
                                        for (int i = 1; i <= noofrenewel; i++)
                                        {
                                            var cr = db.appltabs.Single(c => c.newbondid == model.newbondid);
                                            SqlCommand cmd2 = new SqlCommand();
                                            cmd2.CommandText = "adjustrenewel";
                                            cmd2.CommandType = CommandType.StoredProcedure;
                                            cmd2.Connection = con;

                                            cmd2.Parameters.AddWithValue("@newbondid", model.newbondid);
                                            cmd2.Parameters.AddWithValue("@planname", cr.planname);
                                            cmd2.Parameters.AddWithValue("@term", cr.term);
                                            cmd2.Parameters.AddWithValue("@mode", cr.mode);
                                            cmd2.Parameters.AddWithValue("@installmentno", i);
                                            cmd2.Parameters.AddWithValue("@paymethod", cr.paymethod);
                                            cmd2.Parameters.AddWithValue("@pdate", cr.pdate);
                                            cmd2.Parameters.AddWithValue("@payamount", cr.payment);
                                            cmd2.Parameters.AddWithValue("@amountinword", cr.amountword);
                                            cmd2.Parameters.AddWithValue("@opid", User.Identity.Name);
                                            cmd2.Parameters.AddWithValue("@macaddress", localIP);
                                            cmd2.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());

                                            try
                                            {
                                                con.Open();
                                                cmd2.ExecuteNonQuery();

                                            }

                                            catch (Exception e)
                                            {
                                                ViewBag.msg = e.Message;
                                            }
                                            finally
                                            {
                                                con.Close();
                                            }
                                        }
                                    }

                                }

                                catch (Exception e)
                                {
                                    ViewBag.msg = e.Message;
                                }
                                finally
                                {
                                    con.Close();
                                }


                            }

                            var abr = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                            mt = db.Member_tabs.Where(c => c.NewMemberId == memberid).ToList();
                            DateTime adt = DateTime.Now.Date;
                            var atcss = (from cs in db.Installmenttabs where cs.paymentdate == adt && cs.payamount != 0 && cs.branch == User.Identity.Name select cs.cssno).Count();
                            var ancss = atcss + 1;
                            ViewData["cssno"] = ancss;
                            int ammax = (from a in db.appltabs select a).Count();
                            ammax = ammax + 1;
                            var anewbondid = abr.prefix + abr.BranchCode + "/C0" + ammax;
                            ViewData["Abondid"] = anewbondid;
                        }
                        break;
                }

            }

            return View(mt);

        }
        public ActionResult PrintBond(string newbondid, Double discount = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                if (discount == 0)
                {
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "Bond";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;
                    cmd.Parameters.AddWithValue("@newbondid", newbondid);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }

                    List<Bond_report> bond = new List<Bond_report>();
                    bond = db.Bond_reports.ToList();
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "report.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");


                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                    return View();
                }
                else
                {
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "TempBond";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;
                    cmd.Parameters.AddWithValue("@newbondid", newbondid);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }

                    List<Bond_report> bond = new List<Bond_report>();
                    bond = db.Bond_reports.ToList();
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "report.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");



                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                    return View();
                }
            }
        }
        public ActionResult PrintReceipt(string newbondid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<tempcheque> bond = new List<tempcheque>();
                if (BondType == "Discount")
                {
                    var chequeamount = "";
                    var chequedate = "";
                    var chequeno = "";
                    var ta = db.tempappltabs.Single(t => t.newbondid == newbondid);
                    if (ta.paymethod == "Cheque")
                    {
                        chequeamount = "Amount of Cheque (Rs.)";
                        chequedate = "Date of Cheque";
                        chequeno = "Cheque Number";
                    }
                    else if (ta.paymethod == "banktramsaction")
                    {
                        chequeamount = "Amount of transaction (Rs.)";
                        chequedate = "Date of transaction";
                        chequeno = "Transaction Number";
                    }
                    bond.Add(new tempcheque { colChequedate = chequedate, colchequeno = chequeno, colChequeAmount = chequeamount, newbondid = ta.newbondid, name = ta.name, nolandunit = ta.nolandunit, opid = ta.opid, bookingamount = ta.bookingamount, bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Branch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = ta.Chequedate, Chequeimage = ta.Chequeimage });
                }
                else
                {
                    var ta = db.appltabs.Single(t => t.newbondid == newbondid);
                    bond.Add(new tempcheque { newbondid = ta.newbondid, name = ta.name, nolandunit = ta.nolandunit, opid = ta.opid, bookingamount = ta.bookingamount, bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Branch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = ta.Chequedate, Chequeimage = ta.Chequeimage });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MasterAckReceipt.rpt"));
                rd.SetDataSource(bond);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");


                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();

            }
        }

        [HttpGet]
        public ActionResult AddExpense()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                
                return View();
            }
        }
        [HttpPost]
        public ActionResult AddExpense(Expense ep, string head, string remarks, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string ddno, HttpPostedFileBase Chequeimage, DateTime date, Double amount = 0, Double DDamount = 0, int type = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                var ds = db.Blockdates.Where(c => c.date == date && c.branchcode == br.BranchCode && c.status == 0).Count();
                if (ds > 0)
                {
                    Response.Write("<script>alert('This Date is closed please select another date')</script>");
                }
                else
                {

                    Expense ob = new Expense();
                    ob.head = head;
                    ob.Remark = remarks;
                    ob.amount = amount;
                    ob.date_time = date;
                    ob.branchcode = br.BranchCode;
                    ob.opid = User.Identity.Name;
                    ob.type = type;
                    ob.paymethod = ep.paymethod;
                    if (ob.paymethod == "Cheque")
                    {
                        ob.bank = ep.bank;
                        ob.Account = ep.Account;
                        ob.chequeno = ep.chequeno;
                        ob.ACholdername = ep.ACholdername;
                        ob.Branch = ep.Branch;
                        ob.IFSCCode = ep.IFSCCode;
                        ob.ChequeAmount = ep.ChequeAmount;
                        ob.Chequedate = ep.Chequedate;
                        ob.transactiontype = "NA";

                        if (Chequeimage != null)
                        {
                            string img = gid();
                            ob.Chequeimage = "~/Photo/" + img + ".jpg";
                            Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                        }
                        else
                        {
                            ob.Chequeimage = "~/Photo/default.jpg";

                        }
                    }
                    else if (ob.paymethod == "banktransaction")
                    {
                        ob.bank = trbank;
                        ob.Account = holderacno;
                        ob.chequeno = transactionid;
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = tramount;
                        ob.Chequedate = Convert.ToDateTime(transactiondate);
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = ep.transactiontype;
                    }
                    else if (ob.paymethod == "DD")
                    {
                        ob.bank = "NA";
                        ob.Account = "NA";
                        ob.chequeno = ddno;
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = DDamount.ToString();
                        ob.Chequedate = DateTime.Now.Date;
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = "NA";
                    }
                    else if (ob.paymethod == "Cash")
                    {
                        ob.bank = "NA";
                        ob.Account = "NA";
                        ob.chequeno = "NA";
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = amount.ToString();
                        ob.Chequedate = DateTime.Now.Date;
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = "NA";
                    }

                    db.Expenses.Add(ob);
                    db.SaveChanges();
                    Response.Write("<script>alert('Expense added Successfully')</script>");
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult IdCard()
        {
            List<Icard> ic = new List<Icard>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(ic);
            }
        }
        [HttpPost]
        public ActionResult IdCard(string agentid)
        {
            List<Icard> ic = new List<Icard>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var agcount = db.AgentDetails.Where(agc => agc.NewAgentId == agentid && agc.BranchCode == User.Identity.Name).Count();
                var info = db.AgentDetails.Single(agc => agc.NewAgentId == agentid && agc.BranchCode == User.Identity.Name);
                if (agcount > 0)
                {
                    var bname = db.Members.Single(m => m.Id == 1);
                    var com = db.CompanyInfos.Single(co => co.Id == 1);
                    var tic = (from nic in db.AgentDetails where nic.NewAgentId == agentid select nic).ToList();

                    foreach (var item in tic.ToList())
                    {
                        int age = DateTime.Now.Year - info.Dob.Year;
                        if (item.AgencyCode > 1)
                        {
                            var brch = db.Branchtabs.Single(bi => bi.BranchCode == item.BranchCode);
                            ic.Add(new Icard { newagentid = item.NewAgentId, name = item.name, newintroducerid = item.NewIntroducerId, age = age, address = item.Address, branch = brch.BranchName, btype = bname.branchname, companyname = com.CompanyName, comaddress = com.Address, comcontact = com.Contact, dob = item.Dob, fname = item.Father, rank = item.RankName, issuedate = item.Issueon, validdate = item.Validupto, state = item.State, dist = item.District, pin = item.PinCode, mobileno = item.Mobileno });
                        }
                        else
                        {
                            ic.Add(new Icard { newagentid = item.NewAgentId, name = item.name, newintroducerid = item.NewIntroducerId, age = age, address = item.Address, branch = "Head Office", btype = bname.branchname, companyname = com.CompanyName, comaddress = com.Address, comcontact = com.Contact, dob = item.Dob, fname = item.Father, rank = item.RankName, issuedate = item.Issueon, validdate = item.Validupto, state = item.State, dist = item.District, pin = item.PinCode, mobileno = item.Mobileno });
                        }
                    }

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "IdCard.rpt"));
                    rd.SetDataSource(ic);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        string dt = pdate.ToShortDateString();

                        return new FileStreamResult(stream, "application/pdf");
                    }

                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }

                else
                {
                    Response.Write("<script>alert('Please Enter a valid Id')</script>");
                }


                return View(ic);
            }
        }

        #endregion

        #region Payment Menu Start Here

        [HttpGet]
        public ActionResult BrokerAdvancePayment()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {
                        DateTime maxdate1 = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name select a.date).DefaultIfEmpty().Max();
                        int trid = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.date == maxdate1 select a.trid).DefaultIfEmpty().Max();
                        DateTime maxdate = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name && a.trid == trid select a.date).DefaultIfEmpty().Max();
                        var clcount = (from c in db.ClosingMatchingTabs where c.date == maxdate && c.opid == User.Identity.Name && c.pagename == "BrokerAdvancePayment" select c).Count();
                        if (clcount == 0)
                        {
                            TempData["pagename"] = "BrokerAdvancePayment";
                            
                        }
                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        [HttpPost]
        public ActionResult BrokerAdvancePayment(AdvBrokerPaymentTab ob)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var ds = db.Blockdates.Where(c => c.date == ob.date && c.branchcode == User.Identity.Name && c.status == 0).Count();
                if (ds > 0)
                {
                    Response.Write("<script>alert('This Date is closed please select another date')</script>");
                }
                else
                {
                    Double balance = 0;
                    var paymentsum = (from df in db.AdvBrokerPaymentTabs where df.newagentid == ob.newagentid select df.amount).DefaultIfEmpty(0).Sum();
                    var receivesum = (from df in db.AdvBrokerPaymentTabs where df.newagentid == ob.newagentid select df.returnamount).DefaultIfEmpty(0).Sum();
                    if (ob.type == 0)
                    {
                        balance = (paymentsum + ob.amount - receivesum);
                    }
                    else if (ob.type == 1)
                    {
                        balance = (paymentsum - ob.amount - receivesum);
                    }
                    AdvBrokerPaymentTab cob = new AdvBrokerPaymentTab();
                    cob.newagentid = ob.newagentid;
                    cob.Remark = ob.Remark;
                    if (ob.type == 0)
                    {
                        cob.amount = ob.amount;
                        cob.returnamount = 0;
                    }
                    else if (ob.type == 1)
                    {
                        cob.amount = 0;
                        cob.returnamount = ob.amount;
                    }
                    cob.balanceamount = balance;
                    cob.date = ob.date;
                    cob.branchcode = User.Identity.Name;
                    cob.opid = User.Identity.Name;
                    cob.type = ob.type;
                    db.AdvBrokerPaymentTabs.Add(cob);
                    db.SaveChanges();
                    Response.Write("<script>alert('Payment done Successfully')</script>");
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult PaymentRenewal()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult PaymentRenewal(TempInstallmenttab tp, HttpPostedFileBase Chequeimage, string newbondid2, string planname, Double term, string mode, Double latefine, int from, int to, string paymethod, DateTime pdate, string checkorddno, string drawno, Double relief, Double payamount, string amountinword, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, DateTime prevexpirydate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var tempcount = db.TempInstallmenttabs.Where(c => c.newbondid == newbondid2 && c.status == 1).Count();
                var ds = db.Blockdates.Where(c => c.date == pdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
                if (ds > 0)
                {
                    Response.Write("<script>alert('This Date is closed please select another date')</script>");
                }
                else
                {
                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }
                    if (tempcount == 0)
                    {
                        if (paymethod == "Cheque" || paymethod == "banktransaction")
                        {
                            if (paymethod == "Cheque" && (tp.chequeno == null || tp.Chequedate == null || tp.ChequeAmount == null || tp.Bbranch == null || tp.bank == null || tp.Account == null || tp.Account == null || tp.IFSCCode == null))
                            {
                                Response.Write("<script>alert('Please Complete Cheque Detail')</script>");
                            }
                            else
                            {
                                var cr = db.appltabs.Single(c => c.newbondid == newbondid2);
                                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                                SqlCommand cmd = new SqlCommand();
                                cmd.CommandText = "tempinsertrcptinfo";
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Connection = con;

                                cmd.Parameters.AddWithValue("@newbondid", newbondid2);
                                cmd.Parameters.AddWithValue("@planname", planname);
                                cmd.Parameters.AddWithValue("@term", term);
                                cmd.Parameters.AddWithValue("@mode", mode);
                                cmd.Parameters.AddWithValue("@latefine", latefine);
                                cmd.Parameters.AddWithValue("@from", from);
                                cmd.Parameters.AddWithValue("@to", to);
                                cmd.Parameters.AddWithValue("@paymethod", paymethod);
                                cmd.Parameters.AddWithValue("@pdate", pdate);
                                cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                                cmd.Parameters.AddWithValue("@drawno", drawno);
                                cmd.Parameters.AddWithValue("@relief", relief);
                                cmd.Parameters.AddWithValue("@payamount", (payamount) - (latefine - relief));
                                cmd.Parameters.AddWithValue("@amountinword", amountinword);
                                cmd.Parameters.AddWithValue("@opid", User.Identity.Name);

                                cmd.Parameters.AddWithValue("@macaddress", localIP);
                                if (paymethod == "Cheque")
                                {
                                    cmd.Parameters.AddWithValue("@Chequeno", tp.chequeno);
                                    cmd.Parameters.AddWithValue("@Account", tp.Account);
                                    cmd.Parameters.AddWithValue("@acholdername", tp.ACholdername);
                                    cmd.Parameters.AddWithValue("@bank", tp.bank);
                                    cmd.Parameters.AddWithValue("@branch", tp.Bbranch);
                                    cmd.Parameters.AddWithValue("@chequedate", tp.Chequedate);
                                    if (Chequeimage != null)
                                    {

                                        string imgname = gid();
                                        //  tp.Chequeimage = "~/Photo/" + imgname + ".jpg";
                                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                        cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/" + imgname + ".jpg");
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/default.jpg");
                                    }
                                    cmd.Parameters.AddWithValue("@chequeamount", tp.ChequeAmount);
                                    cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                                    cmd.Parameters.AddWithValue("@IFSCCode", tp.IFSCCode);
                                    cmd.Parameters.AddWithValue("@transactiontype", "NA");
                                }

                                else if (paymethod == "banktransaction")
                                {
                                    cmd.Parameters.AddWithValue("@Chequeno", transactionid);
                                    cmd.Parameters.AddWithValue("@Account", holderacno);
                                    cmd.Parameters.AddWithValue("@acholdername", "NA");
                                    cmd.Parameters.AddWithValue("@bank", trbank);
                                    cmd.Parameters.AddWithValue("@branch", "NA");
                                    cmd.Parameters.AddWithValue("@chequedate", transactiondate);
                                    cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/default.jpg");
                                    cmd.Parameters.AddWithValue("@chequeamount", tramount);
                                    cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                                    cmd.Parameters.AddWithValue("@IFSCCode", "NA");
                                    cmd.Parameters.AddWithValue("@transactiontype", tp.transactiontype);
                                }

                                SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                                p.Direction = ParameterDirection.Output;
                                cmd.Parameters.Add(p);

                                try
                                {
                                    con.Open();
                                    cmd.ExecuteNonQuery();

                                    paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                                    ViewData["newbondid"] = newbondid2;
                                    ViewData["paymethod"] = paymethod;
                                    ViewData["paymentno"] = paymentno;

                                    ViewBag.msg = "Renewel pending...";
                                    return View();
                                }

                                catch (Exception e)
                                {
                                    ViewBag.msg = e.Message;
                                }
                                finally
                                {
                                    con.Close();
                                }
                            }
                        }

                        else
                        {

                            var cr = db.appltabs.Single(c => c.newbondid == newbondid2);
                            con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                            SqlCommand cmd = new SqlCommand();
                            cmd.CommandText = "insertrcptinfo";
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;

                            cmd.Parameters.AddWithValue("@newbondid", newbondid2);
                            cmd.Parameters.AddWithValue("@planname", planname);
                            cmd.Parameters.AddWithValue("@term", term);
                            cmd.Parameters.AddWithValue("@mode", mode);
                            cmd.Parameters.AddWithValue("@latefine", latefine);
                            cmd.Parameters.AddWithValue("@from", from);
                            cmd.Parameters.AddWithValue("@to", to);
                            cmd.Parameters.AddWithValue("@paymethod", paymethod);
                            cmd.Parameters.AddWithValue("@pdate", pdate);
                            cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                            cmd.Parameters.AddWithValue("@drawno", drawno);
                            cmd.Parameters.AddWithValue("@relief", relief);
                            cmd.Parameters.AddWithValue("@payamount", (payamount) - (latefine - relief));
                            cmd.Parameters.AddWithValue("@amountinword", amountinword);
                            cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                            cmd.Parameters.AddWithValue("@macaddress", localIP);
                            cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                            cmd.Parameters.AddWithValue("@transactiontype", "NA");

                            SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                            p.Direction = ParameterDirection.Output;
                            cmd.Parameters.Add(p);

                            try
                            {
                                con.Open();
                                cmd.ExecuteNonQuery();
                                paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                                ViewData["newbondid"] = newbondid2;
                                ViewData["paymethod"] = paymethod;
                                ViewData["paymentno"] = paymentno;
                                tp.chequeno = tp.chequeno == null ? "" : "no. " + tp.chequeno;
                                var cm = db.CompanyInfos.Single(d => d.Id == 1);
                                //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ",Your renewal of Rs " + payamount + " is received for plan " + planname + " for Bond: " + newbondid2 + " on date: " + pdate.ToString("dd/MM/yyyy"));
                                string Paymethod = "", chequeno = "";
                                if (paymethod == "banktransaction")
                                {
                                    Paymethod = "Bank Transaction" + "/" + tp.transactiontype;
                                    chequeno = "Transaction Id " + tp.chequeno;
                                }
                                else if (paymethod != "Cash")
                                {
                                    chequeno = paymethod + " No " + tp.chequeno;
                                    Paymethod = paymethod;
                                }
                                else
                                {
                                    Paymethod = paymethod;
                                }
                                MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your EMI of Rs." + payamount + " for the month " + prevexpirydate.ToString("MMMM") + " for loan a/c no. " + cr.loanid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards- " + cm.CompanyName);
                                ViewBag.msg = "Renewel Done Successfully....";
                                return View();
                            }

                            catch (Exception e)
                            {
                                ViewBag.msg = e.Message;
                            }
                            finally
                            {
                                con.Close();
                            }
                        }
                    }
                    else
                    {
                        Response.Write("<script>alert('Your Last Renewal is pending Please Contact to Admin')</script>");
                    }



                }
            }
            return View();
        }

        [HttpGet]
        public ActionResult PartPayment()
        {

            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult PartPayment(TempInstallmenttab tp, HttpPostedFileBase Chequeimage, string newbondid2, string planname, Double term, string mode, Double latefine, int from, string paymethod, DateTime pdate, string checkorddno, string drawno, Double payamount, string amountinword, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var tempcount = db.TempInstallmenttabs.Where(c => c.newbondid == newbondid2 && c.status == 1).Count();
                var ds = db.Blockdates.Where(c => c.date == pdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
                if (ds > 0)
                {
                    Response.Write("<script>alert('This Date is closed please select another date')</script>");
                }
                else
                {
                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }
                    if (tempcount == 0)
                    {
                        if (paymethod == "Cheque" || paymethod == "banktransaction")
                        {
                            if (paymethod == "Cheque" && (tp.chequeno == null || tp.Chequedate == null || tp.ChequeAmount == null || tp.Bbranch == null || tp.bank == null || tp.Account == null || tp.Account == null || tp.IFSCCode == null))
                            {
                                Response.Write("<script>alert('Please Complete Cheque Detail')</script>");
                            }
                            else
                            {
                                var cr = db.appltabs.Single(c => c.newbondid == newbondid2);
                                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                                SqlCommand cmd = new SqlCommand();
                                cmd.CommandText = "tempinsertrcptinfo";
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Connection = con;

                                cmd.Parameters.AddWithValue("@newbondid", newbondid2);
                                cmd.Parameters.AddWithValue("@planname", planname);
                                cmd.Parameters.AddWithValue("@term", term);
                                cmd.Parameters.AddWithValue("@mode", mode);
                                cmd.Parameters.AddWithValue("@latefine", latefine);
                                cmd.Parameters.AddWithValue("@from", from);
                                cmd.Parameters.AddWithValue("@to", from);
                                cmd.Parameters.AddWithValue("@paymethod", paymethod);
                                cmd.Parameters.AddWithValue("@pdate", pdate);
                                cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                                cmd.Parameters.AddWithValue("@drawno", drawno);
                                cmd.Parameters.AddWithValue("@relief", 0);
                                cmd.Parameters.AddWithValue("@payamount", payamount - latefine);
                                cmd.Parameters.AddWithValue("@amountinword", amountinword);
                                cmd.Parameters.AddWithValue("@opid", User.Identity.Name);

                                cmd.Parameters.AddWithValue("@macaddress", localIP);
                                if (paymethod == "Cheque")
                                {
                                    cmd.Parameters.AddWithValue("@Chequeno", tp.chequeno);
                                    cmd.Parameters.AddWithValue("@Account", tp.Account);
                                    cmd.Parameters.AddWithValue("@acholdername", tp.ACholdername);
                                    cmd.Parameters.AddWithValue("@bank", tp.bank);
                                    cmd.Parameters.AddWithValue("@branch", tp.Bbranch);
                                    cmd.Parameters.AddWithValue("@chequedate", tp.Chequedate);
                                    if (Chequeimage != null)
                                    {

                                        string imgname = gid();
                                        //  tp.Chequeimage = "~/Photo/" + imgname + ".jpg";
                                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                        cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/" + imgname + ".jpg");
                                    }
                                    else
                                    {
                                        cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/default.jpg");
                                    }
                                    cmd.Parameters.AddWithValue("@chequeamount", tp.ChequeAmount);
                                    cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                                    cmd.Parameters.AddWithValue("@IFSCCode", tp.IFSCCode);
                                    cmd.Parameters.AddWithValue("@transactiontype", "NA");
                                }

                                else if (paymethod == "banktransaction")
                                {
                                    cmd.Parameters.AddWithValue("@Chequeno", transactionid);
                                    cmd.Parameters.AddWithValue("@Account", holderacno);
                                    cmd.Parameters.AddWithValue("@acholdername", "NA");
                                    cmd.Parameters.AddWithValue("@bank", trbank);
                                    cmd.Parameters.AddWithValue("@branch", "NA");
                                    cmd.Parameters.AddWithValue("@chequedate", transactiondate);
                                    cmd.Parameters.AddWithValue("@chequeimg", "~/Photo/default.jpg");
                                    cmd.Parameters.AddWithValue("@chequeamount", tramount);
                                    cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                                    cmd.Parameters.AddWithValue("@IFSCCode", "NA");
                                    cmd.Parameters.AddWithValue("@transactiontype", tp.transactiontype);
                                }

                                SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                                p.Direction = ParameterDirection.Output;
                                cmd.Parameters.Add(p);

                                try
                                {
                                    con.Open();
                                    cmd.ExecuteNonQuery();

                                    paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                                    ViewData["newbondid"] = newbondid2;
                                    ViewData["paymethod"] = paymethod;
                                    ViewData["paymentno"] = paymentno;

                                    ViewBag.msg = "Renewel pending...";
                                    return View();
                                }

                                catch (Exception e)
                                {
                                    ViewBag.msg = e.Message;
                                }
                                finally
                                {
                                    con.Close();
                                }
                            }
                        }

                        else
                        {

                            var cr = db.appltabs.Single(c => c.newbondid == newbondid2);
                            con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                            SqlCommand cmd = new SqlCommand();
                            cmd.CommandText = "insertrcptinfo";
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Connection = con;
                            var Payamount = payamount - latefine;
                            cmd.Parameters.AddWithValue("@newbondid", newbondid2);
                            cmd.Parameters.AddWithValue("@planname", planname);
                            cmd.Parameters.AddWithValue("@term", term);
                            cmd.Parameters.AddWithValue("@mode", mode);
                            cmd.Parameters.AddWithValue("@latefine", latefine);
                            cmd.Parameters.AddWithValue("@from", from);
                            cmd.Parameters.AddWithValue("@to", from);
                            cmd.Parameters.AddWithValue("@paymethod", paymethod);
                            cmd.Parameters.AddWithValue("@pdate", pdate);
                            cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                            cmd.Parameters.AddWithValue("@drawno", drawno);
                            cmd.Parameters.AddWithValue("@relief", 0);
                            cmd.Parameters.AddWithValue("@payamount", Payamount);
                            cmd.Parameters.AddWithValue("@amountinword", amountinword);
                            cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                            cmd.Parameters.AddWithValue("@macaddress", localIP);
                            cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                            cmd.Parameters.AddWithValue("@transactiontype", "NA");

                            SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                            p.Direction = ParameterDirection.Output;
                            cmd.Parameters.Add(p);

                            try
                            {
                                con.Open();
                                cmd.ExecuteNonQuery();
                                paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                                ViewData["newbondid"] = newbondid2;
                                ViewData["paymethod"] = paymethod;
                                ViewData["paymentno"] = paymentno;
                                //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ",Your renewal of Rs " + payamount + " is received for plan " + planname + " for Bond: " + newbondid2 + " on date: " + pdate.ToString("dd/MM/yyyy"));
                                string Paymethod = "", chequeno = "";
                                if (paymethod == "banktransaction")
                                {
                                    Paymethod = "Bank Transaction" + "/" + tp.transactiontype;
                                    chequeno = "Transaction Id " + tp.chequeno;
                                }
                                else if (paymethod != "Cash")
                                {
                                    chequeno = paymethod + ", No. " + tp.chequeno;
                                    Paymethod = paymethod;
                                }
                                else
                                {
                                    Paymethod = paymethod;
                                }

                                    MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your PAYMENT of Rs." + payamount + ",OF YOUR ID NO.-" + cr.newbondid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards-" + cg.CompanyName);
                                
                                ViewBag.msg = "Renewel Done Successfully....";
                                return View();
                            }

                            catch (Exception e)
                            {
                                ViewBag.msg = e.Message;
                            }
                            finally
                            {
                                con.Close();
                            }
                        }
                    }
                    else
                    {
                        Response.Write("<script>alert('Your Last Renewal is pending Please Contact to Admin')</script>");
                    }



                }
            }
            return View();
        }

        [HttpGet]
        public ActionResult Printrenewal()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["Paymentno"] = paymentno;
                return View();
            }

        }
        public ActionResult PrintRenewalReport()
        {
            List<RecieptTab> bond = new List<RecieptTab>();
            bond = db.RecieptTabs.ToList();

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "NewRenewal.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();


        }
        public ActionResult PrintRenewalReportCheque(string newbondid, int paymentno = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<tempcheque> bond = new List<tempcheque>();


                var max = (from t in db.TempInstallmenttabs where t.newbondid == newbondid && t.paymentno == paymentno && t.status == 1 select t.installmentno).Max();
                var ta = db.TempInstallmenttabs.Single(t => t.newbondid == newbondid && t.paymentno == paymentno && t.installmentno == max && t.status == 1);
                var list = db.appltabs.Single(a => a.newbondid == newbondid);
                bond.Add(new tempcheque { newbondid = ta.newbondid, name = list.name, nolandunit = list.nolandunit, opid = ta.opid, bookingamount = ta.payamount, bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Bbranch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = Convert.ToDateTime(ta.Chequedate), Chequeimage = ta.Chequeimage });

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "RenewAckReceipt.rpt"));
                rd.SetDataSource(bond);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");


                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();

            }
        }

        [HttpGet]
        public ActionResult ChequePayment()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Operator");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult ChequePayment(string newbondid2, string planname, Double term, string mode, Double latefine, int from, int to, string paymethod, DateTime pdate, string checkorddno, string drawno, Double relief, Double payamount, string amountinword)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Operator");
            }
            else
            {
                var ds = db.Blockdates.Where(c => c.date == pdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
                if (ds > 0)
                {
                    Response.Write("<script>alert('This Date is closed please select another date')</script>");
                }
                else
                {
                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }
                    var rc = db.Installmenttabs.Single(c => c.receiptno == newbondid2);
                    var cr = db.appltabs.Single(c => c.newbondid == rc.newbondid);
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "insertrcptinfo";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@newbondid", rc.newbondid);
                    cmd.Parameters.AddWithValue("@planname", planname);
                    cmd.Parameters.AddWithValue("@term", term);
                    cmd.Parameters.AddWithValue("@mode", mode);
                    cmd.Parameters.AddWithValue("@latefine", 0);
                    cmd.Parameters.AddWithValue("@from", from);
                    cmd.Parameters.AddWithValue("@to", to);
                    cmd.Parameters.AddWithValue("@paymethod", paymethod);
                    cmd.Parameters.AddWithValue("@pdate", pdate);
                    cmd.Parameters.AddWithValue("@checkorddno", checkorddno);
                    cmd.Parameters.AddWithValue("@drawno", drawno);
                    cmd.Parameters.AddWithValue("@relief", 0);
                    cmd.Parameters.AddWithValue("@payamount", payamount);
                    cmd.Parameters.AddWithValue("@amountinword", amountinword);
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                    cmd.Parameters.AddWithValue("@macaddress", localIP);
                    cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                    cmd.Parameters.AddWithValue("@transactiontype", "NA");

                    SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                    p.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(p);

                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                        paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                        // MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ",Your renewal of Rs " + payamount + " is received for plan " + planname + " for Bond: " + newbondid2 + " on date: " + pdate.ToString("dd/MM/yyyy"));
                        ViewBag.msg = "Payment Done Successfully....";
                        Response.Write("<script>alert('Payment Done Successfully....')</script>");
                        // ViewBag.msg2 = "Your Payment No. is " + paymentno.ToString() + " ";
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }
                }
            }
            return View();
        }
        public ActionResult PrintPensionReport(int paymentno = 0)
        {
            List<RecieptTab> bond = new List<RecieptTab>();
            bond = db.RecieptTabs.ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "NewRenewal.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }
        public ActionResult PrintChequeackReceipt(string newbondid, int paymentno = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<tempcheque> bond = new List<tempcheque>();
                var max = (from t in db.TempInstallmenttabs where t.newbondid == newbondid && t.paymentno == paymentno && t.status == 1 select t.installmentno).Max();
                var ta = db.TempInstallmenttabs.Single(t => t.newbondid == newbondid && t.paymentno == paymentno && t.installmentno == max && t.status == 1);
                var amount = (from t in db.TempInstallmenttabs where t.newbondid == newbondid && t.paymentno == paymentno && t.status == 1 select t.payamount).Sum();
                var list = db.appltabs.Single(a => a.newbondid == newbondid);
                var chequeamount = "";
                var chequedate = "";
                var chequeno = "";
                if (ta.paymethod == "Cheque")
                {
                    chequeamount = "Amount of Cheque (Rs.)";
                    chequedate = "Date of Cheque";
                    chequeno = "Cheque Number";
                }
                else if (ta.paymethod == "banktransaction")
                {
                    chequeamount = "Amount of transaction (Rs.)";
                    chequedate = "Date of transaction";
                    chequeno = "Transaction Number";
                }
               
                bond.Add(new tempcheque { colChequedate = chequedate, colchequeno = chequeno, colChequeAmount = chequeamount, newbondid = ta.newbondid, name = list.name, nolandunit = list.nolandunit, opid = ta.opid, bookingamount = (ta.amount+(ta.latefine-ta.reliefrs)), bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Bbranch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = Convert.ToDateTime(ta.Chequedate), Chequeimage = ta.Chequeimage });

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MasterRenewAckReceipt.rpt"));
                rd.SetDataSource(bond);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();

                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");


                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();

            }
        }

        [HttpGet]
        public ActionResult CreditAccount()
        {
            List<SavingAccountInfo> sainfo = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(sainfo);
            }
        }
        [HttpPost]
        public ActionResult CreditAccount(TransactionTab tob, string command, string accno)
        {

            List<SavingAccountInfo> sainfo = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {


                switch (command)
                {
                    case "Search":

                        switch (accno)
                        {
                            case "":
                                Response.Write("<script>alert('Please Enter A/C No First')</script>");
                                break;
                            default:

                                sainfo = db.SavingAccountInfos.Where(c => c.accountno == accno).ToList();
                                return View(sainfo);
                        }

                        break;

                    case "Submit":

                        var acr = db.SavingAccountInfos.Single(a => a.accountno == tob.accountno);
                        var row1 = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);
                        var csrt = db.CompanyInfos.Single(a => a.AdminId == row1.companyid);
                        var creditsum = (from df in db.TransactionTabs where df.accountno == tob.accountno select df.credit).DefaultIfEmpty(0).Sum();
                        var debitsum = (from df in db.TransactionTabs where df.accountno == tob.accountno select df.debit).DefaultIfEmpty(0).Sum();
                        var balance = (creditsum + tob.credit - debitsum);
                        var ac = tob.accountno.Substring(tob.accountno.Count() - 4, 4);
                        string aa = gid();
                        TransactionTab ad = new TransactionTab();
                        var j = db.TransactionTabs.Where(s => s.accountno == tob.accountno).Count();
                        ad.transactionid = aa;
                        ad.branchcode = User.Identity.Name;
                        ad.accountno = tob.accountno;
                        ad.actype = tob.actype;
                        ad.acholdername = tob.acholdername;
                        ad.paymethod = tob.paymethod;
                        ad.pdate = tob.pdate;
                        ad.checkorddno = tob.checkorddno;
                        ad.drawon = tob.drawon;
                        ad.credit = tob.credit;
                        ad.debit = 0;
                        ad.balance = balance;
                        ad.remark = tob.remark;
                        ad.opid = User.Identity.Name;
                        ad.status = (j + 1);
                        ad.type = "Credit";
                        ad.Time = DateTime.Now.ToShortTimeString();

                        db.TransactionTabs.Add(ad);
                        db.SaveChanges();
                        MyClass.Sendmsg(acr.mobileno, "Your A/c xxxxxx" + ac + " credited with INR " + tob.credit + " on " + DateTime.Now.ToString("dd/MM/yyyy") + "- Remark-Avl Bal. INR " + balance + ", For more details Visit "+cg.HeadOffice);
                        ViewBag.msg = " A/c " + tob.accountno + " credited with INR " + tob.credit + " on " + DateTime.Now.ToString("dd/MM/yyyy") + "- Remark-Avl Bal. INR " + balance + ", For more details Visit  "+cg.HeadOffice;
                        ViewData["ok"] = "OK";
                        transactionid = aa;
                        break;
                }
            }
            return View(sainfo);
        }
        public ActionResult PrintCreditAccount()
        {
            List<TransactionTab> trlist = new List<TransactionTab>();
            trlist = (from tr in db.TransactionTabs where tr.transactionid == transactionid select tr).ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Credit.rpt"));
            rd.SetDataSource(trlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult DebitAccount()
        {
            List<SavingAccountInfo> sainfo = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(sainfo);
            }
        }
        [HttpPost]
        public ActionResult DebitAccount(TransactionTab tob, string command, string accno)
        {

            List<SavingAccountInfo> sainfo = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {


                switch (command)
                {
                    case "Search":

                        switch (accno)
                        {
                            case "":
                                Response.Write("<script>alert('Please Enter A/C No First')</script>");
                                break;
                            default:

                                sainfo = db.SavingAccountInfos.Where(c => c.accountno == accno).ToList();
                                return View(sainfo);
                        }

                        break;

                    case "Submit":

                        var acr = db.SavingAccountInfos.Single(a => a.accountno == tob.accountno);
                        var row1 = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);
                        var csrt = db.CompanyInfos.Single(a => a.AdminId == row1.companyid);
                        var creditsum = (from df in db.TransactionTabs where df.accountno == tob.accountno select df.credit).DefaultIfEmpty(0).Sum();
                        var debitsum = (from df in db.TransactionTabs where df.accountno == tob.accountno select df.debit).DefaultIfEmpty(0).Sum();
                        var ac = tob.accountno.Substring(tob.accountno.Count() - 4, 4);
                        var balance = (creditsum - tob.debit - debitsum);

                        string aa = gid();
                        TransactionTab ad = new TransactionTab();
                        var j = db.TransactionTabs.Where(s => s.accountno == tob.accountno).Count();
                        ad.transactionid = aa;
                        ad.branchcode = User.Identity.Name;
                        ad.accountno = tob.accountno;
                        ad.actype = tob.actype;
                        ad.acholdername = tob.acholdername;
                        ad.paymethod = tob.paymethod;
                        ad.pdate = tob.pdate;
                        ad.checkorddno = tob.checkorddno;
                        ad.drawon = tob.drawon;
                        ad.credit = 0;
                        ad.debit = tob.debit;
                        ad.balance = balance;
                        ad.remark = tob.remark;
                        ad.opid = User.Identity.Name;
                        ad.status = (j + 1);
                        ad.type = "Debit";
                        ad.Time = DateTime.Now.ToShortTimeString();

                        db.TransactionTabs.Add(ad);
                        db.SaveChanges();
                        MyClass.Sendmsg(acr.mobileno, "Your A/c xxxxxx" + ac + " debited with INR " + tob.debit + " on " + DateTime.Now.ToString("dd/MM/yyyy") + "- Remark-Avl Bal. INR " + balance + ", For more details Visit "+cg.HeadOffice);
                        ViewBag.msg = " A/c " + tob.accountno + " debited with INR " + tob.debit + " on " + DateTime.Now.ToString("dd/MM/yyyy") + "- Remark-Avl Bal. INR " + balance + ", For more details Visit  "+cg.HeadOffice;
                        ViewData["ok"] = "OK";
                        transactionid = aa;
                        break;
                }
            }
            return View(sainfo);
        }
        public ActionResult PrintDebitAccount()
        {
            List<TransactionTab> trlist = new List<TransactionTab>();
            trlist = (from tr in db.TransactionTabs where tr.transactionid == transactionid select tr).ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Debit.rpt"));
            rd.SetDataSource(trlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return File(stream, "application/pdf", transactionid + "_Debit.pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult SpotCommission()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {


                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {
                        List<SpotCommList> sclist = new List<SpotCommList>();
                        var newagentid = TempData["newagentid"];
                        var newbondid = TempData["newbondid"];
                        DateTime date = Convert.ToDateTime(TempData["date"]);
                        if (newagentid != null)
                        {
                            var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                            stdate = Convert.ToDateTime(date);

                            var cr = db.CompanyInfos.Single(c => c.Id == 1);
                            var datelist = (from sc in db.spotcommission_tabs where sc.newagentid == newagentid && sc.status == 0 orderby sc.date select sc).ToList();
                            foreach (var d in datelist.ToList())
                            {
                                Double bussum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                                Double comsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                                sclist.Add(new SpotCommList { newagentid = (newagentid).ToString(), agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bussum, Commission = comsum, date = d.date, companyname = cr.CompanyName, branchname = User.Identity.Name });

                            }


                        }

                        return View(sclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }

        }
        [HttpPost]
        public ActionResult SpotCommission(string newagentid)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var datelist = (from sc in db.spotcommission_tabs where sc.newagentid == newagentid && sc.status == 0 orderby sc.date select sc).ToList();
                foreach (var date in datelist.ToList())
                {
                    Double busisum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == date.newbondid && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                    Double commsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == date.newbondid && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                    sclist.Add(new SpotCommList { newagentid = newagentid, agentname = date.name, newbondid = date.newbondid, name = date.bondname, Business = busisum, Commission = commsum, date = date.date, companyname = cr.CompanyName, branchname = User.Identity.Name });

                }

                return View(sclist);
            }
        }
        public ActionResult PrintSpotCommission(string newagentid, string newbondid)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var cbr = db.appltabs.Single(cc => cc.newbondid == newbondid);
            var ar = db.AgentDetails.Single(aa => aa.NewAgentId == newagentid);
            var broker = string.Empty;
            broker = ar.name + "(" + newagentid + ")";
            var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
            Double busisum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid select o.amount).DefaultIfEmpty(0).Sum();
            Double commsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid select o.commission).DefaultIfEmpty(0).Sum();
            sclist.Add(new SpotCommList { newagentid = broker, newbondid = cbr.newbondid, name = cbr.name, Business = busisum, Commission = commsum, date = stdate, companyname = cr.CompanyName, branchname = br.BranchName });

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "spotcommissionreport.rpt"));
            rd.SetDataSource(sclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult SCV(string newagentid, string newbondid, DateTime? date, double commission = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["newbondid"] = newbondid;
                ViewData["sdate"] = date;
                ViewData["commission"] = commission;
                return View();
            }
        }
        [HttpPost]
        public ActionResult SCV(Voucher_Report vt, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount, string newbondid, DateTime? date)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                List<SpotCommList> sclist = new List<SpotCommList>();
                if (newagentid != null)
                {

                    var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                    Double busisum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid && o.status == 0 select o.amount).DefaultIfEmpty(0).Sum();
                    Double commsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == newbondid && o.status == 0 select o.commission).DefaultIfEmpty(0).Sum();
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    SpotCommTab ob = new SpotCommTab();
                    ob.newagentid = newagentid;
                    ob.business = busisum;
                    ob.commission = commsum;
                    ob.date = DateTime.Now.Date;
                    ob.opid = ar.BranchCode;
                    ob.Newbondid = newbondid;
                    /////---------paymethod------------
                    ob.paymethod = vt.paymethod;
                    if (vt.paymethod == "Cheque")
                    {
                        ob.bank = vt.bank;
                        ob.Account = vt.Account;
                        ob.chequeno = vt.chequeno;
                        ob.ACholdername = vt.ACholdername;
                        ob.Branch = vt.Branch;
                        ob.IFSCCode = vt.IFSCCode;
                        ob.ChequeAmount = vt.ChequeAmount;
                        ob.Chequedate = vt.Chequedate;
                        ob.transactiontype = "NA";
                        ob.Chequeimage = chkimg;
                    }
                    else if (ob.paymethod == "banktransaction")
                    {
                        ob.bank = trbank;
                        ob.Account = holderacno;
                        ob.chequeno = transactionid;
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = tramount;
                        ob.Chequedate = Convert.ToDateTime(transactiondate);
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = vt.transactiontype;
                    }
                    else if (ob.paymethod == "DD")
                    {
                        ob.bank = "NA";
                        ob.Account = "NA";
                        ob.chequeno = ddno;
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = ddamount;
                        ob.Chequedate = DateTime.Now.Date;
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = "NA";
                    }
                    else if (ob.paymethod == "Cash")
                    {
                        ob.bank = "NA";
                        ob.Account = "NA";
                        ob.chequeno = "NA";
                        ob.ACholdername = "NA";
                        ob.Branch = "NA";
                        ob.IFSCCode = "NA";
                        ob.ChequeAmount = cashamount;
                        ob.Chequedate = DateTime.Now.Date;
                        ob.Chequeimage = "~/Photo/default.jpg";
                        ob.transactiontype = "NA";
                    }
                    db.SpotCommTabs.Add(ob);
                    db.SaveChanges();



                    var splist = db.spotcommission_tabs.Where(i => i.newagentid == newagentid && i.newbondid == newbondid && i.status == 0).ToList();
                    splist.ForEach(ui => ui.status = 1);
                    db.SaveChanges();

                    ViewBag.msg = "Spot Commission Paid Successfully";
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(stdate.Month) + "," + stdate.Year;
                    Double credit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Credit).DefaultIfEmpty(0).Sum();
                    Double debit = (from aa in db.Wallet_Transactions where aa.agentid == newagentid select aa.Debit).DefaultIfEmpty(0).Sum();
                    Double total = credit - debit;
                    //Wallet_Transaction wt = new Wallet_Transaction();
                    //wt.agentid = newagentid;
                    //wt.Credit = commsum;
                    //wt.netamount = total + commsum;
                    //wt.Debit = 0;
                    //wt.Date_Time = DateTime.Now;
                    //wt.Sender_Id = User.Identity.Name;
                    //wt.Sender_Name = User.Identity.Name;
                    //wt.status = 1;
                    //wt.Mode = "Spot";
                    //wt.Type = "Credit";
                    //string mm = DateTime.Now.ToString("yyyyMMddHHmmssFFF");

                    //wt.Transaction_No = "V" + mm;
                    //wt.Remark = "Spot Of month " + monthname;
                    //db.Wallet_Transactions.Add(wt);
                    //db.SaveChanges();
                }
                TempData["newagentid"] = newagentid;
                TempData["newbondid"] = newbondid;
                TempData["date"] = date;
                return RedirectToAction("SpotCommission");
            }
        }

        #endregion

        #region Passbook Menu Start Here


        [HttpGet]
        public ActionResult PrintSavingPassBookDetail()
        {
            List<SavingAccountInfo> pass = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(pass);
            }
        }
        [HttpPost]
        public ActionResult PrintSavingPassBookDetail(string accno)
        {
            List<SavingAccountInfo> pass = new List<SavingAccountInfo>();
            var count = db.SavingAccountInfos.Where(c => c.accountno == accno).Count();
            if (count == 1)
            {
                var pass1 = db.SavingAccountInfos.Where(b => b.accountno == accno).ToList();
                return View(pass1);
            }
            else
            {
                ViewBag.msg = "This Account No. Does Not Exist Or Account FD";
                return View(pass);

            }
        }
        public ActionResult PDFPrintSavingPassBookDetail(string accno)
        {
            List<SavingAccountInfo> pass = new List<SavingAccountInfo>();
            var count = db.SavingAccountInfos.Where(c => c.accountno == accno).Count();
            if (count == 1)
            {
                var pass1 = db.SavingAccountInfos.Where(b => b.accountno == accno).ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "savingdetail.rpt"));
                rd.SetDataSource(pass1);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


            }
            return View();
        }

        [HttpGet]
        public ActionResult PrintPassBookColumn()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Operator");
            }
            else
            {
                return View();
            }
        }

        public ActionResult PDFPrintSavingColumn()
        {


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "columndetail.rpt"));


            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        public ActionResult PDFPrintRDColumn()
        {
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "RDcolumndetail.rpt"));


            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult SavingTransiction()
        {
            List<printpassbook> print = new List<printpassbook>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }

            return View(print);
        }
        [HttpPost]
        public ActionResult SavingTransiction(string accountno, int lastsr)
        {
            List<printpassbook> print = new List<printpassbook>();
            var count = db.TransactionTabs.Where(c => c.accountno == accountno && c.status <= lastsr).Count();
            while (count > 0)
            {
                print.Add(new printpassbook { sr = null, trandate = null, remark = null, tranid = null, mode = null, status = null, installno = null, widthdraw = null, diposit = null, balance = null, lateday = null, latefine = null });

                count = count - 1;
            }
            var install = db.TransactionTabs.Where(b => b.accountno == accountno && b.status > lastsr).ToList();
            foreach (var r in install)
            {
                print.Add(new printpassbook { sr = r.status.ToString(), remark = r.remark, trandate = r.pdate.ToString("dd/MM/yyyy"), tranid = r.transactionid, mode = r.paymethod, status = r.status.ToString(), installno = r.status.ToString(), widthdraw = r.debit.ToString(), diposit = r.credit.ToString(), balance = r.balance.ToString(), lateday = null, latefine = null });

            }
            acno = accountno;
            ltsr = lastsr;
            return View(print);
        }
        public ActionResult PDFSavingTransiction()
        {
            List<printpassbook> print = new List<printpassbook>();
            var count = db.TransactionTabs.Where(c => c.accountno == acno && c.status <= ltsr).Count();
            while (count > 0)
            {
                print.Add(new printpassbook { sr = null, trandate = null, tranid = null, mode = null, status = null, installno = null, widthdraw = null, diposit = null, balance = null });

                count = count - 1;
            }
            var install = db.TransactionTabs.Where(b => b.accountno == acno && b.status > ltsr).ToList();
            foreach (var r in install)
            {
                print.Add(new printpassbook { sr = r.status.ToString(), trandate = r.pdate.ToString("dd/MM/yyyy"), tranid = r.transactionid, mode = r.paymethod, status = "1", installno = r.status.ToString(), widthdraw = r.debit.ToString(), diposit = r.credit.ToString(), balance = r.balance.ToString() });

            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Savingtransiction.rpt"));
            rd.SetDataSource(print);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult PrintPassBook()
        {
            List<printpassbook> print = new List<printpassbook>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }

            return View(print);
        }
        [HttpPost]
        public ActionResult PrintPassBook(string newbond, int lastsr)
        {
            List<printpassbook> print = new List<printpassbook>();
            int days = 0;
            var a = db.appltabs.Where(f => f.newbondid == newbond && f.plantype == "RD").Count();
            if (a == 1)
            {
                var bb = db.appltabs.Single(p => p.newbondid == newbond);

                var count = db.Installmenttabs.Where(c => c.newbondid == newbond && c.payamount != 0 && c.installmentno <= lastsr).Count();
                while (count > 0)
                {
                    print.Add(new printpassbook { sr = null, lateday = null, trandate = null, tranid = null, mode = null, status = null, installno = null, widthdraw = null, diposit = null, balance = null, latefine = null });

                    count = count - 1;
                }
                var install = db.Installmenttabs.Where(b => b.newbondid == newbond && b.payamount != 0 && b.installmentno > lastsr).ToList();
                foreach (var r in install)
                {
                    var check = db.Installmenttabs.Where(s => s.newbondid == newbond && s.installmentno == r.installmentno && s.payamount != 0 && s.receiptno == r.receiptno).Count();
                    if (check == 1)
                    {
                        if (r.payamount != 0)
                        {
                            if (r.paymentdate > r.prevexpirydate)
                            {
                                DateTime dt1 = Convert.ToDateTime(r.paymentdate);
                                DateTime dt2 = r.prevexpirydate;
                                TimeSpan ts = dt1.Subtract(dt2);
                                days = ts.Days;
                            }
                            else
                            {
                                days = 0;
                            }
                        }
                        else
                        {
                            days = 0;
                        }
                        var balance = (from o in db.Installmenttabs where o.installmentno <= r.installmentno && o.payamount != 0 && o.newbondid == newbond select o.payamount).Sum();
                        var detail = db.Installmenttabs.Single(p => p.receiptno == r.receiptno && p.newbondid == newbond && p.installmentno == r.installmentno);
                        print.Add(new printpassbook { lateday = days.ToString(), sr = detail.installmentno.ToString(), trandate = detail.paymentdate.Value.ToString("dd/MM/yyyy"), tranid = detail.receiptno, mode = detail.mode, status = "1", installno = detail.installmentno.ToString(), widthdraw = detail.reliefrs.ToString(), latefine = detail.latefine.ToString(), diposit = detail.payamount.ToString(), balance = balance.ToString() });
                    }
                }
                bond = newbond;
                lstsr = lastsr;


            }
            else
            {
                ViewBag.msg = "Please Check Account No or Account is FD Type";
            }
            return View(print);
        }

        public ActionResult PDFPrintPassBook()
        {
            int days = 0;
            List<printpassbook> print = new List<printpassbook>();
            var bb = db.appltabs.Single(p => p.newbondid == bond);


            var count = db.Installmenttabs.Where(c => c.newbondid == bond && c.payamount != 0 && c.installmentno <= lstsr).Count();
            while (count > 0)
            {
                print.Add(new printpassbook { sr = null, lateday = null, trandate = null, tranid = null, mode = null, status = null, installno = null, widthdraw = null, diposit = null, balance = null });

                count = count - 1;
            }
            var install = db.Installmenttabs.Where(b => b.newbondid == bond && b.payamount != 0 && b.installmentno > lstsr).ToList();
            foreach (var r in install)
            {
                var check = db.Installmenttabs.Where(s => s.newbondid == bond && s.installmentno == r.installmentno && s.payamount != 0 && s.receiptno == r.receiptno).Count();
                if (check == 1)
                {
                    if (r.payamount != 0)
                    {
                        if (r.paymentdate > r.prevexpirydate)
                        {
                            DateTime dt1 = Convert.ToDateTime(r.paymentdate);
                            DateTime dt2 = r.prevexpirydate;
                            TimeSpan ts = dt1.Subtract(dt2);
                            days = ts.Days;
                        }
                        else
                        {
                            days = 0;
                        }
                    }
                    else
                    {
                        days = 0;
                    }
                    var balance = (from o in db.Installmenttabs where o.installmentno <= r.installmentno && o.payamount != 0 && o.newbondid == bond select o.payamount).Sum();
                    var detail = db.Installmenttabs.Single(p => p.receiptno == r.receiptno && p.newbondid == bond && p.installmentno == r.installmentno);
                    print.Add(new printpassbook { lateday = days.ToString(), sr = detail.installmentno.ToString(), trandate = detail.paymentdate.Value.ToString("dd/MM/yyyy"), tranid = detail.receiptno, mode = detail.mode, status = "1", installno = detail.installmentno.ToString(), widthdraw = detail.reliefrs.ToString(), latefine = detail.latefine.ToString(), diposit = detail.payamount.ToString(), balance = balance.ToString() });
                }
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "transiction.rpt"));
            rd.SetDataSource(print);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult PrintPassBookDetail()
        {
            List<appltab> pass = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Operator");
            }
            else
            {
                return View(pass);
            }
        }
        [HttpPost]
        public ActionResult PrintPassBookDetail(string newbondid)
        {
            List<appltab> pass = new List<appltab>();
            var count = db.appltabs.Where(c => c.newbondid == newbondid && c.plantype == "RD").Count();
            if (count == 1)
            {
                var pass1 = db.appltabs.Where(b => b.newbondid == newbondid && b.plantype == "RD").ToList();
                return View(pass1);
            }
            else
            {
                ViewBag.msg = "This Account No. Does Not Exist Or Account FD";
                return View(pass);

            }


        }
        public ActionResult PDFPrintPassBookDetail(string newbondid)
        {
            List<appltab> pass = new List<appltab>();
            var count = db.appltabs.Where(c => c.newbondid == newbondid && c.plantype == "RD").Count();
            if (count == 1)
            {
                var pass1 = db.appltabs.Where(b => b.newbondid == newbondid && b.plantype == "RD").ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "RdDetail.rpt"));
                rd.SetDataSource(pass1);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


            }
            return View();

        }

        #endregion Passbook Menu End Here

        #region Duplicate Start Here
        [HttpGet]
        public ActionResult ChequeDuplicateRenewalReceipt()
        {
            List<DupliReceipt> dplist = new List<DupliReceipt>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                return View();
            }
        }

        [HttpPost]
        public ActionResult ChequeDuplicateRenewalReceipt(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {




                var count = db.TempInstallmenttabs.Where(t => t.newbondid == newbondid && t.status == 1).Count();

                if (count > 0)
                {
                    var ap = db.appltabs.Single(t => t.newbondid == newbondid);
                    var tp = db.TempInstallmenttabs.Single(t => t.newbondid == newbondid && t.status == 1);
                    List<tempcheque> bond = new List<tempcheque>();
                    var max = (from t in db.TempInstallmenttabs where t.newbondid == newbondid && t.status == 1 select t.installmentno).Max();
                    var ta = db.TempInstallmenttabs.Single(t => t.newbondid == newbondid && t.status == 1 && t.installmentno == max);
                    var amount = (from t in db.TempInstallmenttabs where t.newbondid == newbondid && t.status == 1 select t.payamount).Sum();
                    var list = db.appltabs.Single(a => a.newbondid == newbondid);
                    bond.Add(new tempcheque { newbondid = ta.newbondid, name = list.name, nolandunit = list.nolandunit, opid = ta.opid, bookingamount = (amount+(ta.latefine-ta.reliefrs)), bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Bbranch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = Convert.ToDateTime(ta.Chequedate), Chequeimage = ta.Chequeimage });

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MasterRenewAckReceipt.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");


                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                    return View();
                }
                else
                {
                    Response.Write("<script>alert('No Pending Installments Of this Customer')</script>");
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult AgreementForm()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult AgreementForm(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var ar = db.appltabs.Where(a => a.newbondid == newbondid).ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Agreement.rpt"));
                rd.SetDataSource(ar);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }

        }

        [HttpGet]
        public ActionResult DuplicateBond()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult DuplicateBond(string newbond)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var st = db.appltabs.Single(a => a.newbondid == newbond);
                //if (st.printstatus == 1)
                //{
                if (st.status == 0)
                {
                    Response.Write("<script>alert('This Customer is block')</script>");
                }
                else
                {
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "Bond";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@newbondid", newbond);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }
                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }

                    var ar = db.appltabs.Single(a => a.newbondid == newbond);
                    DuplicateTab dt = new DuplicateTab();
                    dt.newbondid = newbond;
                    dt.payamount = ar.payment;
                    dt.paymentno = 1;
                    dt.opid = User.Identity.Name;
                    dt.date = DateTime.Now;
                    dt.macaddress = localIP;
                    dt.type = "Bond";
                    db.DuplicateTabs.Add(dt);
                    db.SaveChanges();

                    var n = new NumberToEnglish();
                    List<Bond_report> bond = new List<Bond_report>();
                    bond = db.Bond_reports.ToList();
                    string reportname = "report.rpt";
                    if (ar.mode == "Single") {
                        reportname = "fd-report.rpt";
                        if (bond.Count() > 0)
                        {
                            bond[0].upnewintroducerid = n.changeToWords(bond[0].total_con.ToString(), true);
                            bond[0].branchaddress = cg.CompanyName;
                            bond[0].agentname = ar.newmemberid;
                            bond[0].upintroducername = n.changeToWords(ar.expectedraisablevalue.ToString(), true);
                            var rt = db.RateTabs.Single(d => d.Id == ar.plancode);
                            bond[0].upintroducerid = (int)rt.quotaper;
                        }
                    }
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), reportname));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }
                //}
                //else
                //{
                //    Response.Write("<script>alert('This bond is not approved')</script>");
                //}

                return View();
            }

        }

        [HttpGet]
        public ActionResult DuplicateReceipt(string newbondid, int paymentno = 0, Double payamount = 0)
        {
            List<DupliReceipt> dplist = new List<DupliReceipt>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                if (newbondid != null)
                {
                    string localIP = "";

                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }
                    NumberToEnglish n = new NumberToEnglish();
                    var amountinwords = n.changeToWords(payamount.ToString(), true);
                    int from = (from p in db.Installmenttabs where p.newbondid == newbondid && p.paymentno == paymentno select p.installmentno).Min();
                    int to = (from p in db.Installmenttabs where p.newbondid == newbondid && p.paymentno == paymentno select p.installmentno).Max();

                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "Receipt";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@newbondid", newbondid);
                    cmd.Parameters.AddWithValue("@paymentno", paymentno);
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                    cmd.Parameters.AddWithValue("@payamount", payamount);
                    cmd.Parameters.AddWithValue("@amountinword", amountinwords);
                    cmd.Parameters.AddWithValue("@from", from);
                    cmd.Parameters.AddWithValue("@to", to);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();

                        DuplicateTab dt = new DuplicateTab();
                        dt.newbondid = newbondid;
                        dt.payamount =payamount;
                        dt.paymentno = paymentno;
                        dt.opid = User.Identity.Name;
                        dt.date = DateTime.Now;
                        dt.macaddress = localIP;
                        dt.type = "Receipt";
                        db.DuplicateTabs.Add(dt);
                        db.SaveChanges();

                        List<RecieptTab> drlist = new List<RecieptTab>();

                        foreach (var cc in db.RecieptTabs.ToList())
                        {


                            DateTime luck = new DateTime((Convert.ToInt32(cc.date.Split('/')[2])), (Convert.ToInt32(cc.date.Split('/')[1])), (Convert.ToInt32(cc.date.Split('/')[0])));
                            drlist.Add(new RecieptTab{
                            
                          
                        newbondid = cc.newbondid,
                        branchname = cc.branchname,
                        branchaddress =cc.branchaddress , 
                        branchcode =cc.branchcode ,
                        cssno = cc.cssno ,
                        paymentno =cc.paymentno ,
                        ledgerfolio =cc.ledgerfolio ,
                        installmentno = cc.installmentno ,
                        receiptno =cc.receiptno ,
                        date =cc.date ,



                        duedate = luck.ToString("MMMM") +" - "+ luck.ToString("yyyy"),
                        nextduedate=cc.nextduedate ,
                        expirydate =cc.expirydate ,
                                                     
                        name =cc.name,
                        father =cc.father ,
                        relation=cc.relation ,
                        age=cc.age ,
                        address = cc.address ,
                        dateofcommencement=cc.dateofcommencement , 
     
                        totalconsideration=cc.totalconsideration,
                        maturityamount=cc.maturityamount,
                        yearsubscrib=cc.yearsubscrib,
                        unitcode=cc.unitcode,
                                                         
                        planname=cc.planname,
                        term = cc.term,
                        landunit = cc.landunit,
                        mode = cc.mode,
                        amount = cc.amount,
                        agencycode = cc.agencycode,
                        payamount = cc.payamount,
                        paymethod = cc.paymethod,
                        othercharge = cc.othercharge,
                        amountinwords = n.changeToWords(cc.payamount.ToString(),true),
                        opid = cc.opid   
                          });                            
                        }


                        ReportDocument rd = new ReportDocument();
                        rd.Load(Path.Combine(Server.MapPath("~/Reports"), "NewRenewal.rpt"));
                        rd.SetDataSource(drlist);

                        Response.Buffer = false;
                        Response.ClearContent();
                        Response.ClearHeaders();


                        try
                        {
                            Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            stream.Seek(0, SeekOrigin.Begin);
                            return new FileStreamResult(stream, "application/pdf");
                        }
                        catch (Exception ex)
                        {
                            Response.Write("<script>alert('" + ex.Message + "')</script>");
                        }
                        finally
                        {
                            rd.Close();
                            rd.Dispose();
                        }



                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }

                }
                return View(dplist);
            }
        }
        [HttpPost]
        public ActionResult DuplicateReceipt(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DupliReceipt> dplist = new List<DupliReceipt>();
                Double payamount = 0;
                var ap = db.appltabs.Single(a => a.newbondid == newbondid);
                if (ap.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block')</script>");
                }
                else
                {
                    var rlist = (from p in db.Installmenttabs where p.newbondid == newbondid && p.paymentno != 0 select new { p.paymentno }).Distinct();
                    foreach (var r in rlist.ToList())
                    {
                        payamount = (from u in db.Installmenttabs where u.newbondid == newbondid && u.paymentno == r.paymentno select u.payamount).DefaultIfEmpty(0).Sum();
                        var f = db.Installmenttabs.FirstOrDefault(d => d.paymentno == r.paymentno && d.newbondid == newbondid);
                        //payamount = (payamount + f.latefine) - f.reliefrs;
                        dplist.Add(new DupliReceipt { newbondid = newbondid, paymentno = r.paymentno, payamount = payamount });
                    }
                }
                return View(dplist);
            }
        }

        [HttpGet]
        public ActionResult BulkReceipt()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult BulkReceipt(DateTime date, int mincss = 0, int maxcss = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                string localIP = "";

                foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                {
                    if (nic.OperationalStatus == OperationalStatus.Up)
                    {
                        localIP += nic.GetPhysicalAddress().ToString();
                        break;
                    }
                }

                var row = (from br in db.RecieptTabs select br).ToList();
                foreach (var m in row.ToList())
                {
                    db.RecieptTabs.Remove(m);
                }

                while (mincss <= maxcss)
                {
                    var rr = db.Installmenttabs.Single(i => i.paymentdate == date && i.cssno == mincss && i.payamount != 0 && i.branch == User.Identity.Name);

                    NumberToEnglish n = new NumberToEnglish();
                    var amountinwords = n.changeToWords(rr.payamount.ToString(), true);

                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "BulkReceipt";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@newbondid", rr.newbondid);
                    cmd.Parameters.AddWithValue("@paymentno", rr.paymentno);
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                    cmd.Parameters.AddWithValue("@payamount", rr.payamount);
                    cmd.Parameters.AddWithValue("@amountinword", amountinwords);
                    cmd.Parameters.AddWithValue("@from", rr.installmentno);
                    cmd.Parameters.AddWithValue("@to", rr.installmentno);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();

                        DuplicateTab dt = new DuplicateTab();
                        dt.newbondid = rr.newbondid;
                        dt.payamount = rr.payamount;
                        dt.paymentno = rr.paymentno;
                        dt.opid = User.Identity.Name;
                        dt.date = DateTime.Now;
                        dt.macaddress = localIP;
                        dt.type = "Receipt";
                        db.DuplicateTabs.Add(dt);
                        db.SaveChanges();


                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }
                    mincss = mincss + 1;
                }

                List<RecieptTab> drlist = new List<RecieptTab>();
                drlist = db.RecieptTabs.ToList();

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BulkRenewal.rpt"));
                rd.SetDataSource(drlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult PrintMoneyBack()
        {
            List<Printcheckbook> print = new List<Printcheckbook>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Login", "Home");
            }

            return View(print);
        }
        [HttpPost]
        public ActionResult PrintMoneyBack(string account, int install = 0, int lastinstall = 0)
        {
            List<Printcheckbook> print = new List<Printcheckbook>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Login", "Home");
            }
            else
            {
                var app = db.appltabs.Single(d => d.newbondid == account);
                if (app.status == 1)
                {
                    var ReturnAmount = db.Installmenttabs.Where(s => s.newbondid == account && s.installmentno >= install && s.installmentno <= lastinstall).ToList();



                    foreach (var s in ReturnAmount)
                    {
                        var dt = DateTime.Now;
                        if (s.mode == "Monthly")
                        {
                            dt = s.expirydate;
                        }
                        if (s.mode == "Quarterly")
                        {
                            dt = s.expirydate;
                        }
                        if (s.mode == "Halfyearly")
                        {
                            dt = s.expirydate;
                        }
                        if (s.mode == "Yearly")
                        {
                            dt = s.expirydate;
                        }

                        string sdt = dt.ToString("dd/MM/yyyy");


                        NumberToEnglish ne = new NumberToEnglish();
                        var amountword = ne.changeToWords(s.amount.ToString(), true);
                        print.Add(new Printcheckbook { Name = app.name, Tranid = s.receiptno, Amount = s.amount, term = s.term_plan, Planname = s.planname, AccountNo = s.newbondid, Amountword = amountword, date = sdt });
                    }
                }
                else
                {
                    Response.Write("<script>alert('Please approve check printing from Admin..')</script>");
                }
                NewBondid = account;
                ltsr = install;
                lstsr = lastinstall;

            }

            return View(print);
        }
        public ActionResult PDFPrintMoneyBack()
        {
            List<Printcheckbook> print = new List<Printcheckbook>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Login", "Home");
            }
            else
            {
                var app = db.appltabs.Single(d => d.newbondid == NewBondid);
                var ReturnAmount = db.Installmenttabs.Where(s => s.newbondid == NewBondid && s.installmentno >= ltsr && s.installmentno <= lstsr).ToList();
                foreach (var s in ReturnAmount)
                {
                    var dt = DateTime.Now;
                    if (s.mode == "Monthly")
                    {
                        dt = s.expirydate;
                    }
                    if (s.mode == "Quarterly")
                    {
                        dt = s.expirydate;
                    }
                    if (s.mode == "Halfyearly")
                    {
                        dt = s.expirydate;
                    }
                    if (s.mode == "Yearly")
                    {
                        dt = s.expirydate;
                    }

                    string sdt = dt.ToString("dd/MM/yyyy");

                    NumberToEnglish ne = new NumberToEnglish();
                    var amountword = ne.changeToWords(s.amount.ToString(), true);
                    print.Add(new Printcheckbook { Name = app.name, Tranid = s.receiptno, Amount = s.amount, term = s.term_plan, Planname = s.planname, AccountNo = s.newbondid, Amountword = amountword, date = sdt });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Moneybackcheck.rpt"));
                rd.SetDataSource(print);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult DupliSpotCommission(string newagentid, string newbondid, DateTime? date)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                if (newagentid != null)
                {
                    var duplicount = (from o in db.SpotCommTabs where o.newagentid == newagentid select o).Count();
                    var ar = db.AgentDetails.Single(aa => aa.NewAgentId == newagentid);
                    var broker = string.Empty;
                    broker = ar.name + "(" + newagentid + ")";
                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                    var sr = db.spotcommission_tabs.Single(o => o.newagentid == newagentid && o.newbondid == newbondid);
                    sclist.Add(new SpotCommList { newagentid = broker, newbondid = sr.newbondid, name = sr.bondname, Business = sr.amount, Commission = sr.commission, date = sr.date, companyname = cr.CompanyName, branchname = br.BranchName });

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "spotcommissionreport.rpt"));
                    rd.SetDataSource(sclist);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);

                        return new FileStreamResult(stream, "application/pdf");
                    }

                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }

                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }

                    DuplicateTab dt = new DuplicateTab();
                    dt.newbondid = newagentid;
                    dt.payamount = sr.commission;
                    dt.paymentno = duplicount + 1;
                    dt.opid = User.Identity.Name;
                    dt.date = sr.date;
                    dt.macaddress = localIP;
                    dt.type = "SpotComm";
                    db.DuplicateTabs.Add(dt);
                    db.SaveChanges();

                    var datelist = (from sc in db.spotcommission_tabs where sc.newagentid == newagentid && sc.status == 1 orderby sc.date select sc).ToList();
                    foreach (var d in datelist.ToList())
                    {
                        Double bsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid select o.amount).DefaultIfEmpty(0).Sum();
                        Double csum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid select o.commission).DefaultIfEmpty(0).Sum();
                        sclist.Add(new SpotCommList { newagentid = newagentid, agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bsum, Commission = csum, date = d.date, companyname = cr.CompanyName, branchname = br.BranchName });

                    }


                }

                return View(sclist);
            }
        }
        [HttpPost]
        public ActionResult DupliSpotCommission(string newagentid)
        {
            List<SpotCommList> sclist = new List<SpotCommList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);

                var datelist = (from sc in db.spotcommission_tabs where sc.newagentid == newagentid && sc.status == 1 orderby sc.date select sc).ToList();
                foreach (var d in datelist.ToList())
                {
                    Double bsum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid select o.amount).DefaultIfEmpty(0).Sum();
                    Double csum = (from o in db.spotcommission_tabs where o.newagentid == newagentid && o.newbondid == d.newbondid select o.commission).DefaultIfEmpty(0).Sum();
                    sclist.Add(new SpotCommList { newagentid = newagentid, agentname = d.name, newbondid = d.newbondid, name = d.bondname, Business = bsum, Commission = csum, date = d.date, companyname = cr.CompanyName, branchname = br.BranchName });

                }

                return View(sclist);
            }
        }
        #endregion

        #region Voucher Menu Start Here

        [HttpGet]
        public ActionResult DCBrokerVoucher()
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var bt = db.Branchtabs.Single(bb => bb.BranchCode == User.Identity.Name);
                var newagentid = TempData["newagentid"];
                int month = Convert.ToInt32(TempData["month"]);
                int year = Convert.ToInt32(TempData["year"]);
                if (newagentid != null)
                {

                    /////////Selecting Voucher List Start Here//////
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month) + "," + year;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year && c.newagentid == newagentid select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    foreach (var b in blist)
                    {
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
                        List<plan> pclist = new List<plan>();
                        List<require> rlist = new List<require>();
                        Double tdsper = 0;
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);
                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }
                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                        var vyear = year.ToString();

                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        //------Inserting self voucher------------
                        var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                        foreach (var p in spclist.ToList())
                        {
                            pclist.Add(new plan { planname = p.planname });
                        }

                        foreach (var pc in pclist)
                        {


                            var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                            foreach (var spy in spylist.ToList())
                            {

                                var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                                var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                                if (business > 0)
                                {
                                    var percentage = (commission / business) * 100;
                                    rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                }
                            }
                        }

                        //------End Inserting self voucher----------------

                        //----------selecting team business and commission of selected month---------------

                        var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == year select a).ToList();
                        List<agents> alist = new List<agents>();
                        foreach (var aar in arlist)
                        {
                            alist.Add(new agents { agentcode = aar.agencycode });
                        }

                        foreach (var a in alist)
                        {
                            List<teamagents> tlist = new List<teamagents>();
                            List<trequire> trlist = new List<trequire>();
                            var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                            int rcount = 0;
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                            var maxsragent = tlist.Count;
                            var minsragent = 1;
                            while (minsragent <= maxsragent)
                            {

                                var da = tlist.Where(t => t.sr == minsragent);
                                foreach (var d in da.ToList())
                                {
                                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                    foreach (var aa in aalist)
                                    {
                                        rcount = rcount + 1;
                                        tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                    }

                                }
                                minsragent = minsragent + 1;
                                maxsragent = tlist.Count;
                            }

                            foreach (var tt in tlist)
                            {
                                var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == year);
                                var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                                foreach (var nctr in nctrlist)
                                {
                                    trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                                }

                            }

                            var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == year);
                            var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                            foreach (var dpc in dpclist)
                            {
                                var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                                foreach (var dpy in dpylist)
                                {
                                    var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                    var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                    if (tbusiness > 0)
                                    {
                                        var tpercentage = (tcommission / tbusiness) * 100;
                                        rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, panno = br.panno, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                    }
                                }
                            }

                        }


                        //----------End selecting team business and commission of selected month---------------

                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = bt.BranchName, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = netamount, commission = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, bounusamount = bonusamount, status = vcount, month = month, year = year });
                        }

                    }


                    //----------End selecting team business and commission of selected month---------------
                    /////////Selecting Voucher List End Here//////

                }

                return View(vlist);
            }
        }
        [HttpPost]
        public ActionResult DCBrokerVoucher(DateTime paydate, string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var bt = db.Branchtabs.Single(bb => bb.BranchCode == User.Identity.Name);
                List<VoucherList> vlist = new List<VoucherList>();
                MonthName mn = new MonthName();
                var monthnam = mn.numbertomonthname(month);
                var yyear = year.ToString();
                var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == year && c.newagentid == newagentid).Count();
                if (vrcount > 0)
                {

                    var monthname = mn.numbertomonthname(month) + "," + year;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year && c.newagentid == newagentid select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    foreach (var b in blist)
                    {
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
                        List<plan> pclist = new List<plan>();
                        List<require> rlist = new List<require>();
                        Double tdsper = 0;
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);
                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }

                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                        var vyear = year.ToString();

                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        //------Inserting self voucher------------
                        var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                        foreach (var p in spclist.ToList())
                        {
                            pclist.Add(new plan { planname = p.planname });
                        }

                        foreach (var pc in pclist)
                        {
                            var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                            foreach (var spy in spylist.ToList())
                            {

                                var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                                var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                                if (business > 0)
                                {
                                    var percentage = (commission / business) * 100;
                                    rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, panno = br.panno, voucherno = voucherno + 1 });
                                }
                            }
                        }

                        //------End Inserting self voucher----------------

                        //----------selecting team business and commission of selected month---------------

                        var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == year select a).ToList();
                        List<agents> alist = new List<agents>();
                        foreach (var aar in arlist)
                        {
                            alist.Add(new agents { agentcode = aar.agencycode });
                        }

                        foreach (var a in alist)
                        {
                            List<teamagents> tlist = new List<teamagents>();
                            List<trequire> trlist = new List<trequire>();
                            var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                            int rcount = 0;
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                            var maxsragent = tlist.Count;
                            var minsragent = 1;
                            while (minsragent <= maxsragent)
                            {

                                var da = tlist.Where(t => t.sr == minsragent);
                                foreach (var d in da.ToList())
                                {
                                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                    foreach (var aa in aalist)
                                    {
                                        rcount = rcount + 1;
                                        tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                    }

                                }
                                minsragent = minsragent + 1;
                                maxsragent = tlist.Count;
                            }

                            foreach (var tt in tlist)
                            {

                                var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode & n.month == mon && n.Year == year);
                                var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                                foreach (var nctr in nctrlist)
                                {
                                    trlist.Add(new trequire { newagentid = neaid.newagentid, plancode = nctr.plancode, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                                }

                            }

                            var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid & t.month == mon && t.Year == year);
                            var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                            foreach (var dpc in dpclist)
                            {
                                var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                                foreach (var dpy in dpylist)
                                {
                                    var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                    var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                    if (tbusiness > 0)
                                    {
                                        var tpercentage = (tcommission / tbusiness) * 100;
                                        rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = tnrname.panno });
                                    }
                                }
                            }

                        }

                        //----------End selecting team business and commission of selected month---------------

                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                       
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = bt.BranchName, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = netamount, commission = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, bounusamount = bonusamount, status = vcount, month = month, year = year });
                        }
                    }
                    nnewagentid = newagentid;
                    vmonth = month;
                    vvyear = year;
                    pdate = paydate;
                    check = 1;
                    return View(vlist);
                }
                else
                {
                    Response.Write("<script>alert('Voucher is not Generate For this month Please Generate.....')</script>");
                }
                return View(vlist);
            }
        }
        [HttpGet]
        public ActionResult SetVoucherMode()
        { 
         return View();
        }
        [HttpPost]
        public ActionResult SetVoucherMode(Voucher_Report rm)
        {

            if (IsLoggedIn())
            {
                var vcnt = db.Voucher_Reports.Count(d => d.agentid == rm.agentid && d.year == rm.year && d.month == rm.month);
                if (vcnt == 0)
                {
                    rm.sdate = DateTime.Now.Date;
                    rm.edate = DateTime.Now.Date;
                    return View(rm);
                }
                else
                {
                    return RedirectToAction("DCBrokerVoucher", "Branch");
                }
            }
            else
            {
                return RedirectToAction("Logout", "Branch");
            }
        }



        public ActionResult PrintDCBrokerVoucher()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<VoucherList> vlist = new List<VoucherList>();
                MonthName mn = new MonthName();
                var monthnam = mn.numbertomonthname(vmonth);
                var yyear = vvyear.ToString();
                var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == vvyear && c.newagentid == nnewagentid).Count();
                if (vrcount > 0)
                {

                    var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(vmonth);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == vvyear && c.newagentid == nnewagentid select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    foreach (var b in blist)
                    {
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                        List<plan> pclist = new List<plan>();
                        List<require> rlist = new List<require>();
                        Double tdsper = 0;
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == vvyear);
                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }

                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                        var vyear = vvyear.ToString();

                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
                        //------Inserting self voucher------------
                        var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct().ToList();
                        foreach (var p in spclist)
                        {
                            pclist.Add(new plan { planname = p.planname });
                        }

                        foreach (var pc in pclist)
                        {
                            var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                            foreach (var spy in spylist.ToList())
                            {

                                var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                                var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.commission).DefaultIfEmpty(0).Sum();
                                if (business > 0)
                                {
                                    var percentage = (commission / business) * 100;
                                    rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, panno = br.panno, voucherno = voucherno + 1 });
                                }
                            }
                        }

                        //------End Inserting self voucher----------------

                        //----------selecting team business and commission of selected month---------------

                        var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == vvyear && a.newagentid == nnewagentid select a).ToList();
                        List<agents> alist = new List<agents>();
                        foreach (var aar in arlist)
                        {
                            alist.Add(new agents { agentcode = aar.agencycode });
                        }

                        foreach (var a in alist)
                        {
                            List<teamagents> tlist = new List<teamagents>();
                            List<trequire> trlist = new List<trequire>();
                            var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == vvyear && na.newagentid == b.newagentid);
                            int rcount = 0;
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                            var maxsragent = tlist.Count;
                            var minsragent = 1;
                            while (minsragent <= maxsragent)
                            {

                                var da = tlist.Where(t => t.sr == minsragent);
                                foreach (var d in da.ToList())
                                {
                                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == vvyear && al.newagentid == b.newagentid select new { al.agencycode }).Distinct();
                                    foreach (var aa in aalist)
                                    {
                                        rcount = rcount + 1;
                                        tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                    }

                                }
                                minsragent = minsragent + 1;
                                maxsragent = tlist.Count;
                            }

                            foreach (var tt in tlist)
                            {

                                var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode & n.month == mon && n.Year == vvyear && n.newagentid == b.newagentid);
                                var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == vmonth && nn.date.Year == vvyear select nn).ToList();
                                foreach (var nctr in nctrlist)
                                {
                                    trlist.Add(new trequire { newagentid = neaid.newagentid, plancode = nctr.plancode, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                                }

                            }

                            var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid & t.month == mon && t.Year == vvyear);
                            var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                            foreach (var dpc in dpclist)
                            {
                                var dpylist = trlist.Select(tr => new { tr.year, tr.newagentid }).Distinct();
                                foreach (var dpy in dpylist)
                                {
                                    var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.newagentid == dpy.newagentid).Sum(tr => tr.business);
                                    var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.newagentid == dpy.newagentid).Sum(tr => tr.commission);
                                    if (tbusiness > 0)
                                    {
                                        var tpercentage = (tcommission / tbusiness) * 100;
                                        rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = tnrname.panno });
                                    }
                                }
                            }

                        }

                        //----------End selecting team business and commission of selected month---------------

                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                        var str_year = vvyear.ToString();
                        var vocher_report = db.Voucher_Reports.FirstOrDefault(x=>x.agentid == b.agencycode && x.year == str_year && x.month == vmonth);
                        //if (vocher_report != null)
                        // {
                        //     vocher_report = new Voucher_Report();
                        // }
                        string cash = "", transactionid = "";

                        if (netamount > 0)
                        {
                            DateTime trasactiondate;

                            if (vocher_report.paymethod == "Cash")
                            {
                                cash = vocher_report.paymethod;
                                transactionid = "";
                                vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = netamount, commission = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, bounusamount = bonusamount, status = vcount, month = vmonth, year = vvyear, paymethod = cash });

                            }
                            else if (vocher_report.paymethod == "banktransaction" || vocher_report.paymethod == "Cheque")
                            {
                                cash = vocher_report.paymethod;
                                trasactiondate = vocher_report.Chequedate;
                                transactionid = vocher_report.chequeno;
                                vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = netamount, commission = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, bounusamount = bonusamount, status = vcount, month = vmonth, year = vvyear, Chequedate = trasactiondate, chequeno = transactionid, paymethod = cash });

                            }
                            //else
                            //{
                            //    vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = netamount, commission = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, bounusamount = bonusamount, status = vcount, month = vmonth, year = vvyear, paymethod = cash });
                            //} // vlist.Add(new VoucherList { newagentid = b.newagentid, Branchname = User.Identity.Name, TDSAmount = lesstds, advancepayment = advancepayment, GrossAmount = gcommission, name = b.name, business = gbusiness, introducerid = b.newintroducerid, amount = netamount, status = vcount, month = vmonth, year = vvyear });
                            
                        }
                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "dcvoucherdetail.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View(vlist);
            }
        }
        public ActionResult ViewCheque(string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                NumberToEnglish nw = new NumberToEnglish();
                List<printcheckbook> cheque = new List<printcheckbook>();
                string year1 = year.ToString();
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                var member = db.Voucher_Reports.Single(a => a.agentid == ar.AgencyCode && a.month == month && a.year == year1);
                string pdate = DateTime.Now.Date.ToString("dd/MM/yyyy");

                string D1 = pdate.Substring(0, 1);
                string D2 = pdate.Substring(1, 1);
                string M1 = pdate.Substring(3, 1);
                string M2 = pdate.Substring(4, 1);
                string Y1 = pdate.Substring(6, 1);
                string Y2 = pdate.Substring(7, 1);
                string Y3 = pdate.Substring(8, 1);
                string Y4 = pdate.Substring(9, 1);
                string amount = member.netamount.ToString() + "/-";
                var amountinwords = nw.changeToWords(member.netamount.ToString(), true);
                if (member.netamount > 0)
                {
                    cheque.Add(new printcheckbook { D1 = D1, D2 = D2, M1 = M1, M2 = M2, Y1 = Y1, Y2 = Y2, Y3 = Y3, Y4 = Y4, name = ar.name, amountword = amountinwords, amount = amount });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Cheque.rpt"));
                rd.SetDataSource(cheque);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);



                    return new FileStreamResult(stream, "application/pdf");



                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult PaymentOBVOne(string newagentid, int month = 0, int year = 0, int status = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                var mon = mn.numbertomonthname(month);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;
                var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
                List<plan> pclist = new List<plan>();
                List<require> rlist = new List<require>();
                Double tdsper = 0;
                var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
                var car = db.AgentDetails.Single(rrr => rrr.NewAgentId == newagentid);
                if (br.panno == null || br.panno == "Form-61")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }
                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                ViewData["tdsper"] = tdsper;
                var rankname = string.Empty;
                //------Inserting self voucher------------
                var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                foreach (var p in spclist.ToList())
                {
                    pclist.Add(new plan { planname = p.planname });
                }

                foreach (var pc in pclist)
                {
                    var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                    foreach (var spy in spylist.ToList())
                    {
                        var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                        var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                        if (business > 0)
                        {
                            var percentage = (commission / business) * 100;
                            rlist.Add(new require { agentid = br.agencycode, newagentid = newagentid, name = br.name, rankname = car.RankName, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = newagentid, brokername = br.name, brokerrank = car.RankName, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                        }
                    }
                }

                //------End Inserting self voucher----------------

                //----------selecting team business and commission of selected month---------------

                var arlist = (from a in db.BrokerCommLists where a.newintroducerid == newagentid && a.month == mon && a.Year == year select a).ToList();
                List<agents> alist = new List<agents>();
                foreach (var aar in arlist)
                {
                    alist.Add(new agents { agentcode = aar.agencycode });
                }

                foreach (var a in alist)
                {
                    List<teamagents> tlist = new List<teamagents>();
                    List<trequire> trlist = new List<trequire>();
                    var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                    int rcount = 0;
                    rcount = rcount + 1;
                    tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                    var maxsragent = tlist.Count;
                    var minsragent = 1;

                    while (minsragent <= maxsragent)
                    {

                        var da = tlist.Where(t => t.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = tlist.Count;
                    }

                    foreach (var tt in tlist)
                    {

                        var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == year);
                        var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                        foreach (var nctr in nctrlist)
                        {
                            trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, plancode = nctr.plancode, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });

                        }

                    }
                    var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == year);
                    var tcar = db.AgentDetails.Single(trrr => trrr.AgencyCode == a.agentcode);
                    var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                    foreach (var dpc in dpclist)
                    {

                        var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                        foreach (var dpy in dpylist)
                        {
                            var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                            var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                            if (tbusiness > 0)
                            {
                                var tpercentage = (tcommission / tbusiness) * 100;
                                rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, name = tnrname.name, rankname = tcar.RankName, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = newagentid, panno = br.panno, brokername = br.name, brokerrank = car.RankName, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                            }
                        }
                    }

                }


                //----------End selecting team business and commission of selected month---------------

                vnewagentid = newagentid;
                vmonth = month;
                vvyear = year;
                return View(rlist);
            }
        }
        public ActionResult PrintDCVoucher()
        {
            List<require> rlist = new List<require>();
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;
            var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
            List<plan> pclist = new List<plan>();
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            var mon = mn.numbertomonthname(vmonth);
            var br = db.BrokerCommLists.Single(a => a.newagentid == vnewagentid && a.month == mon && a.Year == vvyear);
            var car = db.AgentDetails.Single(rrr => rrr.NewAgentId == vnewagentid);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }
            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var rankname = string.Empty;
            //------Inserting self voucher------------
            var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == vnewagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
            foreach (var p in spclist.ToList())
            {
                pclist.Add(new plan { planname = p.planname });
            }

            foreach (var pc in pclist)
            {

                var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == vnewagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                foreach (var spy in spylist.ToList())
                {
                    var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Voucher" select cts.amount).DefaultIfEmpty(0).Sum();
                    var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Voucher" select cts.commission).DefaultIfEmpty(0).Sum();
                    if (business > 0)
                    {
                        var percentage = (commission / business) * 100;
                        rlist.Add(new require { agentid = br.agencycode, newagentid = br.newagentid, name = br.name, emailid = br.panno, rankname = car.RankName, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = br.panno, commtype = "Voucher" });
                    }

                    var sbusiness = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Spot" select cts.amount).DefaultIfEmpty(0).Sum();
                    var scommission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == vnewagentid && cts.date.Month == vmonth && cts.date.Year == vvyear && cts.comtype == "Spot" select cts.commission).DefaultIfEmpty(0).Sum();
                    if (sbusiness > 0)
                    {
                        var spercentage = (scommission / sbusiness) * 100;
                        rlist.Add(new require { agentid = br.agencycode, newagentid = br.newagentid, name = br.name, emailid = br.panno, rankname = car.RankName, planname = pc.planname, year = spy.year, business = sbusiness, percentage = spercentage, commission = scommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, panno = br.panno, commtype = "Spot" });
                    }
                }
            }

            //------End Inserting self voucher----------------

            //----------selecting team business and commission of selected month---------------

            var arlist = (from a in db.BrokerCommLists where a.newintroducerid == vnewagentid && a.month == mon && a.Year == vvyear select a).ToList();
            List<agents> alist = new List<agents>();
            foreach (var aar in arlist)
            {
                alist.Add(new agents { agentcode = aar.agencycode });
            }

            foreach (var a in alist)
            {
                List<teamagents> tlist = new List<teamagents>();
                List<trequire> trlist = new List<trequire>();
                var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == vvyear);
                int rcount = 0;
                rcount = rcount + 1;
                tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                var maxsragent = tlist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = tlist.Where(t => t.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = tlist.Count;
                }

                foreach (var tt in tlist)
                {
                    var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == vvyear);

                    var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == vnewagentid && nn.date.Month == vmonth && nn.date.Year == vvyear select nn).ToList();
                    foreach (var nctr in nctrlist)
                    {
                        trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, plancode = nctr.plancode, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission, commtype = nctr.comtype });

                    }

                }

                var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == vvyear);
                var tcar = db.AgentDetails.Single(trrr => trrr.AgencyCode == a.agentcode);
                var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                foreach (var dpc in dpclist)
                {
                    var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                    foreach (var dpy in dpylist)
                    {

                        var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Voucher").Sum(tr => tr.business);
                        var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Voucher").Sum(tr => tr.commission);
                        if (tbusiness > 0)
                        {
                            var tpercentage = (tcommission / tbusiness) * 100;
                            rlist.Add(new require { agentid = nagentid.agencycode, newagentid = tnrname.newagentid, name = tnrname.name, rankname = tcar.RankName, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, commtype = "Voucher" });
                        }

                        var stbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Spot").Sum(tr => tr.business);
                        var stcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year && tr.commtype == "Spot").Sum(tr => tr.commission);
                        if (stbusiness > 0)
                        {
                            var stpercentage = (stcommission / stbusiness) * 100;
                            rlist.Add(new require { agentid = nagentid.agencycode, newagentid = tnrname.newagentid, name = tnrname.name, rankname = tcar.RankName, planname = dpc.planname, year = dpy.year, business = stbusiness, percentage = stpercentage, commission = stcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = vnewagentid, brokername = br.name, brokerrank = car.RankName, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, commtype = "Spot" });
                        }
                    }
                }
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CompleteDCVoucher.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View();

        }
        [HttpGet]
        public ActionResult DCV(string newagentid, int month = 0, int year = 0, int status = 0, Double amount = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["month"] = month;
                ViewData["year"] = year;
                ViewData["amount"] = amount;
                return View();
            }
        }
        [HttpPost]
        public ActionResult DCV(Voucher_Report vr, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount,  int month = 0, int year = 0, int status = 0)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                if (newagentid != null)
                {
                    int id = 1;
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    SaveVoucher(vr, newagentid, month, year, pdate, chkimg, trbank, transactionid, transactiondate, tramount, trpmethod, holderacno, ddamount, ddno, cashamount);
                    TempData["month"] = month;
                    TempData["year"] = year;
                    TempData["newagentid"] = newagentid;
                }
                return RedirectToAction("DCBrokerVoucher");
            }
        }

        [HttpGet]
        public ActionResult CCBrokerVoucher()
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var newagentid = TempData["newagentid"];
                int month = Convert.ToInt32(TempData["month"]);
                int year = Convert.ToInt32(TempData["year"]);

                if (newagentid != null)
                {
                    int id = 1;
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month) + "," + year;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year && c.branchcode == User.Identity.Name select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    Double tdsper = 0;
                    foreach (var b in blist)
                    {
                        #region Selecting Complete Chain Start Here

                        int rcount = 0;
                        List<BrokerChain> bclist = new List<BrokerChain>();
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);
                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }

                        bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.newintroducerid, branchname = User.Identity.Name });
                        List<agents> dalist = new List<agents>();
                        var alist = (from al in db.BrokerCommLists where al.newintroducerid == b.newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                        foreach (var a in alist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                        }

                        var maxsragent = dalist.Count;
                        var minsragent = 1;
                        while (minsragent <= maxsragent)
                        {

                            var da = dalist.Where(a => a.sr == minsragent);
                            foreach (var d in da.ToList())
                            {
                                var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                foreach (var aa in aalist)
                                {
                                    rcount = rcount + 1;
                                    dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                                }

                            }
                            minsragent = minsragent + 1;
                            maxsragent = dalist.Count;
                        }

                        foreach (var dd in dalist)
                        {
                            var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                            bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.newintroducerid, branchname = User.Identity.Name });

                        }

                        #endregion

                        #region Selecting CC Voucher Start Here

                        List<require> rlist = new List<require>();
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                        var vyear = year.ToString();
                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();

                        foreach (var bc in bclist)
                        {

                            var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == year);

                            List<plan> pclist = new List<plan>();

                            //------Inserting self voucher------------

                            var spclist = (from ct in db.commission_tabs where ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                            foreach (var p in spclist.ToList())
                            {
                                pclist.Add(new plan { planname = p.planname });
                            }

                            foreach (var pc in pclist)
                            {

                                var spylist = (from sct in db.commission_tabs where sct.newagentid == br.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                                foreach (var spy in spylist.ToList())
                                {

                                    var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                                    var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                                    if (business > 0)
                                    {
                                        var percentage = (commission / business) * 100;
                                        rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                    }
                                }
                            }

                            //------End Inserting self voucher----------------

                        }
                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { id = "V" + id, newagentid = br.newagentid, name = br.name, introducerid = br.newintroducerid, TDSAmount = lesstds, GrossAmount = gcommission, amount = netamount, status = vcount, month = month, year = year });
                        }
                        id = id + 1;
                        #endregion
                    }
                }
            }
            return View(vlist);
        }
        [HttpPost]
        public ActionResult CCBrokerVoucher(DateTime paydate, int month = 0, int year = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int id = 1;
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<VoucherList> vlist = new List<VoucherList>();
                var monthnam = mn.numbertomonthname(month);
                var yyear = year.ToString();
                var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == year && c.branchcode == User.Identity.Name).Count();
                if (vrcount > 0)
                {
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    foreach (var b in blist)
                    {
                        #region Selecting Complete Chain Start Here

                        int rcount = 0;
                        Double tdsper = 0;
                        List<BrokerChain> bclist = new List<BrokerChain>();
                        var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);

                        if (br.panno == null || br.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }

                        bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name });
                        List<agents> dalist = new List<agents>();
                        var alist = (from al in db.BrokerCommLists where al.newintroducerid == b.newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                        foreach (var a in alist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                        }

                        var maxsragent = dalist.Count;
                        var minsragent = 1;
                        while (minsragent <= maxsragent)
                        {

                            var da = dalist.Where(a => a.sr == minsragent);
                            foreach (var d in da.ToList())
                            {
                                var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                foreach (var aa in aalist)
                                {
                                    rcount = rcount + 1;
                                    dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                                }

                            }
                            minsragent = minsragent + 1;
                            maxsragent = dalist.Count;
                        }

                        foreach (var dd in dalist)
                        {
                            var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                            bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

                        }

                        #endregion

                        #region Selecting CC Voucher Start Here

                        List<require> rlist = new List<require>();
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;
                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                        var vyear = year.ToString();
                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        foreach (var bc in bclist)
                        {

                            var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == year);
                            List<plan> pclist = new List<plan>();

                            //------Inserting self voucher------------
                            //var spclist = (from ct in db.commission_tabs where ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.plancode select new { ct.plancode }).Distinct();
                            var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                            foreach (var p in spclist.ToList())
                            {
                                pclist.Add(new plan { planname = p.planname });
                            }

                            foreach (var pc in pclist)
                            {
                                var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                                foreach (var spy in spylist.ToList())
                                {

                                    var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                                    var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                                    if (business > 0)
                                    {
                                        var percentage = (commission / business) * 100;
                                        rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                    }
                                }
                            }

                            //------End Inserting self voucher----------------

                        }
                        var gbusiness = rlist.Sum(tr => tr.business);
                        var gcommission = rlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { id = "V" + id, newagentid = br.newagentid, name = br.name, introducerid = br.newagentid, TDSAmount = lesstds, GrossAmount = gcommission, business = gbusiness, amount = netamount, status = vcount, month = month, year = year });
                        }
                        id = id + 1;
                        #endregion
                    }

                    vmonth = month;
                    vvyear = year;
                    pdate = paydate;
                }
                else
                {
                    Response.Write("<script>alert('Voucher is not Generate.. Please Generate Voucher For this month...')</script>");
                }

                return View(vlist);

            }

        }
        public ActionResult PrintCCBrokerVoucher()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                List<VoucherList> vlist = new List<VoucherList>();
                List<BrokerCommList> blist = new List<BrokerCommList>();
                var mon = mn.numbertomonthname(vmonth);
                blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == vvyear select c).ToList();
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                foreach (var b in blist)
                {
                    #region Selecting Complete Chain Start Here

                    int rcount = 0;
                    Double tdsper = 0;
                    List<BrokerChain> bclist = new List<BrokerChain>();
                    var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == vvyear);
                    if (br.panno == null || br.panno == "Form-61")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }

                    bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname, branchname = User.Identity.Name });
                    List<agents> dalist = new List<agents>();
                    var alist = (from al in db.BrokerCommLists where al.newintroducerid == b.newagentid && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                    foreach (var a in alist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                    }

                    var maxsragent = dalist.Count;
                    var minsragent = 1;
                    while (minsragent <= maxsragent)
                    {

                        var da = dalist.Where(a => a.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = dalist.Count;
                    }
                    foreach (var dd in dalist)
                    {
                        var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == vvyear);
                        bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

                    }

                    #endregion

                    #region Selecting CC Voucher Start Here

                    List<require> rlist = new List<require>();
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;
                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                    var vyear = vvyear.ToString();
                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
                    foreach (var bc in bclist)
                    {

                        var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == vvyear);
                        List<plan> pclist = new List<plan>();

                        //------Inserting self voucher------------
                        var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
                        foreach (var p in spclist.ToList())
                        {
                            pclist.Add(new plan { planname = p.planname });
                        }

                        foreach (var pc in pclist)
                        {
                            var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                            foreach (var spy in spylist.ToList())
                            {
                                int vyyear = Convert.ToInt32(vyear);
                                var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == vmonth && cts.date.Year == vyyear select cts.amount).DefaultIfEmpty(0).Sum();
                                var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == vmonth && cts.date.Year == vyyear select cts.commission).DefaultIfEmpty(0).Sum();
                                if (business > 0)
                                {
                                    var percentage = (commission / business) * 100;
                                    rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                }
                            }
                        }

                        //------End Inserting self voucher----------------

                    }
                    var gbusiness = rlist.Sum(tr => tr.business);
                    var gcommission = rlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                    if (netamount > 0)
                    {
                        vlist.Add(new VoucherList { newagentid = br.newagentid, name = br.name, introducerid = br.newintroducerid, business = gbusiness,TDSAmount=lesstds,GrossAmount=gcommission, amount = netamount, status = vcount, month = vmonth, year = vvyear, monthname = monthname });
                    }



                    #endregion
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "ccvoucherdetail.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(vlist);
            }

        }
        [HttpGet]
        public ActionResult PaymentOBVTwo(string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<VoucherList> vlist = new List<VoucherList>();
                var mon = mn.numbertomonthname(month);
                #region Selecting Complete Chain Start Here

                int rcount = 0;
                List<BrokerChain> bclist = new List<BrokerChain>();
                var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
                //var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;
                if (br.panno == null || br.panno == "Form-61")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }
                bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname });
                List<agents> dalist = new List<agents>();
                var alist = (from al in db.BrokerCommLists where al.newintroducerid == newagentid && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                    bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname });

                }

                #endregion

                #region Selecting CC Voucher Start Here

                List<require> rlist = new List<require>();
                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;
                ViewData["tdsper"] = tdsper;
                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                var vyear = year.ToString();
                var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();

                foreach (var bc in bclist)
                {

                    var ar = db.BrokerCommLists.Single(a => a.newagentid == bc.newagentid && a.month == mon && a.Year == year);
                    List<plan> pclist = new List<plan>();

                    //------Inserting self voucher------------
                    var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.agencycode && ct.newagentid == br.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                    foreach (var p in spclist.ToList())
                    {
                        pclist.Add(new plan { planname = p.planname });
                    }

                    foreach (var pc in pclist)
                    {

                        //var pr = db.Plans.Single(p => p.Plancode == pc.plancode);
                        var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.agencycode && sct.newagentid == br.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                        foreach (var spy in spylist.ToList())
                        {

                            var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                            var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.agencycode && cts.newagentid == br.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                            var percentage = (commission / business) * 100;
                            rlist.Add(new require { agentid = ar.agencycode, newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });

                        }
                    }

                    //------End Inserting self voucher----------------

                }

                #endregion

                vnewagentid = newagentid;
                vmonth = month;
                vvyear = year;
                return View(rlist);
            }
        }
        public ActionResult PrintCCVoucher(float netpayamount)
        {
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<VoucherList> vlist = new List<VoucherList>();
            var mon = mn.numbertomonthname(vmonth);
            #region Selecting Complete Chain Start Here

            int rcount = 0;
            List<BrokerChain> bclist = new List<BrokerChain>();
            var br = db.BrokerCommLists.Single(a => a.newagentid == vnewagentid && a.month == mon && a.Year == vvyear);
            // var bb = db.Branchtabs.Single(b => b.BranchCode == br.branchcode);
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }
            bclist.Add(new BrokerChain { newagentid = br.newagentid, name = br.name, rankcode = br.rankcode, rankname = br.rankname, introducerid = br.newintroducerid, introname = br.Introname });
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.BrokerCommLists where al.newintroducerid == vnewagentid && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == vvyear);
                bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname });

            }

            #endregion

            #region Selecting CC Voucher Start Here

            List<require> rlist = new List<require>();
            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;
            ViewData["tdsper"] = tdsper;
            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = vvyear.ToString();
            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
            
            foreach (var bc in bclist)
            {

                var ar = db.AgentDetails.Single(a => a.NewAgentId == bc.newagentid);
                List<plan> pclist = new List<plan>();

                //------Inserting self voucher------------
                var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == ar.AgencyCode && ct.newagentid == br.newagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
                foreach (var p in spclist.ToList())
                {
                    pclist.Add(new plan { planname = p.planname });
                }

                foreach (var pc in pclist)
                {

                    //var pr = db.NewPlans.Single(p => p.Plancode == pc.plancode);
                    var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == ar.AgencyCode && sct.newagentid == br.newagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                    foreach (var spy in spylist.ToList())
                    {

                        var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.AgencyCode && cts.newagentid == br.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                        var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == ar.AgencyCode && cts.newagentid == br.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.commission).DefaultIfEmpty(0).Sum();
                        var percentage = (commission / business) * 100;
                        NumberToEnglish n = new NumberToEnglish();
                        var amountinwords = n.changeToWords(netpayamount.ToString(), true);
                        var v_list = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).FirstOrDefault();
                        DateTime trasactiondate;
                        string cash = "", transactionid = "";
                        if (v_list == null)
                        {
                            v_list = new Voucher_Report();
                        }
                        if (v_list.paymethod == "Cash")
                        {
                            cash = v_list.paymethod;
                            transactionid = "";
                            rlist.Add(new require { domainname = cg.HeadOffice, amountinword = amountinwords, agentid = ar.AgencyCode, newagentid = ar.NewAgentId, name = ar.name, rankname = ar.RankName, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, chequeno = v_list.chequeno, Chequedate = v_list.Chequedate, paymethod = v_list.paymethod });

                        }
                        else if (v_list.paymethod == "banktransaction" || v_list.paymethod == "Cheque")
                        {
                            cash = v_list.paymethod;
                            trasactiondate = v_list.Chequedate;
                            transactionid = v_list.chequeno;
                            rlist.Add(new require { domainname = cg.HeadOffice, amountinword = amountinwords, agentid = ar.AgencyCode, newagentid = ar.NewAgentId, name = ar.name, rankname = ar.RankName, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, chequeno = v_list.chequeno, Chequedate = v_list.Chequedate, paymethod = v_list.paymethod });
                        }
                        //rlist.Add(new require { domainname = cg.HeadOffice, amountinword = amountinwords, agentid = ar.AgencyCode, newagentid = ar.NewAgentId, name = ar.name, rankname = ar.RankName, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, brokerid = br.newagentid, brokername = br.name, brokerrank = br.rankname, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1, chequeno = v_list.chequeno,Chequedate = v_list.Chequedate,paymethod = v_list.paymethod});

                    }
                   
                }

                //------End Inserting self voucher----------------

            }

            #endregion

            //if (rlist.Count() > 0)
            //{
            //    var sum = rlist.Sum(x => x.commission) + bonusamount;
            //    var tdssum = (rlist.Sum(x => x.commission) * tdsper) / 100;
            //    var netpaybleamt = sum - tdssum;
            //    NumberToEnglish n = new NumberToEnglish();
            //    rlist[rlist.Count() - 1].amountinword = n.changeToWords(netpaybleamt.ToString(), true);
            //}
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CompleteCCVoucher.rpt"));
            rd.SetDataSource(rlist);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            string errmsg = "";

            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
                errmsg = ex.Message;
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return Content(errmsg);
        }
        
        [HttpGet]
        public ActionResult ccv(string newagentid, int month = 0, int year = 0, int status = 0, Double amount = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["month"] = month;
                ViewData["year"] = year;
                ViewData["amount"] = amount;
                return View();
            }
        }
        [HttpPost]
        public ActionResult ccv(Voucher_Report vr, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount, int month = 0, int year = 0, int status = 0)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                if (newagentid != null)
                {
                    int id = 1;
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    CCSaveVoucher(vr, newagentid, month, year, pdate, chkimg, trbank, transactionid, transactiondate, tramount, trpmethod, holderacno, ddamount, ddno, cashamount);
                    TempData["month"] = month;
                    TempData["year"] = year;
                    TempData["newagentid"] = newagentid;
                }
                return RedirectToAction("CCBrokerVoucher");
            }
        }

        [HttpGet]
        public ActionResult BWBrokerVoucher()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                List<VoucherList> vlist = new List<VoucherList>();
                var newagentid = TempData["newagentid"];
                int month = Convert.ToInt32(TempData["month"]);
                int year = Convert.ToInt32(TempData["year"]);
                if (newagentid != null)
                {
                    /////////Selecting Voucher List Start Here//////
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month) + "," + year;
                    var mon = mn.numbertomonthname(month);
                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var mr = db.Members.Single(m => m.Id == 1);
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    Double tdsper = 0;
                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year && c.branchcode == User.Identity.Name select c).ToList();

                    foreach (var bro in blist)
                    {
                        if (bro.panno == null || bro.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }
                        List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
                        var br = db.BrokerCommLists.Single(a => a.newagentid == bro.newagentid && a.month == mon && a.Year == year);
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == bro.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;

                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                        var vyear = year.ToString();
                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        var commlist = (from co in db.commission_tabs where co.newagentid == bro.newagentid && co.date.Month == month && co.date.Year == year select co).ToList();
                        foreach (var com in commlist)
                        {
                            var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                            bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = bro.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                        }

                        var gbusiness = bwvlist.Sum(tr => tr.business);
                        var gcommission = bwvlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = br.newagentid, name = br.name, GrossAmount = gcommission, introducerid = br.newintroducerid, amount = netamount, status = vcount, month = month, year = year });
                        }
                    }
                }
                return View(vlist);
            }

        }
        [HttpPost]
        public ActionResult BWBrokerVoucher(DateTime paydate, int month = 0, int year = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<VoucherList> vlist = new List<VoucherList>();
                var yyear = year.ToString();
                var vrcount = db.ReleaseTabs.Where(c => c.month == month && c.year == yyear).Count();
                if (vrcount > 0)
                {

                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var mr = db.Members.Single(m => m.Id == 1);

                    List<BrokerCommList> blist = new List<BrokerCommList>();
                    var mon = mn.numbertomonthname(month);
                    blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year && c.branchcode == User.Identity.Name select c).ToList();
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                    Double tdsper = 0;
                    foreach (var bro in blist)
                    {
                        if (bro.panno == null || bro.panno == "Form-61")
                        {
                            tdsper = tdsr.NPCTDS;
                        }
                        else
                        {
                            tdsper = tdsr.TDS;
                        }
                        List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
                        var br = db.BrokerCommLists.Single(a => a.newagentid == bro.newagentid && a.month == mon && a.Year == year);
                        var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == bro.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                        ViewData["bonusamount"] = bonusamount;

                        var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.branchcode == User.Identity.Name select cts).Count();
                        var vyear = year.ToString();
                        var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                        var commlist = (from co in db.commission_tabs where co.newagentid == bro.newagentid && co.date.Month == month && co.date.Year == year select co).ToList();
                        foreach (var com in commlist)
                        {
                            var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                            bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = bro.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                        }

                        var gbusiness = bwvlist.Sum(tr => tr.business);
                        var gcommission = bwvlist.Sum(tr => tr.commission);
                        var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                        var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                        if (netamount > 0)
                        {
                            vlist.Add(new VoucherList { newagentid = br.newagentid, name = br.name, TDSAmount = lesstds, GrossAmount = gcommission, introducerid = br.newintroducerid, business = gbusiness, amount = netamount, status = vcount, month = month, year = year });
                        }


                    }
                }
                else
                {
                    Response.Write("<script>alert('Voucher is not released For this month...')</script>");
                }
                pdate = paydate;
                return View(vlist);
            }

        }        
        public ActionResult PrintBWBrokerVoucher()
        {
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<VoucherList> vlist = new List<VoucherList>();
            var monthnam = mn.numbertomonthname(vmonth);
            var yyear = vvyear.ToString();
            var vrcount = db.BrokerCommLists.Where(c => c.month == monthnam && c.Year == vvyear).Count();
            if (vrcount > 0)
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(m => m.Id == 1);

                List<BrokerCommList> blist = new List<BrokerCommList>();
                var mon = mn.numbertomonthname(vmonth);
                blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == vvyear select c).ToList();
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;
                foreach (var bro in blist)
                {
                    if (bro.panno == null || bro.panno == "Form-61")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
                    var br = db.BrokerCommLists.Single(a => a.newagentid == bro.newagentid && a.month == mon && a.Year == vvyear);
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == bro.newagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;

                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                    var vyear = vvyear.ToString();
                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
                    var commlist = (from co in db.commission_tabs where co.newagentid == bro.newagentid && co.date.Month == vmonth && co.date.Year == vvyear select co).ToList();
                    foreach (var com in commlist)
                    {
                        var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                        bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = bro.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                    }

                    var gbusiness = bwvlist.Sum(tr => tr.business);
                    var gcommission = bwvlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds), 2);
                    if (netamount > 0)
                    {
                        vlist.Add(new VoucherList { newagentid = br.newagentid, name = br.name, TDSAmount = lesstds, GrossAmount = gcommission, introducerid = br.newintroducerid, business = gbusiness, amount = netamount, status = vcount, month = vmonth, year = vvyear });
                    }

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "dcvoucherdetail.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View(vlist);
            }
            else
            {
                Response.Write("<script>alert('Voucher is not Generate.. Please Generate Voucher For this month...')</script>");
            }

            return View(vlist);
        }
        
        [HttpGet]
        public ActionResult PaymentOBVThree(string newagentid, int month = 0, int year = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<VoucherList> vlist = new List<VoucherList>();
                List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
                List<AgentDetail> blist = new List<AgentDetail>();
                var mon = mn.numbertomonthname(month);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(m => m.Id == 1);
                var br = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;
                if (br.panno == null || br.panno == "Form-61")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }

                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;
                ViewData["tdsper"] = tdsper;

                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
                var vyear = year.ToString();
                var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                var commlist = (from co in db.commission_tabs where co.newagentid == newagentid && co.date.Month == month && co.date.Year == year select co).ToList();
                foreach (var com in commlist)
                {
                    var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                    bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                }
                vnewagentid = newagentid;
                vmonth = month;
                vvyear = year;
                return View(bwvlist);
            }
        }
        public ActionResult PrintBWVoucher(float netpayamount)
        {
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<VoucherList> vlist = new List<VoucherList>();
            List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();
            List<AgentDetail> blist = new List<AgentDetail>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(m => m.Id == 1);
            var mon = mn.numbertomonthname(vmonth);
            var br = db.BrokerCommLists.Single(a => a.newagentid == vnewagentid && a.month == mon && a.Year == vvyear);
            var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
            Double tdsper = 0;
            if (br.panno == null || br.panno == "Form-61")
            {
                tdsper = tdsr.NPCTDS;
            }
            else
            {
                tdsper = tdsr.TDS;
            }

            var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == vnewagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
            ViewData["bonusamount"] = bonusamount;

            var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode select cts).Count();
            var vyear = vvyear.ToString();
            var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
            var commlist = (from co in db.commission_tabs where co.newagentid == vnewagentid && co.date.Month == vmonth && co.date.Year == vvyear select co).ToList();
            foreach (var com in commlist)
            {
                var appr = db.appltabs.Single(b => b.newbondid == com.newbondid);
                NumberToEnglish n = new NumberToEnglish();
                var amountinwords = n.changeToWords(netpayamount.ToString(), true);
                bwvlist.Add(new BondwiseVoucherlist { bond=amountinwords, newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = vnewagentid, brokername = br.name, brokerrank = br.rankname, panno = br.panno, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, plan = mr.planname });
            }



            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CompleteBWVoucher.rpt"));
            rd.SetDataSource(bwvlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View();

        }
        
        [HttpGet]
        public ActionResult BWV(string newagentid, int month = 0, int year = 0, int status = 0, Double amount = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                ViewData["agenid"] = newagentid;
                ViewData["month"] = month;
                ViewData["year"] = year;
                ViewData["amount"] = amount;
                return View();
            }
        }
        [HttpPost]
        public ActionResult BWV(Voucher_Report vr, HttpPostedFileBase Chequeimage, string newagentid, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string cashamount, string ddno, string ddamount, int month = 0, int year = 0, int status = 0)
        {
            List<VoucherList> vlist = new List<VoucherList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                if (newagentid != null)
                {
                    int id = 1;
                    string chkimg = string.Empty;
                    if (Chequeimage != null)
                    {
                        string img = gid();
                        chkimg = "~/Photo/" + img + ".jpg";
                        Chequeimage.SaveAs(HttpContext.Server.MapPath("~/Photo/" + img + ".jpg"));
                    }
                    else
                    {
                        chkimg = "~/Photo/default.jpg";

                    }
                    BWSaveVoucher(vr, newagentid, month, year, pdate, chkimg, trbank, transactionid, transactiondate, tramount, trpmethod, holderacno, ddamount, ddno, cashamount);
                    TempData["month"] = month;
                    TempData["year"] = year;
                    TempData["newagentid"] = newagentid;
                }
                return RedirectToAction("BWBrokerVoucher");
            }
        }

        #endregion

        #region Update Menu Start Here

        [HttpGet]
        public ActionResult UpdateOperator()
        {
            List<Operator> op = new List<Operator>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                op = db.Operators.Where(c => c.BranchCode == User.Identity.Name).ToList();
                return View(op);
            }
        }
        public JsonResult EditOperator(Operator ob)
        {
            List<Operator> oplist = new List<Operator>();
            Operator opn = db.Operators.Single(c => c.OperatorId == ob.OperatorId);
            opn.OperatorName = ob.OperatorName;
            opn.OperatorAddress = ob.OperatorAddress;
            opn.Operator_Mail = ob.Operator_Mail;
            opn.OperatorMobile = ob.OperatorMobile;

            //db.Entry(opn).State = EntityState.Modified;
            db.Entry<Operator>(opn).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            oplist = db.Operators.Where(c => c.BranchCode == User.Identity.Name).ToList();
            return Json(oplist, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult UpdateBond()
        {
            List<appltab> bd = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bd);
            }
        }
        [HttpPost]
        public ActionResult UpdateBond(appltab bd, tempappltab tbd, HttpPostedFileBase photo, HttpPostedFileBase Chequeimage, HttpPostedFileBase spanphoto, HttpPostedFileBase sphoto, HttpPostedFileBase saadharphoto, string command, string newbond, string trbank, string transactionid, string transactiondate, string tramount, string trpmethod, string holderacno, string sdob = "", string dob = "", string sanniversarydate = "")
        {
            List<appltab> mt = new List<appltab>();
            var BondType = string.Empty;
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                switch (command)
                {
                    case "Search":

                        switch (newbond)
                        {
                            case "":
                                Response.Write("<script>alert('Please Select Contributor Id First')</script>");
                                break;
                            default:

                                mt = db.appltabs.Where(c => c.newbondid == newbond).ToList();
                                return View(mt);
                        }
                        break;

                    case "Submit":
                        var ds = db.Blockdates.Where(c => c.date == bd.formdate && c.branchcode == bd.branchcode && c.status == 0).Count();
                        if (ds > 0)
                        {
                            Response.Write("<script>alert('This Date is closed please select another date')</script>");
                        }
                        else
                        {
                            var phr = new PhaseTab();
                            var countapplltab = db.appltabs.Where(ui => ui.newbondid == bd.newbondid).Count();
                            if (countapplltab != 0)
                            {

                                var dateee = Convert.ToDateTime("1991-01-01");
                                var row = db.appltabs.Single(ui => ui.newbondid == bd.newbondid);

                                var mr = db.Members.Single(m => m.Id == 1);
                                var br = db.Branchtabs.Single(bc => bc.BranchCode == bd.branchcode);
                                var cr = db.CompanyInfos.Single(csn => csn.AdminId == br.companyid);
                                int max = (from a in db.appltabs select a).Count();
                                var adr = db.AgentDetails.Single(ad => ad.NewAgentId == bd.newintroducerid);


                                TimeSpan span = bd.formdate.Subtract(bd.dob);
                                int years = (int)(span.Days / 365.25);
                                int remainder = (int)(span.Days % 365.25);
                                int months = remainder / 30;
                                if (months >= 12)
                                {
                                    int y = months / 12;
                                    int m = months % 12;
                                    months = m;
                                    years = years + y;
                                }
                                int days = remainder % 30;
                                var age = years + " years " + months + " months " + days + " days";



                                #region APPLTAB


                                
                                //-------------Personal details------------------------------////
                                row.name = bd.name;
                                row.email = bd.email;
                                row.newintroducerid = bd.newintroducerid;
                                row.introducerid = adr.AgencyCode;//
                                row.intrankcode = adr.RankCode;//
                                row.intrankname = adr.RankName;//
                                row.age = age;//
                                row.branchcode = bd.branchcode;
                                row.RelationOf = bd.RelationOf;
                                row.fathername = bd.fathername;
                                row.category = bd.category;
                                row.incomegroup = bd.incomegroup;
                                row.addr = bd.addr;
                                row.mobileno = bd.mobileno;
                                if (bd.formdate != null || bd.formdate != dateee)
                                {
                                    row.formdate = bd.formdate;
                                }
                                else
                                {
                                    row.formdate = row.formdate;
                                }
                                if (bd.dob != null || bd.dob != dateee)
                                {
                                    row.dob = bd.dob;
                                }
                                else
                                {
                                    row.dob = row.dob;
                                }
                                row.nationality = bd.nationality;
                                row.guardianname = bd.guardianname;
                                row.gurage = bd.gurage;
                                row.gurrel = bd.gurrel;
                                row.guraddr = bd.guraddr;
                                if (photo != null)
                                {
                                    string imgname = gid();
                                    row.photo = "~/Photo/" + imgname + ".jpg";
                                    photo.SaveAs(HttpContext.Server.MapPath("~/Photo/" + imgname + ".jpg"));
                                }
                                else
                                {
                                    row.photo = row.photo;

                                }
                                //-------------Personal details END------------------------------////

                                //-----Bank Information Update----------------//
                                row.panno = bd.panno;
                                row.bankname = bd.bankname;
                                row.accountno = bd.accountno;
                                row.IFSC = bd.IFSC;
                                //-----Bank Information Update END----------------//
                                //--------Second Applicant Form---------------//
                                row.sapplicantname = bd.sapplicantname;
                                row.sfathername = bd.sfathername;
                                row.smothername = bd.smothername;
                                row.scategory = bd.scategory;
                                row.scorraddress = bd.scorraddress;
                                row.scity = bd.scity;
                                row.sstate = bd.sstate;
                                row.spincode = bd.spincode;

                                //----------Same As Above ------------------------//
                                row.spermanentaddress = bd.spermanentaddress;
                                row.pcity = bd.pcity;
                                row.pstate = bd.pstate;
                                row.ppincode = bd.ppincode;
                                row.snationality = bd.snationality;
                                row.squalification = bd.squalification;
                                row.smobileno = bd.smobileno;
                                row.salternatemobileno = bd.salternatemobileno;
                                row.spanno = bd.spanno;
                                row.semailid = bd.semailid;
                                row.sdob = bd.sdob;
                                row.saadharno = bd.saadharno;
                                row.smaritialstatus = bd.smaritialstatus;
                                row.sanniversarydate = bd.sanniversarydate;
                                row.soccupation = bd.soccupation;
                                row.spassport = bd.spassport;
                                row.sresidentialstatus = bd.sresidentialstatus;

                                if (sphoto != null)
                                {
                                    row.sphoto = GenerateImageTag(sphoto);
                                }
                                else
                                {
                                    row.sphoto = row.sphoto;
                                }
                                if (saadharphoto != null)
                                {
                                    row.saadharphoto = GenerateImageTag(saadharphoto);
                                }
                                else
                                {
                                    row.saadharphoto = row.saadharphoto;
                                }
                                if (spanphoto != null)
                                {
                                    row.spanphoto = GenerateImageTag(spanphoto);
                                }
                                else
                                {
                                    row.spanphoto = row.spanphoto;
                                }
                                row.nomineename = bd.nomineename;
                                row.nomage = bd.nomage;
                                row.nomrel = bd.nomrel;
                                row.nomaddr = bd.nomaddr;
                                //----------Same As Above End------------------------//
                                //--------Second Applicant Form END--------------//

                               

                                //---------Plot Detail ----------------------------------------------------///
                                row.plotdesp = bd.plotdesp;
                                if (bd.northeast != null)
                                {
                                    row.northeast = bd.northeast;
                                }
                                else
                                {
                                    row.northeast = row.northeast;
                                }
                                if (bd.southeast != null)
                                {
                                    row.southeast = bd.southeast;
                                }
                                else
                                {
                                    row.southeast = row.southeast;
                                }
                                if (bd.northwest != null)
                                {
                                    row.northwest = bd.northwest;
                                }
                                else
                                {
                                    row.northwest = row.northwest;
                                }
                                if (bd.southwest != null)
                                {
                                    row.southwest = bd.southwest;
                                }
                                else
                                {
                                    row.southwest = row.southwest;
                                }
                                //---------Plot Detail End----------------------------------------------------///


                                //db.Entry(row).State = EntityState.Modified;
                                db.Entry<appltab>(row).State = System.Data.Entity.EntityState.Modified;
                                db.SaveChanges();

                                customerupdate_entry cupd = new customerupdate_entry();
                                cupd.updateby = User.Identity.Name;
                                cupd.customerid = bd.newbondid;
                                cupd.updatedate = DateTime.Now;
                                db.customerupdate_entrys.Add(cupd);
                                db.SaveChanges();
                                   var appldetail = db.appltabs.Single(ui => ui.newbondid == bd.newbondid);
                                    Response.Write("<script>alert('" + appldetail.name + " Update Successfully....')</script>");
                                    ViewBag.msg = mr.custname + " Update Successfully....";
                                    NewBondid = appldetail.newbondid;
                                    ViewData["bondtype"] = appldetail.propertypreference;
                                    ViewData["newbondid"] = appldetail.newbondid;
                                    ViewData["discount"] = appldetail.discountper;
                                    BondType = appldetail.propertypreference; ;

                                #endregion



                                ViewData["paymethod"] = bd.paymethod;
                                var count1 = db.BlockTabs.Where(ui => ui.Plancode == bd.projectid && ui.phaseid == bd.phaseid && ui.block == bd.block).Count();

                            }
                            else
                            {
                                ViewBag.msg = " Invalid Customer....";
                            }
                        }
                        break;

                }

            }
            return View(mt);
        }

        [HttpGet]
        public ActionResult UpdateAccount()
        {
            List<SavingAccountInfo> bd = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bd);
            }
        }
        [HttpPost]
        public ActionResult UpdateAccount(string command, string accno, SavingAccountInfo sa, HttpPostedFileBase photo, HttpPostedFileBase idproof, HttpPostedFileBase sign, HttpPostedFileBase photo2, HttpPostedFileBase idproof2, HttpPostedFileBase sign2)
        {
            List<SavingAccountInfo> bd = new List<SavingAccountInfo>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                switch (command)
                {
                    case "Search":

                        bd = db.SavingAccountInfos.Where(c => c.accountno == accno).ToList();

                        break;

                    case "Update":

                        SavingAccountInfo bdn = db.SavingAccountInfos.Single(o => o.accountno == sa.accountno);
                        var cr = db.SavingAccountInfos.Single(b => b.accountno == sa.accountno);
                        if (sa.actype == "Self")
                        {
                            bdn.actype = sa.actype;
                            bdn.branchcode = sa.branchcode;
                            bdn.formfee = sa.formfee;
                            bdn.acholdername = sa.acholdername;
                            bdn.fathername = sa.fathername;
                            bdn.address = sa.address;
                            bdn.mobileno = sa.mobileno;
                            bdn.emailid = sa.emailid;
                            bdn.gender = sa.gender;
                            bdn.occupation = sa.occupation;
                            bdn.education = sa.education;
                            bdn.bloodgroup = sa.bloodgroup;
                            bdn.annualincome = sa.annualincome;
                            bdn.panno = sa.panno;
                            bdn.ifsccode = sa.ifsccode;
                            bdn.bankname = sa.bankname;
                            bdn.bankaddress = sa.bankaddress;

                            bdn.guardianname = sa.guardianname;
                            bdn.gurage = sa.gurage;
                            bdn.guraddr = sa.guraddr;
                            bdn.gurrel = sa.gurrel;

                            bdn.nomineename = sa.nomineename;
                            bdn.nomage = sa.nomage;
                            bdn.nomrel = sa.nomrel;
                            bdn.nomaddr = sa.nomaddr;

                            if (photo != null)
                            {
                                bdn.photo = cr.photo;
                                photo.SaveAs(HttpContext.Server.MapPath(cr.photo));
                            }
                            else
                            {
                                bdn.photo = cr.photo;

                            }
                            if (idproof != null)
                            {
                                bdn.idproof = cr.idproof;
                                idproof.SaveAs(HttpContext.Server.MapPath(cr.idproof));
                            }
                            else
                            {
                                bdn.idproof = cr.idproof;

                            }

                            if (sign != null)
                            {
                                bdn.sign = cr.sign;
                                sign.SaveAs(HttpContext.Server.MapPath(cr.sign));
                            }
                            else
                            {
                                bdn.sign = cr.sign;

                            }

                            bdn.Doj = Convert.ToDateTime(sa.Doj);
                            bdn.dob = Convert.ToDateTime(sa.dob);
                        }
                        else
                        {
                            bdn.actype = sa.actype;
                            bdn.branchcode = sa.branchcode;
                            bdn.formfee = sa.formfee;
                            bdn.acholdername = sa.acholdername;
                            bdn.fathername = sa.fathername;
                            bdn.address = sa.address;
                            bdn.mobileno = sa.mobileno;
                            bdn.emailid = sa.emailid;
                            bdn.gender = sa.gender;
                            bdn.occupation = sa.occupation;
                            bdn.education = sa.education;
                            bdn.bloodgroup = sa.bloodgroup;
                            bdn.annualincome = sa.annualincome;
                            bdn.panno = sa.panno;
                            bdn.ifsccode = sa.ifsccode;
                            bdn.bankname = sa.bankname;
                            bdn.bankaddress = sa.bankaddress;

                            bdn.guardianname = sa.guardianname;
                            bdn.gurage = sa.gurage;
                            bdn.guraddr = sa.guraddr;
                            bdn.gurrel = sa.gurrel;

                            bdn.nomineename = sa.nomineename;
                            bdn.nomage = sa.nomage;
                            bdn.nomrel = sa.nomrel;
                            bdn.nomaddr = sa.nomaddr;

                            if (photo != null)
                            {
                                bdn.photo = cr.photo;
                                photo.SaveAs(HttpContext.Server.MapPath(cr.photo));
                            }
                            else
                            {
                                bdn.photo = cr.photo;

                            }
                            if (idproof != null)
                            {
                                bdn.idproof = cr.idproof;
                                idproof.SaveAs(HttpContext.Server.MapPath(cr.idproof));
                            }
                            else
                            {
                                bdn.idproof = cr.idproof;

                            }

                            if (sign != null)
                            {
                                bdn.sign = cr.sign;
                                sign.SaveAs(HttpContext.Server.MapPath(cr.sign));
                            }
                            else
                            {
                                bdn.sign = cr.sign;

                            }

                            bdn.Doj = Convert.ToDateTime(sa.Doj);
                            bdn.dob = Convert.ToDateTime(sa.dob);

                            bdn.acholdername2 = sa.acholdername2;
                            bdn.fathername2 = sa.fathername2;
                            bdn.address2 = sa.address2;
                            bdn.mobileno2 = sa.mobileno2;
                            bdn.emailid2 = sa.emailid2;
                            bdn.gender2 = sa.gender2;
                            bdn.occupation2 = sa.occupation2;
                            bdn.education2 = sa.education2;
                            bdn.bloodgroup2 = sa.bloodgroup2;
                            bdn.annualincome2 = sa.annualincome2;
                            bdn.panno2 = sa.panno2;
                            bdn.dob2 = sa.dob2;

                            if (photo2 != null)
                            {
                                bdn.photo2 = cr.photo2;
                                photo2.SaveAs(HttpContext.Server.MapPath(cr.photo2));
                            }
                            else
                            {
                                bdn.photo2 = cr.photo2;

                            }

                            if (idproof2 != null)
                            {
                                bdn.idproof2 = cr.idproof2;
                                idproof2.SaveAs(HttpContext.Server.MapPath(cr.idproof2));
                            }
                            else
                            {
                                bdn.idproof2 = cr.idproof2;

                            }

                            if (sign2 != null)
                            {
                                bdn.sign2 = cr.sign2;
                                sign2.SaveAs(HttpContext.Server.MapPath(cr.sign2));
                            }
                            else
                            {
                                bdn.sign2 = cr.sign2;

                            }
                        }
                        //db.Entry(bdn).State = EntityState.Modified;
                        db.Entry<SavingAccountInfo>(bdn).State = System.Data.Entity.EntityState.Modified;
                        db.SaveChanges();
                        bd = (from bb in db.SavingAccountInfos where bb.accountno == sa.accountno select bb).ToList();


                        break;
                }

                return View(bd);
            }
        }

        [HttpGet]
        public ActionResult UpdateBroker()
        {
            List<AgentDetail> brolist = new List<AgentDetail>();
            List<Broker> blist = new List<Broker>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                brolist = (from c in db.AgentDetails where c.BranchCode == User.Identity.Name orderby c.AgencyCode select c).ToList();
                foreach (var b in brolist)
                {
                    blist.Add(new Broker { NewAgentId = b.NewAgentId, name = b.name, Mobile = b.Mobile, Panno = b.Panno });
                }
                return View(blist);
            }
        }
        public JsonResult EditBroker(Broker ob)
        {

            List<AgentDetail> brolist = new List<AgentDetail>();
            List<Broker> blist = new List<Broker>();
            AgentDetail opn = db.AgentDetails.Single(c => c.NewAgentId == ob.NewAgentId);
            opn.Mobile = ob.Mobile;
            opn.Panno = ob.Panno;
            //db.Entry(opn).State = EntityState.Modified;
            db.Entry<AgentDetail>(opn).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            string passw = gid();
            MyClass.Sendmsg(ob.Mobile, "Dear " + ob.name + " your Loginid: " + ob.NewAgentId + " new password:" + passw + " Please Visit "+cg.HeadOffice);
            brolist = (from c in db.AgentDetails where c.BranchCode == User.Identity.Name orderby c.AgencyCode select c).ToList();
            foreach (var b in brolist)
            {
                blist.Add(new Broker { NewAgentId = b.NewAgentId, name = b.name, Mobile = b.Mobile, Panno = b.Panno });
            }
            return Json(blist, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        public ActionResult UpdateCustomer()
        {
            List<appltab> custlist = new List<appltab>();
            List<Customer> clist = new List<Customer>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                custlist = (from c in db.appltabs where c.branchcode == User.Identity.Name orderby c.newbondid select c).ToList();
                foreach (var b in custlist)
                {
                    clist.Add(new Customer { newbondid = b.newbondid, name = b.name, Mobile = b.mobileno });
                }
                return View(clist);
            }
        }
        public JsonResult EditCustomer(Customer ob)
        {
            List<appltab> custlist = new List<appltab>();
            List<Customer> clist = new List<Customer>();

            appltab cn = db.appltabs.Single(c => c.newbondid == ob.newbondid);
            cn.mobileno = ob.Mobile;
            //db.Entry(cn).State = EntityState.Modified;
            db.Entry<appltab>(cn).State = System.Data.Entity.EntityState.Modified;
            db.SaveChanges();
            MyClass.Sendmsg(ob.Mobile, "Dear " + ob.name + ", your Loginid:" + ob.newbondid + " new password:" + ob.Mobile + " For your A/c details please visit "+cg.HeadOffice);
            custlist = (from c in db.appltabs where c.branchcode == User.Identity.Name orderby c.newbondid select c).ToList();
            foreach (var b in custlist)
            {
                clist.Add(new Customer { newbondid = b.newbondid, name = b.name, Mobile = b.mobileno });
            }
            return Json(clist, JsonRequestBehavior.AllowGet);
        }

        #endregion

        #region Maturity Menu Start Here

        [HttpGet]
        public ActionResult MaturityPaidDetails()
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(mpdlist);
            }
        }
        [HttpPost]
        public ActionResult MaturityPaidDetails(DateTime sdate, DateTime edate)
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);

                var mlist = (from pl in db.MaturityTabs where pl.maturitydate >= sdate && pl.maturitydate <= edate && pl.branchcode == br.BranchCode select pl).ToList();

                foreach (var m in mlist)
                {
                    var matst = db.MaturityStatuss.Single(s => s.newbondid == m.newbondid);
                    var appltab = db.appltabs.Single(s => s.newbondid == m.newbondid);
                    mpdlist.Add(new MaturityPaid { expirydate = appltab.expirydate, chequedate = Convert.ToDateTime(matst.chequedate).ToString("dd/MM/yyyy").ToString(), checkdd = matst.checkorddno, exptdate = matst.exptdate, paymethod = matst.paymethod, paytdate = Convert.ToDateTime(matst.pdate), Draw = matst.drawno, branchpay = matst.branchpay, newbondid = m.newbondid, name = m.name, newintroducerid = m.newintroducerid, mobileno = m.mobileno, formdate = m.formdate, planname = m.planname, term = m.term, mode = m.mode, payment = m.payment, nolandunit = m.nolandunit, totalcon = m.totalcon, expectedraisablevalue = m.expectedraisablevalue, maturityamount = m.maturityamount, maturitydate = m.maturitydate, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname, sdate = sdate, edate = edate });

                }

                stdate = sdate;
                enddate = edate;

                return View(mpdlist);
            }
        }
        public ActionResult PrintMaturityPaidDetails()
        {
            List<MaturityPaid> mpdlist = new List<MaturityPaid>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                string date = string.Empty;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);

                var mlist = (from pl in db.MaturityTabs where pl.maturitydate >= stdate && pl.maturitydate <= enddate && pl.branchcode == User.Identity.Name select pl).ToList();

                foreach (var m in mlist)
                {
                    var matst = db.MaturityStatuss.Single(s => s.newbondid == m.newbondid);
                    var appltab = db.appltabs.Single(s => s.newbondid == m.newbondid);
                    if (matst.chequedate == null)
                    {
                        date = null;
                    }
                    else
                    {
                        date = Convert.ToDateTime(matst.chequedate).ToString("dd/MM/yyyy").ToString();
                    }
                    mpdlist.Add(new MaturityPaid { expirydate = appltab.expirydate, chequedate = date, address = cr.Address, domainname = cr.HeadOffice, emailid = cr.Emailid, contact = cr.Contact, checkdd = matst.checkorddno, exptdate = matst.exptdate, paymethod = matst.paymethod, paytdate = Convert.ToDateTime(matst.pdate), Draw = matst.drawno, branchpay = matst.branchpay, newbondid = m.newbondid, name = m.name, newintroducerid = m.newintroducerid, mobileno = m.mobileno, formdate = m.formdate, planname = m.planname, term = m.term, mode = m.mode, payment = m.payment, nolandunit = m.nolandunit, totalcon = m.totalcon, expectedraisablevalue = m.expectedraisablevalue, maturityamount = m.maturityamount, maturitydate = m.maturitydate, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname, sdate = stdate, edate = enddate });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "MaturityPaidDetails.rpt"));
                rd.SetDataSource(mpdlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult FullMaturity()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult FullMaturity(string newbondid2)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.NewLogins.Single(c => c.type == "Admin");
                var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var mr = db.Members.Single(m => m.Id == 1);
                appltab br = db.appltabs.Single(a => a.newbondid == newbondid2);
                MaturityTab pmt = new MaturityTab();
                pmt.bondid = br.bondid;
                pmt.branchcode = User.Identity.Name;
                pmt.newbondid = br.newbondid;
                pmt.name = br.name;
                pmt.RelationOf = br.RelationOf;
                pmt.fathername = br.fathername;
                pmt.addr = br.addr;
                pmt.mobileno = br.mobileno;
                pmt.introducerid = br.introducerid;
                pmt.newintroducerid = br.newintroducerid;
                pmt.intrankcode = br.intrankcode;
                pmt.intrankname = br.intrankname;
                pmt.formdate = br.formdate;
                pmt.dob = br.dob;
                pmt.age = br.age;
                pmt.nationality = br.nationality;
                pmt.guardianname = br.guardianname;
                pmt.gurage = br.gurage;
                pmt.gurrel = br.gurrel;
                pmt.guraddr = br.guraddr;
                pmt.photo = br.photo;
                pmt.panno = br.panno;
                pmt.bankname = br.bankname;
                pmt.accountno = br.accountno;
                pmt.plantype = br.plantype;
                pmt.plancode = br.plancode;
                pmt.planname = br.planname;
                pmt.term = br.term;
                pmt.mode = br.mode;
                pmt.payment = br.payment;
                pmt.nolandunit = br.nolandunit;
                pmt.totalcon = br.totalcon;
                pmt.expectedraisablevalue = br.expectedraisablevalue;
                pmt.applicationcharge = br.applicationcharge;
                pmt.bonusper = br.bonusper;
                pmt.expirydate = br.expirydate;
                pmt.nomineename = br.nomineename;
                pmt.nomage = br.nomage;
                pmt.nomrel = br.nomrel;
                pmt.nomaddr = br.nomaddr;
                pmt.paymethod = br.paymethod;
                pmt.pdate = br.pdate;
                pmt.checkorddno = br.checkorddno;
                pmt.drawno = br.drawno;
                pmt.branchpay = br.branchpay;
                pmt.amountword = br.amountword;
                pmt.opid = br.opid;
                pmt.status = br.status;
                pmt.type = br.type;
                pmt.Macaddress = br.Macaddress;
                pmt.Time = br.Time;
                pmt.maturityamount = br.expectedraisablevalue;
                pmt.maturitydate = DateTime.Now.Date;
                pmt.maturitytype = "Full";
                pmt.pendingamount = 0;
                pmt.extraamount = 0;
                pmt.commamount = 0;
                db.MaturityTabs.Add(pmt);
                br.status = 2;
                db.SaveChanges();
                ViewData["newbondid"] = newbondid2;
                ViewBag.cpy = "Maturity Done Successfully..";
                MyClass.Sendmsg(br.mobileno, "Dear, " + br.name + " of Customer Id:" + br.newbondid + " your maturity done of Rs." + br.expectedraisablevalue + " on date " + DateTime.Now.Date + ", For more details Visit "+cg.HeadOffice);
                MyClass.Sendmsg(cr.Mobile, "Dear Sir,Maturity of Customer Id:" + br.newbondid + " done of Rs." + br.expectedraisablevalue + " by " + bb.BranchName + " " + mr.branchname + " on date " + DateTime.Now.Date + ", For more details Visit "+cg.HeadOffice);
                NewBondid = newbondid2;
                return View();
            }
        }

        [HttpGet]
        public ActionResult LapsMaturity()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult LapsMaturity(string newbondid2, Double totalcon, Double pendingamount, Double extraamount)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                string localIP = "";
                foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                {
                    if (nic.OperationalStatus == OperationalStatus.Up)
                    {
                        localIP += nic.GetPhysicalAddress().ToString();
                        break;
                    }
                }
                var cr = db.NewLogins.Single(c => c.type == "Admin");
                var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                DateTime pdate = DateTime.Now.Date;
                var mr = db.Members.Single(m => m.Id == 1);
                appltab br = db.appltabs.Single(a => a.newbondid == newbondid2);
                int max = 0, min = 0, paymentno = 0;

                min = (from u in db.Installmenttabs where u.newbondid == newbondid2 && u.payamount == 0 select u.installmentno).Min();
                max = (from u in db.Installmenttabs where u.newbondid == newbondid2 && u.payamount == 0 select u.installmentno).Max();
                while (min <= max)
                {
                    NumberToEnglish n = new NumberToEnglish();
                    var amountinwords = n.changeToWords(br.payment.ToString(), true);
                    paymentno = (from u in db.Installmenttabs where u.newbondid == newbondid2 && u.payamount != 0 select u.paymentno).Max();
                    // var dcount = (from u in db.DailyInstallments where u.paymentdate == pdate && u.branch == User.Identity.Name select u).Count();
                    var count = (from u in db.Installmenttabs where u.paymentdate == pdate && u.branch == User.Identity.Name select u).Count();
                    Installmenttab ir = db.Installmenttabs.Single(i => i.newbondid == newbondid2 && i.installmentno == min);
                    ir.payamount = br.payment;
                    ir.paymentdate = DateTime.Now.Date;
                    ir.cssno = (count + 1);
                    ir.planname = br.planname;
                    ir.term_plan = br.term;
                    ir.mode = br.mode;
                    ir.paymethod = "Cash";
                    ir.branch = User.Identity.Name;
                    ir.amountinword = amountinwords;
                    ir.opid = User.Identity.Name;

                    ir.Macaddress = localIP;
                    ir.Time = DateTime.Now.ToShortTimeString();
                    ir.paymentno = paymentno + 1;
                    db.SaveChanges();
                    min = min + 1;
                }


                MaturityTab pmt = new MaturityTab();
                pmt.bondid = br.bondid;
                pmt.branchcode = User.Identity.Name;
                pmt.newbondid = br.newbondid;
                pmt.name = br.name;
                pmt.RelationOf = br.RelationOf;
                pmt.fathername = br.fathername;
                pmt.addr = br.addr;
                pmt.mobileno = br.mobileno;
                pmt.introducerid = br.introducerid;
                pmt.newintroducerid = br.newintroducerid;
                pmt.intrankcode = br.intrankcode;
                pmt.intrankname = br.intrankname;
                pmt.formdate = br.formdate;
                pmt.dob = br.dob;
                pmt.age = br.age;
                pmt.nationality = br.nationality;
                pmt.guardianname = br.guardianname;
                pmt.gurage = br.gurage;
                pmt.gurrel = br.gurrel;
                pmt.guraddr = br.guraddr;
                pmt.photo = br.photo;
                pmt.panno = br.panno;
                pmt.bankname = br.bankname;
                pmt.accountno = br.accountno;
                pmt.plantype = br.plantype;
                pmt.plancode = br.plancode;
                pmt.planname = br.planname;
                pmt.term = br.term;
                pmt.mode = br.mode;
                pmt.payment = br.payment;
                pmt.nolandunit = br.nolandunit;
                pmt.totalcon = (totalcon + pendingamount);
                pmt.expectedraisablevalue = br.expectedraisablevalue;
                pmt.applicationcharge = br.applicationcharge;
                pmt.bonusper = br.bonusper;
                pmt.expirydate = br.expirydate;
                pmt.nomineename = br.nomineename;
                pmt.nomage = br.nomage;
                pmt.nomrel = br.nomrel;
                pmt.nomaddr = br.nomaddr;
                pmt.paymethod = br.paymethod;
                pmt.pdate = br.pdate;
                pmt.checkorddno = br.checkorddno;
                pmt.drawno = br.drawno;
                pmt.branchpay = br.branchpay;
                pmt.amountword = br.amountword;
                pmt.opid = br.opid;
                pmt.status = br.status;
                pmt.type = br.type;
                pmt.Macaddress = br.Macaddress;
                pmt.Time = br.Time;
                pmt.maturityamount = br.expectedraisablevalue;
                pmt.maturitydate = DateTime.Now.Date;
                pmt.maturitytype = "Laps";
                pmt.pendingamount = pendingamount;
                pmt.extraamount = extraamount;
                pmt.commamount = 0;
                db.MaturityTabs.Add(pmt);
                br.status = 2;
                db.SaveChanges();
                ViewData["newbondid"] = newbondid2;
                MyClass.Sendmsg(br.mobileno, "Dear, " + br.name + " of Customer Id:" + br.newbondid + " your maturity done of Rs." + br.expectedraisablevalue + " on date " + DateTime.Now.Date + ", For more details Visit "+cg.HeadOffice);
                MyClass.Sendmsg(cr.Mobile, "Dear Sir,Maturity of Customer Id:" + br.newbondid + " done of Rs." + br.expectedraisablevalue + " by " + bb.BranchName + " " + mr.branchname + " on date " + DateTime.Now.Date + ", For more details Visit "+cg.HeadOffice);
                ViewBag.cpy = "Maturity Done Successfully..";
                NewBondid = newbondid2;
                return View();
            }
        }

        [HttpGet]
        public ActionResult InompleteMaturity()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult InompleteMaturity(string newbondid2, Double totalcon, Double extraamount, Double pendingamount, string paymethod, DateTime pdate, string checkorddno, Double inpercent, string bankname, string accountno)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.NewLogins.Single(c => c.type == "Admin");
                var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var mr = db.Members.Single(m => m.Id == 1);
                appltab br = db.appltabs.Single(a => a.newbondid == newbondid2);
                MaturityTab pmt = new MaturityTab();
                pmt.bondid = br.bondid;
                pmt.branchcode = User.Identity.Name;
                pmt.newbondid = br.newbondid;
                pmt.name = br.name;
                pmt.RelationOf = br.RelationOf;
                pmt.fathername = br.fathername;
                pmt.addr = br.addr;
                pmt.mobileno = br.mobileno;
                pmt.introducerid = br.introducerid;
                pmt.newintroducerid = br.newintroducerid;
                pmt.intrankcode = br.intrankcode;
                pmt.intrankname = br.intrankname;
                pmt.formdate = br.formdate;
                pmt.dob = br.dob;
                pmt.age = br.age;
                pmt.nationality = br.nationality;
                pmt.guardianname = br.guardianname;
                pmt.gurage = br.gurage;
                pmt.gurrel = br.gurrel;
                pmt.guraddr = br.guraddr;
                pmt.photo = br.photo;
                pmt.panno = br.panno;
                pmt.bankname = br.bankname;
                pmt.accountno = br.accountno;
                pmt.plantype = br.plantype;
                pmt.plancode = br.plancode;
                pmt.planname = br.planname;
                pmt.term = br.term;
                pmt.mode = br.mode;
                pmt.payment = br.payment;
                pmt.nolandunit = br.nolandunit;
                pmt.totalcon = totalcon;
                pmt.expectedraisablevalue = br.expectedraisablevalue;
                pmt.applicationcharge = br.applicationcharge;
                pmt.bonusper = inpercent;
                pmt.expirydate = br.expirydate;
                pmt.nomineename = br.nomineename;
                pmt.nomage = br.nomage;
                pmt.nomrel = br.nomrel;
                pmt.nomaddr = br.nomaddr;
                pmt.paymethod = paymethod;
                pmt.pdate = br.pdate;
                pmt.checkorddno = checkorddno;
                pmt.drawno = accountno;
                pmt.branchpay = bankname;
                pmt.amountword = br.amountword;
                pmt.opid = User.Identity.Name;
                pmt.status = br.status;
                pmt.type = br.type;
                pmt.Macaddress = br.Macaddress;
                pmt.Time = br.Time;
                pmt.maturityamount = pendingamount;
                pmt.maturitydate = pdate;
                pmt.maturitytype = "Pre";
                pmt.pendingamount = pendingamount;
                pmt.extraamount = extraamount;
                pmt.commamount = 0;
                db.MaturityTabs.Add(pmt);
                br.status = 2;
                db.SaveChanges();
                ViewData["newbondid"] = newbondid2;
                ViewBag.cpy = "Maturity Done Successfully..";
                MyClass.Sendmsg(br.mobileno, "Dear, " + br.name + " of Customer Id:" + br.newbondid + " your Pre maturity done of Rs." + pendingamount + " on date " + pdate.ToString("dd/MM/yyyy") + ", For more details Visit" + cg.HeadOffice);
                MyClass.Sendmsg(cr.Mobile, "Dear Sir,Maturity of Customer Id:" + br.newbondid + " Pre maturity done of Rs." + pendingamount + " by " + bb.BranchName + " " + mr.branchname + " on date " + pdate.ToString("dd/MM/yyyy") + ", For more details Visit "+cg.HeadOffice);
                NewBondid = newbondid2;
                stdate = pdate;
                spaymethod = paymethod;
                scheckorddno = checkorddno;
                return View();
            }
        }
        public ActionResult PrintMaturityForm()
        {
            List<MaturityFormDetail> mfd = new List<MaturityFormDetail>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
            var md = db.MaturityTabs.Single(s => s.newbondid == NewBondid);

            mfd.Add(new MaturityFormDetail
            {
                branchcode = md.branchcode,
                newbondid = md.newbondid,
                name = md.name,
                RelationOf = md.RelationOf,
                fathername = md.fathername,
                addr = md.addr,
                mobileno = md.mobileno,
                newintroducerid = md.newintroducerid,
                intrankcode = md.intrankcode,
                intrankname = md.intrankname,
                formdate = md.formdate,
                dob = md.dob,
                age = md.age,
                nationality = md.nationality,
                guardianname = md.guardianname,
                gurage = md.gurage,
                gurrel = md.gurrel,
                guraddr = md.guraddr,
                photo = md.photo,
                panno = md.panno,
                bankname = md.bankname,
                accountno = md.accountno,
                plantype = md.plantype,
                planname = md.planname,
                term = md.term,
                mode = md.mode,
                payment = md.payment,
                nolandunit = md.nolandunit,
                totalcon = md.totalcon,
                expectedraisablevalue = md.expectedraisablevalue,
                applicationcharge = md.applicationcharge,
                expirydate = md.expirydate,
                nomineename = md.nomineename,
                nomage = md.nomage,
                nomrel = md.nomrel,
                nomaddr = md.nomaddr,
                paymethod = spaymethod,
                pdate = md.pdate,
                checkorddno = scheckorddno,
                drawno = md.drawno,
                branchpay = md.branchpay,
                amountword = md.amountword,
                opid = User.Identity.Name,
                maturitytype = md.maturitytype,
                type = md.type,
                Macaddress = md.Macaddress,
                Time = md.Time,
                maturityamount = md.maturityamount,
                pendingamount = md.pendingamount,
                extraamount = md.extraamount,
                commamount = md.commamount,
                maturitydate = stdate,
                branchname = br.BranchName,
                companyname = cr.CompanyName,
                emailid = cr.Emailid,
                address = cr.Address,
                regno = cr.RegistrationNo,
                contact = cr.Contact
            });

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MaturityForm.rpt"));
            rd.SetDataSource(mfd);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult DuplicateMaturity()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {

                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        [HttpPost]
        public ActionResult DuplicateMaturity(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<MaturityFormDetail> mfd = new List<MaturityFormDetail>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var md = db.MaturityTabs.Single(s => s.newbondid == newbondid);

                mfd.Add(new MaturityFormDetail
                {
                    branchcode = md.branchcode,
                    newbondid = md.newbondid,
                    name = md.name,
                    RelationOf = md.RelationOf,
                    fathername = md.fathername,
                    addr = md.addr,
                    mobileno = md.mobileno,
                    newintroducerid = md.newintroducerid,
                    intrankcode = md.intrankcode,
                    intrankname = md.intrankname,
                    formdate = md.formdate,
                    dob = md.dob,
                    age = md.age,
                    nationality = md.nationality,
                    guardianname = md.guardianname,
                    gurage = md.gurage,
                    gurrel = md.gurrel,
                    guraddr = md.guraddr,
                    photo = md.photo,
                    panno = md.panno,
                    bankname = md.bankname,
                    accountno = md.accountno,
                    plantype = md.plantype,
                    planname = md.planname,
                    term = md.term,
                    mode = md.mode,
                    payment = md.payment,
                    nolandunit = md.nolandunit,
                    totalcon = md.totalcon,
                    expectedraisablevalue = md.expectedraisablevalue,
                    applicationcharge = md.applicationcharge,
                    expirydate = md.expirydate,
                    nomineename = md.nomineename,
                    nomage = md.nomage,
                    nomrel = md.nomrel,
                    nomaddr = md.nomaddr,
                    paymethod = md.paymethod,
                    pdate = md.pdate,
                    checkorddno = md.checkorddno,
                    drawno = md.drawno,
                    branchpay = md.branchpay,
                    amountword = md.amountword,
                    opid = md.opid,
                    maturitytype = md.maturitytype,
                    type = md.type,
                    Macaddress = md.Macaddress,
                    Time = md.Time,
                    maturityamount = md.maturityamount,
                    pendingamount = md.pendingamount,
                    extraamount = md.extraamount,
                    commamount = md.commamount,
                    maturitydate = md.maturitydate,
                    branchname = br.BranchName,
                    companyname = cr.CompanyName,
                    emailid = cr.Emailid,
                    address = cr.Address,
                    regno = cr.RegistrationNo,
                    contact = cr.Contact
                });

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MaturityForm.rpt"));
                rd.SetDataSource(mfd);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }

        }

        [HttpGet]
        public ActionResult DischargeForm()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {

                        return View();
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        [HttpPost]
        public ActionResult DischargeForm(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<MaturityFormDetail> mfd = new List<MaturityFormDetail>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var md = db.appltabs.Single(s => s.newbondid == newbondid);
                NumberToEnglish n = new NumberToEnglish();
                var amountinwords = n.changeToWords(md.totalcon.ToString(), true);
                mfd.Add(new MaturityFormDetail
                {
                    branchcode = md.branchcode,
                    newbondid = md.newbondid,
                    name = md.name,
                    RelationOf = md.RelationOf,
                    fathername = md.fathername,
                    addr = md.addr,
                    mobileno = md.mobileno,
                    newintroducerid = md.newintroducerid,
                    intrankcode = md.intrankcode,
                    intrankname = md.intrankname,
                    formdate = md.formdate,
                    dob = md.dob,
                    age = md.age,
                    nationality = md.nationality,
                    guardianname = md.guardianname,
                    gurage = md.gurage,
                    gurrel = md.gurrel,
                    guraddr = md.guraddr,
                    photo = md.photo,
                    panno = md.panno,
                    bankname = md.bankname,
                    accountno = md.accountno,
                    plantype = md.plantype,
                    planname = md.planname,
                    term = md.term,
                    mode = md.mode,
                    payment = md.payment,
                    nolandunit = md.nolandunit,
                    totalcon = md.totalcon,
                    expectedraisablevalue = md.expectedraisablevalue,
                    applicationcharge = md.applicationcharge,
                    expirydate = md.expirydate,
                    nomineename = md.nomineename,
                    nomage = md.nomage,
                    nomrel = md.nomrel,
                    nomaddr = md.nomaddr,
                    paymethod = md.paymethod,
                    pdate = md.pdate,
                    checkorddno = md.checkorddno,
                    drawno = md.drawno,
                    branchpay = md.branchpay,
                    amountword = amountinwords,
                    opid = md.opid,
                    maturitytype = "",
                    type = md.type,
                    Macaddress = br.branchaddress,
                    Time = md.Time,
                    maturityamount = 0,
                    pendingamount = 0,
                    extraamount = 0,
                    commamount = 0,
                    branchname = br.BranchName,
                    companyname = cr.CompanyName,
                    emailid = cr.Emailid,
                    address = cr.Address,
                    regno = cr.RegistrationNo,
                    contact = cr.Contact
                });

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DiscForm.rpt"));
                rd.SetDataSource(mfd);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }

        }
        #endregion

        #region Field Reports Start Here

        [HttpGet]
        public ActionResult Broker(string brokerid, int s = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                if (brokerid == "" || brokerid == null)
                {
                    var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                    var dr = (from o in db.AgentDetails where o.BranchCode == br.BranchCode && o.Status == 1 orderby o.NewAgentId select o).ToList();

                    return View(dr);
                }
                else
                {
                    var dn = (from a in db.AgentDetails where a.NewAgentId == brokerid select a).ToList();
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Broker.rpt"));
                    rd.SetDataSource(dn);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }

                    return View(dn);
                }

            }
        }
        public ActionResult PrintBrokerList()
        {

            var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
            List<BrokerList> blist = new List<BrokerList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var brolist = (from o in db.AgentDetails where o.BranchCode == br.BranchCode && o.Status == 1 orderby o.NewAgentId select o).ToList();
            foreach (var b in brolist)
            {
                var tp = "";
                var aa = db.NewLogins.Where(n => n.UserName == b.NewAgentId && n.type == "Agent").Count();
                if (aa == 1)
                {
                    var ng = db.NewLogins.Single(p => p.UserName == b.NewAgentId && p.type == "Agent");
                    tp = ng.Password;
                }
                blist.Add(new BrokerList { password = tp, newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Brokerlist.rpt"));
            rd.SetDataSource(blist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult QuotaAchive()
        {
            List<QuotaAAchive> QuotaAchive = new List<QuotaAAchive>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(QuotaAchive);
            }
        }
        [HttpPost]
        public ActionResult QuotaAchive(int month = 0, int year = 0)
        {
            List<QuotaAAchive> QuotaAchive = new List<QuotaAAchive>();

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                MonthName mn = new MonthName();
                var amt = 0.0;
                var br = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);
                var mon = mn.numbertomonthname(month);
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var rr = db.BrokerCommLists.Where(a => a.month == mon && a.Year == year && a.branchcode == br.BranchCode).Count();
                var ar = db.BrokerCommLists.Where(a => a.month == mon && a.Year == year && a.branchcode == br.BranchCode && a.rankcode <= 12).ToList();
                foreach (var z in ar)
                {
                    List<InstallmentList> inslist = new List<InstallmentList>();
                    var qutaamt = 0.0;
                    List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
                    #region Select Broker Chain Start Here

                    List<BrokerChain> bclist = new List<BrokerChain>();
                    bclist.Add(new BrokerChain { agentid = z.agencycode, newagentid = z.newagentid, name = z.name, rankcode = z.rankcode, rankname = z.rankname, introducerid = z.newintroducerid, introname = z.Introname, branchname = User.Identity.Name });
                    int rcount = 0;
                    List<agents> dalist = new List<agents>();
                    var alist = (from al in db.BrokerCommLists where al.introducerid == z.agencycode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                    foreach (var a in alist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                    }

                    var maxsragent = dalist.Count;
                    var minsragent = 1;
                    while (minsragent <= maxsragent)
                    {

                        var da = dalist.Where(a => a.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = dalist.Count;
                    }
                    foreach (var dd in dalist)
                    {
                        var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
                        bclist.Add(new BrokerChain { agentid = ad.agencycode, newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

                    }

                    #endregion

                    #region Here Start select Business
                    foreach (var bc in bclist)
                    {
                        var tbd = (from ap in db.appltabs where ap.introducerid == bc.agentid  select ap.bondid);
                        var bondlist = (from yt in db.Installmenttabs where yt.paymentdate.Value.Month == month && yt.paymentdate.Value.Year == year && tbd.Contains(yt.bondid) select new { yt.newbondid }).Distinct();
                        foreach (var bond in bondlist.ToList())
                        {
                            var td = db.appltabs.Single(ap => ap.newbondid == bond.newbondid);
                            var planlist = (from pl in db.Installmenttabs where pl.paymentdate.Value.Month == month && pl.paymentdate.Value.Year == year && pl.newbondid == bond.newbondid select pl).ToList();
                            foreach (var plan in planlist)
                            {
                                if (td.plantype == "PPS")
                                {
                                    amt = td.totalcon;
                                }
                                else
                                {
                                    amt = plan.payamount;
                                }
                                inslist.Add(new InstallmentList { newbondid = plan.newbondid, installmentno = plan.installmentno, mode = plan.mode, year = plan.year, term = plan.term_plan, planname = plan.planname, amount = amt, plancode = td.plancode });
                            }

                        }
                    }
                    var pnlist = inslist.Select(i => new { i.plancode }).Distinct();
                    foreach (var pn in pnlist)
                    {
                        var p = db.NewPlans.Single(i => i.Plancode == pn.plancode);
                        Double totalcoll = 0, quotaamount = 0, per = 0;
                        totalcoll = inslist.Where(tr => tr.plancode == pn.plancode).Sum(r => (Double)r.amount);

                        if (p.Term >= 5)
                        {
                            per = 100;
                        }
                        else
                        {
                            per = 50;
                        }

                        quotaamount = Math.Round(((totalcoll * per) / 100), 2);
                        qutaamt = qutaamt + quotaamount;

                        //quotalist.Add(new QuotaCollectionList { newagentid = z.newagentid, name = z.name, rankname = z.rankname, newintroducerid = z.newintroducerid, planname = p.Planname, business = totalcoll, percentage = per, quotaamount = quotaamount, month = mon, year = year.ToString(), companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, plan = mr.planname, agent = mr.agentname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                    }

                    var rank = db.Ranktabs.Single(a => a.RankCode == z.rankcode);
                    QuotaAchive.Add(new QuotaAAchive { NewAgentid = z.newagentid, Name = z.name, QuotaAchive = qutaamt, RankName = z.rankname, QuotaAmount = rank.Selfquota + rank.TeamQuota, Month = mon, Year = year.ToString() });
                    qutaamt = 0.0;
                    #endregion Here End Collection

                }
                vmonth = month;
                vvyear = year;
                return View(QuotaAchive);
            }
        }

        [HttpGet]
        public ActionResult BrokerListReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var dr = (from o in db.AgentDetails where o.BranchCode == User.Identity.Name && o.Status == 1 orderby o.NewAgentId select o).ToList();

                return View(dr);

            }
        }
        //public ActionResult PrintBrokerlist()
        //{
        //    List<AgentDetail> bond = new List<AgentDetail>();

        //    bond = db.AgentDetails.Where(s => s.BranchCode == User.Identity.Name && s.Status == 1).ToList();

        //    ReportDocument rd = new ReportDocument();
        //    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Brokerlist.rpt"));
        //    rd.SetDataSource(bond);

        //    Response.Buffer = false;
        //    Response.ClearContent();
        //    Response.ClearHeaders();


        //    try
        //    {
        //        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
        //        stream.Seek(0, SeekOrigin.Begin);

        //        return new FileStreamResult(stream, "application/pdf");
        //    }

        //    catch (Exception ex)
        //    {
        //        Response.Write("<script>alert('" + ex.Message + "')</script>");
        //    }
        //    finally
        //    {
        //        rd.Close();
        //        rd.Dispose();
        //    }


        //    return View();

        //}

        [HttpGet]
        public ActionResult DatewiseBroker()
        {
            List<BrokerList> dwblist = new List<BrokerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {


                return View(dwblist);
            }
        }
        [HttpPost]
        public ActionResult DatewiseBroker(DateTime sdate, DateTime edate)
        {
            List<BrokerList> dwblist = new List<BrokerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                var blist = (from g in db.AgentDetails where g.BranchCode == User.Identity.Name && g.Doj >= sdate && g.Doj <= edate && g.Status == 1 orderby g.NewAgentId select g).ToList();
                foreach (var b in blist)
                {
                    dwblist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, sdate = sdate, edate = edate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                stdate = sdate;
                enddate = edate;
                return View(dwblist);

            }
        }
        public ActionResult PrintDatewiseBroker()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<BrokerList> dwblist = new List<BrokerList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                var blist = (from g in db.AgentDetails where g.BranchCode == User.Identity.Name && g.Doj >= stdate && g.Doj <= enddate && g.Status == 1 orderby g.NewAgentId select g).ToList();
                foreach (var b in blist)
                {
                    dwblist.Add(new BrokerList { newagentid = b.NewAgentId, name = b.name, rankname = b.RankName, introducerid = b.NewIntroducerId, mobile = b.Mobile, doj = b.Doj, branchname = br.BranchName, sdate = stdate, edate = enddate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DatewiseBroker.rpt"));
                rd.SetDataSource(dwblist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(dwblist);
            }
        }

        [HttpGet]
        public ActionResult BrokerChain()
        {
            List<BrokerChain> bclist = new List<BrokerChain>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerChain(string newagentid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var bb = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                int rcount = 0;
                List<BrokerChain> bclist = new List<BrokerChain>();
                var br = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                bclist.Add(new BrokerChain { newagentid = br.NewAgentId, name = br.name, rankcode = br.RankCode, rankname = br.RankName, introducerid = br.NewIntroducerId, introname = br.IntroName, branchname = bb.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                List<agents> dalist = new List<agents>();
                var alist = (from al in db.AgentDetails where al.NewIntroducerId == newagentid select new { al.AgencyCode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                    if (ad.Status == 1)
                    {
                        bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = bb.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }
                NewAgentid = newagentid;
                return View(bclist);
            }
        }
        public ActionResult PrintBrokerChainReport()
        {
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var bb = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
            int rcount = 0;
            List<BrokerChain> bclist = new List<BrokerChain>();
            var br = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);
            bclist.Add(new BrokerChain { newagentid = br.NewAgentId, name = br.name, rankcode = br.RankCode, rankname = br.RankName, introducerid = br.NewIntroducerId, introname = br.IntroName, branchname = bb.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.AgentDetails where al.NewIntroducerId == NewAgentid select new { al.AgencyCode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });
                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                if (ad.Status == 1)
                {
                    bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = bb.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "BrokerChain.rpt"));
            rd.SetDataSource(bclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View(bclist);
        }

        [HttpGet]
        public ActionResult DatewisesavingCollection()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DWAccListCollection> acclist = new List<DWAccListCollection>();
                return View(acclist);
            }
        }
        [HttpPost]
        public ActionResult DatewisesavingCollection(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DWAccListCollection> acclist = new List<DWAccListCollection>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dn = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate && sa.branchcode == User.Identity.Name select sa.accountno).Distinct().ToList();
                var dz = dn.Count();

                foreach (var d in dn)
                {
                    double credit = 0; double debit = 0;
                    var dx = db.SavingAccountInfos.Single(c => c.accountno == d);
                    credit = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate && sa.accountno == d && sa.branchcode == User.Identity.Name select sa.credit).DefaultIfEmpty(0).Sum();
                    debit = (from sa in db.TransactionTabs where sa.pdate >= sdate && sa.pdate <= edate && sa.accountno == d && sa.branchcode == User.Identity.Name select sa.debit).DefaultIfEmpty(0).Sum();
                    double bal = credit - debit;
                    acclist.Add(new DWAccListCollection { accountno = d, name = dx.acholdername, credit = credit, debit = debit, sdate = sdate, edate = edate, balance = bal });
                }
                stdate = sdate;
                enddate = edate;
                return View(acclist);
            }

        }
        public ActionResult PrintDatewisesavingCollection()
        {
            List<DWAccListCollection> acclist = new List<DWAccListCollection>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate && sa.branchcode == User.Identity.Name select sa.accountno).Distinct().ToList();
            var dz = dn.Count();

            foreach (var d in dn)
            {
                double credit = 0; double debit = 0;
                var dx = db.SavingAccountInfos.Single(c => c.accountno == d);
                credit = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate && sa.accountno == d && sa.branchcode == User.Identity.Name select sa.credit).DefaultIfEmpty(0).Sum();
                debit = (from sa in db.TransactionTabs where sa.pdate >= stdate && sa.pdate <= enddate && sa.accountno == d && sa.branchcode == User.Identity.Name select sa.debit).DefaultIfEmpty(0).Sum();
                double bal = credit - debit;
                acclist.Add(new DWAccListCollection { accountno = d, name = dx.acholdername, credit = credit, debit = debit, sdate = stdate, edate = enddate, balance = bal });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "SavingCollection.rpt"));
            rd.SetDataSource(acclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BrokerPaymentDetail()
        {
            List<BrokerPayment> bplist = new List<BrokerPayment>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bplist);
            }
        }
        [HttpPost]
        public ActionResult BrokerPaymentDetail(string newagentid)
        {
            List<BrokerPayment> bplist = new List<BrokerPayment>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                DateTime fdate = DateTime.Now.Date;
                DateTime sdate = DateTime.Now.Date;
                DateTime fdate1 = DateTime.Now.Date;
                var br = db.Branchtabs.Single(w => w.BranchCode == User.Identity.Name);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);
                int min = (from o in db.commission_tabs where o.agentid == ar.AgencyCode && o.branchcode == br.BranchCode select o.Id).DefaultIfEmpty(0).Min();
                var comm = db.commission_tabs.Single(s => s.Id == min);
                DateTime dd = comm.date;

                while (dd <= DateTime.Now.Date)
                {
                    var year = dd.Year;
                    var year1 = year.ToString();
                    var month = dd.Month;
                    int mon = DateTime.DaysInMonth(year, month);
                    if (month > 9)
                    {
                        sdate = Convert.ToDateTime(month + "/01/" + year);
                        fdate = Convert.ToDateTime(month + "/" + mon + "/" + year);
                    }
                    else
                    {
                        sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                        fdate = Convert.ToDateTime("0" + month + "/" + mon + " /" + year);
                    }
                    var count = (from co in db.Voucher_Reports where co.month == month && co.year == year1 && co.branchcode == br.BranchCode && co.agentid == ar.AgencyCode select co.Id).Count();
                    if (count >= 1)
                    {
                        MonthName mn = new MonthName();
                        var monthname = mn.numbertomonthname(month);
                        var bv = db.Voucher_Reports.Single(s => s.agentid == ar.AgencyCode && comm.branchcode == br.BranchCode && s.month == month && s.year == year1);
                        bplist.Add(new BrokerPayment { status = "Paid", newagentid = newagentid, name = ar.name, Business = bv.bussiness, commission = bv.commission, tds = bv.tds, netamount = bv.netamount, month = monthname, year = bv.year, pdate = bv.date, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                    else
                    {
                        int mon1 = DateTime.DaysInMonth(year, month);
                        if (month > 9)
                        {
                            sdate = Convert.ToDateTime(month + "/01/" + year);
                            fdate = Convert.ToDateTime(month + "/" + mon1 + "/" + year);
                        }
                        else
                        {
                            sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                            fdate = Convert.ToDateTime("0" + month + "/" + mon1 + " /" + year);
                        }
                        MonthName mn = new MonthName();
                        var monthname = mn.numbertomonthname(month);
                        var sumcomm = (from o in db.commission_tabs where o.date >= sdate && o.date <= fdate && o.branchcode == br.BranchCode && o.agentid == ar.AgencyCode select o.commission).DefaultIfEmpty(0).Sum();
                        var business = (from o in db.commission_tabs where o.date >= sdate && o.date <= fdate && o.branchcode == br.BranchCode && o.agentid == ar.AgencyCode select o.amount).DefaultIfEmpty(0).Sum();
                        bplist.Add(new BrokerPayment { status = "UnPaid", newagentid = newagentid, name = ar.name, Business = business, commission = sumcomm, tds = 0, netamount = 0, month = monthname, year = year1, pdate = DateTime.Now.Date, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                    dd = sdate.AddMonths(1);
                }
                NewAgentid = newagentid;
                return View(bplist);
            }
        }
        public ActionResult PrintBrokerPaymentReport()
        {
            List<BrokerPayment> bplist = new List<BrokerPayment>();
            DateTime fdate = DateTime.Now.Date;
            DateTime sdate = DateTime.Now.Date;
            DateTime fdate1 = DateTime.Now.Date;
            var br = db.Branchtabs.Single(w => w.BranchCode == User.Identity.Name);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var ar = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);
            int min = (from o in db.commission_tabs where o.agentid == ar.AgencyCode && o.branchcode == br.BranchCode select o.Id).DefaultIfEmpty(0).Min();
            var comm = db.commission_tabs.Single(s => s.Id == min);
            DateTime dd = comm.date;

            while (dd <= DateTime.Now.Date)
            {
                var year = dd.Year;
                var year1 = year.ToString();
                var month = dd.Month;
                int mon = DateTime.DaysInMonth(year, month);
                if (month > 9)
                {
                    sdate = Convert.ToDateTime(month + "/01/" + year);
                    fdate = Convert.ToDateTime(month + "/" + mon + "/" + year);
                }
                else
                {
                    sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                    fdate = Convert.ToDateTime("0" + month + "/" + mon + " /" + year);
                }
                var count = (from co in db.Voucher_Reports where co.month == month && co.year == year1 && co.branchcode == br.BranchCode && co.agentid == ar.AgencyCode select co.Id).Count();
                if (count >= 1)
                {
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month);
                    var bv = db.Voucher_Reports.Single(s => s.agentid == ar.AgencyCode && comm.branchcode == br.BranchCode && s.month == month && s.year == year1);
                    bplist.Add(new BrokerPayment { status = "Paid", newagentid = NewAgentid, name = ar.name, Business = bv.bussiness, commission = bv.commission, tds = bv.tds, netamount = bv.netamount, month = monthname, year = bv.year, pdate = bv.date, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                else
                {
                    int mon1 = DateTime.DaysInMonth(year, month);
                    if (month > 9)
                    {
                        sdate = Convert.ToDateTime(month + "/01/" + year);
                        fdate = Convert.ToDateTime(month + "/" + mon1 + "/" + year);
                    }
                    else
                    {
                        sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                        fdate = Convert.ToDateTime("0" + month + "/" + mon1 + " /" + year);
                    }
                    MonthName mn = new MonthName();
                    var monthname = mn.numbertomonthname(month);
                    var sumcomm = (from o in db.commission_tabs where o.date >= sdate && o.date <= fdate && o.branchcode == br.BranchCode && o.agentid == ar.AgencyCode select o.commission).DefaultIfEmpty(0).Sum();
                    var business = (from o in db.commission_tabs where o.date >= sdate && o.date <= fdate && o.branchcode == br.BranchCode && o.agentid == ar.AgencyCode select o.amount).DefaultIfEmpty(0).Sum();
                    bplist.Add(new BrokerPayment { status = "UnPaid", newagentid = NewAgentid, name = ar.name, Business = business, commission = sumcomm, tds = 0, netamount = 0, month = monthname, year = year1, pdate = DateTime.Now.Date, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                dd = sdate.AddMonths(1);
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerPayment.rpt"));
            rd.SetDataSource(bplist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View(bplist);
        }

        [HttpGet]
        public ActionResult Selfbusiness()
        {
            List<DatewiseDueCollection> dwl = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(dwl);
            }
        }
        [HttpPost]
        public ActionResult Selfbusiness(string newintroducerid)
        {
            List<DatewiseDueCollection> dwl = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newintroducerid);
                var amt = 0.0;
                var bondintro = (from o in db.appltabs where o.newintroducerid == newintroducerid select o).ToList();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                foreach (var c in bondintro)
                {
                    if (c.plantype == "PPS")
                    {
                        amt = c.totalcon;
                    }
                    else
                    {
                        amt = (from n in db.Installmenttabs where n.newbondid == c.newbondid && n.payamount != 0 select n.payamount).DefaultIfEmpty(0).Sum();
                    }
                    dwl.Add(new DatewiseDueCollection { newbondid = c.newbondid, name = c.name, newintroducerid = newintroducerid, IntroName = ar.name, formdate = c.formdate, amount = amt, branchname = c.branchcode, companyname = cr.CompanyName });
                }
                NewAgentid = newintroducerid;
                return View(dwl);
            }
        }
        public ActionResult PrintSelfbusiness()
        {
            List<DatewiseDueCollection> dwl = new List<DatewiseDueCollection>();
            var bondintro = (from o in db.appltabs where o.newintroducerid == NewAgentid select o).ToList();
            var amt = 0.0;
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var ar = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);
            foreach (var c in bondintro)
            {
                if (c.plantype == "PPS")
                {
                    amt = c.totalcon;
                }
                else
                {
                    amt = (from n in db.Installmenttabs where n.newbondid == c.newbondid && n.payamount != 0 select n.payamount).DefaultIfEmpty(0).Sum();
                }
                dwl.Add(new DatewiseDueCollection { newbondid = c.newbondid, name = c.name, newintroducerid = NewAgentid, IntroName = ar.name, formdate = c.formdate, amount = amt, branchname = c.branchcode, companyname = cr.CompanyName });
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Selfbusiness.rpt"));
            rd.SetDataSource(dwl);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();

        }

        [HttpGet]
        public ActionResult BrokerAccount()
        {
            List<BrokerAccount> balist = new List<BrokerAccount>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(balist);
            }
        }
        [HttpPost]
        public ActionResult BrokerAccount(string newintroducerid)
        {
            List<BrokerAccount> balist = new List<BrokerAccount>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                var ar = db.AgentDetails.Single(n => n.NewAgentId == newintroducerid);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);

                int rcount = 0;
                List<BrokerChain> bclist = new List<BrokerChain>();
                bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                List<agents> dalist = new List<agents>();
                var alist = (from al in db.AgentDetails where al.NewIntroducerId == newintroducerid select new { al.AgencyCode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                    if (ad.Status == 1)
                    {
                        bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                foreach (var bc in bclist)
                {
                    var arr = db.AgentDetails.Single(a => a.NewAgentId == bc.newagentid);
                    Double business = 0;
                    var blist = (from a in db.appltabs where a.newintroducerid == bc.newagentid && a.status == 1 orderby a.newbondid select a).ToList();
                    foreach (var b in blist)
                    {
                        var bamount = (from bb in db.Installmenttabs where bb.newbondid == b.newbondid select bb.payamount).DefaultIfEmpty(0).Sum();
                        business = business + bamount;
                    }
                    balist.Add(new BrokerAccount { newintroducerid = bc.newagentid, name = arr.name, newbondid = arr.NewIntroducerId, cname = arr.IntroName, planname = arr.Mobile, formdate = arr.Doj, amount = business, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                NewAgentid = newintroducerid;
                return View(balist);
            }
        }
        public ActionResult PrintBrokerAccountReport()
        {
            List<BrokerAccount> balist = new List<BrokerAccount>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
            var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
            var ar = db.AgentDetails.Single(n => n.NewAgentId == NewAgentid);

            int rcount = 0;
            List<BrokerChain> bclist = new List<BrokerChain>();
            bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.AgentDetails where al.NewIntroducerId == NewAgentid select new { al.AgencyCode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                if (ad.Status == 1)
                {
                    bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
            }

            foreach (var bc in bclist)
            {
                var arr = db.AgentDetails.Single(a => a.NewAgentId == bc.newagentid);
                Double business = 0;
                var blist = (from a in db.appltabs where a.newintroducerid == bc.newagentid && a.status == 1 orderby a.newbondid select a).ToList();
                foreach (var b in blist)
                {
                    var bamount = (from bb in db.Installmenttabs where bb.newbondid == b.newbondid select bb.payamount).DefaultIfEmpty(0).Sum();
                    business = business + bamount;
                }
                balist.Add(new BrokerAccount { newintroducerid = bc.newagentid, name = arr.name, newbondid = arr.NewIntroducerId, cname = arr.IntroName, planname = arr.Mobile, formdate = arr.Doj, amount = business, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerAccount.rpt"));
            rd.SetDataSource(balist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BrokerwiseAccountDetail()
        {
            List<BrokerwiseAccount> bwalist = new List<BrokerwiseAccount>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bwalist);
            }
        }
        [HttpPost]
        public ActionResult BrokerwiseAccountDetail(string newagentid, DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                var ar = db.AgentDetails.Single(n => n.NewAgentId == newagentid);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
                var bd = (from mn in db.appltabs where mn.newintroducerid == newagentid && mn.pdate >= sdate && mn.pdate <= edate && mn.status == 1 orderby mn.newbondid select new { mn.bondid }).Distinct();
                List<Tempbond> tb = new List<Tempbond>();
                List<BrokerwiseAccount> bwalist = new List<BrokerwiseAccount>();
                int count = bd.Count();
                if (count > 0)
                {
                    foreach (var item in bd.ToList())
                    {
                        tb.Add(new Tempbond { bondid = item.bondid });
                    }

                    foreach (var t in tb.ToList())
                    {
                        var bondid = t.bondid;
                        var applist = db.appltabs.Single(a => a.bondid == bondid);
                        var totalinstall = (from io in db.Installmenttabs where io.bondid == bondid select io).Count();
                        var maxinstall = (from u in db.Installmenttabs where u.bondid == bondid && u.payamount != 0 select u.installmentno).DefaultIfEmpty(0).Max();
                        string nextinstall = (maxinstall + 1).ToString();
                        var row = db.Installmenttabs.Single(r => r.bondid == bondid && r.installmentno == maxinstall + 1);
                        string dt = (row.prevexpirydate).ToString("dd/MM/yyyy");
                        if (applist.plantype == plan4.shortcutname)
                        {
                            bwalist.Add(new BrokerwiseAccount { newintroducerid = newagentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = nextinstall, amount = row.amount, nextdate = dt, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = sdate, edate = edate });
                        }
                        else if (applist.plantype == "FD")
                        {
                            bwalist.Add(new BrokerwiseAccount { newintroducerid = newagentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = "No Renewal", amount = row.amount, nextdate = "No Due", branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = sdate, edate = edate });
                        }
                        else
                        {
                            bwalist.Add(new BrokerwiseAccount { newintroducerid = newagentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = nextinstall, amount = row.amount, nextdate = dt, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = sdate, edate = edate });
                        }
                    }

                }

                else
                {
                    Response.Write("<script>alert('There is no " + mr.custname + " related to this " + mr.agentname + "')<script");

                }

                NewAgentid = newagentid;
                stdate = sdate;
                enddate = edate;

                return View(bwalist);
            }
        }
        public ActionResult PrintBrokerwiseAccountReport()
        {
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
            var ar = db.AgentDetails.Single(n => n.NewAgentId == NewAgentid);
            var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
            var bd = (from mn in db.appltabs where mn.newintroducerid == NewAgentid && mn.pdate >= stdate && mn.pdate <= enddate && mn.status == 1 orderby mn.newbondid select new { mn.bondid }).Distinct();
            List<Tempbond> tb = new List<Tempbond>();
            List<BrokerwiseAccount> bwalist = new List<BrokerwiseAccount>();
            int count = bd.Count();
            foreach (var item in bd.ToList())
            {
                tb.Add(new Tempbond { bondid = item.bondid });
            }

            foreach (var t in tb.ToList())
            {
                var bondid = t.bondid;
                var applist = db.appltabs.Single(a => a.bondid == bondid);
                var totalinstall = (from io in db.Installmenttabs where io.bondid == bondid select io).Count();
                var maxinstall = (from u in db.Installmenttabs where u.bondid == bondid && u.payamount != 0 select u.installmentno).DefaultIfEmpty(0).Max();
                string nextinstall = (maxinstall + 1).ToString();
                var row = db.Installmenttabs.Single(r => r.bondid == bondid && r.installmentno == maxinstall + 1);
                string dt = (row.prevexpirydate).ToString("dd/MM/yyyy");
                if (applist.plantype == plan4.shortcutname)
                {
                    bwalist.Add(new BrokerwiseAccount { newintroducerid = NewAgentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = nextinstall, amount = row.amount, nextdate = dt, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = stdate, edate = enddate });
                }
                else if (applist.plantype == "FD")
                {
                    bwalist.Add(new BrokerwiseAccount { newintroducerid = NewAgentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = "No Renewal", amount = row.amount, nextdate = "No Due", branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = stdate, edate = enddate });
                }
                else
                {
                    bwalist.Add(new BrokerwiseAccount { newintroducerid = NewAgentid, intname = ar.name, newbondid = applist.newbondid, issuedate = applist.formdate, name = applist.name, planname = applist.planname, term = applist.term, mode = applist.mode, maturitydate = applist.expirydate, totalinstall = totalinstall, nextinstall = nextinstall, amount = row.amount, nextdate = dt, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, sdate = stdate, edate = enddate });
                }
            }


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerwiseAccount.rpt"));
            rd.SetDataSource(bwalist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View(bwalist);


        }

        [HttpGet]
        public ActionResult BrokerSelfCollection()
        {
            List<TempSelfCollection> bsclist = new List<TempSelfCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bsclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerSelfCollection(string newagent, DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                List<Tempbond> tb = new List<Tempbond>();
                List<TempSelfCollection> bsclist = new List<TempSelfCollection>();

                var agcount = db.AgentDetails.Where(hj => hj.NewAgentId == newagent && hj.BranchCode == br.BranchCode).Count();
                if (agcount > 0)
                {
                    var ag = db.AgentDetails.Single(hj => hj.NewAgentId == newagent);

                    var tbd = (from ap in db.appltabs where ap.newintroducerid == newagent  select ap.bondid);
                    var bd = (from yt in db.Installmenttabs where yt.paymentdate >= sdate && yt.paymentdate <= edate && yt.branch == br.BranchCode && tbd.Contains(yt.bondid) select new { yt.bondid }).Distinct();
                    var count = tbd.Count();
                    if (count > 0)
                    {
                        foreach (var item in bd.ToList())
                        {
                            tb.Add(new Tempbond { bondid = item.bondid });
                        }

                        foreach (var t in tb.ToList())
                        {
                            List<SelfCollection> sf = new List<SelfCollection>();
                            int bondid = t.bondid;
                            var list = (from o in db.Installmenttabs
                                        join u in db.appltabs on o.newbondid equals u.newbondid
                                        where o.bondid == bondid && o.payamount != 0 && o.paymentdate >= sdate && o.paymentdate <= edate && o.branch == br.BranchCode
                                        orderby u.newbondid
                                        select new { o.payamount, o.installmentno, o.year, o.planname, o.newbondid, o.plantype }).ToList();
                            int i = 0;
                            foreach (var g in list.ToList())
                            {
                                i = i + 1;
                                string subplan = g.plantype;
                                if (subplan == "FD")
                                {
                                    sf.Add(new SelfCollection { sis = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno == 1 && g.year == 1)
                                {
                                    sf.Add(new SelfCollection { MISFresh = g.payamount });
                                }

                                if (subplan == "MIS" && i == 1)
                                {

                                    var ppssum = db.appltabs.Single(b => b.newbondid == g.newbondid);
                                    sf.Add(new SelfCollection { PPSFresh = ppssum.totalcon });
                                }



                                if (subplan == "RD" && g.installmentno > 1 && g.year == 1)
                                {
                                    sf.Add(new SelfCollection { MIS1 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 2)
                                {
                                    sf.Add(new SelfCollection { MIS2 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 3)
                                {
                                    sf.Add(new SelfCollection { MIS3 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 4)
                                {
                                    sf.Add(new SelfCollection { MIS4 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 5)
                                {
                                    sf.Add(new SelfCollection { MIS5 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 6)
                                {
                                    sf.Add(new SelfCollection { MIS6 = g.payamount });
                                }

                                if (subplan == "RD" && g.installmentno > 1 && g.year == 7)
                                {
                                    sf.Add(new SelfCollection { MIS7a = g.payamount });
                                }

                            }

                            double sissum = 0, misfsum = 0, mis1sum = 0, mis2sum = 0, mis3sum = 0, mis4sum = 0, mis5sum = 0, mis6sum = 0, mis7sum = 0, ppsum = 0;

                            sissum = sf.Sum(tr => tr.sis);
                            ppsum = sf.Sum(tr => tr.PPSFresh);
                            misfsum = sf.Sum(tr => tr.MISFresh);
                            mis1sum = sf.Sum(tr => tr.MIS1);
                            mis2sum = sf.Sum(tr => tr.MIS2);
                            mis3sum = sf.Sum(tr => tr.MIS3);
                            mis4sum = sf.Sum(tr => tr.MIS4);
                            mis5sum = sf.Sum(tr => tr.MIS5);
                            mis6sum = sf.Sum(tr => tr.MIS6);
                            mis7sum = sf.Sum(tr => tr.MIS7a);

                            var brow = db.appltabs.Single(bg => bg.bondid == bondid);
                            bsclist.Add(new TempSelfCollection { Newbondid = brow.newbondid, Customername = brow.name, brokername = ag.name, brokercode = ag.NewAgentId, tsis = sissum, tMISFresh = misfsum + sissum + ppsum, tPPSFresh = ppsum, tMIS1 = mis1sum, tMIS2 = mis2sum, tMIS3 = mis3sum, tMIS4 = mis4sum, tMIS5 = mis5sum, tMIS6 = mis6sum, tMIS7a = mis7sum, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = brow.nolandunit.ToString(), sdate = sdate, edate = edate });

                        }


                    }

                    else
                    {
                        Response.Write("<script>alert('There is no " + mr.custname + " related to this " + mr.agentname + "')</script>");
                    }
                }

                else
                {
                    Response.Write("<script>alert('This " + mr.agentname + " is not Register with your " + mr.branchname + "')</script>");

                }

                NewAgentid = newagent;
                stdate = sdate;
                enddate = edate;

                return View(bsclist);

            }
        }
        public ActionResult PrintselfCollection()
        {

            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
            List<Tempbond> tb = new List<Tempbond>();
            List<TempSelfCollection> bsclist = new List<TempSelfCollection>();
            var agcount = db.AgentDetails.Where(hj => hj.NewAgentId == NewAgentid && hj.BranchCode == User.Identity.Name).Count();
            if (agcount > 0)
            {
                var ag = db.AgentDetails.Single(hj => hj.NewAgentId == NewAgentid);
                var tbd = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                var bd = (from yt in db.Installmenttabs where yt.paymentdate >= stdate && yt.paymentdate <= enddate && yt.branch == br.BranchCode && tbd.Contains(yt.bondid) select new { yt.bondid }).Distinct();
                var count = tbd.Count();
                if (count > 0)
                {
                    foreach (var item in bd.ToList())
                    {
                        tb.Add(new Tempbond { bondid = item.bondid });
                    }

                    foreach (var t in tb.ToList())
                    {
                        List<SelfCollection> sf = new List<SelfCollection>();
                        int bondid = t.bondid;
                        var list = (from o in db.Installmenttabs
                                    join u in db.appltabs on o.newbondid equals u.newbondid
                                    where o.bondid == bondid && o.payamount != 0 && o.paymentdate >= stdate && o.paymentdate <= enddate && o.branch == br.BranchCode
                                    orderby u.newbondid
                                    select new { o.payamount, o.installmentno, o.year, o.planname, o.newbondid, o.plantype }).ToList();
                        int i = 0;
                        foreach (var g in list.ToList())
                        {
                            i = i + 1;
                            string subplan = g.plantype;
                            if (subplan == "FD")
                            {
                                sf.Add(new SelfCollection { sis = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno == 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { MISFresh = g.payamount });
                            }

                            if (subplan == "MIS" && i == 1)
                            {

                                var ppssum = db.appltabs.Single(b => b.newbondid == g.newbondid);
                                sf.Add(new SelfCollection { PPSFresh = ppssum.totalcon });
                            }



                            if (subplan == "RD" && g.installmentno > 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { MIS1 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 2)
                            {
                                sf.Add(new SelfCollection { MIS2 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 3)
                            {
                                sf.Add(new SelfCollection { MIS3 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 4)
                            {
                                sf.Add(new SelfCollection { MIS4 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 5)
                            {
                                sf.Add(new SelfCollection { MIS5 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 6)
                            {
                                sf.Add(new SelfCollection { MIS6 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 7)
                            {
                                sf.Add(new SelfCollection { MIS7a = g.payamount });
                            }

                        }

                        double sissum = 0, misfsum = 0, mis1sum = 0, mis2sum = 0, mis3sum = 0, mis4sum = 0, mis5sum = 0, mis6sum = 0, mis7sum = 0, ppsum = 0;

                        sissum = sf.Sum(tr => tr.sis);
                        ppsum = sf.Sum(tr => tr.PPSFresh);
                        misfsum = sf.Sum(tr => tr.MISFresh);
                        mis1sum = sf.Sum(tr => tr.MIS1);
                        mis2sum = sf.Sum(tr => tr.MIS2);
                        mis3sum = sf.Sum(tr => tr.MIS3);
                        mis4sum = sf.Sum(tr => tr.MIS4);
                        mis5sum = sf.Sum(tr => tr.MIS5);
                        mis6sum = sf.Sum(tr => tr.MIS6);
                        mis7sum = sf.Sum(tr => tr.MIS7a);

                        var brow = db.appltabs.Single(bg => bg.bondid == bondid);
                        bsclist.Add(new TempSelfCollection { Newbondid = brow.newbondid, Customername = brow.name, brokername = ag.name, brokercode = ag.NewAgentId, tsis = sissum, tMISFresh = misfsum + sissum + ppsum, tPPSFresh = ppsum, tMIS1 = mis1sum, tMIS2 = mis2sum, tMIS3 = mis3sum, tMIS4 = mis4sum, tMIS5 = mis5sum, tMIS6 = mis6sum, tMIS7a = mis7sum, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = brow.nolandunit.ToString(), sdate = stdate, edate = enddate });

                    }


                }

                else
                {
                    Response.Write("<script>alert('There is no " + mr.custname + " related to this " + mr.agentname + "')</script>");
                }
            }

            else
            {
                Response.Write("<script>alert('This " + mr.agentname + " is not Register with your " + mr.branchname + "')</script>");

            }

            ReportDocument rdp = new ReportDocument();
            rdp.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "Brokerselfcollection.rpt"));
            rdp.SetDataSource(bsclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rdp.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rdp.Close();
                rdp.Dispose();
            }
            return View();

        }

        //[HttpGet]
        //public ActionResult QuotaCollection()
        //{
        //    List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
        //    if (!IsLoggedIn())
        //    {
        //        return RedirectToAction("Logout", "Branch");
        //    }
        //    else
        //    {
        //        return View(quotalist);
        //    }
        //}
        //[HttpPost]
        //public ActionResult QuotaCollection(string newagentid, int month = 0, int year = 0)
        //{
        //    List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
        //    if (!IsLoggedIn())
        //    {
        //        return RedirectToAction("Logout", "Branch");
        //    }
        //    else
        //    {
        //        List<InstallmentList> inslist = new List<InstallmentList>();
        //        MonthName mn = new MonthName();
        //        var amt = 0.0;
        //        var mon = mn.numbertomonthname(month);
        //        var mr = db.Members.Single(m => m.Id == 1);
        //        var cr = db.CompanyInfos.Single(c => c.Id == 1);
        //        var agent = db.AgentDetails.Single(s => s.NewAgentId == newagentid);
        //        var rr = db.BrokerCommLists.Where(a => a.newagentid == newagentid && a.month == mon && a.Year == year).Count();
        //        var ar = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == year);
        //        if (rr == 1)
        //        {
        //            #region Select Broker Chain Start Here

        //            List<BrokerChain> bclist = new List<BrokerChain>();
        //            bclist.Add(new BrokerChain { agentid = agent.AgencyCode, newagentid = agent.NewAgentId, name = agent.name, rankcode = agent.RankCode, rankname = agent.RankName, introducerid = agent.NewIntroducerId, introname = agent.IntroName, branchname = User.Identity.Name });
        //            int rcount = 0;
        //            List<agents> dalist = new List<agents>();
        //            var alist = (from al in db.BrokerCommLists where al.introducerid == agent.AgencyCode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
        //            foreach (var a in alist)
        //            {
        //                rcount = rcount + 1;
        //                dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
        //            }

        //            var maxsragent = dalist.Count;
        //            var minsragent = 1;
        //            while (minsragent <= maxsragent)
        //            {

        //                var da = dalist.Where(a => a.sr == minsragent);
        //                foreach (var d in da.ToList())
        //                {
        //                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
        //                    foreach (var aa in aalist)
        //                    {
        //                        rcount = rcount + 1;
        //                        dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

        //                    }

        //                }
        //                minsragent = minsragent + 1;
        //                maxsragent = dalist.Count;
        //            }
        //            foreach (var dd in dalist)
        //            {
        //                var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == year);
        //                bclist.Add(new BrokerChain { agentid = ad.agencycode, newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

        //            }

        //            #endregion

        //            #region Here Start select Business
        //            foreach (var bc in bclist)
        //            {
        //                var tbd = (from ap in db.appltabs where ap.introducerid == bc.agentid  select ap.bondid);
        //                var bondlist = (from yt in db.Installmenttabs where yt.paymentdate.Value.Month == month && yt.paymentdate.Value.Year == year && tbd.Contains(yt.bondid) select new { yt.newbondid }).Distinct();
        //                foreach (var bond in bondlist.ToList())
        //                {
        //                    var td = db.appltabs.Single(ap => ap.newbondid == bond.newbondid);
        //                    var planlist = (from pl in db.Installmenttabs where pl.paymentdate.Value.Month == month && pl.paymentdate.Value.Year == year && pl.newbondid == bond.newbondid select pl).ToList();
        //                    foreach (var plan in planlist)
        //                    {
        //                        if (td.plantype == "PPS")
        //                        {
        //                            amt = td.totalcon;
        //                        }
        //                        else
        //                        {
        //                            amt = plan.payamount;
        //                        }
        //                        inslist.Add(new InstallmentList { newbondid = plan.newbondid, installmentno = plan.installmentno, mode = plan.mode, year = plan.year, term = plan.term_plan, planname = plan.planname, amount = amt, plancode = td.plancode });
        //                    }

        //                }
        //            }
        //            var pnlist = inslist.Select(i => new { i.plancode }).Distinct();
        //            foreach (var pn in pnlist)
        //            {
        //                var p = db.NewPlans.Single(i => i.Plancode == pn.plancode);
        //                Double totalcoll = 0, quotaamount = 0, per = 0;
        //                totalcoll = inslist.Where(tr => tr.plancode == pn.plancode).Sum(r => (Double)r.amount);

        //                if (p.Term >= 5)
        //                {
        //                    per = 100;
        //                }
        //                else
        //                {
        //                    per = 50;
        //                }

        //                quotaamount = Math.Round(((totalcoll * per) / 100), 2);
        //                quotalist.Add(new QuotaCollectionList { newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, newintroducerid = ar.newintroducerid, planname = p.Planname, business = totalcoll, percentage = per, quotaamount = quotaamount, month = mon, year = year.ToString(), companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, plan = mr.planname, agent = mr.agentname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
        //            }
        //            #endregion Here End Collection
        //        }
        //        else
        //        {
        //            ViewBag.msg = "This Month Chain not released ";
        //        }
        //        NewAgentid = newagentid;
        //        vmonth = month;
        //        vvyear = year;
        //        return View(quotalist);
        //    }
        //}
        //public ActionResult PrintQuotaCollection()
        //{
        //    List<QuotaCollectionList> quotalist = new List<QuotaCollectionList>();
        //    List<InstallmentList> inslist = new List<InstallmentList>();
        //    MonthName mn = new MonthName();
        //    var amt = 0.0;
        //    var mon = mn.numbertomonthname(vmonth);
        //    var mr = db.Members.Single(m => m.Id == 1);
        //    var cr = db.CompanyInfos.Single(c => c.Id == 1);
        //    var agent = db.AgentDetails.Single(s => s.NewAgentId == NewAgentid);
        //    var rr = db.BrokerCommLists.Where(a => a.newagentid == NewAgentid && a.month == mon && a.Year == vvyear).Count();
        //    var ar = db.BrokerCommLists.Single(a => a.newagentid == NewAgentid && a.month == mon && a.Year == vvyear);

        //    #region Select Broker Chain Start Here

        //    List<BrokerChain> bclist = new List<BrokerChain>();
        //    bclist.Add(new BrokerChain { agentid = agent.AgencyCode, newagentid = agent.NewAgentId, name = agent.name, rankcode = agent.RankCode, rankname = agent.RankName, introducerid = agent.NewIntroducerId, introname = agent.IntroName, branchname = User.Identity.Name });
        //    int rcount = 0;
        //    List<agents> dalist = new List<agents>();
        //    var alist = (from al in db.BrokerCommLists where al.introducerid == agent.AgencyCode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
        //    foreach (var a in alist)
        //    {
        //        rcount = rcount + 1;
        //        dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
        //    }

        //    var maxsragent = dalist.Count;
        //    var minsragent = 1;
        //    while (minsragent <= maxsragent)
        //    {

        //        var da = dalist.Where(a => a.sr == minsragent);
        //        foreach (var d in da.ToList())
        //        {
        //            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
        //            foreach (var aa in aalist)
        //            {
        //                rcount = rcount + 1;
        //                dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

        //            }

        //        }
        //        minsragent = minsragent + 1;
        //        maxsragent = dalist.Count;
        //    }
        //    foreach (var dd in dalist)
        //    {
        //        var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == vvyear);
        //        bclist.Add(new BrokerChain { agentid = ad.agencycode, newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

        //    }

        //    #endregion

        //    #region Here Start select Business
        //    foreach (var bc in bclist)
        //    {
        //        var tbd = (from ap in db.appltabs where ap.introducerid == bc.agentid  select ap.bondid);
        //        var bondlist = (from yt in db.Installmenttabs where yt.paymentdate.Value.Month == vmonth && yt.paymentdate.Value.Year == vvyear && tbd.Contains(yt.bondid) select new { yt.newbondid }).Distinct();
        //        foreach (var bond in bondlist.ToList())
        //        {
        //            var td = db.appltabs.Single(ap => ap.newbondid == bond.newbondid);
        //            var planlist = (from pl in db.Installmenttabs where pl.paymentdate.Value.Month == vmonth && pl.paymentdate.Value.Year == vvyear && pl.newbondid == bond.newbondid select pl).ToList();
        //            foreach (var plan in planlist)
        //            {
        //                if (td.plantype == "PPS")
        //                {
        //                    amt = td.totalcon;
        //                }
        //                else
        //                {
        //                    amt = plan.payamount;
        //                }
        //                inslist.Add(new InstallmentList { newbondid = plan.newbondid, installmentno = plan.installmentno, mode = plan.mode, year = plan.year, term = plan.term_plan, planname = plan.planname, amount = amt, plancode = td.plancode });
        //            }

        //        }
        //    }
        //    var pnlist = inslist.Select(i => new { i.plancode }).Distinct();
        //    foreach (var pn in pnlist)
        //    {
        //        var p = db.NewPlans.Single(i => i.Plancode == pn.plancode);
        //        Double totalcoll = 0, quotaamount = 0, per = 0;
        //        totalcoll = inslist.Where(tr => tr.plancode == pn.plancode).Sum(r => (Double)r.amount);

        //        if (p.Term >= 5)
        //        {
        //            per = 100;
        //        }
        //        else
        //        {
        //            per = 50;
        //        }

        //        quotaamount = Math.Round(((totalcoll * per) / 100), 2);
        //        quotalist.Add(new QuotaCollectionList { newagentid = ar.newagentid, name = ar.name, rankname = ar.rankname, newintroducerid = ar.newintroducerid, planname = p.Planname, business = totalcoll, percentage = per, quotaamount = quotaamount, month = mon, year = vvyear.ToString(), companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, plan = mr.planname, agent = mr.agentname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
        //    }
        //    #endregion Here End Collection


        //    ReportDocument rd = new ReportDocument();
        //    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "QuotaCollection.rpt"));
        //    rd.SetDataSource(quotalist);

        //    Response.Buffer = false;
        //    Response.ClearContent();
        //    Response.ClearHeaders();


        //    try
        //    {
        //        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
        //        stream.Seek(0, SeekOrigin.Begin);

        //        return new FileStreamResult(stream, "application/pdf");
        //    }

        //    catch (Exception ex)
        //    {
        //        Response.Write("<script>alert('" + ex.Message + "')</script>");
        //    }
        //    finally
        //    {
        //        rd.Close();
        //        rd.Dispose();
        //    }


        //    return View();
        //}

        [HttpGet]
        public ActionResult BrokerChainCollection()
        {
            List<TempBrokerChainCollection> bcclist = new List<TempBrokerChainCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bcclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerChainCollection(string newagentid, DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<TempBrokerChainCollection> bcclist = new List<TempBrokerChainCollection>();
                MonthName mn = new MonthName();
                var mon = mn.numbertomonthname(sdate.Month);
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var ashish = db.BrokerCommLists.Where(a => a.newagentid == newagentid && a.month == mon && a.Year == sdate.Year).Count();
                if (ashish == 1)
                {
                    var ar = db.BrokerCommLists.Single(a => a.newagentid == newagentid && a.month == mon && a.Year == sdate.Year);

                    #region Select Broker Chain Start Here

                    List<BrokerChain> bclist = new List<BrokerChain>();
                    bclist.Add(new BrokerChain { newagentid = ar.newagentid, name = ar.name, rankcode = ar.rankcode, rankname = ar.rankname, introducerid = ar.newintroducerid, introname = ar.Introname, branchname = User.Identity.Name });
                    int rcount = 0;
                    List<agents> dalist = new List<agents>();
                    var alist = (from al in db.BrokerCommLists where al.newintroducerid == newagentid && al.month == mon && al.Year == sdate.Year select new { al.agencycode }).Distinct();
                    foreach (var a in alist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
                    }

                    var maxsragent = dalist.Count;
                    var minsragent = 1;
                    while (minsragent <= maxsragent)
                    {

                        var da = dalist.Where(a => a.sr == minsragent);
                        foreach (var d in da.ToList())
                        {
                            var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == sdate.Year select new { al.agencycode }).Distinct();
                            foreach (var aa in aalist)
                            {
                                rcount = rcount + 1;
                                dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                            }

                        }
                        minsragent = minsragent + 1;
                        maxsragent = dalist.Count;
                    }
                    foreach (var dd in dalist)
                    {
                        var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == sdate.Year);
                        bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

                    }

                    #endregion

                    #region Select Broker Collectin Start Here

                    foreach (var bc in bclist)
                    {
                        List<Tempbond> tb = new List<Tempbond>();
                        List<TempSelfCollection> bsclist = new List<TempSelfCollection>();

                        var ag = db.BrokerCommLists.Single(hj => hj.newagentid == bc.newagentid && hj.month == mon && hj.Year == sdate.Year);

                        var tbd = (from ap in db.appltabs where ap.newintroducerid == bc.newagentid  select ap.bondid).ToList();
                        var bd = (from yt in db.Installmenttabs where yt.paymentdate >= sdate && yt.paymentdate <= edate && tbd.Contains(yt.bondid) select new { yt.bondid }).Distinct();
                        var count = tbd.Count();
                        if (count > 0)
                        {
                            foreach (var item in bd.ToList())
                            {
                                tb.Add(new Tempbond { bondid = item.bondid });
                            }

                            foreach (var t in tb.ToList())
                            {
                                List<SelfCollection> sf = new List<SelfCollection>();
                                int bondid = t.bondid;
                                var list = (from o in db.Installmenttabs
                                            join u in db.appltabs on o.newbondid equals u.newbondid
                                            where o.bondid == bondid && o.payamount != 0 && o.paymentdate >= sdate && o.paymentdate <= edate
                                            orderby u.newbondid
                                            select new { o.payamount, o.installmentno, o.year, o.planname, u.plantype, u.plancode, u.totalcon }).ToList();

                                foreach (var g in list.ToList())
                                {
                                    string subplan = g.plantype;
                                    if (subplan == "FD")
                                    {
                                        sf.Add(new SelfCollection { sis = g.payamount });
                                    }
                                    if (subplan == "MIS" && g.installmentno == 1 && g.year == 1)
                                    {
                                        sf.Add(new SelfCollection { PPSFresh = g.totalcon });
                                    }
                                    if (subplan == "NFP" && g.installmentno == 1 && g.year == 1)
                                    {
                                        sf.Add(new SelfCollection { NFPFresh = g.payamount });
                                    }
                                    if (subplan == "RD" && g.installmentno == 1 && g.year == 1)
                                    {
                                        sf.Add(new SelfCollection { MISFresh = g.payamount });
                                    }

                                    if (subplan == "RD" && g.installmentno > 1 && g.year == 1)
                                    {
                                        sf.Add(new SelfCollection { MIS1 = g.payamount });
                                    }

                                    if (subplan == "RD" && g.installmentno > 1 && g.year == 2)
                                    {
                                        sf.Add(new SelfCollection { MIS2 = g.payamount });
                                    }

                                    if (subplan == "RD" && g.installmentno > 1 && g.year == 3)
                                    {
                                        sf.Add(new SelfCollection { MIS3 = g.payamount });
                                    }

                                    if (subplan == "RD" && g.installmentno > 1 && g.year == 4)
                                    {
                                        sf.Add(new SelfCollection { MIS4 = g.payamount });
                                    }

                                    if (subplan == "RD" && g.installmentno > 1 && g.year == 5)
                                    {
                                        sf.Add(new SelfCollection { MIS5 = g.payamount });
                                    }

                                    if (subplan == "RD" && g.installmentno > 1 && g.year == 6)
                                    {
                                        sf.Add(new SelfCollection { MIS6 = g.payamount });
                                    }

                                    if (subplan == "RD" && g.installmentno > 1 && g.year >= 7)
                                    {
                                        sf.Add(new SelfCollection { MIS7a = g.payamount });
                                    }
                                }

                                var brow = db.appltabs.Single(bg => bg.bondid == bondid);
                                double sissum = 0, misfsum = 0, mis1sum = 0, mis2sum = 0, mis3sum = 0, mis4sum = 0, mis5sum = 0, mis6sum = 0, mis7sum = 0, pppsum = 0, nfssum = 0;

                                sissum = sf.Sum(tr => tr.sis);
                                misfsum = sf.Sum(tr => tr.MISFresh);
                                mis1sum = sf.Sum(tr => tr.MIS1);
                                mis2sum = sf.Sum(tr => tr.MIS2);
                                mis3sum = sf.Sum(tr => tr.MIS3);
                                mis4sum = sf.Sum(tr => tr.MIS4);
                                mis5sum = sf.Sum(tr => tr.MIS5);
                                mis6sum = sf.Sum(tr => tr.MIS6);
                                mis7sum = sf.Sum(tr => tr.MIS7a);
                                pppsum = sf.Sum(tr => tr.PPSFresh);
                                nfssum = sf.Sum(tr => tr.NFPFresh);
                                bsclist.Add(new TempSelfCollection { Newbondid = brow.newbondid, Customername = brow.name, brokername = ag.name, brokercode = ag.newagentid, tsis = sissum, tMISFresh = misfsum, tPPSFresh = pppsum, tNFPFresh = nfssum, tMIS1 = mis1sum, tMIS2 = mis2sum, tMIS3 = mis3sum, tMIS4 = mis4sum, tMIS5 = mis5sum, tMIS6 = mis6sum, tMIS7a = mis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, sdate = sdate, edate = edate });
                            }


                        }
                        double bsissum = 0, bmisfsum = 0, bppsum = 0, bnfpsum = 0, bmis1sum = 0, bmis2sum = 0, bmis3sum = 0, bmis4sum = 0, bmis5sum = 0, bmis6sum = 0, bmis7sum = 0;
                        bsissum = bsclist.Sum(tr => tr.tsis);
                        bmisfsum = bsclist.Sum(tr => tr.tMISFresh);
                        bmis1sum = bsclist.Sum(tr => tr.tMIS1);
                        bmis2sum = bsclist.Sum(tr => tr.tMIS2);
                        bmis3sum = bsclist.Sum(tr => tr.tMIS3);
                        bmis4sum = bsclist.Sum(tr => tr.tMIS4);
                        bmis5sum = bsclist.Sum(tr => tr.tMIS5);
                        bmis6sum = bsclist.Sum(tr => tr.tMIS6);
                        bmis7sum = bsclist.Sum(tr => tr.tMIS7a);
                        bppsum = bsclist.Sum(tr => tr.tPPSFresh);
                        bnfpsum = bsclist.Sum(tr => tr.tNFPFresh);


                        if (bsissum + bmisfsum + bmis1sum + bmis2sum + bmis3sum + bmis4sum + bmis5sum + bmis6sum + bmis7sum + bppsum + bnfpsum > 0)
                        {
                            bcclist.Add(new TempBrokerChainCollection { brokercode = newagentid, brokername = ar.name, newagentid = bc.newagentid, name = bc.name, tsis = bsissum, tMISFresh = bmisfsum, tppp = bppsum, tMIP = bnfpsum, tMIS1 = bmis1sum, tMIS2 = bmis2sum, tMIS3 = bmis3sum, tMIS4 = bmis4sum, tMIS5 = bmis5sum, tMIS6 = bmis6sum, tMIS7a = bmis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = ag.mobile, bond = mr.custname, agent = mr.agentname, plan = mr.planname, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                        }

                    }

                    #endregion
                }
                else
                {
                    ViewBag.msg = "This Month Chain Not Released";
                }

                NewAgentid = newagentid;
                stdate = sdate;
                enddate = edate;

                return View(bcclist);
            }
        }
        public ActionResult PrintBrokerChainCollection()
        {
            MonthName mn = new MonthName();
            var mon = mn.numbertomonthname(stdate.Month);
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var ar = db.BrokerCommLists.Single(a => a.newagentid == NewAgentid && a.month == mon && a.Year == stdate.Year);
            List<TempBrokerChainCollection> bcclist = new List<TempBrokerChainCollection>();
            #region Select Broker Chain Start Here

            List<BrokerChain> bclist = new List<BrokerChain>();
            bclist.Add(new BrokerChain { newagentid = ar.newagentid, name = ar.name, rankcode = ar.rankcode, rankname = ar.rankname, introducerid = ar.newintroducerid, introname = ar.Introname, branchname = User.Identity.Name });
            int rcount = 0;
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.BrokerCommLists where al.newintroducerid == NewAgentid && al.month == mon && al.Year == stdate.Year select new { al.agencycode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.agencycode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.BrokerCommLists where al.introducerid == d.agentcode && al.month == mon && al.Year == stdate.Year select new { al.agencycode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.agencycode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.BrokerCommLists.Single(a => a.agencycode == dd.agentcode && a.month == mon && a.Year == stdate.Year);
                bclist.Add(new BrokerChain { newagentid = ad.newagentid, name = ad.name, rankcode = ad.rankcode, rankname = ad.rankname, introducerid = ad.newintroducerid, introname = ad.Introname, branchname = User.Identity.Name });

            }

            #endregion

            #region Select Broker Collectin Start Here

            foreach (var bc in bclist)
            {
                List<Tempbond> tb = new List<Tempbond>();
                List<TempSelfCollection> bsclist = new List<TempSelfCollection>();

                var ag = db.BrokerCommLists.Single(hj => hj.newagentid == bc.newagentid && hj.month == mon && hj.Year == stdate.Year);


                var tbd = (from ap in db.appltabs where ap.newintroducerid == bc.newagentid  select ap.bondid).ToList();
                var bd = (from yt in db.Installmenttabs where yt.paymentdate >= stdate && yt.paymentdate <= enddate && tbd.Contains(yt.bondid) select new { yt.bondid }).Distinct();
                var count = tbd.Count();
                if (count > 0)
                {
                    foreach (var item in bd.ToList())
                    {
                        tb.Add(new Tempbond { bondid = item.bondid });
                    }

                    foreach (var t in tb.ToList())
                    {
                        List<SelfCollection> sf = new List<SelfCollection>();
                        int bondid = t.bondid;
                        var list = (from o in db.Installmenttabs
                                    join u in db.appltabs on o.newbondid equals u.newbondid
                                    where o.bondid == bondid && o.payamount != 0 && o.paymentdate >= stdate && o.paymentdate <= enddate
                                    orderby u.newbondid
                                    select new { o.payamount, o.installmentno, o.year, o.planname, u.plantype, u.plancode, u.totalcon }).ToList();

                        foreach (var g in list.ToList())
                        {
                            string subplan = g.plantype;
                            if (subplan == "FD")
                            {
                                sf.Add(new SelfCollection { sis = g.payamount });
                            }
                            if (subplan == "MIS" && g.installmentno == 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { PPSFresh = g.totalcon });
                            }
                            if (subplan == "NFP" && g.installmentno == 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { NFPFresh = g.payamount });
                            }
                            if (subplan == "RD" && g.installmentno == 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { MISFresh = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 1)
                            {
                                sf.Add(new SelfCollection { MIS1 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 2)
                            {
                                sf.Add(new SelfCollection { MIS2 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 3)
                            {
                                sf.Add(new SelfCollection { MIS3 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 4)
                            {
                                sf.Add(new SelfCollection { MIS4 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 5)
                            {
                                sf.Add(new SelfCollection { MIS5 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year == 6)
                            {
                                sf.Add(new SelfCollection { MIS6 = g.payamount });
                            }

                            if (subplan == "RD" && g.installmentno > 1 && g.year >= 7)
                            {
                                sf.Add(new SelfCollection { MIS7a = g.payamount });
                            }
                        }

                        var brow = db.appltabs.Single(bg => bg.bondid == bondid);
                        double sissum = 0, misfsum = 0, mis1sum = 0, mis2sum = 0, mis3sum = 0, mis4sum = 0, mis5sum = 0, mis6sum = 0, mis7sum = 0, pppsum = 0, nfssum = 0;

                        sissum = sf.Sum(tr => tr.sis);
                        misfsum = sf.Sum(tr => tr.MISFresh);
                        mis1sum = sf.Sum(tr => tr.MIS1);
                        mis2sum = sf.Sum(tr => tr.MIS2);
                        mis3sum = sf.Sum(tr => tr.MIS3);
                        mis4sum = sf.Sum(tr => tr.MIS4);
                        mis5sum = sf.Sum(tr => tr.MIS5);
                        mis6sum = sf.Sum(tr => tr.MIS6);
                        mis7sum = sf.Sum(tr => tr.MIS7a);
                        pppsum = sf.Sum(tr => tr.PPSFresh);
                        nfssum = sf.Sum(tr => tr.NFPFresh);
                        bsclist.Add(new TempSelfCollection { Newbondid = brow.newbondid, Customername = brow.name, brokername = ag.name, brokercode = ag.newagentid, tsis = sissum, tMISFresh = misfsum, tPPSFresh = pppsum, tNFPFresh = nfssum, tMIS1 = mis1sum, tMIS2 = mis2sum, tMIS3 = mis3sum, tMIS4 = mis4sum, tMIS5 = mis5sum, tMIS6 = mis6sum, tMIS7a = mis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, sdate = stdate, edate = enddate });
                    }


                }
                double bsissum = 0, bmisfsum = 0, bppsum = 0, bnfpsum = 0, bmis1sum = 0, bmis2sum = 0, bmis3sum = 0, bmis4sum = 0, bmis5sum = 0, bmis6sum = 0, bmis7sum = 0;
                bsissum = bsclist.Sum(tr => tr.tsis);
                bmisfsum = bsclist.Sum(tr => tr.tMISFresh);
                bmis1sum = bsclist.Sum(tr => tr.tMIS1);
                bmis2sum = bsclist.Sum(tr => tr.tMIS2);
                bmis3sum = bsclist.Sum(tr => tr.tMIS3);
                bmis4sum = bsclist.Sum(tr => tr.tMIS4);
                bmis5sum = bsclist.Sum(tr => tr.tMIS5);
                bmis6sum = bsclist.Sum(tr => tr.tMIS6);
                bmis7sum = bsclist.Sum(tr => tr.tMIS7a);
                bppsum = bsclist.Sum(tr => tr.tPPSFresh);
                bnfpsum = bsclist.Sum(tr => tr.tNFPFresh);


                if (bsissum + bmisfsum + bmis1sum + bmis2sum + bmis3sum + bmis4sum + bmis5sum + bmis6sum + bmis7sum + bppsum + bnfpsum > 0)
                {
                    bcclist.Add(new TempBrokerChainCollection { brokercode = NewAgentid, brokername = ar.name, newagentid = bc.newagentid, name = bc.name, tsis = bsissum, tMISFresh = bmisfsum, tppp = bppsum, tMIP = bnfpsum, tMIS1 = bmis1sum, tMIS2 = bmis2sum, tMIS3 = bmis3sum, tMIS4 = bmis4sum, tMIS5 = bmis5sum, tMIS6 = bmis6sum, tMIS7a = bmis7sum, companyname = cr.CompanyName, branchname = User.Identity.Name, branch = ag.mobile, bond = mr.custname, agent = mr.agentname, plan = mr.planname, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

            }

            #endregion


            ReportDocument rdp = new ReportDocument();
            rdp.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerChainCollection.rpt"));
            rdp.SetDataSource(bcclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rdp.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rdp.Close();
                rdp.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BrokerSelfDueCollection()
        {
            List<SelfdueCollection> bsdclist = new List<SelfdueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bsdclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerSelfDueCollection(string newagentid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);

                DateTime date = DateTime.Now.Date;
                List<SelfdueCollection> bsdclist = new List<SelfdueCollection>();
                var tb = (from n in db.appltabs where n.newintroducerid == newagentid && n.branchcode == br.BranchCode && n.status == 1 select n);

                foreach (var t in tb.ToList())
                {
                    var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate < date && i.branch == br.BranchCode select i).ToList();
                    foreach (var bwdi in bwdilist)
                    {
                        bsdclist.Add(new SelfdueCollection { newagentid = newagentid, name = ar.name, newbondid = bwdi.newbondid, cname = t.name, expirydate = bwdi.prevexpirydate, planname = bwdi.planname, term = bwdi.term_plan, mode = bwdi.mode, amount = bwdi.amount, installmentno = bwdi.installmentno, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, mobileno = t.mobileno });
                    }
                }

                int count = bsdclist.Count();
                if (count == 0)
                {
                    Response.Write("<script>alert('There is No due collection')</script>");
                }
                NewAgentid = newagentid;
                return View(bsdclist);

            }
        }
        public ActionResult PrintBrokerSelfDueReport()
        {
            DateTime date = DateTime.Now.Date;
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
            var ar = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);

            List<SelfdueCollection> bsdclist = new List<SelfdueCollection>();
            var tb = (from n in db.appltabs where n.newintroducerid == NewAgentid && n.branchcode == br.BranchCode && n.status == 1 select n);

            foreach (var t in tb.ToList())
            {
                var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate < date && i.branch == br.BranchCode select i).ToList();
                foreach (var bwdi in bwdilist)
                {
                    bsdclist.Add(new SelfdueCollection { newagentid = NewAgentid, name = ar.name, newbondid = bwdi.newbondid, cname = t.name, expirydate = bwdi.prevexpirydate, planname = bwdi.planname, term = bwdi.term_plan, mode = bwdi.mode, amount = bwdi.amount, installmentno = bwdi.installmentno, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, mobileno = t.mobileno });
                }
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "BrokerSelfDueCollection.rpt"));
            rd.SetDataSource(bsdclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BrokerChainDueCollection()
        {
            List<ChaindueCollection> bcdclist = new List<ChaindueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(bcdclist);
            }
        }
        [HttpPost]
        public ActionResult BrokerChainDueCollection(string newagentid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<ChaindueCollection> bcdclist = new List<ChaindueCollection>();
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                var ar = db.AgentDetails.Single(a => a.NewAgentId == newagentid);

                #region Select Broker Chain Start Here

                List<BrokerChain> bclist = new List<BrokerChain>();
                bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = br.BranchName });
                int rcount = 0;
                List<agents> dalist = new List<agents>();
                var alist = (from al in db.AgentDetails where al.NewIntroducerId == newagentid select new { al.AgencyCode }).Distinct();
                foreach (var a in alist)
                {
                    rcount = rcount + 1;
                    dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
                }

                var maxsragent = dalist.Count;
                var minsragent = 1;
                while (minsragent <= maxsragent)
                {

                    var da = dalist.Where(a => a.sr == minsragent);
                    foreach (var d in da.ToList())
                    {
                        var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                        foreach (var aa in aalist)
                        {
                            rcount = rcount + 1;
                            dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                        }

                    }
                    minsragent = minsragent + 1;
                    maxsragent = dalist.Count;
                }
                foreach (var dd in dalist)
                {
                    var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                    bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = br.BranchName });

                }

                #endregion
                #region Select Due Collectin Start Here
                foreach (var bc in bclist)
                {

                    DateTime date = DateTime.Now.Date;
                    var tb = (from n in db.appltabs where n.newintroducerid == bc.newagentid && n.plantype == "RD" && n.status == 1 select n);
                    foreach (var t in tb.ToList())
                    {
                        double amount = 0;
                        List<BondDueCollection> bsdclist = new List<BondDueCollection>();
                        var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate < date && i.branch == br.BranchCode select i).ToList();
                        foreach (var bwdi in bwdilist)
                        {
                            bsdclist.Add(new BondDueCollection { amount = bwdi.amount });
                        }


                        amount = bsdclist.Sum(tr => tr.amount);
                        if (amount > 0)
                        {
                            bcdclist.Add(new ChaindueCollection { brokercode = newagentid, brokername = ar.name, newagentid = bc.newagentid, name = bc.name, newbondid = t.newbondid, cname = t.name, expirydate = t.expirydate, planname = t.planname, term = t.term, mode = t.mode, amount = amount, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, mobileno = t.mobileno });
                        }
                    }

                }
                #endregion

                NewAgentid = newagentid;
                return View(bcdclist);
            }
        }
        public ActionResult PrintBrokerChainDueReport()
        {
            List<ChaindueCollection> bcdclist = new List<ChaindueCollection>();
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
            var ar = db.AgentDetails.Single(a => a.NewAgentId == NewAgentid);

            #region Select Broker Chain Start Here

            List<BrokerChain> bclist = new List<BrokerChain>();
            bclist.Add(new BrokerChain { newagentid = ar.NewAgentId, name = ar.name, rankcode = ar.RankCode, rankname = ar.RankName, introducerid = ar.NewIntroducerId, introname = ar.IntroName, branchname = br.BranchName });
            int rcount = 0;
            List<agents> dalist = new List<agents>();
            var alist = (from al in db.AgentDetails where al.NewIntroducerId == NewAgentid select new { al.AgencyCode }).Distinct();
            foreach (var a in alist)
            {
                rcount = rcount + 1;
                dalist.Add(new agents { sr = rcount, agentcode = a.AgencyCode });
            }

            var maxsragent = dalist.Count;
            var minsragent = 1;
            while (minsragent <= maxsragent)
            {

                var da = dalist.Where(a => a.sr == minsragent);
                foreach (var d in da.ToList())
                {
                    var aalist = (from al in db.AgentDetails where al.IntroducerCode == d.agentcode select new { al.AgencyCode }).Distinct();
                    foreach (var aa in aalist)
                    {
                        rcount = rcount + 1;
                        dalist.Add(new agents { sr = rcount, agentcode = aa.AgencyCode });

                    }

                }
                minsragent = minsragent + 1;
                maxsragent = dalist.Count;
            }
            foreach (var dd in dalist)
            {
                var ad = db.AgentDetails.Single(a => a.AgencyCode == dd.agentcode);
                bclist.Add(new BrokerChain { newagentid = ad.NewAgentId, name = ad.name, rankcode = ad.RankCode, rankname = ad.RankName, introducerid = ad.NewIntroducerId, introname = ad.IntroName, branchname = br.BranchName });

            }

            #endregion
            #region Select Due Collectin Start Here
            foreach (var bc in bclist)
            {

                DateTime date = DateTime.Now.Date;
                var tb = (from n in db.appltabs where n.newintroducerid == bc.newagentid && n.plantype == "RD" && n.status == 1 select n);
                foreach (var t in tb.ToList())
                {
                    double amount = 0;
                    List<BondDueCollection> bsdclist = new List<BondDueCollection>();
                    var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate < date && i.branch == br.BranchCode select i).ToList();
                    foreach (var bwdi in bwdilist)
                    {
                        bsdclist.Add(new BondDueCollection { amount = bwdi.amount });
                    }


                    amount = bsdclist.Sum(tr => tr.amount);
                    if (amount > 0)
                    {
                        bcdclist.Add(new ChaindueCollection { brokercode = NewAgentid, brokername = ar.name, newagentid = bc.newagentid, name = bc.name, newbondid = t.newbondid, cname = t.name, expirydate = t.expirydate, planname = t.planname, term = t.term, mode = t.mode, amount = amount, companyname = cr.CompanyName, branchname = br.BranchName, branch = mr.branchname, bond = mr.custname, agent = mr.agentname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, mobileno = t.mobileno });
                    }
                }

            }
            #endregion

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BrokerChainDueCollection.rpt"));
            rd.SetDataSource(bcdclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult AllSavingaccount()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var dn = db.SavingAccountInfos.Where(a => a.branchcode == User.Identity.Name).ToList();
                return View(dn);
            }

        }
        public ActionResult Printallsavingaccount()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DWAccList> acclist = new List<DWAccList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dn = db.SavingAccountInfos.Where(s => s.branchcode == User.Identity.Name).ToList();
                foreach (var d in dn)
                {
                    acclist.Add(new DWAccList { accountno = d.accountno, name = d.acholdername, fathername = d.fathername, maddress = d.address, Mobileno = d.mobileno, nomineename = d.nomineename, nomage = d.nomage, nomrel = d.nomrel, branchname = User.Identity.Name, formdate = d.Doj, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "accountlist.rpt"));
                rd.SetDataSource(acclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View(dn);

            }

        }

        [HttpGet]
        public ActionResult Datewisesaving()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DWAccList> acclist = new List<DWAccList>();
                return View(acclist);
            }
        }
        [HttpPost]
        public ActionResult Datewisesaving(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DWAccList> acclist = new List<DWAccList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var dn = (from sa in db.SavingAccountInfos where sa.Doj >= sdate && sa.Doj <= edate && sa.branchcode == User.Identity.Name select sa).ToList();
                foreach (var d in dn)
                {
                    acclist.Add(new DWAccList { accountno = d.accountno, name = d.acholdername, fathername = d.fathername, maddress = d.address, Mobileno = d.mobileno, nomineename = d.nomineename, nomage = d.nomage, nomrel = d.nomrel, branchname = User.Identity.Name, formdate = d.Doj, sdate = sdate, edate = edate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                stdate = sdate;
                enddate = edate;
                return View(acclist);
            }

        }
        public ActionResult PrintDatewisesaving()
        {
            List<DWAccList> acclist = new List<DWAccList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var dn = (from sa in db.SavingAccountInfos where sa.Doj >= stdate && sa.Doj <= enddate && sa.branchcode == User.Identity.Name select sa).ToList();
            foreach (var d in dn)
            {
                acclist.Add(new DWAccList { accountno = d.accountno, name = d.acholdername, fathername = d.fathername, maddress = d.address, Mobileno = d.mobileno, nomineename = d.nomineename, nomage = d.nomage, nomrel = d.nomrel, branchname = User.Identity.Name, formdate = d.Doj, sdate = stdate, edate = enddate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "datewisesaving.rpt"));
            rd.SetDataSource(acclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult BDCReport()
        {
            List<TDSTemp> vlist = new List<TDSTemp>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(vlist);
            }

        }
        [HttpPost]
        public ActionResult BDCReport(DateTime paydate, int month = 0, int year = 0)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<TDSTemp> vlist = new List<TDSTemp>();
                var yyear = year.ToString();
                List<BrokerCommList> blist = new List<BrokerCommList>();
                var mon = mn.numbertomonthname(month);
                blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == year && c.branchcode == User.Identity.Name select c).ToList();
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                foreach (var b in blist)
                {
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;
                    var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == month && cts.year == year select cts.amount).DefaultIfEmpty(0).Sum();
                    List<plan> pclist = new List<plan>();
                    List<require> rlist = new List<require>();
                    Double tdsper = 0;
                    var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == year);
                    if (br.panno == null || br.panno == "Form-61")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                    var vyear = year.ToString();

                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == month && cts.year == vyear select cts).Count();
                    //------Inserting self voucher------------
                    var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == month && ct.date.Year == year orderby ct.planname select new { ct.planname }).Distinct();
                    foreach (var p in spclist.ToList())
                    {
                        pclist.Add(new plan { planname = p.planname });
                    }

                    foreach (var pc in pclist)
                    {


                        var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == month && sct.date.Year == year && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                        foreach (var spy in spylist.ToList())
                        {

                            var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                            var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == month && cts.date.Year == year select cts.commission).DefaultIfEmpty(0).Sum();
                            if (business > 0)
                            {
                                var percentage = (commission / business) * 100;
                                rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                            }
                        }
                    }

                    //------End Inserting self voucher----------------

                    //----------selecting team business and commission of selected month---------------

                    var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == year select a).ToList();
                    List<agents> alist = new List<agents>();
                    foreach (var aar in arlist)
                    {
                        alist.Add(new agents { agentcode = aar.agencycode });
                    }

                    foreach (var a in alist)
                    {
                        List<teamagents> tlist = new List<teamagents>();
                        List<trequire> trlist = new List<trequire>();
                        var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == year);
                        int rcount = 0;
                        rcount = rcount + 1;
                        tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                        var maxsragent = tlist.Count;
                        var minsragent = 1;
                        while (minsragent <= maxsragent)
                        {

                            var da = tlist.Where(t => t.sr == minsragent);
                            foreach (var d in da.ToList())
                            {
                                var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == year select new { al.agencycode }).Distinct();
                                foreach (var aa in aalist)
                                {
                                    rcount = rcount + 1;
                                    tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                }

                            }
                            minsragent = minsragent + 1;
                            maxsragent = tlist.Count;
                        }

                        foreach (var tt in tlist)
                        {
                            var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == year);
                            var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == month && nn.date.Year == year select nn).ToList();
                            foreach (var nctr in nctrlist)
                            {
                                trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                            }

                        }

                        var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == year);
                        var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                        foreach (var dpc in dpclist)
                        {
                            var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                            foreach (var dpy in dpylist)
                            {
                                var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                if (tbusiness > 0)
                                {
                                    var tpercentage = (tcommission / tbusiness) * 100;
                                    rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, panno = br.panno, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                }
                            }
                        }

                    }


                    //----------End selecting team business and commission of selected month---------------

                    var gbusiness = rlist.Sum(tr => tr.business);
                    var gcommission = rlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                    if (lesstds > 0)
                    {
                        var bb = db.AgentDetails.Single(p => p.NewAgentId == br.newagentid);
                        vlist.Add(new TDSTemp { brokerid = br.newagentid, brokername = br.name, address = bb.Address, dob = bb.Dob, panno = br.panno, tds = lesstds, monthname = monthname });
                    }


                }
                vmonth = month;
                vvyear = year;
                pdate = paydate;
                return View(vlist);

            }
        }
        public ActionResult PrintBDCReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                List<TDSTemp> vlist = new List<TDSTemp>();
                List<BrokerCommList> blist = new List<BrokerCommList>();
                var mon = mn.numbertomonthname(vmonth);
                blist = (from c in db.BrokerCommLists orderby c.agencycode where c.month == mon && c.Year == vvyear && c.branchcode == User.Identity.Name select c).ToList();
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                foreach (var b in blist)
                {
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;
                    var advancepayment = (from cts in db.AdvDeductionVouchers where cts.newagentid == b.newagentid && cts.month == vmonth && cts.year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                    List<plan> pclist = new List<plan>();
                    List<require> rlist = new List<require>();
                    Double tdsper = 0;
                    var br = db.BrokerCommLists.Single(a => a.newagentid == b.newagentid && a.month == mon && a.Year == vvyear);
                    if (br.panno == null || br.panno == "Form-61")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode select cts).Count();
                    var vyear = vvyear.ToString();

                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == b.agencycode && cts.month == vmonth && cts.year == vyear select cts).Count();
                    //------Inserting self voucher------------
                    var spclist = (from ct in db.commission_tabs where ct.bondintroducerid == br.agencycode && ct.newagentid == b.newagentid && ct.date.Month == vmonth && ct.date.Year == vvyear orderby ct.planname select new { ct.planname }).Distinct();
                    foreach (var p in spclist.ToList())
                    {
                        pclist.Add(new plan { planname = p.planname });
                    }

                    foreach (var pc in pclist)
                    {


                        var spylist = (from sct in db.commission_tabs where sct.bondintroducerid == br.agencycode && sct.newagentid == b.newagentid && sct.date.Month == vmonth && sct.date.Year == vvyear && sct.planname == pc.planname orderby sct.year select new { sct.year }).Distinct();
                        foreach (var spy in spylist.ToList())
                        {

                            var business = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                            var commission = (from cts in db.commission_tabs where cts.planname == pc.planname && cts.year == spy.year && cts.bondintroducerid == br.agencycode && cts.newagentid == b.newagentid && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.commission).DefaultIfEmpty(0).Sum();
                            if (business > 0)
                            {
                                var percentage = (commission / business) * 100;
                                rlist.Add(new require { agentid = b.agencycode, newagentid = b.newagentid, name = br.name, rankname = br.rankname, planname = pc.planname, year = spy.year, business = business, percentage = percentage, commission = commission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                            }
                        }
                    }

                    //------End Inserting self voucher----------------

                    //----------selecting team business and commission of selected month---------------

                    var arlist = (from a in db.BrokerCommLists where a.newintroducerid == b.newagentid && a.month == mon && a.Year == vvyear select a).ToList();
                    List<agents> alist = new List<agents>();
                    foreach (var aar in arlist)
                    {
                        alist.Add(new agents { agentcode = aar.agencycode });
                    }

                    foreach (var a in alist)
                    {
                        List<teamagents> tlist = new List<teamagents>();
                        List<trequire> trlist = new List<trequire>();
                        var nagentid = db.BrokerCommLists.Single(na => na.agencycode == a.agentcode && na.month == mon && na.Year == vvyear);
                        int rcount = 0;
                        rcount = rcount + 1;
                        tlist.Add(new teamagents { sr = rcount, tagentcode = a.agentcode });
                        var maxsragent = tlist.Count;
                        var minsragent = 1;
                        while (minsragent <= maxsragent)
                        {

                            var da = tlist.Where(t => t.sr == minsragent);
                            foreach (var d in da.ToList())
                            {
                                var aalist = (from al in db.BrokerCommLists where al.introducerid == d.tagentcode && al.month == mon && al.Year == vvyear select new { al.agencycode }).Distinct();
                                foreach (var aa in aalist)
                                {
                                    rcount = rcount + 1;
                                    tlist.Add(new teamagents { sr = rcount, tagentcode = aa.agencycode });

                                }

                            }
                            minsragent = minsragent + 1;
                            maxsragent = tlist.Count;
                        }

                        foreach (var tt in tlist)
                        {
                            var neaid = db.BrokerCommLists.Single(n => n.agencycode == tt.tagentcode && n.month == mon && n.Year == vvyear);
                            var nctrlist = (from nn in db.commission_tabs where nn.bondintroducerid == tt.tagentcode && nn.newagentid == b.newagentid && nn.date.Month == vmonth && nn.date.Year == vvyear select nn).ToList();
                            foreach (var nctr in nctrlist)
                            {
                                trlist.Add(new trequire { newagentid = neaid.newagentid, planname = nctr.planname, year = nctr.year, business = nctr.amount, percentage = nctr.percentage, commission = nctr.commission });
                            }

                        }

                        var tnrname = db.BrokerCommLists.Single(t => t.newagentid == nagentid.newagentid && t.month == mon && t.Year == vvyear);
                        var dpclist = trlist.Select(tr => new { tr.planname }).Distinct();
                        foreach (var dpc in dpclist)
                        {
                            var dpylist = trlist.Select(tr => new { tr.year }).Distinct();
                            foreach (var dpy in dpylist)
                            {
                                var tbusiness = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.business);
                                var tcommission = trlist.Where(tr => tr.planname == dpc.planname && tr.year == dpy.year).Sum(tr => tr.commission);
                                if (tbusiness > 0)
                                {
                                    var tpercentage = (tcommission / tbusiness) * 100;
                                    rlist.Add(new require { agentid = nagentid.agencycode, newagentid = nagentid.newagentid, panno = br.panno, name = tnrname.name, rankname = tnrname.rankname, planname = dpc.planname, year = dpy.year, business = tbusiness, percentage = tpercentage, commission = tcommission, tds = tdsper, bonusamount = bonusamount, advancepayment = advancepayment, brokerid = b.newagentid, brokername = br.name, brokerrank = br.rankname, newintroducerid = br.newintroducerid, month = monthname, voucherno = voucherno + 1 });
                                }
                            }
                        }

                    }


                    //----------End selecting team business and commission of selected month---------------

                    var gbusiness = rlist.Sum(tr => tr.business);
                    var gcommission = rlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - lesstds - advancepayment), 2);
                    if (lesstds > 0)
                    {
                        var bb = db.AgentDetails.Single(v => v.NewAgentId == br.newagentid);
                        vlist.Add(new TDSTemp { brokerid = br.newagentid, brokername = br.name, address = bb.Address, dob = bb.Dob, panno = br.panno, tds = lesstds, monthname = monthname });
                    }


                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BDCReport.rpt"));
                rd.SetDataSource(vlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(vlist);
            }

        }
        #endregion

        #region Official Reports Start Here

        [HttpGet]
        public ActionResult BranchlLoginDetail()
        {
            List<branchlogindetail> dclist = new List<branchlogindetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                dclist = (from dcl in db.branchlogindetails where dcl.iid == User.Identity.Name select dcl).ToList();
                return View(dclist);

            }
        }
        public ActionResult PrintBranchLoginDtl()
        {
            List<branchlogindetail> bond = new List<branchlogindetail>();
            bond = db.branchlogindetails.ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "BranchLoginReport.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult OperatorLoginDetails()
        {
            List<operatorlogin_detail> opldtl = new List<operatorlogin_detail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(opldtl);
            }
        }
        [HttpPost]
        public ActionResult OperatorLoginDetails(string iid)
        {

            List<operatorlogin_detail> dclist = new List<operatorlogin_detail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                dclist = (from dcl in db.operatorlogin_details where dcl.iid == iid select dcl).ToList();
                opid = iid;
                return View(dclist);

            }
        }
        public ActionResult PrintLoginDetails()
        {
            List<operatorlogin_detail> bond = new List<operatorlogin_detail>();
            bond = db.operatorlogin_details.Where(s => s.iid == opid).ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "OperatorLoginReport.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }
        [HttpPost]
        public JsonResult All_Customer(string smsid)
        {

            string sms_result = "Record not found!";
            var count = db.appltabs.Count(d => d.newbondid == smsid);
            if (count == 1)
            {
                var ad = db.appltabs.Single(d => d.newbondid == smsid);
                var nl = db.NewLogins.Single(d => d.UserName == ad.newbondid);
                var cr = db.CompanyInfos.Single(d => d.Id == 1);
                MyClass.Sendmsg(ad.mobileno, "Dear " + ad.name + ",Thank you for Being a part of " + cr.CompanyName + " Login on " + cr.HeadOffice + " with your user ID as " + nl.UserName + " and password is " + nl.Password + ". Use " + nl.UserName + " as referral ID. Regards- " + cr.CompanyName + ".");
                sms_result = "SMS sent successfully to " + ad.name;
            }
            return Json(sms_result, JsonRequestBehavior.DenyGet);
        }
        [HttpPost]
        public JsonResult All_Agent(string smsid)
        {

            string sms_result = "Record not found!";
            var count = db.AgentDetails.Count(d => d.NewAgentId == smsid);
            if (count == 1)
            {
                var ad = db.AgentDetails.Single(d => d.NewAgentId == smsid);
                var nl = db.NewLogins.Single(d => d.UserName == ad.NewAgentId);
                var cr = db.CompanyInfos.Single(d => d.Id == 1);
                MyClass.Sendmsg(ad.Mobile, "Dear " + ad.name + ",Thank you for Being a part of " + cr.CompanyName + " Login on " + cr.HeadOffice + " with your user ID as " + nl.UserName + " and password is " + nl.Password + ". Use " + nl.UserName + " as referral ID. Regards- " + cr.CompanyName + ".");
                sms_result = "SMS sent successfully to " + ad.name;
            }
            return Json(sms_result, JsonRequestBehavior.DenyGet);
        }
        [HttpGet]
        public ActionResult OfficialCustomerReport()
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(custlist);
            }
        }
        [HttpPost]
        public ActionResult OfficialCustomerReport(int option)
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            List<appltab> cus = new List<appltab>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var bb = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);
                if (option > 0)
                {
                    cus = (from s in db.appltabs where s.branchcode == bb.BranchCode && s.projectid == option && s.status == 1 orderby s.newbondid select s).ToList();
                }
                else
                {
                    cus = (from s in db.appltabs where s.branchcode == bb.BranchCode && s.status == 1 orderby s.newbondid select s).ToList();
                }
                foreach (var cust in cus)
                {
                    custlist.Add(new DatewiseCustomerList { newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }

                PId = option;
                return View(custlist);

            }
        }
        public ActionResult PrintOfficialCustomerReport()
        {
            List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
            List<appltab> cus = new List<appltab>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var mr = db.Members.Single(c => c.Id == 1);
            var bb = db.Branchtabs.Single(o => o.BranchCode == User.Identity.Name);

            if (PId > 0)
            {
                cus = (from s in db.appltabs where s.branchcode == bb.BranchCode && s.projectid == PId && s.status == 1 orderby s.newbondid select s).ToList();
            }
            else
            {
                cus = (from s in db.appltabs where s.branchcode == bb.BranchCode && s.status == 1 orderby s.newbondid select s).ToList();
            }

            foreach (var cust in cus)
            {
                custlist.Add(new DatewiseCustomerList { newbondid = cust.newbondid, name = cust.name, newintroducerid = cust.newintroducerid, planname = cust.planname, mode = cust.mode, payment = cust.payment, bookingamount = cust.bookingamount, downpayment = cust.downpayment, plotsize = cust.nolandunit, Mobile = cust.mobileno, formdate = cust.formdate, branchname = User.Identity.Name, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CustomerList.rpt"));
            rd.SetDataSource(custlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult DatewiseCustomer()
        {
            List<DatewiseCustomerList> dwclist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Index", "Home");
            }
            else
            {
                return View(dwclist);
            }
        }
        [HttpPost]
        public ActionResult DatewiseCustomer(DateTime sdate, DateTime edate)
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Index", "Home");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);

                var tlist = (from cu in db.appltabs where cu.formdate >= sdate && cu.formdate <= edate && cu.branchcode == br.BranchCode && cu.status == 1 select cu).ToList();

                foreach (var i in tlist)
                {
                    clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, plan = mr.planname, bond = mr.custname, sdate = sdate, edate = edate });
                }

                stdate = sdate;
                enddate = edate;

                return View(clist);
            }
        }
        public ActionResult PrintDatewiseCustomer()
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Index", "Home");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var tlist = (from cu in db.appltabs where cu.formdate >= stdate && cu.formdate <= enddate && cu.branchcode == User.Identity.Name && cu.status == 1 select cu).ToList();
                foreach (var i in tlist)
                {
                    clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, plan = mr.planname, bond = mr.custname, sdate = stdate, edate = enddate });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "datewisecustomer.rpt"));
                rd.SetDataSource(clist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View(clist);
            }
        }

        [HttpGet]
        public ActionResult AssignPlotCustomer()
        {
            List<DatewiseCustomerList> dwclist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {
                        return View(dwclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        [HttpPost]
        public ActionResult AssignPlotCustomer(DateTime sdate, DateTime edate)
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);

                var tlist = (from cu in db.appltabs where cu.formdate >= sdate && cu.formdate <= edate && cu.status == 1 && cu.PYN == "Y" && cu.branchcode == br.BranchCode orderby cu.formdate select cu).ToList();

                foreach (var i in tlist)
                {
                    if (i.plantype == plan4.shortcutname)
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.totalcon, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, bond = mr.custname, sdate = sdate, edate = edate, plan = i.phase, block = i.block, plotno = i.plotno });
                    }
                    else
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, bond = mr.custname, sdate = sdate, edate = edate, plan = i.phase, block = i.block, plotno = i.plotno });
                    }
                }

                stdate = sdate;
                enddate = edate;

                return View(clist);
            }
        }
        public ActionResult PrintAssignPlotCustomer()
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
                var tlist = (from cu in db.appltabs where cu.formdate >= stdate && cu.formdate <= enddate && cu.status == 1 && cu.PYN == "Y" && cu.branchcode == br.BranchCode orderby cu.formdate select cu).ToList();

                foreach (var i in tlist)
                {
                    if (i.plantype == plan4.shortcutname)
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.totalcon, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, bond = mr.custname, sdate = stdate, edate = enddate, plan = i.phase, block = i.block, plotno = i.plotno });
                    }
                    else
                    {
                        clist.Add(new DatewiseCustomerList { newbondid = i.newbondid, name = i.name, Mobile = i.mobileno, formdate = i.formdate, newintroducerid = i.newintroducerid, planname = i.planname, mode = i.mode, payment = i.payment, bookingamount = i.bookingamount, downpayment = i.downpayment, plotsize = i.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, bond = mr.custname, sdate = stdate, edate = enddate, plan = i.phase, block = i.block, plotno = i.plotno });
                    }
                }


                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "datewisecustomer.rpt"));
                rd.SetDataSource(clist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View(clist);
            }
        }

        [HttpGet]
        public ActionResult DatewiseCustomerLedger()
        {
            List<DatewiseCustomerList> dwclist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {
                        return View(dwclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        [HttpPost]
        public ActionResult DatewiseCustomerLedger(DateTime sdate, DateTime edate, string planname)
        {
            List<DatewiseCustomerList> clist = new List<DatewiseCustomerList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
                var br = db.Branchtabs.Single(v => v.BranchCode == User.Identity.Name);
                
                if (planname == "")
                {
                    var tlist = (from cu in db.Installmenttabs where cu.paymentdate >= sdate && cu.paymentdate <= edate && cu.branch == br.BranchCode select new { cu.bondid }).Distinct().ToList();
                    foreach (var i in tlist)
                    {
                        var bcr = db.appltabs.Single(b => b.bondid == i.bondid);
                        var amountsum = (from ii in db.Installmenttabs where ii.bondid == i.bondid && ii.paymentdate >= sdate && ii.paymentdate <= edate select ii.payamount).DefaultIfEmpty(0).Sum();
                        clist.Add(new DatewiseCustomerList { newbondid = bcr.newbondid, name = bcr.name, Mobile = bcr.mobileno, formdate = bcr.formdate, newintroducerid = bcr.newintroducerid, planname = bcr.planname, mode = bcr.mode, payment = bcr.payment, bookingamount = bcr.bookingamount, downpayment = amountsum, block = bcr.block, plotno = bcr.plotno, plotsize = bcr.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, plan = mr.planname, bond = mr.custname, sdate = sdate, edate = edate });
                    }
                }
                else
                {
                    var tlist = (from cu in db.Installmenttabs where cu.paymentdate >= sdate && cu.paymentdate <= edate && cu.planname == planname && cu.branch == br.BranchCode select new { cu.bondid }).Distinct().ToList();
                    foreach (var i in tlist)
                    {
                        var bcr = db.appltabs.Single(b => b.bondid == i.bondid);
                        var amountsum = (from ii in db.Installmenttabs where ii.bondid == i.bondid && ii.paymentdate >= sdate && ii.paymentdate <= edate select ii.payamount).DefaultIfEmpty(0).Sum();
                        clist.Add(new DatewiseCustomerList { newbondid = bcr.newbondid, name = bcr.name, Mobile = bcr.mobileno, formdate = bcr.formdate, newintroducerid = bcr.newintroducerid, planname = bcr.planname, mode = bcr.mode, payment = bcr.payment, bookingamount = bcr.bookingamount, downpayment = amountsum, block = bcr.block, plotno = bcr.plotno, plotsize = bcr.nolandunit, branch = mr.branchname, companyname = cr.CompanyName, branchname = br.BranchName, plan = mr.planname, bond = mr.custname, sdate = sdate, edate = edate });
                    }
                }

                if (clist.Count > 0)
                {
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DWCustomerLedger.rpt"));
                    rd.SetDataSource(clist);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        string dt = pdate.ToShortDateString();

                        return new FileStreamResult(stream, "application/pdf");
                    }

                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }
                else
                {
                    Response.Write("<script>alert('No Data Found')</script>");
                }
                return View(clist);
            }
        }

        [HttpGet]
        public ActionResult MemberWiseAccountDetail()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);

                List<DWMemberList> memberlist = new List<DWMemberList>();
                var mlist = (from o in db.Member_tabs where o.BranchCode == br.BranchCode orderby o.NewMemberId select o).ToList();
                foreach (var m in mlist)
                {
                    memberlist.Add(new DWMemberList { newmemberid = m.NewMemberId, name = m.MemberName, dob = m.DOB, fathername = m.Father, maddress = m.Address, Mobileno = m.Mobile, branchname = br.BranchName, formdate = m.Cdate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(memberlist);
            }


        }
        public ActionResult PrintMemberList()
        {

            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
            List<DWMemberList> memberlist = new List<DWMemberList>();
            var mlist = (from o in db.Member_tabs where o.BranchCode == br.BranchCode orderby o.NewMemberId select o).ToList();
            foreach (var m in mlist)
            {
                memberlist.Add(new DWMemberList { newmemberid = m.NewMemberId, name = m.MemberName, dob = m.DOB, fathername = m.Father, maddress = m.Address, Mobileno = m.Mobile, branchname = br.BranchName, formdate = m.Cdate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AllMemberList.rpt"));
            rd.SetDataSource(memberlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult MemberAccountDetail(string newmemberid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<BrokerAccount> balist = new List<BrokerAccount>();
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var ar = db.Member_tabs.Single(n => n.NewMemberId == newmemberid);
                var alist = (from a in db.appltabs where a.newmemberid == newmemberid && a.status == 1 orderby a.newbondid select a).ToList();
                foreach (var b in alist)
                {
                    var amountsum = (from ii in db.Installmenttabs where ii.newbondid == b.newbondid select ii.payamount).DefaultIfEmpty(0).Sum();
                    balist.Add(new BrokerAccount { newintroducerid = newmemberid, name = ar.MemberName, newbondid = b.newbondid, cname = b.name, amount = amountsum, planname = b.planname, term = b.term, mode = b.mode, expirydate = b.expirydate, formdate = b.formdate, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                NewMemberid = newmemberid;
                return View(balist);
            }


        }
        public ActionResult PrintAccountDetail()
        {

            List<BrokerAccount> balist = new List<BrokerAccount>();
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
            var ar = db.Member_tabs.Single(n => n.NewMemberId == NewMemberid);
            var alist = (from a in db.appltabs where a.newmemberid == NewMemberid && a.status == 1 orderby a.newbondid select a).ToList();
            foreach (var b in alist)
            {
                var amountsum = (from ii in db.Installmenttabs where ii.newbondid == b.newbondid select ii.payamount).DefaultIfEmpty(0).Sum();
                balist.Add(new BrokerAccount { newintroducerid = NewMemberid, name = ar.MemberName, newbondid = b.newbondid, cname = b.name, amount = amountsum, planname = b.planname, term = b.term, mode = b.mode, expirydate = b.expirydate, formdate = b.formdate, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MemberAccountList.rpt"));
            rd.SetDataSource(balist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult DateWiseMember()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DWMemberList> memberlist = new List<DWMemberList>();
                return View(memberlist);
            }
        }
        [HttpPost]
        public ActionResult DateWiseMember(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                List<DWMemberList> memberlist = new List<DWMemberList>();
                var mlist = (from o in db.Member_tabs where o.Cdate <= edate && o.Cdate >= sdate && o.BranchCode == br.BranchCode orderby o.NewMemberId select o).ToList();
                foreach (var m in mlist)
                {
                    memberlist.Add(new DWMemberList { newmemberid = m.NewMemberId, name = m.MemberName, dob = m.DOB, fathername = m.Father, maddress = m.Address, Mobileno = m.Mobile, branchname = br.BranchName, formdate = m.Cdate, sdate = sdate, edate = edate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                enddate = edate;
                stdate = sdate;
                return View(memberlist);
            }


        }
        public ActionResult PrintDateWiseMember()
        {

            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
            List<DWMemberList> memberlist = new List<DWMemberList>();
            var mlist = (from o in db.Member_tabs where o.Cdate <= enddate && o.Cdate >= stdate && o.BranchCode == br.BranchCode orderby o.NewMemberId select o).ToList();
            foreach (var m in mlist)
            {
                memberlist.Add(new DWMemberList { newmemberid = m.NewMemberId, name = m.MemberName, dob = m.DOB, fathername = m.Father, maddress = m.Address, Mobileno = m.Mobile, branchname = br.BranchName, formdate = m.Cdate, sdate = stdate, edate = enddate, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "datewisemember.rpt"));
            rd.SetDataSource(memberlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult OfficialCdppPlanReport()
        {
            List<Plan_Tab> custreg = new List<Plan_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                custreg = (from aaa in db.Plan_Tabs select aaa).ToList();
                return View(custreg);

            }
        }
        public ActionResult PrintRdPlanReport()
        {

            List<Plan_Tab> bond = new List<Plan_Tab>();
            bond = db.Plan_Tabs.ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "rdplan.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult OfficialSipPlanReport()
        {
            List<Fixed_Tab> fd = new List<Fixed_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                fd = (from aaa in db.Fixed_Tabs select aaa).ToList();
                return View(fd);

            }
        }
        public ActionResult PrintFdPlanReport()
        {

            List<Fixed_Tab> bond = new List<Fixed_Tab>();
            bond = db.Fixed_Tabs.ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Fdplan.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult NFPlanList()
        {
            List<MIPP_tab> fd = new List<MIPP_tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<NfpList> rlist = new List<NfpList>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var plist = (from aaa in db.MIPP_tabs select aaa).ToList();
                foreach (var p in plist)
                {
                    rlist.Add(new NfpList { Planname = p.planname, Term = p.term, Amount = p.amount, EstimatedValue = p.FiveERV, Yearlyamount = p.Yearly, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(rlist);

            }
        }
        public ActionResult PrintNFPlanReport()
        {

            List<NfpList> rlist = new List<NfpList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var plist = (from aaa in db.MIPP_tabs select aaa).ToList();
            foreach (var p in plist)
            {
                rlist.Add(new NfpList { Planname = p.planname, Term = p.term, Amount = p.amount, EstimatedValue = p.FiveERV, Yearlyamount = p.Yearly, companyname = cr.CompanyName, branchname = User.Identity.Name, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "NFPlan.rpt"));
            rd.SetDataSource(rlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult PPlanList()
        {
            List<Pension_Tab> fd = new List<Pension_Tab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                fd = (from aaa in db.Pension_Tabs select aaa).ToList();
                return View(fd);

            }
        }
        public ActionResult PrintPPlanReport()
        {

            List<Pension_Tab> fd = new List<Pension_Tab>();
            fd = (from aaa in db.Pension_Tabs select aaa).ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PPlan.rpt"));
            rd.SetDataSource(fd);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult OfficialRankListReport()
        {
            List<Ranktab> custreg = new List<Ranktab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                custreg = (from aaa in db.Ranktabs where aaa.RankCode < 15 select aaa).ToList();
                return View(custreg);

            }
        }
        public ActionResult PrintRank()
        {
            List<Ranktab> bond = new List<Ranktab>();
            bond = db.Ranktabs.Where(s => s.RankCode < 15).ToList();
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Rank.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult CustumerInstallmentReport()
        {
            List<CustomerInstallment> ins = new List<CustomerInstallment>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(ins);
            }
        }
        [HttpPost]
        public ActionResult CustumerInstallmentReport(string newbondid)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int days = 0;
                List<CustomerInstallment> ins = new List<CustomerInstallment>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var bcount = (from vb in db.Installmenttabs where vb.newbondid == newbondid select vb).Count();

                if (bcount >= 0)
                {
                    var inst = (from vb in db.Installmenttabs where vb.newbondid == newbondid select vb).OrderBy(x=>x.installmentno).ToList();
                    foreach (var item in inst.ToList())
                    {
                        if (item.payamount != 0)
                        {
                            if (item.paymentdate > item.prevexpirydate)
                            {
                                DateTime dt1 = Convert.ToDateTime(item.paymentdate);
                                DateTime dt2 = item.prevexpirydate;
                                TimeSpan ts = dt1.Subtract(dt2);
                                days = ts.Days;
                            }
                            else
                            {
                                days = 0;
                            }
                        }
                        else
                        {
                            days = 0;
                        }

                        var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                        var brow = db.appltabs.Single(po => po.newbondid == item.newbondid);
                        var bro = db.AgentDetails.Single(bo => bo.NewAgentId == brow.newintroducerid);

                        ins.Add(new CustomerInstallment
                        {
                            downpayment = brow.downpayment,
                            latedays = days,
                            amount = item.amount,
                            payamount = item.payamount,
                            installmentno = item.installmentno,
                            year = item.year,
                            paymentdate = Convert.ToDateTime(item.paymentdate),
                            cssno = Convert.ToInt32(item.cssno),
                            receiptno = item.receiptno,
                            reliefrs = item.reliefrs,
                            newbondid = brow.newbondid,
                            cust_name = brow.name,
                            brokercode = brow.newintroducerid,
                            name = bro.name,
                            planname = brow.planname,
                            term_plan = brow.term,
                            mode = brow.mode,
                            branch = brow.branchcode,
                            mobile = brow.mobileno,
                            latefine = item.latefine,
                            age = brow.age,
                            address = brow.addr,
                            nomname = brow.nomineename,
                            nomage = brow.nomage,
                            nomrel = brow.nomrel,
                            bookingamount = brow.bookingamount,
                            totalcon = brow.totalcon,
                            expectedvalue = brow.expectedraisablevalue,
                            expirydate = item.prevexpirydate,
                            enddate = brow.expirydate,
                            Company = cr.CompanyName,
                            Branch_name = bb.BranchName,
                            caddress = cr.Address,
                            emailid = cr.Emailid,
                            contact = cr.Contact,
                            domainname = cr.HeadOffice,
                            branchname = bb.BranchName,

                            paymethod = item.paymethod,
                            bank = item.bank,
                            Account = item.Account,
                            chequeno = item.chequeno,
                            ACholdername = item.ACholdername,
                            Bbranch = item.Bbranch,
                            IFSCCode = item.IFSCCode,
                            ChequeAmount = item.ChequeAmount,
                            Chequedate = item.Chequedate.ToString(),
                            penality = item.Penality,
                            transactiontype = item.transactiontype
                        });

                        NewBondid = newbondid;

                    }
                }

                else
                {
                    Response.Write("<script>alert('Record Not Found for this Id')</script>");

                }
                return View(ins);
            }
        }
        public ActionResult PrintCustumerInstallment()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int days = 0;
                string date1 = "01/01/0001";
                string date;
                //DateTime date = DateTime.Now.Date;
                List<CustomerInstallment> ins = new List<CustomerInstallment>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var inst = (from vb in db.Installmenttabs where vb.newbondid == NewBondid select vb).ToList();
                var paid_amt = inst.Select(d => d.payamount).DefaultIfEmpty(0).Sum();
                var brow = db.appltabs.Single(po => po.newbondid == NewBondid);
                var p1 = db.Plans.FirstOrDefault(d => d.Plancode == brow.projectid);
                string _property_type = p1 == null ? "Residential" : p1.type.Replace("Commercial", "Residential Cum Commercial");
                foreach (var item in inst.ToList())
                {
                    if (item.payamount == 0)
                    {
                        days = 0;
                        date = date1;
                    }
                    else
                    {
                        if (item.paymentdate > item.prevexpirydate)
                        {
                            DateTime dt1 = Convert.ToDateTime(item.paymentdate);
                            DateTime dt2 = item.prevexpirydate;
                            TimeSpan ts = dt1.Subtract(dt2);
                            days = ts.Days;
                            date = Convert.ToDateTime(item.paymentdate).ToString("dd/MM/yyyy");
                        }
                        else
                        {
                            days = 0;
                            date = Convert.ToDateTime(item.paymentdate).ToString("dd/MM/yyyy");

                        }

                    }
                  
                    var bro = db.AgentDetails.Single(bo => bo.NewAgentId == brow.newintroducerid);
                    var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                    string Paymethod = "";
                    if (item.paymethod == "banktransaction")
                    {
                        Paymethod =  item.transactiontype;
                    }
                    else {
                        Paymethod = item.paymethod;
                    }
                    ins.Add(new CustomerInstallment
                    {
                        downpayment = brow.downpayment,
                        latedays = days,
                        latefine = item.latefine,
                        amount = item.amount,
                        payamount = item.payamount,
                        installmentno = item.installmentno,
                        year = item.year,
                        paydate = date,
                        cssno = Convert.ToInt32(item.cssno),
                        receiptno = item.receiptno,
                        reliefrs = item.reliefrs,
                        newbondid = brow.newbondid,
                        cust_name = brow.name,
                        brokercode = brow.newintroducerid,
                        name = bro.name,
                        planname = _property_type,
                        term_plan = brow.term,
                        mode = brow.paymenttype,
                        branch = brow.branchcode,
                        age = brow.age,
                        address = brow.addr,
                        nomname = brow.nomineename,
                        nomage = brow.nomage,
                        nomrel = brow.nomrel,
                        bookingamount = brow.bookingamount,
                        totalcon = brow.totalcon,
                        expectedvalue = brow.totalcon - paid_amt,
                        expirydate = item.prevexpirydate,
                        enddate = brow.expirydate,
                        Company = cr.CompanyName,
                        Branch_name = bb.BranchName,
                        caddress = cr.Address,
                        emailid = cr.Emailid,
                        contact = cr.Contact,
                        domainname = cr.HeadOffice,
                        mobile = brow.mobileno,
                        branchname = bb.BranchName,

                        paymethod = Paymethod,
                        bank = item.bank,
                        Account = item.Account,
                        chequeno = item.chequeno,
                        ACholdername = item.ACholdername,
                        Bbranch = item.Bbranch,
                        IFSCCode = item.IFSCCode,
                        ChequeAmount = item.ChequeAmount,
                        Chequedate = item.Chequedate.ToString(),
                        penality = item.Penality,
                        transactiontype = item.transactiontype,
                        plotno = brow.plotno == 0 ? "NA" : brow.plotno.ToString(),
                        block = brow.block,
                        phase = brow.phase,
                        area = brow.nolandunit
                    });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CustomerInstallment.rpt"));
                rd.SetDataSource(ins);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View(ins);
            }
        }

        [HttpGet]
        public ActionResult DailyExpense()
        {
            List<ExpenseList> elist = new List<ExpenseList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(elist);
            }

        }
        [HttpPost]
        public ActionResult DailyExpense(DateTime sdate, DateTime edate, string command)
        {
            List<ExpenseList> elist = new List<ExpenseList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var ins = (from dcl in db.Expenses where dcl.date_time >= sdate && dcl.date_time <= edate && dcl.branchcode == User.Identity.Name select dcl).ToList();
                foreach (var i in ins)
                {
                    elist.Add(new ExpenseList { head = i.head, Remark = i.Remark, amount = i.amount, date_time = i.date_time, sdate = sdate, edate = edate, branchcode = i.branchcode, opid = i.opid, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, paymethod = i.paymethod, trans_id = i.chequeno });
                }
                ab = sdate;
                b = edate;
            }
            return View(elist);

        }
        public ActionResult PrintExpanse()
        {
            List<ExpenseList> elist = new List<ExpenseList>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var ins = (from dcl in db.Expenses where dcl.date_time >= ab && dcl.date_time <= b && dcl.branchcode == User.Identity.Name select dcl).ToList();
            foreach (var i in ins)
            {
                elist.Add(new ExpenseList { head = i.head, Remark = i.Remark, amount = i.amount, date_time = i.date_time, sdate = ab, edate = b, branchcode = i.branchcode, opid = i.opid, branchname = User.Identity.Name, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, paymethod = i.paymethod, trans_id = i.chequeno });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DailyExpanse.rpt"));
            rd.SetDataSource(elist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View();
        }

        [HttpGet]
        public ActionResult RPStatementReport()
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(cbrlist);
            }
        }
        [HttpPost]
        public ActionResult RPStatementReport(DateTime sdate, DateTime edate)
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(d => d.BranchCode == User.Identity.Name);


                Double totalsalary = 0;
                Double ytotalsalary = 0;
                var plan1 = db.Plans.Single(p1 => p1.Plancode == 1);
                var plan2 = db.Plans.Single(p2 => p2.Plancode == 2);
                var plan3 = db.Plans.Single(p3 => p3.Plancode == 3);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                /////Yesterday's Collection /////
                var todayfdcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.mode == "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todayRdcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.mode != "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && df.installmentno == 1 && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var bookingy = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.bookingamount).DefaultIfEmpty(0).Sum();
                var advancey = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.downpayment).DefaultIfEmpty(0).Sum();
                var todayNewBondcoll = todayfdcoll + todayRdcoll;
                var todayRenewalBondcoll = (from df in db.Installmenttabs where df.paymentdate < sdate && df.installmentno != 1 && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

                var yeslatefee = (from df in db.Installmenttabs where df.paymentdate < sdate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
                var yesreleif = (from df in db.Installmenttabs where df.paymentdate < sdate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
                var ylatefee = yeslatefee - yesreleif;

                var bformfeey = (from df in db.AgentDetails where df.Doj < sdate && df.BranchCode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
                var cformfeey = (from df in db.appltabs where df.formdate < sdate && df.type != "Adjustment" && df.branchcode == br.BranchCode && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
                var mformfeey = (from df in db.Member_tabs where df.Cdate < sdate && df.BranchCode == br.BranchCode select df.Fee).DefaultIfEmpty(0).Sum();
                var acformfeey = (from df in db.SavingAccountInfos where df.Doj < sdate && df.branchcode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
                var deposity = (from df in db.TransactionTabs where df.pdate < sdate && df.branchcode == br.BranchCode select df.credit).DefaultIfEmpty(0).Sum();
                var intotaly = Math.Round((todayRenewalBondcoll + bformfeey + cformfeey + mformfeey + acformfeey + deposity + ylatefee + bookingy + advancey), 2);

                var spotcommy = (from o in db.spotcommission_tabs where o.date < sdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                var AdvPayment = (from df in db.AdvBrokerPaymentTabs where df.date < sdate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
                var withdrawy = (from df in db.TransactionTabs where df.pdate < sdate && df.branchcode == br.BranchCode select df.debit).DefaultIfEmpty(0).Sum();
                var expansey = (from df in db.Expenses where df.date_time < sdate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
                var todayVouchercoll = (from df in db.Voucher_Reports where df.date < sdate && df.branchcode == br.BranchCode select df.netamount).DefaultIfEmpty(0).Sum();
                var mat = (from df in db.MaturityTabs where df.maturitydate < sdate && df.branchcode == br.BranchCode select df.maturityamount).DefaultIfEmpty(0).Sum();
                var emplisty = (from se in db.Salary_ems where se.date < sdate select se).ToList();
                foreach (var el in emplisty)
                {
                    var erow = db.Emp_Regs.Single(er => er.empid == el.empid);
                    var branchcode = erow.branchcode;
                    if (branchcode == br.BranchCode)
                    {
                        var ysalary = (from df in db.Salary_ems where df.date < sdate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                        ytotalsalary = totalsalary + ysalary;
                    }
                }
                var extotaly = Math.Round((expansey + todayVouchercoll + ytotalsalary + withdrawy + AdvPayment + mat + spotcommy), 2);
                var grandtotaly = intotaly - extotaly;

                /////Today's Collection /////
                var todayfdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.mode == "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todayRdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.mode != "Single" && df.installmentno == 1 && df.type != "Adjustment" && df.branch == br.BranchCode && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
                var todaybooking = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.bookingamount).DefaultIfEmpty(0).Sum();
                var todayadvance = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.downpayment).DefaultIfEmpty(0).Sum();
                var todayNewBondcoll1 = todayfdcoll1 + todayRdcoll1;
                var todayRenewalBondcoll1 = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.installmentno != 1 && df.branch == br.BranchCode && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

                var todaylatefee = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
                var todayreleif = (from df in db.Installmenttabs where df.paymentdate >= sdate && df.paymentdate <= edate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
                var latefee = todaylatefee - todayreleif;

                var bformfee = (from df in db.AgentDetails where df.Doj >= sdate && df.Doj <= edate && df.BranchCode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
                var cformfee = (from df in db.appltabs where df.formdate >= sdate && df.formdate <= edate && df.type != "Adjustment" && df.branchcode == br.BranchCode && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
                var mformfee = (from df in db.Member_tabs where df.Cdate >= sdate && df.Cdate <= edate && df.BranchCode == br.BranchCode select df.Fee).DefaultIfEmpty(0).Sum();
                var acformfee = (from df in db.SavingAccountInfos where df.Doj >= sdate && df.Doj <= edate && df.branchcode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
                var deposit = (from df in db.TransactionTabs where df.pdate >= sdate && df.pdate <= edate && df.branchcode == br.BranchCode select df.credit).DefaultIfEmpty(0).Sum();
                var intotal = Math.Round((todayRenewalBondcoll1 + bformfee + cformfee + mformfee + acformfee + deposit + latefee + todaybooking + todayadvance), 2);

                var spotcomm = (from o in db.spotcommission_tabs where o.date >= sdate && o.date <= edate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                var AdvPayment1 = (from df in db.AdvBrokerPaymentTabs where df.date >= sdate && df.date <= edate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
                var withdraw = (from df in db.TransactionTabs where df.pdate >= sdate && df.pdate <= edate && df.branchcode == br.BranchCode select df.debit).DefaultIfEmpty(0).Sum();
                var expanse = (from df in db.Expenses where df.date_time >= sdate && df.date_time <= edate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
                var todayVouchercoll1 = (from df in db.Voucher_Reports where df.date >= sdate && df.date <= edate && df.branchcode == br.BranchCode select df.netamount).DefaultIfEmpty(0).Sum();
                var mat1 = (from df in db.MaturityTabs where df.maturitydate >= sdate && df.maturitydate <= edate && df.branchcode == br.BranchCode select df.maturityamount).DefaultIfEmpty(0).Sum();
                var emplist = (from se in db.Salary_ems where se.date >= sdate && se.date <= edate select se).ToList();
                foreach (var el in emplist)
                {

                    var salary = (from df in db.Salary_ems where df.date >= sdate && df.date <= edate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                    totalsalary = totalsalary + salary;
                }

                var extotal = Math.Round((expanse + todayVouchercoll1 + totalsalary + withdraw + AdvPayment1 + mat1 + spotcomm), 2);
                var grandtotal = intotal - extotal;

                cbrlist.Add(new BalanceReport { bookingamount = todaybooking, downpayment = todayadvance, maturity = mat1, pps = 0, fpo = todayRdcoll1, dpo = todayfdcoll1, advpayment = AdvPayment1, newbond = todayNewBondcoll1, renewel = todayRenewalBondcoll1, latefee = latefee, bformfee = bformfee, cformfee = cformfee, mformfee = mformfee, acformfee = acformfee, deposit = deposit, withdraw = withdraw, intotal = intotal, expence = expanse, spotcomm = spotcomm, voucher = todayVouchercoll1, salary = totalsalary, extotal = extotal, grandtotal = grandtotal, branchname = br.BranchName, companyname = cr.CompanyName, openingbalance = grandtotaly, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                stdate = sdate;
                enddate = edate;
                return View(cbrlist);
            }
        }
        public ActionResult PrintClosingBalance()
        {
            List<BalanceReport> cbrlist = new List<BalanceReport>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(d => d.BranchCode == User.Identity.Name);
            Double totalsalary = 0;
            Double ytotalsalary = 0;
            var plan1 = db.Plans.Single(p1 => p1.Plancode == 1);
            var plan2 = db.Plans.Single(p2 => p2.Plancode == 2);
            var plan3 = db.Plans.Single(p3 => p3.Plancode == 3);
            var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
            /////Yesterday's Collection /////
            var todayfdcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.mode == "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todayRdcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.mode != "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && df.installmentno == 1 && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var bookingy = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.bookingamount).DefaultIfEmpty(0).Sum();
            var advancey = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.downpayment).DefaultIfEmpty(0).Sum();
            var todayNewBondcoll = todayfdcoll + todayRdcoll;
            var todayRenewalBondcoll = (from df in db.Installmenttabs where df.paymentdate < stdate && df.installmentno != 1 && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

            var yeslatefee = (from df in db.Installmenttabs where df.paymentdate < stdate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
            var yesreleif = (from df in db.Installmenttabs where df.paymentdate < stdate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
            var ylatefee = yeslatefee - yesreleif;

            var bformfeey = (from df in db.AgentDetails where df.Doj < stdate && df.BranchCode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
            var cformfeey = (from df in db.appltabs where df.formdate < stdate && df.type != "Adjustment" && df.branchcode == br.BranchCode && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
            var mformfeey = (from df in db.Member_tabs where df.Cdate < stdate && df.BranchCode == br.BranchCode select df.Fee).DefaultIfEmpty(0).Sum();
            var acformfeey = (from df in db.SavingAccountInfos where df.Doj < stdate && df.branchcode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
            var deposity = (from df in db.TransactionTabs where df.pdate < stdate && df.branchcode == br.BranchCode select df.credit).DefaultIfEmpty(0).Sum();
            var intotaly = Math.Round((todayRenewalBondcoll + bformfeey + cformfeey + mformfeey + acformfeey + deposity + ylatefee + bookingy + advancey), 2);

            var spotcommy = (from o in db.spotcommission_tabs where o.date < stdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
            var AdvPayment = (from df in db.AdvBrokerPaymentTabs where df.date < stdate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
            var withdrawy = (from df in db.TransactionTabs where df.pdate < stdate && df.branchcode == br.BranchCode select df.debit).DefaultIfEmpty(0).Sum();
            var expansey = (from df in db.Expenses where df.date_time < stdate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
            var todayVouchercoll = (from df in db.Voucher_Reports where df.date < stdate && df.branchcode == br.BranchCode select df.netamount).DefaultIfEmpty(0).Sum();
            var mat = (from df in db.MaturityTabs where df.maturitydate < stdate && df.branchcode == br.BranchCode select df.maturityamount).DefaultIfEmpty(0).Sum();
            var emplisty = (from se in db.Salary_ems where se.date < stdate select se).ToList();
            foreach (var el in emplisty)
            {
                var erow = db.Emp_Regs.Single(er => er.empid == el.empid);
                var branchcode = erow.branchcode;
                if (branchcode == br.BranchCode)
                {
                    var ysalary = (from df in db.Salary_ems where df.date < stdate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                    ytotalsalary = totalsalary + ysalary;
                }
            }
            var extotaly = Math.Round((expansey + todayVouchercoll + ytotalsalary + withdrawy + AdvPayment + mat + spotcommy), 2);
            var grandtotaly = intotaly - extotaly;

            /////Today's Collection /////
            var todayfdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.mode == "Single" && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todayRdcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.mode != "Single" && df.installmentno == 1 && df.type != "Adjustment" && df.branch == br.BranchCode && df.planname == plan1.shortcutname && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();
            var todaybooking = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.bookingamount).DefaultIfEmpty(0).Sum();
            var todayadvance = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && tbd.Contains(df.bondid) && df.branchcode == br.BranchCode select df.downpayment).DefaultIfEmpty(0).Sum();
            var todayNewBondcoll1 = todayfdcoll1 + todayRdcoll1;
            var todayRenewalBondcoll1 = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.installmentno != 1 && df.branch == br.BranchCode && df.type != "Adjustment" && tbd.Contains(df.bondid) select df.payamount).DefaultIfEmpty(0).Sum();

            var todaylatefee = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.latefine).DefaultIfEmpty(0).Sum();
            var todayreleif = (from df in db.Installmenttabs where df.paymentdate >= stdate && df.paymentdate <= enddate && df.type != "Adjustment" && df.branch == br.BranchCode && tbd.Contains(df.bondid) select df.reliefrs).DefaultIfEmpty(0).Sum();
            var latefee = todaylatefee - todayreleif;

            var bformfee = (from df in db.AgentDetails where df.Doj >= stdate && df.Doj <= enddate && df.BranchCode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
            var cformfee = (from df in db.appltabs where df.formdate >= stdate && df.formdate <= enddate && df.type != "Adjustment" && df.branchcode == br.BranchCode && tbd.Contains(df.bondid) select df.applicationcharge).DefaultIfEmpty(0).Sum();
            var mformfee = (from df in db.Member_tabs where df.Cdate >= stdate && df.Cdate <= enddate && df.BranchCode == br.BranchCode select df.Fee).DefaultIfEmpty(0).Sum();
            var acformfee = (from df in db.SavingAccountInfos where df.Doj >= stdate && df.Doj <= enddate && df.branchcode == br.BranchCode select df.formfee).DefaultIfEmpty(0).Sum();
            var deposit = (from df in db.TransactionTabs where df.pdate >= stdate && df.pdate <= enddate && df.branchcode == br.BranchCode select df.credit).DefaultIfEmpty(0).Sum();
            var intotal = Math.Round((todayRenewalBondcoll1 + bformfee + cformfee + mformfee + acformfee + deposit + latefee + todaybooking + todayadvance), 2);

            var spotcomm = (from o in db.spotcommission_tabs where o.date >= stdate && o.date <= enddate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
            var AdvPayment1 = (from df in db.AdvBrokerPaymentTabs where df.date >= stdate && df.date <= enddate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
            var withdraw = (from df in db.TransactionTabs where df.pdate >= stdate && df.pdate <= enddate && df.branchcode == br.BranchCode select df.debit).DefaultIfEmpty(0).Sum();
            var expanse = (from df in db.Expenses where df.date_time >= stdate && df.date_time <= enddate && df.branchcode == br.BranchCode select df.amount).DefaultIfEmpty(0).Sum();
            var todayVouchercoll1 = (from df in db.Voucher_Reports where df.date >= stdate && df.date <= enddate && df.branchcode == br.BranchCode select df.netamount).DefaultIfEmpty(0).Sum();
            var mat1 = (from df in db.MaturityTabs where df.maturitydate >= stdate && df.maturitydate <= enddate && df.branchcode == br.BranchCode select df.maturityamount).DefaultIfEmpty(0).Sum();
            var emplist = (from se in db.Salary_ems where se.date >= stdate && se.date <= enddate select se).ToList();
            foreach (var el in emplist)
            {

                var salary = (from df in db.Salary_ems where df.date >= stdate && df.date <= enddate && df.empid == el.empid select df.netsalary).DefaultIfEmpty(0).Sum();
                totalsalary = totalsalary + salary;
            }

            var extotal = Math.Round((expanse + todayVouchercoll1 + totalsalary + withdraw + AdvPayment1 + mat1 + spotcomm), 2);
            var grandtotal = intotal - extotal;

            cbrlist.Add(new BalanceReport { bookingamount = todaybooking, downpayment = todayadvance, maturity = mat1, pps = 0, fpo = todayRdcoll1, dpo = todayfdcoll1, advpayment = AdvPayment1, newbond = todayNewBondcoll1, renewel = todayRenewalBondcoll1, latefee = latefee, bformfee = bformfee, cformfee = cformfee, mformfee = mformfee, acformfee = acformfee, deposit = deposit, withdraw = withdraw, intotal = intotal, expence = expanse, spotcomm = spotcomm, voucher = todayVouchercoll1, salary = totalsalary, extotal = extotal, grandtotal = grandtotal, branchname = br.BranchName, companyname = cr.CompanyName, openingbalance = grandtotaly, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "ClosingBalanceReport.rpt"));
            rd.SetDataSource(cbrlist);
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View(cbrlist);
        }

        [HttpGet]
        public ActionResult BranchCashReport()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }

        [HttpGet]
        public ActionResult BranchDailyCollection()
        {
            List<DailyCollection> dc = new List<DailyCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["date"] = string.Empty;
                ViewData["newagentid"] = string.Empty;
                return View(dc);
            }

        }
        [HttpPost]
        public ActionResult BranchDailyCollection(DateTime date, string newagentid, int filter, int year)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                ViewData["date"] = date;
                ViewData["newagentid"] = newagentid;
                var bbb = db.Branchtabs.Single(bc => bc.BranchCode == User.Identity.Name);
                ViewData["Branch"] = bbb.BranchCode;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var ttbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                List<DailyCollection> dc = new List<DailyCollection>();
                List<Installment> inl = new List<Installment>();
                List<Memberfees> mfeeslist = new List<Memberfees>();
                Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0, dipositsaving = 0, widthdrawsaving = 0;
                Double formsumB = 0, appsumB = 0, memberfeesB = 0;
                var pst = db.Plans.Single(c => c.Plancode == 4);

                dipositsaving = (from j in db.TransactionTabs where j.pdate == date && j.branchcode == bbb.BranchCode select j.credit).DefaultIfEmpty(0).Sum();
                widthdrawsaving = (from j in db.TransactionTabs where j.pdate == date && j.branchcode == bbb.BranchCode select j.debit).DefaultIfEmpty(0).Sum();
                totalvoucher = (from ag in db.Voucher_Reports where ag.date == date && ag.branchcode == bbb.BranchCode select ag.netamount).DefaultIfEmpty(0).Sum();
                totalexp = (from ag in db.Expenses where ag.date_time == date && ag.branchcode == bbb.BranchCode select ag.amount).DefaultIfEmpty(0).Sum();
                appsum = (from b in db.appltabs where b.formdate == date && b.branchcode == bbb.BranchCode && ttbd.Contains(b.bondid) select b.applicationcharge).DefaultIfEmpty(0).Sum();
                formsum = (from ag in db.AgentDetails where ag.Doj == date && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                memberfees = (from ag in db.Member_tabs where ag.Cdate == date && ag.BranchCode == bbb.BranchCode select ag.Fee).DefaultIfEmpty(0).Sum();
                acformfees = (from ag in db.SavingAccountInfos where ag.Doj == date && ag.branchcode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();

                if (newagentid != null && newagentid != "")
                {
                    switch (filter)
                    {
                        case 1:
                            double fee = 0;
                            var tbd = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                            var bd = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                            appsumB = (from ag in db.appltabs where ag.formdate == date && ag.newintroducerid == newagentid && ag.branchcode == bbb.BranchCode && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.NewAgentId == newagentid && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                            var agent = db.appltabs.Where(s => s.formdate == date && s.newintroducerid == newagentid && s.branchcode == bbb.BranchCode && s.status == 1).ToList();
                            var agent1 = db.AgentDetails.Where(s => s.Doj == date && s.NewAgentId == newagentid && s.BranchCode == bbb.BranchCode).ToList();
                            foreach (var a in agent)
                            {

                                mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                            }
                            foreach (var b in agent1)
                            {
                                mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                            }
                            var result = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                            foreach (var mf in result)
                            {
                                var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                                if (mem1.Cdate == date)
                                {

                                    fee = mem1.Fee + fee;
                                }
                            }
                            memberfeesB = fee;
                            if (bd.Count() > 0)
                            {
                                foreach (var t in bd.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.type != "Adjustment").ToList();

                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsumB,
                                            formfee = formsumB,
                                            memberfee = memberfeesB,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }


                                //------Viewdata for display in page------------------------------------------


                            }
                            else if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = appsum,
                                    formfee = formsum,
                                    totalexp = totalexp,
                                    acformfee = 0,
                                    Voucher = totalvoucher,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = 0,
                                    widthdrawsaving = 0,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;

                        case 2:
                            double fee1 = 0;
                            var tbd2 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                            appsumB = (from ag in db.appltabs where ag.formdate == date && ag.newintroducerid == newagentid && ag.branchcode == bbb.BranchCode && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                            formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.NewAgentId == newagentid && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                            var agentB = db.appltabs.Where(s => s.formdate == date && s.newintroducerid == newagentid && s.branchcode == bbb.BranchCode && s.status == 1).ToList();
                            var agentB1 = db.AgentDetails.Where(s => s.Doj == date && s.NewAgentId == newagentid && s.BranchCode == bbb.BranchCode).ToList();
                            foreach (var a in agentB)
                            {

                                mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                            }
                            foreach (var b in agentB1)
                            {
                                mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                            }
                            var resultB = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                            foreach (var mf in resultB)
                            {
                                var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                                if (mem1.Cdate == date)
                                {

                                    fee1 = mem1.Fee + fee1;
                                }
                            }
                            memberfeesB = fee1;
                            var bd2 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd2.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                            if (bd2.Count() > 0)
                            {
                                foreach (var t in bd2.ToList())
                                {

                                    appsumB = (from b in db.appltabs where b.formdate == date && b.newintroducerid == newagentid && b.branchcode == bbb.BranchCode select b.applicationcharge).DefaultIfEmpty(0).Sum();
                                    formsumB = (from ag in db.AgentDetails where ag.Doj == date && ag.BranchCode == bbb.BranchCode && ag.NewIntroducerId == newagentid select ag.formfee).DefaultIfEmpty(0).Sum();

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,
                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsumB,
                                            formfee = formsumB,
                                            memberfee = memberfeesB,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;
                        case 3:
                            if (year > 0)
                            {
                                var tbd3 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.year == year && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            else
                            {
                                var tbd3 = (from ap in db.appltabs where ap.newintroducerid == newagentid  select ap.bondid);
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            break;
                        case 4:

                            if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = 0,
                                    formfee = 0,
                                    totalexp = 0,
                                    acformfee = 0,
                                    Voucher = 0,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = 0,
                                    widthdrawsaving = 0,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }

                            break;
                    }
                }
                else if (newagentid == null || newagentid == "")
                {
                    switch (filter)
                    {
                        case 1:

                            var bd = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd.Count() > 0)
                            {
                                foreach (var t in bd.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {

                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsum,
                                            formfee = formsum,
                                            memberfee = memberfees,
                                            acformfee = acformfees,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = dipositsaving,
                                            widthdrawsaving = widthdrawsaving,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }


                                //------Viewdata for display in page------------------------------------------


                            }
                            else if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = appsum,
                                    formfee = formsum,
                                    totalexp = totalexp,
                                    acformfee = acformfees,
                                    Voucher = totalvoucher,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = dipositsaving,
                                    widthdrawsaving = widthdrawsaving,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;

                        case 2:

                            var bd2 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd2.Count() > 0)
                            {
                                foreach (var t in bd2.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,
                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = date,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = appsum,
                                            formfee = formsum,
                                            memberfee = memberfees,
                                            acformfee = 0,
                                            totalexp = totalexp,
                                            Voucher = totalvoucher,
                                            branchcode = bbb.BranchCode,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                            break;
                        case 3:
                            if (year > 0)
                            {
                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.year == year && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            else
                            {

                                var bd3 = (from p in db.Installmenttabs where p.paymentdate == date && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                                if (bd3.Count() > 0)
                                {
                                    foreach (var t in bd3.ToList())
                                    {

                                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                        var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == date && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                        foreach (var cl in irow.ToList())
                                        {
                                            var finalamount = 0.0;
                                            if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                            {
                                                finalamount = app.totalcon;
                                            }
                                            else
                                            {
                                                finalamount = cl.payamount;
                                            }
                                            inl.Add(new Installment
                                            {
                                                rcptno = cl.receiptno,

                                                latefee = cl.latefine,
                                                relief = cl.reliefrs,
                                                cssno = Convert.ToInt32(cl.cssno),
                                                year = cl.year,
                                                installno = cl.installmentno,
                                                Account_Code = app.newbondid,
                                                Name = app.name,
                                                Introducer_Code = agt.NewAgentId,
                                                Rank = agt.RankName,
                                                amount = finalamount,
                                                Planname = app.planname,
                                                Term = app.term,
                                                branchcode = cl.branch

                                            });
                                        }

                                    }

                                    //-------Insertion in Daily Collection Temp Tab--------------------------
                                    foreach (var i in inl.ToList())
                                    {
                                        var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                        string renew;
                                        if (i.installno == 1)
                                        {
                                            renew = "New";
                                        }
                                        else
                                        {
                                            renew = "Renew";
                                        }
                                        if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                        {

                                        }
                                        else
                                        {
                                            dc.Add(new DailyCollection
                                            {
                                                CSS_No = i.cssno,
                                                ondate = date,
                                                Account_Code = i.Account_Code,
                                                Name = i.Name,
                                                Rank = i.Rank,
                                                Unit_Code = i.Unit_Code,
                                                Introducer_Code = i.Introducer_Code,
                                                Amt_Deposit = i.amount,
                                                Late_Fee = i.latefee,
                                                Rebate = i.relief,
                                                Reciept_No = i.rcptno,
                                                Planname = i.Planname,
                                                Term = i.Term,
                                                New = renew,
                                                appcharge = 0,
                                                formfee = 0,
                                                memberfee = 0,
                                                acformfee = 0,
                                                totalexp = 0,
                                                Voucher = 0,
                                                dipositsaving = 0,
                                                widthdrawsaving = 0,
                                                branchcode = bbb.BranchCode,
                                                companyname = cr.CompanyName,
                                                address = cr.Address,
                                                emailid = cr.Emailid,
                                                contact = cr.Contact,
                                                domainname = cr.HeadOffice,
                                                branchname = bb.BranchName
                                            });
                                        }


                                    }

                                }
                                else
                                {
                                    Response.Write("<script>alert('There is no collection in this date')</script>");
                                }
                            }
                            break;
                        case 4:

                            if (dipositsaving > 0 || widthdrawsaving > 0)
                            {
                                dc.Add(new DailyCollection
                                {
                                    CSS_No = 0,
                                    ondate = date,
                                    Account_Code = "",
                                    Name = "",
                                    Rank = "",
                                    Unit_Code = "",
                                    Introducer_Code = "",
                                    Amt_Deposit = 0,
                                    Late_Fee = 0,
                                    Rebate = 0,
                                    Reciept_No = "",
                                    Planname = "",
                                    Term = 0,
                                    appcharge = 0,
                                    formfee = 0,
                                    totalexp = 0,
                                    acformfee = acformfees,
                                    Voucher = 0,
                                    branchcode = bbb.BranchCode,
                                    memberfee = 0,
                                    dipositsaving = dipositsaving,
                                    widthdrawsaving = widthdrawsaving,
                                    companyname = cr.CompanyName,
                                    address = cr.Address,
                                    emailid = cr.Emailid,
                                    contact = cr.Contact,
                                    domainname = cr.HeadOffice
                                });
                            }

                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }

                            break;
                    }
                }

                ViewData["ondate"] = date;
                pdate = date;
                NewAgentid = newagentid;
                vvyear = year;
                sfilter = filter;
                return View(dc);
            }
        }
        public ActionResult PrintDailyCollectionReport()
        {

            var bbb = db.Branchtabs.Single(bc => bc.BranchCode == User.Identity.Name);
            ViewData["Branch"] = bbb.BranchCode;
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            List<DailyCollection> dc = new List<DailyCollection>();
            List<Installment> inl = new List<Installment>();
            List<Memberfees> mfeeslist = new List<Memberfees>();
            Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0, dipositsaving = 0, widthdrawsaving = 0;
            Double formsumB = 0, appsumB = 0, memberfeesB = 0;
            var pst = db.Plans.Single(c => c.Plancode == 4);
            var ttbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
            dipositsaving = (from j in db.TransactionTabs where j.pdate == pdate && j.branchcode == bbb.BranchCode select j.credit).DefaultIfEmpty(0).Sum();
            widthdrawsaving = (from j in db.TransactionTabs where j.pdate == pdate && j.branchcode == bbb.BranchCode select j.debit).DefaultIfEmpty(0).Sum();
            totalvoucher = (from ag in db.Voucher_Reports where ag.date == pdate && ag.branchcode == bbb.BranchCode select ag.netamount).DefaultIfEmpty(0).Sum();
            totalexp = (from ag in db.Expenses where ag.date_time == pdate && ag.branchcode == bbb.BranchCode select ag.amount).DefaultIfEmpty(0).Sum();
            appsum = (from b in db.appltabs where b.formdate == pdate && b.branchcode == bbb.BranchCode && ttbd.Contains(b.bondid) select b.applicationcharge).DefaultIfEmpty(0).Sum();
            formsum = (from ag in db.AgentDetails where ag.Doj == pdate && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
            memberfees = (from ag in db.Member_tabs where ag.Cdate == pdate && ag.BranchCode == bbb.BranchCode select ag.Fee).DefaultIfEmpty(0).Sum();
            acformfees = (from ag in db.SavingAccountInfos where ag.Doj == pdate && ag.branchcode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();

            if (NewAgentid != null && NewAgentid != "")
            {
                switch (sfilter)
                {
                    case 1:
                        Double fee = 0;
                        var tbd = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                        var bd = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                        appsumB = (from ag in db.appltabs where ag.formdate == pdate && ag.newintroducerid == NewAgentid && ag.branchcode == bbb.BranchCode && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsumB = (from ag in db.AgentDetails where ag.Doj == pdate && ag.NewAgentId == NewAgentid && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                        var agent = db.appltabs.Where(s => s.formdate == pdate && s.newintroducerid == NewAgentid && s.branchcode == bbb.BranchCode && s.status == 1).ToList();
                        var agent1 = db.AgentDetails.Where(s => s.Doj == pdate && s.NewAgentId == NewAgentid && s.BranchCode == bbb.BranchCode).ToList();
                        foreach (var a in agent)
                        {

                            mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                        }
                        foreach (var b in agent1)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                        }
                        var result = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                        foreach (var mf in result)
                        {
                            var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                            if (mem1.Cdate == pdate)
                            {

                                fee = mem1.Fee + fee;
                            }
                        }
                        memberfeesB = fee;
                        if (bd.Count() > 0)
                        {
                            foreach (var t in bd.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,

                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            //-------Insertion in Daily Collection Temp Tab--------------------------
                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsumB,
                                        formfee = formsumB,
                                        memberfee = memberfeesB,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }


                            //------Viewdata for display in page------------------------------------------


                        }
                        else if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = appsum,
                                formfee = formsum,
                                totalexp = totalexp,
                                acformfee = 0,
                                Voucher = totalvoucher,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = 0,
                                widthdrawsaving = 0,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;

                    case 2:
                        double fee1 = 0;
                        var tbd2 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                        appsumB = (from ag in db.appltabs where ag.formdate == pdate && ag.newintroducerid == NewAgentid && ag.branchcode == bbb.BranchCode && ag.status == 1 select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                        formsumB = (from ag in db.AgentDetails where ag.Doj == pdate && ag.NewAgentId == NewAgentid && ag.BranchCode == bbb.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                        var agentB = db.appltabs.Where(s => s.formdate == pdate && s.newintroducerid == NewAgentid && s.branchcode == bbb.BranchCode && s.status == 1).ToList();
                        var agentB1 = db.AgentDetails.Where(s => s.Doj == pdate && s.NewAgentId == NewAgentid && s.BranchCode == bbb.BranchCode).ToList();
                        foreach (var a in agentB)
                        {

                            mfeeslist.Add(new Memberfees { newmemberid = a.newmemberid });
                        }
                        foreach (var b in agentB1)
                        {
                            mfeeslist.Add(new Memberfees { newmemberid = b.newmemberid });
                        }
                        var resultB = (from m in mfeeslist select new { m.newmemberid }).Distinct().ToList();
                        foreach (var mf in resultB)
                        {
                            var mem1 = db.Member_tabs.Single(s => s.NewMemberId == mf.newmemberid);
                            if (mem1.Cdate == pdate)
                            {

                                fee1 = mem1.Fee + fee1;
                            }
                        }
                        memberfeesB = fee1;
                        var bd2 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd2.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                        if (bd2.Count() > 0)
                        {
                            foreach (var t in bd2.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,
                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsumB,
                                        formfee = formsumB,
                                        memberfee = memberfeesB,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }

                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;
                    case 3:
                        if (vvyear > 0)
                        {
                            var tbd3 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.year == vvyear && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        else
                        {
                            var tbd3 = (from ap in db.appltabs where ap.newintroducerid == NewAgentid  select ap.bondid);
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && tbd3.Contains(p.bondid) && p.branch == bbb.BranchCode select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        break;
                    case 4:

                        if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = 0,
                                formfee = 0,
                                totalexp = 0,
                                acformfee = 0,
                                Voucher = 0,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = 0,
                                widthdrawsaving = 0,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }

                        break;
                }
            }
            else if (NewAgentid == null || NewAgentid == "")
            {
                switch (sfilter)
                {
                    case 1:

                        var bd = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                        if (bd.Count() > 0)
                        {
                            foreach (var t in bd.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,

                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            //-------Insertion in Daily Collection Temp Tab--------------------------
                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsum,
                                        formfee = formsum,
                                        memberfee = memberfees,
                                        acformfee = acformfees,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = dipositsaving,
                                        widthdrawsaving = widthdrawsaving,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }


                            //------Viewdata for display in page------------------------------------------


                        }
                        else if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = appsum,
                                formfee = formsum,
                                totalexp = totalexp,
                                acformfee = acformfees,
                                Voucher = totalvoucher,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }

                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;

                    case 2:

                        var bd2 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                        if (bd2.Count() > 0)
                        {
                            foreach (var t in bd2.ToList())
                            {

                                var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno == 1 && im.type != "Adjustment").ToList();
                                foreach (var cl in irow.ToList())
                                {
                                    var finalamount = 0.0;
                                    if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                    {
                                        finalamount = app.totalcon;
                                    }
                                    else
                                    {
                                        finalamount = cl.payamount;
                                    }
                                    inl.Add(new Installment
                                    {
                                        rcptno = cl.receiptno,
                                        latefee = cl.latefine,
                                        relief = cl.reliefrs,
                                        cssno = Convert.ToInt32(cl.cssno),
                                        year = cl.year,
                                        installno = cl.installmentno,
                                        Account_Code = app.newbondid,
                                        Name = app.name,
                                        Introducer_Code = agt.NewAgentId,
                                        Rank = agt.RankName,
                                        amount = finalamount,
                                        Planname = app.planname,
                                        Term = app.term,
                                        branchcode = cl.branch

                                    });
                                }

                            }

                            foreach (var i in inl.ToList())
                            {
                                var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                string renew;
                                if (i.installno == 1)
                                {
                                    renew = "New";
                                }
                                else
                                {
                                    renew = "Renew";
                                }
                                if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                {

                                }
                                else
                                {
                                    dc.Add(new DailyCollection
                                    {
                                        CSS_No = i.cssno,
                                        ondate = pdate,
                                        Account_Code = i.Account_Code,
                                        Name = i.Name,
                                        Rank = i.Rank,
                                        Unit_Code = i.Unit_Code,
                                        Introducer_Code = i.Introducer_Code,
                                        Amt_Deposit = i.amount,
                                        Late_Fee = i.latefee,
                                        Rebate = i.relief,
                                        Reciept_No = i.rcptno,
                                        Planname = i.Planname,
                                        Term = i.Term,
                                        New = renew,
                                        appcharge = appsum,
                                        formfee = formsum,
                                        memberfee = memberfees,
                                        acformfee = 0,
                                        totalexp = totalexp,
                                        Voucher = totalvoucher,
                                        branchcode = bbb.BranchCode,
                                        dipositsaving = 0,
                                        widthdrawsaving = 0,
                                        companyname = cr.CompanyName,
                                        address = cr.Address,
                                        emailid = cr.Emailid,
                                        contact = cr.Contact,
                                        domainname = cr.HeadOffice,
                                        branchname = bb.BranchName
                                    });
                                }


                            }

                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }
                        break;
                    case 3:
                        if (vvyear > 0)
                        {
                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.year == vvyear && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        else
                        {

                            var bd3 = (from p in db.Installmenttabs where p.paymentdate == pdate && p.paymentno != 0 && p.branch == bbb.BranchCode && ttbd.Contains(p.bondid) select new { p.bondid }).Distinct();
                            if (bd3.Count() > 0)
                            {
                                foreach (var t in bd3.ToList())
                                {

                                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                                    var irow = db.Installmenttabs.Where(im => im.bondid == t.bondid && im.paymentdate == pdate && im.payamount != 0 && im.installmentno > 1 && im.type != "Adjustment").ToList();
                                    foreach (var cl in irow.ToList())
                                    {
                                        var finalamount = 0.0;
                                        if (cl.planname.Substring(0, 3) == pst.shortcutname)
                                        {
                                            finalamount = app.totalcon;
                                        }
                                        else
                                        {
                                            finalamount = cl.payamount;
                                        }
                                        inl.Add(new Installment
                                        {
                                            rcptno = cl.receiptno,

                                            latefee = cl.latefine,
                                            relief = cl.reliefrs,
                                            cssno = Convert.ToInt32(cl.cssno),
                                            year = cl.year,
                                            installno = cl.installmentno,
                                            Account_Code = app.newbondid,
                                            Name = app.name,
                                            Introducer_Code = agt.NewAgentId,
                                            Rank = agt.RankName,
                                            amount = finalamount,
                                            Planname = app.planname,
                                            Term = app.term,
                                            branchcode = cl.branch

                                        });
                                    }

                                }

                                //-------Insertion in Daily Collection Temp Tab--------------------------
                                foreach (var i in inl.ToList())
                                {
                                    var bb = db.Branchtabs.Single(vv => vv.BranchCode == i.branchcode);
                                    string renew;
                                    if (i.installno == 1)
                                    {
                                        renew = "New";
                                    }
                                    else
                                    {
                                        renew = "Renew";
                                    }
                                    if (renew == "Renew" && i.Planname.Substring(0, 3) == pst.shortcutname)
                                    {

                                    }
                                    else
                                    {
                                        dc.Add(new DailyCollection
                                        {
                                            CSS_No = i.cssno,
                                            ondate = pdate,
                                            Account_Code = i.Account_Code,
                                            Name = i.Name,
                                            Rank = i.Rank,
                                            Unit_Code = i.Unit_Code,
                                            Introducer_Code = i.Introducer_Code,
                                            Amt_Deposit = i.amount,
                                            Late_Fee = i.latefee,
                                            Rebate = i.relief,
                                            Reciept_No = i.rcptno,
                                            Planname = i.Planname,
                                            Term = i.Term,
                                            New = renew,
                                            appcharge = 0,
                                            formfee = 0,
                                            memberfee = 0,
                                            acformfee = 0,
                                            totalexp = 0,
                                            Voucher = 0,
                                            dipositsaving = 0,
                                            widthdrawsaving = 0,
                                            branchcode = bbb.BranchCode,
                                            companyname = cr.CompanyName,
                                            address = cr.Address,
                                            emailid = cr.Emailid,
                                            contact = cr.Contact,
                                            domainname = cr.HeadOffice,
                                            branchname = bb.BranchName
                                        });
                                    }


                                }

                            }
                            else
                            {
                                Response.Write("<script>alert('There is no collection in this date')</script>");
                            }
                        }
                        break;
                    case 4:

                        if (dipositsaving > 0 || widthdrawsaving > 0)
                        {
                            dc.Add(new DailyCollection
                            {
                                CSS_No = 0,
                                ondate = pdate,
                                Account_Code = "",
                                Name = "",
                                Rank = "",
                                Unit_Code = "",
                                Introducer_Code = "",
                                Amt_Deposit = 0,
                                Late_Fee = 0,
                                Rebate = 0,
                                Reciept_No = "",
                                Planname = "",
                                Term = 0,
                                appcharge = 0,
                                formfee = 0,
                                totalexp = 0,
                                acformfee = acformfees,
                                Voucher = 0,
                                branchcode = bbb.BranchCode,
                                memberfee = 0,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice
                            });
                        }
                        else
                        {
                            Response.Write("<script>alert('There is no collection in this date')</script>");
                        }

                        break;
                }
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "OperatorDailycollection.rpt"));
            rd.SetDataSource(dc);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }



            return View(dc);

        }

        [HttpGet]
        public ActionResult DateWiseChequeCollection()
        {
            List<Chequecollection> model = new List<Chequecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["sdate"] = string.Empty;
                ViewData["edate"] = string.Empty;
                return View(model);
            }
        }
        [HttpPost]
        public ActionResult DateWiseChequeCollection(DateTime sdate, DateTime edate)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;
                List<Chequecollection> model = new List<Chequecollection>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {

                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("chequecollpro", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sdate", sdate);
                    cmd.Parameters.AddWithValue("@edate", edate);
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);


                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {
                        var rs = new Chequecollection();
                        rs.newbondid = sdr["newbondid"].ToString();
                        rs.name = sdr["name"].ToString();
                        rs.bank = sdr["bank"].ToString();
                        rs.chequeno = sdr["chequeno"].ToString();
                        rs.pdate = Convert.ToDateTime(sdr["paydate"]);
                        rs.amount = Convert.ToDouble(sdr["amount"]);
                        rs.sdate = Convert.ToDateTime(sdr["sdate"]);
                        rs.edate = Convert.ToDateTime(sdr["edate"]);
                        rs.opid = sdr["opid"].ToString();
                        model.Add(rs);
                    }


                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "chequecoll.rpt"));
                    rd.SetDataSource(model);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();
                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }

                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    con.Close();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult CompleteDailyCollection()
        {
            List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {

                        return View(mdc);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }

        }
        [HttpPost]
        public ActionResult CompleteDailyCollection(DateTime sdate, DateTime edate, string type)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
                List<Installment> inl = new List<Installment>();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                int sn = 1;
                Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0;
                var pst = db.Plans.Single(c => c.Plancode == 4);
                var dipositsaving = (from j in db.TransactionTabs where j.pdate >= sdate && j.pdate <= edate select j.credit).DefaultIfEmpty(0).Sum();
                var widthdrawsaving = (from j in db.TransactionTabs where j.pdate >= sdate && j.pdate <= edate select j.debit).DefaultIfEmpty(0).Sum();
                totalvoucher = (from ag in db.Voucher_Reports where ag.date >= sdate && ag.date <= edate select ag.netamount).DefaultIfEmpty(0).Sum();
                totalexp = (from ag in db.Expenses where ag.date_time >= sdate && ag.date_time <= edate select ag.amount).DefaultIfEmpty(0).Sum();
                appsum = (from b in db.appltabs where b.formdate >= sdate && b.formdate <= edate && b.status == 1 && b.paymethod == type select b.applicationcharge).DefaultIfEmpty(0).Sum();
                formsum = (from ag in db.AgentDetails where ag.Doj >= sdate && ag.Doj <= edate select ag.formfee).DefaultIfEmpty(0).Sum();
                memberfees = (from ag in db.Member_tabs where ag.Cdate >= sdate && ag.Cdate <= edate select ag.Fee).DefaultIfEmpty(0).Sum();
                acformfees = (from ag in db.SavingAccountInfos where ag.Doj >= sdate && ag.Doj <= edate select ag.formfee).DefaultIfEmpty(0).Sum();

                var bd = (from p in db.Installmenttabs where p.paymethod == type && p.paymentdate >= sdate && p.paymentdate <= edate && p.paymentno != 0 && tbd.Contains(p.bondid) select new { p.bondid }).Distinct();

                if (bd.Count() > 0)
                {
                    foreach (var t in bd.ToList())
                    {
                        var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                        var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                        var irow = (from im in db.Installmenttabs where im.paymethod == type && im.bondid == t.bondid && im.paymentdate >= sdate && im.paymentdate <= edate && im.payamount != 0 && im.type != "Adjustment" select im).ToList();
                        foreach (var cl in irow.ToList())
                        {
                            var finalamount = 0.0;
                            if (app.plantype == pst.shortcutname)
                            {
                                finalamount = app.totalcon;
                            }
                            else
                            {
                                finalamount = cl.payamount;
                            }
                            inl.Add(new Installment
                            {
                                paymentdate = Convert.ToDateTime(cl.paymentdate),
                                rcptno = cl.receiptno,
                                amount = finalamount,
                                latefee = cl.latefine,
                                relief = cl.reliefrs,
                                cssno = Convert.ToInt32(cl.cssno),
                                year = cl.year,
                                installno = cl.installmentno,
                                Account_Code = app.newbondid,
                                Name = app.name,
                                Introducer_Code = agt.NewAgentId,
                                Rank = agt.RankName,
                                Planname = app.planname,
                                Plantype = app.plantype,
                                Term = app.term,

                                paymethod = cl.paymethod,
                                bank = cl.bank,
                                Bbranch = cl.Bbranch,
                                Account = cl.Account,
                                ACholdername = cl.ACholdername,
                                IFSCCode = cl.IFSCCode,
                                ChequeAmount = cl.ChequeAmount,
                                chequeno = cl.chequeno,
                                Chequedate = (cl.Chequedate).ToString(),
                                transactiontype = cl.transactiontype
                            });
                        }

                    }

                    foreach (var i in inl.ToList())
                    {
                        string renew;
                        if (i.installno == 1)
                        {
                            renew = "New";
                        }
                        else
                        {
                            renew = "Renew";
                        }
                        if (renew == "Renew" && i.Plantype == pst.shortcutname)
                        {
                            ///-----------PPS Plan Amount Not Add 
                        }
                        else
                        {
                            mdc.Add(new MergeDailyCollection
                            {
                                trno = "tr" + sn,
                                no = "D" + sn,
                                cssno = i.cssno,
                                date = i.paymentdate,
                                newbondid = i.Account_Code,
                                name = i.Name,
                                rankname = i.Rank,
                                newintroducerid = i.Introducer_Code,
                                amount = i.amount,
                                latefine = i.latefee,
                                rebate = i.relief,
                                receiptno = i.rcptno,
                                planname = i.Planname,
                                term = i.Term,
                                newrenew = renew,
                                appcharge = appsum,
                                formfee = formsum,
                                memberfee = memberfees,
                                acformfee = acformfees,
                                totalexp = totalexp,
                                voucher = totalvoucher,
                                dipositsaving = dipositsaving,
                                widthdrawsaving = widthdrawsaving,
                                branchname = br.BranchName,
                                companyname = cr.CompanyName,
                                address = cr.Address,
                                emailid = cr.Emailid,
                                contact = cr.Contact,
                                domainname = cr.HeadOffice,
                                sdate = sdate,
                                edate = edate,

                                paymethod = i.paymethod,
                                bank = i.bank,
                                Bbranch = i.Bbranch,
                                Account = i.Account,
                                ACholdername = i.ACholdername,
                                IFSCCode = i.IFSCCode,
                                ChequeAmount = i.ChequeAmount,
                                chequeno = i.chequeno,
                                Chequedate = i.Chequedate,
                                transactiontype = i.transactiontype
                            });
                        }
                        sn = sn + 1;
                    }

                    //------Viewdata for display in page------------------------------------------

                    stdate = sdate;
                    enddate = edate;
                    typ = type;
                }
                else
                {
                    Response.Write("<script>alert('There is no collection in this date')</script>");
                }
                return View(mdc);
            }
        }
        public ActionResult PrintCompleteDailyCollection()
        {
            List<MergeDailyCollection> mdc = new List<MergeDailyCollection>();
            List<Installment> inl = new List<Installment>();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
            var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
            var sn = 1;
            Double formsum = 0, appsum = 0, totalexp = 0, memberfees = 0, acformfees = 0, totalvoucher = 0;
            var pst = db.Plans.Single(c => c.Plancode == 4);
            var dipositsaving = (from j in db.TransactionTabs where j.pdate >= stdate && j.pdate <= enddate select j.credit).DefaultIfEmpty(0).Sum();
            var widthdrawsaving = (from j in db.TransactionTabs where j.pdate >= stdate && j.pdate <= enddate select j.debit).DefaultIfEmpty(0).Sum();
            totalvoucher = (from ag in db.Voucher_Reports where ag.date >= stdate && ag.date <= enddate select ag.netamount).DefaultIfEmpty(0).Sum();
            totalexp = (from ag in db.Expenses where ag.date_time >= stdate && ag.date_time <= enddate select ag.amount).DefaultIfEmpty(0).Sum();
            appsum = (from b in db.appltabs where b.formdate >= stdate && b.formdate <= enddate && b.status == 1 && b.paymethod == typ select b.applicationcharge).DefaultIfEmpty(0).Sum();
            formsum = (from ag in db.AgentDetails where ag.Doj >= stdate && ag.Doj <= enddate select ag.formfee).DefaultIfEmpty(0).Sum();
            memberfees = (from ag in db.Member_tabs where ag.Cdate >= stdate && ag.Cdate <= enddate select ag.Fee).DefaultIfEmpty(0).Sum();
            acformfees = (from ag in db.SavingAccountInfos where ag.Doj >= stdate && ag.Doj <= enddate select ag.formfee).DefaultIfEmpty(0).Sum();

            var bd = (from p in db.Installmenttabs where p.paymethod == typ && p.paymentdate >= stdate && p.paymentdate <= enddate && p.paymentno != 0 && tbd.Contains(p.bondid) select new { p.bondid }).Distinct();

            if (bd.Count() > 0)
            {
                foreach (var t in bd.ToList())
                {
                    var app = db.appltabs.Single(ap => ap.bondid == t.bondid);
                    var agt = db.AgentDetails.Single(adt => adt.NewAgentId == app.newintroducerid);
                    var irow = (from im in db.Installmenttabs where im.paymethod == typ && im.bondid == t.bondid && im.paymentdate >= stdate && im.paymentdate <= enddate && im.payamount != 0 && im.type != "Adjustment" select im).ToList();
                    foreach (var cl in irow.ToList())
                    {
                        var finalamount = 0.0;
                        if (app.plantype == pst.shortcutname)
                        {
                            finalamount = app.totalcon;
                        }
                        else
                        {
                            finalamount = cl.payamount;
                        }
                        inl.Add(new Installment
                        {
                            paymentdate = Convert.ToDateTime(cl.paymentdate),
                            rcptno = cl.receiptno,
                            amount = finalamount,
                            latefee = cl.latefine,
                            relief = cl.reliefrs,
                            cssno = Convert.ToInt32(cl.cssno),
                            year = cl.year,
                            installno = cl.installmentno,
                            Account_Code = app.newbondid,
                            Name = app.name,
                            Introducer_Code = agt.NewAgentId,
                            Rank = agt.RankName,
                            Planname = app.planname,
                            Plantype = app.plantype,
                            Term = app.term,

                            paymethod = cl.paymethod,
                            bank = cl.bank,
                            Bbranch = cl.Bbranch,
                            Account = cl.Account,
                            ACholdername = cl.ACholdername,
                            IFSCCode = cl.IFSCCode,
                            ChequeAmount = cl.ChequeAmount,
                            chequeno = cl.chequeno,
                            Chequedate = (cl.Chequedate).ToString(),
                            transactiontype = cl.transactiontype
                        });
                    }

                }

                foreach (var i in inl.ToList())
                {
                    string renew;
                    if (i.installno == 1)
                    {
                        renew = "New";
                    }
                    else
                    {
                        renew = "Renew";
                    }
                    if (renew == "Renew" && i.Plantype == pst.shortcutname)
                    {
                        ///-----------PPS Plan Amount Not Add 
                    }
                    else
                    {
                        mdc.Add(new MergeDailyCollection
                        {
                            no = "D" + sn,
                            cssno = i.cssno,
                            date = i.paymentdate,
                            newbondid = i.Account_Code,
                            name = i.Name,
                            rankname = i.Rank,
                            newintroducerid = i.Introducer_Code,
                            amount = i.amount,
                            latefine = i.latefee,
                            rebate = i.relief,
                            receiptno = i.rcptno,
                            planname = i.Planname,
                            term = i.Term,
                            newrenew = renew,
                            appcharge = appsum,
                            formfee = formsum,
                            memberfee = memberfees,
                            acformfee = acformfees,
                            totalexp = totalexp,
                            voucher = totalvoucher,
                            dipositsaving = dipositsaving,
                            widthdrawsaving = widthdrawsaving,
                            branchname = br.BranchName,
                            companyname = cr.CompanyName,
                            address = cr.Address,
                            emailid = cr.Emailid,
                            contact = cr.Contact,
                            domainname = cr.HeadOffice,
                            sdate = stdate,
                            edate = enddate,

                            paymethod = i.paymethod,
                            bank = i.bank,
                            Bbranch = i.Bbranch,
                            Account = i.Account,
                            ACholdername = i.ACholdername,
                            IFSCCode = i.IFSCCode,
                            ChequeAmount = i.ChequeAmount,
                            chequeno = i.chequeno,
                            Chequedate = i.Chequedate,
                            newagenid = i.transactiontype
                        });
                    }
                    sn = sn + 1;
                }

                //------Viewdata for display in page------------------------------------------

            }
            else
            {
                Response.Write("<script>alert('There is no collection in this date')</script>");
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CDailycollection.rpt"));
            rd.SetDataSource(mdc);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                string dt = pdate.ToShortDateString();

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult DateWiseCollection()
        {
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["sdate"] = string.Empty;
                ViewData["edate"] = string.Empty;
                return View(dwclist);
            }
        }
        [HttpPost]
        public ActionResult DateWiseCollection(DateTime sdate, DateTime edate)
        {

            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            List<Memberfees> mfeeslist = new List<Memberfees>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;

                DateTime fsdate = sdate;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var pst = db.Plans.Single(c => c.Plancode == 4);

                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, expense = 0, totalvoucher = 0, agfee = 0, appfee = 0, memberfee = 0, accfee = 0, deposit = 0, widthdraw = 0, pps = 0, late = 0, rebate = 0;
                while (sdate <= edate)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno == 1 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno == 1 && o.mode == "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 1 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 2 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 3 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 4 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 5 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year == 6 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate == sdate && o.installmentno != 1 && o.year >= 7 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    late = (from o in db.Installmenttabs where o.paymentdate == sdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.latefine).DefaultIfEmpty(0).Sum();
                    rebate = (from o in db.Installmenttabs where o.paymentdate == sdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.reliefrs).DefaultIfEmpty(0).Sum();

                    deposit = (from o in db.appltabs where o.pdate == sdate && o.branchcode == br.BranchCode && tbd.Contains(o.bondid) select o.downpayment).DefaultIfEmpty(0).Sum();
                    memberfee = (from ag in db.Member_tabs where ag.Cdate == sdate && ag.BranchCode == br.BranchCode select ag.Fee).DefaultIfEmpty(0).Sum();
                    appfee = (from ag in db.appltabs where ag.formdate == sdate && ag.status == 1 && ag.branchcode == br.BranchCode select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                    agfee = (from ag in db.AgentDetails where ag.Doj == sdate && ag.BranchCode == br.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                    accfee = (from ag in db.SavingAccountInfos where ag.Doj == sdate && ag.branchcode == br.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                    widthdraw = (from o in db.spotcommission_tabs where o.date == sdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                    totalvoucher = (from o in db.Voucher_Reports where o.date == sdate && o.branchcode == br.BranchCode select o.netamount).DefaultIfEmpty(0).Sum();
                    expense = (from ag in db.Expenses where ag.date_time == sdate && ag.branchcode == br.BranchCode select ag.amount).DefaultIfEmpty(0).Sum();

                    if (tsis + tMISFresh + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a + expense + totalvoucher + agfee + appfee + memberfee + accfee + deposit + widthdraw + pps + late + rebate > 0)
                    {
                        dwclist.Add(new OpDatewisecollection { date = sdate, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, Expense = expense, Voucher = totalvoucher, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = fsdate, edate = edate, Appcharge = appfee, Agencyfee = agfee, Accountfee = accfee, Memberfee = memberfee, deposit = deposit, widthdraw = widthdraw, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, pps = pps, late = late, releaf = rebate });
                    }

                    sdate = sdate.AddDays(1);
                }

                stdate = fsdate;
                enddate = edate;
                return View(dwclist);
            }
        }
        public ActionResult PrintDatewiseCollection()
        {
            List<Memberfees> mfeeslist = new List<Memberfees>();
            List<OpDatewisecollection> dwclist = new List<OpDatewisecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                DateTime fsdate = stdate;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var pst = db.Plans.Single(c => c.Plancode == 4);

                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, expense = 0, totalvoucher = 0, agfee = 0, appfee = 0, memberfee = 0, accfee = 0, deposit = 0, widthdraw = 0, pps = 0, late = 0, rebate = 0;
                while (stdate <= enddate)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno == 1 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno == 1 && o.mode == "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 1 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 2 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 3 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 4 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 5 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year == 6 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate == stdate && o.installmentno != 1 && o.year >= 7 && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    late = (from o in db.Installmenttabs where o.paymentdate == stdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.latefine).DefaultIfEmpty(0).Sum();
                    rebate = (from o in db.Installmenttabs where o.paymentdate == stdate && o.payamount != 0 && o.mode != "Single" && o.type != "Adjustment" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.reliefrs).DefaultIfEmpty(0).Sum();

                    deposit = (from o in db.appltabs where o.pdate == stdate && o.branchcode == br.BranchCode && tbd.Contains(o.bondid) select o.downpayment).DefaultIfEmpty(0).Sum();
                    memberfee = (from ag in db.Member_tabs where ag.Cdate == stdate && ag.BranchCode == br.BranchCode select ag.Fee).DefaultIfEmpty(0).Sum();
                    appfee = (from ag in db.appltabs where ag.formdate == stdate && ag.status == 1 && ag.branchcode == br.BranchCode select ag.applicationcharge).DefaultIfEmpty(0).Sum();
                    agfee = (from ag in db.AgentDetails where ag.Doj == stdate && ag.BranchCode == br.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                    accfee = (from ag in db.SavingAccountInfos where ag.Doj == stdate && ag.branchcode == br.BranchCode select ag.formfee).DefaultIfEmpty(0).Sum();
                    widthdraw = (from o in db.spotcommission_tabs where o.date == stdate && o.branchcode == br.BranchCode select o.commission).DefaultIfEmpty(0).Sum();
                    totalvoucher = (from o in db.Voucher_Reports where o.date == stdate && o.branchcode == br.BranchCode select o.netamount).DefaultIfEmpty(0).Sum();
                    expense = (from ag in db.Expenses where ag.date_time == stdate && ag.branchcode == br.BranchCode select ag.amount).DefaultIfEmpty(0).Sum();

                    if (tsis + tMISFresh + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a + expense + totalvoucher + agfee + appfee + memberfee + accfee + deposit + widthdraw + pps + late + rebate > 0)
                    {
                        dwclist.Add(new OpDatewisecollection { date = stdate, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, Expense = expense, Voucher = totalvoucher, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = fsdate, edate = enddate, Appcharge = appfee, Agencyfee = agfee, Accountfee = accfee, Memberfee = memberfee, deposit = deposit, widthdraw = widthdraw, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice, pps = pps, late = late, releaf = rebate });
                    }
                    stdate = stdate.AddDays(1);
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "DatewiseCollection.rpt"));
                rd.SetDataSource(dwclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();
                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult CsswiseCollection()
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(csswlist);
            }
        }
        [HttpPost]
        public ActionResult CsswiseCollection(DateTime date, int mincss, int maxcss)
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var inslist = (from i in db.Installmenttabs orderby i.cssno where i.paymentdate == date && i.cssno >= mincss && i.cssno <= maxcss && i.branch == bb.BranchCode && tbd.Contains(i.bondid) select i).ToList();
                foreach (var ins in inslist)
                {
                    var br = db.appltabs.Single(b => b.bondid == ins.bondid);
                    csswlist.Add(new CsswiseBusiness { paymethod = ins.paymethod, newbondid = ins.newbondid, name = br.name, cssno = Convert.ToInt32(ins.cssno), planname = ins.planname, term = ins.installmentno, mode = ins.mode, amount = ins.amount, latefine = ins.latefine, rebate = ins.reliefrs, payamount = ins.payamount, expirydate = ins.expirydate, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, date = date });
                }
                stdate = date;
                scss = mincss;
                ecss = maxcss;
                return View(csswlist);
            }
        }
        public ActionResult PrintCsswiseBusiness()
        {
            List<CsswiseBusiness> csswlist = new List<CsswiseBusiness>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var inslist = (from i in db.Installmenttabs orderby i.cssno where i.paymentdate == stdate && i.cssno >= scss && i.cssno <= ecss && i.branch == bb.BranchCode && tbd.Contains(i.bondid) select i).ToList();
                foreach (var ins in inslist)
                {
                    var br = db.appltabs.Single(b => b.bondid == ins.bondid);
                    csswlist.Add(new CsswiseBusiness { newbondid = ins.newbondid, name = br.name, cssno = Convert.ToInt32(ins.cssno), planname = ins.planname, term = ins.installmentno, mode = ins.mode, amount = ins.amount, latefine = ins.latefine, rebate = ins.reliefrs, payamount = ins.payamount, expirydate = ins.expirydate, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, bond = mr.custname, plan = mr.planname, date = stdate });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "CSSwiseBusiness.rpt"));
                rd.SetDataSource(csswlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult FundMobilisation()
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(pwclist);
            }
        }
        [HttpPost]
        public ActionResult FundMobilisation(DateTime sdate, DateTime edate)
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= sdate && pl.paymentdate <= edate && pl.branch == br.BranchCode select new { pl.planname }).ToList().Distinct();
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, total = 0, tpps = 0, tnfp = 0;
                foreach (var plan in planlist)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tnfp = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "NFS" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno == 1 && o.mode == "Single" && o.plantype == "FD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tpps = (from o in db.appltabs where o.formdate >= sdate && o.formdate <= edate && o.planname == plan.planname && o.mode != "Single" && o.plantype == "PPS" && o.branchcode == br.BranchCode && tbd.Contains(o.bondid) select o.totalcon).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 1 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 2 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 3 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 4 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 5 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year == 6 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate >= sdate && o.paymentdate <= edate && o.planname == plan.planname && o.installmentno != 1 && o.year >= 7 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    total = tMISFresh + tsis + tpps + tnfp + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a;
                    if (total > 0)
                    {
                        pwclist.Add(new FundMobilization { planname = plan.planname, tPPSFresh = tpps, tNFPFresh = tnfp, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, total = total, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = sdate, edate = edate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                stdate = sdate;
                enddate = edate;
                return View(pwclist);
            }
        }
        public ActionResult PrintFundMobilisation()
        {
            List<FundMobilization> pwclist = new List<FundMobilization>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var tbd = (from ap in db.appltabs where ap.status == 1 select ap.bondid);
                var planlist = (from pl in db.Installmenttabs where pl.paymentdate >= stdate && pl.paymentdate <= enddate && pl.branch == br.BranchCode select new { pl.planname }).Distinct().ToList();
                Double tsis = 0, tMISFresh = 0, tMIS1 = 0, tMIS2 = 0, tMIS3 = 0, tMIS4 = 0, tMIS5 = 0, tMIS6 = 0, tMIS7a = 0, total = 0, tpps = 0, tnfp = 0;
                foreach (var plan in planlist)
                {
                    tMISFresh = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tnfp = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode != "Single" && o.plantype == "NFS" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tsis = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno == 1 && o.mode == "Single" && o.plantype == "FD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tpps = (from o in db.appltabs where o.formdate >= stdate && o.formdate <= enddate && o.planname == plan.planname && o.mode != "Single" && o.plantype == "PPS" && o.branchcode == br.BranchCode && tbd.Contains(o.bondid) select o.totalcon).DefaultIfEmpty(0).Sum();
                    tMIS1 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 1 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS2 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 2 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS3 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 3 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS4 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 4 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS5 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 5 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS6 = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year == 6 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    tMIS7a = (from o in db.Installmenttabs where o.paymentdate >= stdate && o.paymentdate <= enddate && o.planname == plan.planname && o.installmentno != 1 && o.year >= 7 && o.plantype == "RD" && o.branch == br.BranchCode && tbd.Contains(o.bondid) select o.payamount).DefaultIfEmpty(0).Sum();
                    total = tMISFresh + tsis + tpps + tnfp + tMIS1 + tMIS2 + tMIS3 + tMIS4 + tMIS5 + tMIS6 + tMIS7a;
                    if (total > 0)
                    {
                        pwclist.Add(new FundMobilization { planname = plan.planname, tPPSFresh = tpps, tNFPFresh = tnfp, tsis = tsis, tMISFresh = tMISFresh, tMIS1 = tMIS1, tMIS2 = tMIS2, tMIS3 = tMIS3, tMIS4 = tMIS4, tMIS5 = tMIS5, tMIS6 = tMIS6, tMIS7a = tMIS7a, total = total, branchname = br.BranchName, companyname = cr.CompanyName, branch = mr.branchname, sdate = stdate, edate = enddate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Operator"), "FundMobilisation.rpt"));
                rd.SetDataSource(pwclist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }

                return View();
            }
        }

        [HttpGet]
        public ActionResult OfficialCancelReceiptReport()
        {
            List<CancelRcptList> crcptlist = new List<CancelRcptList>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var br = db.Branchtabs.Single(s => s.BranchCode == User.Identity.Name);
                var ins = (from dcl in db.Cancel_Receipts where dcl.branch == br.BranchCode select dcl).ToList();
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                foreach (var i in ins)
                {
                    crcptlist.Add(new CancelRcptList { newbondid = i.newbondid, opid = i.opid, time = i.Time, payamount = i.payamount, installmentno = i.installmentno, receiptno = i.receiptno, planname = i.planname, mode = i.mode, term = i.term, pdate = i.paymentdate, cdate = i.Time, cancelby = i.opid, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
                }
                return View(crcptlist);
            }
        }
        public ActionResult PrintCancelReport()
        {

            List<CancelRcptList> crcptlist = new List<CancelRcptList>();
            var br = db.Branchtabs.Single(s => s.BranchCode == User.Identity.Name);
            var ins = (from dcl in db.Cancel_Receipts where dcl.branch == br.BranchCode select dcl).ToList();
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            foreach (var i in ins)
            {
                crcptlist.Add(new CancelRcptList { newbondid = i.newbondid, opid = i.opid, time = i.Time, payamount = i.payamount, installmentno = i.installmentno, receiptno = i.receiptno, planname = i.planname, mode = i.mode, term = i.term, pdate = i.paymentdate, cdate = i.Time, cancelby = i.opid, branchname = br.BranchName, companyname = cr.CompanyName, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });
            }
            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "cancelreceipt.rpt"));
            rd.SetDataSource(crcptlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

        }

        [HttpGet]
        public ActionResult AccBalanceReport()
        {
            List<AcBalanceReport> abrlist = new List<AcBalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Operator");
            }
            else
            {
                return View(abrlist);
            }
        }
        [HttpPost]
        public ActionResult AccBalanceReport(DateTime sdate, DateTime edate)
        {
            List<AcBalanceReport> abrlist = new List<AcBalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var alist = (from pl in db.SavingAccountInfos where pl.Doj >= sdate && pl.Doj <= edate select pl).ToList();
                foreach (var a in alist)
                {
                    var creditsum = (from df in db.TransactionTabs where df.accountno == a.accountno select df.credit).DefaultIfEmpty(0).Sum();
                    var debitsum = (from df in db.TransactionTabs where df.accountno == a.accountno select df.debit).DefaultIfEmpty(0).Sum();
                    var balance = (creditsum - debitsum);
                    abrlist.Add(new AcBalanceReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, credit = creditsum, debit = debitsum, balance = balance, branchname = br.BranchName, companyname = cr.CompanyName, sdate = sdate, edate = edate });

                }

                stdate = sdate;
                enddate = edate;

                return View(abrlist);
            }
        }
        public ActionResult PrintAccBalanceReport()
        {
            List<AcBalanceReport> abrlist = new List<AcBalanceReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var alist = (from pl in db.SavingAccountInfos where pl.Doj >= stdate && pl.Doj <= enddate select pl).ToList();
                foreach (var a in alist)
                {
                    var creditsum = (from df in db.TransactionTabs where df.accountno == a.accountno select df.credit).DefaultIfEmpty(0).Sum();
                    var debitsum = (from df in db.TransactionTabs where df.accountno == a.accountno select df.debit).DefaultIfEmpty(0).Sum();
                    var balance = (creditsum - debitsum);
                    abrlist.Add(new AcBalanceReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, credit = creditsum, debit = debitsum, balance = balance, branchname = br.BranchName, companyname = cr.CompanyName, sdate = stdate, edate = enddate });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AccBalanceReport.rpt"));
                rd.SetDataSource(abrlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult PaidVoucher()
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(pv);
            }

        }
        [HttpPost]
        public ActionResult PaidVoucher(string year, int month)
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);

                var pvlist = (from v in db.Voucher_Reports where v.year == year && v.month == month && v.branchcode == User.Identity.Name select v).ToList();
                foreach (var m in pvlist.ToList())
                {
                    var advamount = Math.Round((m.commission - m.tds - m.netamount), 2);
                    if (advamount < 0)
                    {
                        advamount = 0;
                    }
                    var ag = db.AgentDetails.Single(o => o.AgencyCode == m.agentid);
                    pv.Add(new PaidVoucher
                    {
                        branchcode = User.Identity.Name,
                        Brokercode = ag.NewAgentId,
                        BrokerName = ag.name,
                        panno = ag.Panno,
                        bussiness = m.bussiness,
                        commission = m.commission,
                        netamount = m.netamount,
                        tds = m.tds,
                        advamount = advamount,
                        month = monthname,
                        year = m.year,
                        date = m.date,
                        Companyname = cr.CompanyName,
                        Broker_name = mr.agentname,
                        Branch_name = mr.branchname,
                        address = cr.Address,
                        contact = cr.Contact,
                        emailid = cr.Emailid,
                        domainname = cr.HeadOffice
                    });

                }

                Year = year;
                vmonth = month;
                ViewData["Month"] = monthname;
                return View(pv);
            }
        }
        public ActionResult PrintPaidVoucher()
        {
            List<PaidVoucher> pv = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(vmonth) + "," + Year;
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);

                var pvlist = (from v in db.Voucher_Reports where v.year == Year && v.month == vmonth && v.branchcode == User.Identity.Name select v).ToList();

                foreach (var m in pvlist.ToList())
                {
                    var advamount = Math.Round((m.commission - m.tds - m.netamount), 2);
                    if (advamount < 0)
                    {
                        advamount = 0;
                    }
                    var ag = db.AgentDetails.Single(o => o.AgencyCode == m.agentid);
                    pv.Add(new PaidVoucher
                    {
                        branchcode = User.Identity.Name,
                        Brokercode = ag.NewAgentId,
                        BrokerName = ag.name,
                        panno = ag.Panno,
                        bussiness = m.bussiness,
                        commission = m.commission,
                        netamount = m.netamount,
                        tds = m.tds,
                        advamount = advamount,
                        month = monthname,
                        year = m.year,
                        date = m.date,
                        Companyname = cr.CompanyName,
                        Broker_name = mr.agentname,
                        Branch_name = mr.branchname,
                        address = cr.Address,
                        contact = cr.Contact,
                        emailid = cr.Emailid,
                        domainname = cr.HeadOffice
                    });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "PaidVoucher.rpt"));
                rd.SetDataSource(pv);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View(pv);
            }
        }

        [HttpGet]
        public ActionResult UnPaidVoucher()
        {
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Index", "Home");
            }
            else
            {
                return View(vlist);
            }
        }
        [HttpPost]
        public ActionResult UnPaidVoucher(int month, int year)
        {
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Index", "Home");
            }
            else
            {
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                List<AgentDetail> blist = new List<AgentDetail>();
                var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                string year1 = year.ToString();
                blist = (from b in db.AgentDetails where !db.Voucher_Reports.Any(p => p.agentid == b.AgencyCode && p.month == month && p.year == year1 && p.branchcode == User.Identity.Name) && b.BranchCode == User.Identity.Name select b).ToList();

                Double tdsper = 0;
                foreach (var b in blist)
                {
                    List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();

                    var cr = db.CompanyInfos.Single(c => c.Id == 1);
                    var mr = db.Members.Single(m => m.Id == 1);

                    var br = db.AgentDetails.Single(a => a.AgencyCode == b.AgencyCode);
                    var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);


                    if (br.Panno == null || br.Panno == "")
                    {
                        tdsper = tdsr.NPCTDS;
                    }
                    else
                    {
                        tdsper = tdsr.TDS;
                    }
                    var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == br.NewAgentId && cts.month == month && cts.year == year select cts.bonusamount).DefaultIfEmpty(0).Sum();
                    ViewData["bonusamount"] = bonusamount;

                    var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode select cts).Count();
                    var vyear = year.ToString();
                    var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode && cts.month == month && cts.year == vyear select cts).Count();
                    var commlist = (from co in db.commission_tabs where co.newagentid == br.NewAgentId && co.date.Month == month && co.date.Year == year && co.branchcode == User.Identity.Name select co).ToList();
                    foreach (var com in commlist)
                    {
                        var appr = db.appltabs.Single(bi => bi.newbondid == com.newbondid);
                        bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = br.NewAgentId, brokername = br.name, newintroducerid = br.NewIntroducerId, month = month.ToString(), voucherno = voucherno, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                    }
                    var advancepayment = (from cts in db.AdvBrokerPaymentTabs where cts.newagentid == br.NewAgentId && cts.date.Month == month && cts.date.Year == year select cts.amount).DefaultIfEmpty(0).Sum();
                    var gbusiness = bwvlist.Sum(tr => tr.business);
                    var gcommission = bwvlist.Sum(tr => tr.commission);
                    var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                    var netamount = Math.Round((gcommission + bonusamount - (lesstds + advancepayment)), 2);
                    vlist.Add(new PaidVoucher { Brokercode = br.NewAgentId, BrokerName = br.name, panno = br.Panno, netamount = netamount, bussiness = gbusiness, commission = gcommission, tds = lesstds, advamount = advancepayment, Branch_name = mr.branchname, Broker_name = mr.agentname, month = monthname, year = year.ToString(), Companyname = cr.CompanyName, branchcode = User.Identity.Name, address = cr.Address, contact = cr.Contact, emailid = cr.Emailid, domainname = cr.HeadOffice, bonusamount = bonusamount });

                }
                vvyear = year;
                vmonth = month;

                ViewData["Branch"] = User.Identity.Name;
                ViewData["Month"] = monthname;
                //----------End selecting team business and commission of selected month---------------
                /////////Selecting Voucher List End Here//////

                return View(vlist);
            }
        }

        public ActionResult PrintUnPaidVoucher()
        {
            MonthName mn = new MonthName();
            var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
            List<PaidVoucher> vlist = new List<PaidVoucher>();
            List<AgentDetail> blist = new List<AgentDetail>();
            var bb = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
            string year1 = vvyear.ToString();
            blist = (from b in db.AgentDetails where !db.Voucher_Reports.Any(p => p.agentid == b.AgencyCode && p.month == vmonth && p.year == year1 && p.branchcode == User.Identity.Name) && b.BranchCode == User.Identity.Name select b).ToList();

            foreach (var b in blist)
            {
                List<BondwiseVoucherlist> bwvlist = new List<BondwiseVoucherlist>();

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var mr = db.Members.Single(m => m.Id == 1);

                var br = db.AgentDetails.Single(a => a.AgencyCode == b.AgencyCode);
                var tdsr = db.TDSLF_tabs.Single(t => t.Id == 1);
                Double tdsper = 0;

                if (br.Panno == null || br.Panno == "")
                {
                    tdsper = tdsr.NPCTDS;
                }
                else
                {
                    tdsper = tdsr.TDS;
                }
                var bonusamount = (from cts in db.bonus_tabs where cts.agentcode == br.NewAgentId && cts.month == vmonth && cts.year == vvyear select cts.bonusamount).DefaultIfEmpty(0).Sum();
                ViewData["bonusamount"] = bonusamount;

                var voucherno = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode select cts).Count();
                var vyear = vvyear.ToString();
                var vcount = (from cts in db.Voucher_Reports where cts.agentid == br.AgencyCode && cts.month == vmonth && cts.year == vyear select cts).Count();
                var commlist = (from co in db.commission_tabs where co.newagentid == br.NewAgentId && co.date.Month == vmonth && co.date.Year == vvyear && co.branchcode == User.Identity.Name select co).ToList();
                foreach (var com in commlist)
                {
                    var appr = db.appltabs.Single(bi => bi.newbondid == com.newbondid);
                    bwvlist.Add(new BondwiseVoucherlist { newbondid = com.newbondid, bondname = com.bondname, bondintroducerid = appr.newintroducerid, planname = appr.planname, mode = appr.mode, percentage = com.percentage, business = com.amount, commission = com.commission, newrenew = com.newrenew, tds = tdsper, bonusamount = bonusamount, brokerid = br.NewAgentId, brokername = br.name, newintroducerid = br.NewIntroducerId, voucherno = voucherno, branchname = bb.BranchName, companyname = cr.CompanyName, branch = mr.branchname, agent = mr.agentname, bond = mr.custname, plan = mr.planname });
                }
                var advancepayment = (from cts in db.AdvBrokerPaymentTabs where cts.newagentid == br.NewAgentId && cts.date.Month == vmonth && cts.date.Year == vvyear select cts.amount).DefaultIfEmpty(0).Sum();
                var gbusiness = bwvlist.Sum(tr => tr.business);
                var gcommission = bwvlist.Sum(tr => tr.commission);
                var lesstds = Math.Round((gcommission * tdsper) / 100, 2);
                var netamount = Math.Round((gcommission + bonusamount -( lesstds + advancepayment)), 2);
                vlist.Add(new PaidVoucher { Brokercode = br.NewAgentId, BrokerName = br.name, panno = br.Panno, netamount = netamount, bussiness = gbusiness, commission = gcommission, tds = lesstds, advamount = advancepayment, Branch_name = mr.branchname, Broker_name = mr.agentname, month = monthname, year = vvyear.ToString(), Companyname = cr.CompanyName, branchcode = User.Identity.Name, address = cr.Address, contact = cr.Contact, emailid = cr.Emailid, domainname = cr.HeadOffice, bonusamount = bonusamount });

            }

            //----------End selecting team business and commission of selected month---------------
            /////////Selecting Voucher List End Here//////


            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports/Branch"), "UnpaidVoucher.rpt"));
            rd.SetDataSource(vlist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);
                string dt = pdate.ToShortDateString();

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }


            return View(vlist);
        }

        [HttpGet]
        public ActionResult DailySavingCollection()
        {
            List<TransactionTab> mt = new List<TransactionTab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(mt);
            }
        }
        [HttpPost]
        public ActionResult DailySavingCollection(DateTime sdate)
        {
            var dailysaving = db.TransactionTabs.Where(a => a.pdate == sdate).ToList();
            return View(dailysaving);
        }

        [HttpGet]
        public ActionResult DWDueCollection()
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {

                        return View(dwdclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        [HttpPost]
        public ActionResult DWDueCollection(DateTime date)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
                var mr = db.Members.Single(m => m.Id == 1);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var brolist = (from b in db.appltabs where b.branchcode == User.Identity.Name select new { b.newintroducerid }).Distinct();
                foreach (var bro in brolist.ToList())
                {
                    var appllist = (from a in db.appltabs where a.newintroducerid == bro.newintroducerid select a).ToList();
                    foreach (var t in appllist)
                    {

                        Double amount = 0;
                        string installmentno = "";
                        var bb = db.Branchtabs.Single(mm => mm.BranchCode == t.branchcode);
                        var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate < date select i).ToList();
                        var dicount = bwdilist.Count();
                        if (dicount > 1)
                        {

                            foreach (var prn in bwdilist)
                            {
                                amount += prn.amount;
                                installmentno += prn.installmentno + ",";
                            }
                            installmentno = installmentno.Substring(0, installmentno.Length - 1);
                            dwdclist.Add(new DatewiseDueCollection { newbondid = t.newbondid, name = t.name, newintroducerid = t.newintroducerid, amount = amount, installment = installmentno, formdate = t.formdate, date = date, branchname = bb.BranchName, companyname = t.mobileno });
                        }
                        else if (dicount == 1)
                        {
                            var ir = db.Installmenttabs.Single(ii => ii.bondid == t.bondid && ii.payamount == 0 && ii.prevexpirydate < date);
                            dwdclist.Add(new DatewiseDueCollection { newbondid = t.newbondid, name = t.name, newintroducerid = t.newintroducerid, amount = ir.amount, installment = ir.installmentno.ToString(), formdate = t.formdate, date = date, branchname = bb.BranchName, companyname = t.mobileno });
                        }

                    }
                }

                int count = dwdclist.Count();
                if (count == 0)
                {
                    Response.Write("<script>alert('There is No due collection')</script>");
                }
                stdate = date;
                return View(dwdclist);

            }
        }
        public ActionResult PrintDWDueCollection()
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            var mr = db.Members.Single(m => m.Id == 1);
            var cr = db.CompanyInfos.Single(c => c.Id == 1);
            var brolist = (from b in db.appltabs where b.branchcode == User.Identity.Name select new { b.newintroducerid }).Distinct();
            foreach (var bro in brolist.ToList())
            {
                var appllist = (from a in db.appltabs where a.newintroducerid == bro.newintroducerid select a).ToList();
                foreach (var t in appllist)
                {


                    Double amount = 0;
                    string installmentno = "";
                    var bb = db.Branchtabs.Single(mm => mm.BranchCode == t.branchcode);
                    var bwdilist = (from i in db.Installmenttabs where i.bondid == t.bondid && i.payamount == 0 && i.prevexpirydate < stdate select i).ToList();
                    var dicount = bwdilist.Count();
                    if (dicount > 1)
                    {

                        foreach (var prn in bwdilist)
                        {
                            amount += prn.amount;
                            installmentno += prn.installmentno + ",";
                        }
                        installmentno = installmentno.Substring(0, installmentno.Length - 1);
                        dwdclist.Add(new DatewiseDueCollection { newbondid = t.newbondid, name = t.name, newintroducerid = t.newintroducerid, amount = amount, installment = installmentno, formdate = t.formdate, date = stdate, branchname = bb.BranchName, companyname = t.mobileno });
                    }
                    else if (dicount == 1)
                    {
                        var ir = db.Installmenttabs.Single(ii => ii.bondid == t.bondid && ii.payamount == 0 && ii.prevexpirydate < stdate);
                        dwdclist.Add(new DatewiseDueCollection { newbondid = t.newbondid, name = t.name, newintroducerid = t.newintroducerid, amount = ir.amount, installment = ir.installmentno.ToString(), formdate = t.formdate, date = stdate, branchname = bb.BranchName, companyname = t.mobileno });
                    }



                }
            }

            int count = dwdclist.Count();
            if (count == 0)
            {
                Response.Write("<script>alert('There is No due collection')</script>");
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DueCollection.rpt"));
            rd.SetDataSource(dwdclist);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();

            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();
        }

        [HttpGet]
        public ActionResult RenewalList()
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {

                        return View(dwdclist);
                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        [HttpPost]
        public ActionResult RenewalList(plan model, string newagentid, int filter, int month = 0, int year = 0, int Plancode = 0)
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                DateTime fdate = DateTime.Now.Date;
                DateTime sdate = DateTime.Now.Date;
                DateTime fdate1 = DateTime.Now.Date;
                var br = db.Branchtabs.Single(s => s.BranchCode == User.Identity.Name);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pst = db.Plans.Single(c => c.Plancode == 4);
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    int mon = DateTime.DaysInMonth(year, month);
                    if (month > 9)
                    {

                        sdate = Convert.ToDateTime(month + "/01/" + year);
                        fdate = Convert.ToDateTime(month + "/" + mon + "/" + year);
                        fdate1 = Convert.ToDateTime(month + "/01/" + year);
                    }
                    else
                    {
                        sdate = Convert.ToDateTime("0" + month + "/01/" + year);
                        fdate = Convert.ToDateTime("0" + month + "/" + mon + " /" + year);
                        fdate1 = Convert.ToDateTime("0" + month + "/01/" + year);
                    }
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {

                        MonthName mn = new MonthName();
                        var monthname = mn.numbertomonthname(month) + "," + year;
                        switch (filter)
                        {
                            case 1:
                                var bd1 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.prevexpirydate >= sdate && b.branch == br.BranchCode && b.planname.Substring(0, 3) != pst.shortcutname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install1 = 0;
                                Double lastamt1 = 0;
                                foreach (var o in bd1)
                                {
                                    int i1 = 0;
                                    lastamt1 = 0;
                                    var bbr1 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr1.expirydate >= fdate1)
                                    {
                                        int bcount1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                        if (bcount1 > 0)
                                        {
                                            int mininstall1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                            int maxinstall1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                            lastamt1 = 0;
                                            while (mininstall1 <= maxinstall1)
                                            {
                                                var ar1 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall1);
                                                lastamt1 = lastamt1 + ar1.amount;
                                                install1 = install1 + 1;
                                                mininstall1 = mininstall1 + 1;
                                                pdate = Convert.ToDateTime(ar1.paymentdate);
                                            }
                                            i1 = i1 + 1;
                                        }
                                        else
                                        {
                                            lastamt1 = 0;
                                            i1 = i1 + 1;
                                        }

                                        var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr1.newbondid);
                                        var ap = db.appltabs.Single(c => c.newbondid == bbr1.newbondid);
                                        var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                        var installment1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        var installmentt1 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        int total1 = Convert.ToInt32(installment1) + Convert.ToInt32(installmentt1);
                                        var info1 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total1);

                                        if (rt.status != 0 && i1 == 1)
                                        {
                                            dwdclist.Add(new DatewiseDueCollection { newbondid = bbr1.newbondid, bondid = ap.bondid, branchnamenew = br.BranchName, viewby = User.Identity.Name, name = ap.name, amount = lastamt1, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info1.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount1.ToString(), plan = bbr1.planname, installamount = bbr1.payment, mobileno = ap.mobileno });
                                        }
                                        install1 = 0;

                                    }
                                }

                                break;

                            case 2:
                                double lastamt2 = 0;
                                var bd2 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.prevexpirydate >= sdate && b.branch == br.BranchCode && b.planname.Substring(0, 3) != pst.shortcutname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install2 = 0;

                                foreach (var o in bd2)
                                {
                                    int i2 = 0;
                                    lastamt2 = 0;
                                    var bbr2 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr2.expirydate >= fdate1)
                                    {
                                        if (bbr2.newintroducerid == newagentid)
                                        {
                                            int bcount2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                            if (bcount2 > 0)
                                            {
                                                int mininstall2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                                int maxinstall2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                                lastamt2 = 0;
                                                while (mininstall2 <= maxinstall2)
                                                {
                                                    var ar2 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall2);
                                                    lastamt2 = lastamt2 + ar2.amount;
                                                    install2 = install2 + 1;
                                                    mininstall2 = mininstall2 + 1;
                                                    pdate = Convert.ToDateTime(ar2.paymentdate);
                                                }
                                                i2 = i2 + 1;
                                            }
                                            else
                                            {
                                                lastamt2 = 0;
                                                i2 = i2 + 1;
                                            }
                                            var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr2.newbondid);
                                            var ap = db.appltabs.Single(c => c.newbondid == bbr2.newbondid);
                                            var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                            var installment2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            var installmentt2 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            int total2 = Convert.ToInt32(installment2) + Convert.ToInt32(installmentt2);
                                            var info2 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total2);

                                            if (rt.status != 0 && i2 == 1)
                                            {
                                                dwdclist.Add(new DatewiseDueCollection { newbondid = bbr2.newbondid, bondid = ap.bondid, branchnamenew = br.BranchName, viewby = User.Identity.Name, name = ap.name, amount = lastamt2, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info2.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount2.ToString(), plan = bbr2.planname, installamount = bbr2.payment, mobileno = ap.mobileno });
                                            }
                                            install2 = 0;

                                        }
                                    }
                                }

                                break;

                            case 3:
                                var pr = db.NewPlans.Single(s => s.Plancode == model.plancode);
                                Double lastamt3 = 0;
                                var bd3 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.prevexpirydate >= sdate && b.branch == br.BranchCode && b.planname == pr.Planname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install3 = 0;

                                foreach (var o in bd3)
                                {
                                    int i3 = 0;
                                    lastamt3 = 0;
                                    var bbr3 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr3.expirydate >= fdate1)
                                    {
                                        int bcount3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                        if (bcount3 > 0)
                                        {
                                            int mininstall3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                            int maxinstall3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                            lastamt3 = 0;
                                            while (mininstall3 <= maxinstall3)
                                            {
                                                var ar3 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall3);
                                                lastamt3 = lastamt3 + ar3.amount;
                                                install3 = install3 + 1;
                                                mininstall3 = mininstall3 + 1;
                                                pdate = Convert.ToDateTime(ar3.paymentdate);
                                            }
                                            i3 = i3 + 1;
                                        }
                                        else
                                        {
                                            lastamt3 = 0;
                                            i3 = i3 + 1;
                                        }
                                        var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr3.newbondid);
                                        var ap = db.appltabs.Single(c => c.newbondid == bbr3.newbondid);
                                        var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                        var installment3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        var installmentt3 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        int total3 = Convert.ToInt32(installment3) + Convert.ToInt32(installmentt3);
                                        var info3 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total3);

                                        if (rt.status != 0 && i3 == 1)
                                        {
                                            dwdclist.Add(new DatewiseDueCollection { newbondid = bbr3.newbondid, bondid = ap.bondid, branchnamenew = br.BranchName, viewby = User.Identity.Name, name = ap.name, amount = lastamt3, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info3.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount3.ToString(), plan = bbr3.planname, installamount = bbr3.payment, mobileno = ap.mobileno });
                                        }
                                        install3 = 0;

                                    }
                                }
                                break;

                        }
                        ViewData["Month"] = month;
                        ViewData["Monthnm"] = mn.numbertomonthname(month);
                        ViewData["Year"] = year;
                        ViewData["monthname"] = monthname;
                        vmonth = month;
                        vvyear = year;
                        NewAgentid = newagentid;
                        sfilter = filter;
                        plancode = model.plancode;
                        return View(dwdclist.OrderBy(o => o.bondid));

                    }
                    else
                    {
                        return RedirectToAction("Logout", "Branch");
                    }
                }
                else
                {
                    return RedirectToAction("Logout", "Branch");
                }
            }
        }
        public ActionResult PrintRenewalList()
        {
            List<DatewiseDueCollection> dwdclist = new List<DatewiseDueCollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                DateTime sdate = DateTime.Now.Date;
                DateTime fdate = DateTime.Now.Date;
                DateTime fdate1 = DateTime.Now.Date;
                var br = db.Branchtabs.Single(s => s.BranchCode == User.Identity.Name);
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var pst = db.Plans.Single(c => c.Plancode == 4);
                int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                if (count == 1)
                {
                    int mon = DateTime.DaysInMonth(vvyear, vmonth);
                    if (vmonth > 9)
                    {
                        sdate = Convert.ToDateTime(vmonth + "/01/" + vvyear);
                        fdate = Convert.ToDateTime(vmonth + "/" + mon + "/" + vvyear);
                        fdate1 = Convert.ToDateTime(vmonth + "/01/" + vvyear);
                    }
                    else
                    {
                        sdate = Convert.ToDateTime("0" + vmonth + "/01/" + vvyear);
                        fdate = Convert.ToDateTime("0" + vmonth + "/" + mon + " /" + vvyear);
                        fdate1 = Convert.ToDateTime("0" + vmonth + "/01/" + vvyear);
                    }
                    var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                    if (log.status == 1 && log.type == "Branch")
                    {
                        MonthName mn = new MonthName();
                        var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                        switch (sfilter)
                        {
                            case 1:
                                var bd1 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.prevexpirydate >= sdate && b.branch == br.BranchCode && b.planname.Substring(0, 3) != pst.shortcutname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install1 = 0;
                                Double lastamt1 = 0;
                                foreach (var o in bd1)
                                {
                                    int i1 = 0;
                                    lastamt1 = 0;
                                    var bbr1 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr1.expirydate >= fdate1)
                                    {
                                        int bcount1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                        if (bcount1 > 0)
                                        {
                                            int mininstall1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                            int maxinstall1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                            lastamt1 = 0;
                                            while (mininstall1 <= maxinstall1)
                                            {
                                                var ar1 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall1);
                                                lastamt1 = lastamt1 + ar1.amount;
                                                install1 = install1 + 1;
                                                mininstall1 = mininstall1 + 1;
                                                pdate = Convert.ToDateTime(ar1.paymentdate);
                                            }
                                            i1 = i1 + 1;
                                        }
                                        else
                                        {
                                            lastamt1 = 0;
                                            i1 = i1 + 1;
                                        }
                                        var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr1.newbondid);
                                        var ap = db.appltabs.Single(c => c.newbondid == bbr1.newbondid);
                                        var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                        var installment1 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        var installmentt1 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        int total1 = Convert.ToInt32(installment1) + Convert.ToInt32(installmentt1);
                                        var info1 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total1);

                                        if (rt.status != 0 && i1 == 1)
                                        {
                                            dwdclist.Add(new DatewiseDueCollection { newbondid = bbr1.newbondid, bondid = ap.bondid, branchnamenew = br.BranchName, viewby = User.Identity.Name, name = ap.name, amount = lastamt1, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info1.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount1.ToString(), plan = bbr1.planname, installamount = bbr1.payment, mobileno = ap.mobileno });
                                        }
                                        install1 = 0;

                                    }
                                }

                                break;

                            case 2:
                                double lastamt2 = 0;
                                var bd2 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.prevexpirydate >= sdate && b.branch == br.BranchCode && b.planname.Substring(0, 3) != pst.shortcutname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install2 = 0;

                                foreach (var o in bd2)
                                {
                                    int i2 = 0;
                                    lastamt2 = 0;
                                    var bbr2 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr2.expirydate >= fdate1)
                                    {
                                        if (bbr2.newintroducerid == NewAgentid)
                                        {
                                            int bcount2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                            if (bcount2 > 0)
                                            {
                                                int mininstall2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                                int maxinstall2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                                lastamt2 = 0;
                                                while (mininstall2 <= maxinstall2)
                                                {
                                                    var ar2 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall2);
                                                    lastamt2 = lastamt2 + ar2.amount;
                                                    install2 = install2 + 1;
                                                    mininstall2 = mininstall2 + 1;
                                                    pdate = Convert.ToDateTime(ar2.paymentdate);
                                                }
                                                i2 = i2 + 1;
                                            }
                                            else
                                            {
                                                lastamt2 = 0;
                                                i2 = i2 + 1;
                                            }

                                            var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr2.newbondid);
                                            var ap = db.appltabs.Single(c => c.newbondid == bbr2.newbondid);
                                            var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                            var installment2 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            var installmentt2 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                            int total2 = Convert.ToInt32(installment2) + Convert.ToInt32(installmentt2);
                                            var info2 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total2);

                                            if (rt.status != 0 && i2 == 1)
                                            {
                                                dwdclist.Add(new DatewiseDueCollection { newbondid = bbr2.newbondid, bondid = ap.bondid, viewby = User.Identity.Name, branchnamenew = br.BranchName, name = ap.name, amount = lastamt2, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info2.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount2.ToString(), plan = bbr2.planname, installamount = bbr2.payment, mobileno = ap.mobileno });
                                            }
                                            install2 = 0;

                                        }
                                    }

                                }
                                break;

                            case 3:
                                var pr = db.NewPlans.Single(s => s.Plancode == plancode);
                                Double lastamt3 = 0;
                                var bd3 = (from b in db.Installmenttabs where b.prevexpirydate <= fdate && b.prevexpirydate >= sdate && b.branch == br.BranchCode && b.planname == pr.Planname && b.mode != "Single" && b.installmentno != 1 orderby b.bondid select new { b.bondid }).Distinct().ToList();
                                var install3 = 0;

                                foreach (var o in bd3)
                                {
                                    int i3 = 0;
                                    lastamt3 = 0;
                                    var bbr3 = db.appltabs.Single(cc => cc.bondid == o.bondid);
                                    if (bbr3.expirydate >= fdate1)
                                    {
                                        int bcount3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Count();
                                        if (bcount3 > 0)
                                        {
                                            int mininstall3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Min();
                                            int maxinstall3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate && r.installmentno != 1 select r.installmentno).Max();
                                            lastamt3 = 0;
                                            while (mininstall3 <= maxinstall3)
                                            {
                                                var ar3 = db.Installmenttabs.Single(p => p.bondid == o.bondid && p.installmentno == mininstall3);
                                                lastamt3 = lastamt3 + ar3.amount;
                                                install3 = install3 + 1;
                                                mininstall3 = mininstall3 + 1;
                                                pdate = Convert.ToDateTime(ar3.paymentdate);
                                            }
                                            i3 = i3 + 1;
                                        }
                                        else
                                        {
                                            lastamt3 = 0;
                                            i3 = i3 + 1;
                                        }

                                        var rt = db.RevivalTabs.Single(rr => rr.newbondid == bbr3.newbondid);
                                        var ap = db.appltabs.Single(c => c.newbondid == bbr3.newbondid);
                                        var agent = db.AgentDetails.Single(c => c.AgencyCode == ap.introducerid);
                                        var installment3 = (from r in db.Installmenttabs where r.payamount == 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        var installmentt3 = (from r in db.Installmenttabs where r.payamount != 0 && r.bondid == o.bondid && r.prevexpirydate <= fdate select r.installmentno).Count();
                                        int total3 = Convert.ToInt32(installment3) + Convert.ToInt32(installmentt3);
                                        var info3 = db.Installmenttabs.Single(s => s.bondid == o.bondid && s.installmentno == total3);

                                        if (rt.status != 0 && i3 == 1)
                                        {
                                            dwdclist.Add(new DatewiseDueCollection { newbondid = bbr3.newbondid, bondid = ap.bondid, branchnamenew = br.BranchName, viewby = User.Identity.Name, name = ap.name, amount = lastamt3, newintroducerid = ap.newintroducerid, IntroName = agent.name, formdate = Convert.ToDateTime(info3.prevexpirydate), branchname = ap.branchcode, companyname = cr.CompanyName, monthname = monthname, installment = bcount3.ToString(), plan = bbr3.planname, installamount = bbr3.payment, mobileno = ap.mobileno });
                                        }
                                        install3 = 0;

                                    }
                                }
                                break;

                        }


                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Duepaymentreport.rpt"));
                rd.SetDataSource(dwdclist.OrderBy(s => s.bondid));

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();

                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult AccStatementReport()
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(abrlist);
            }
        }
        [HttpPost]
        public ActionResult AccStatementReport(string accountid, DateTime sdate, DateTime edate)
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var prevcredit = (from pr in db.TransactionTabs where pr.pdate < sdate && pr.accountno == accountid select pr.credit).DefaultIfEmpty(0).Sum();
                var prevdebit = (from pr in db.TransactionTabs where pr.pdate < sdate && pr.accountno == accountid select pr.debit).DefaultIfEmpty(0).Sum();
                var prevbalance = prevcredit - prevdebit;
                var alist = (from pl in db.TransactionTabs where pl.accountno == accountid && pl.pdate >= sdate && pl.pdate <= edate select pl).ToList();
                foreach (var a in alist)
                {
                    abrlist.Add(new AcStatementReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, transactionid = a.transactionid, remarks = a.remark, credit = a.credit, debit = a.debit, balance = a.balance, prevbalance = prevbalance, branchname = br.BranchName, companyname = cr.CompanyName, sdate = sdate, edate = edate, pdate = a.pdate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                newaccountid = accountid;
                stdate = sdate;
                enddate = edate;
                return View(abrlist);
            }
        }
        public ActionResult PrintAccStatementReport()
        {
            List<AcStatementReport> abrlist = new List<AcStatementReport>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var prevcredit = (from pr in db.TransactionTabs where pr.pdate < stdate && pr.accountno == newaccountid select pr.credit).DefaultIfEmpty(0).Sum();
                var prevdebit = (from pr in db.TransactionTabs where pr.pdate < stdate && pr.accountno == newaccountid select pr.debit).DefaultIfEmpty(0).Sum();
                var prevbalance = prevcredit - prevdebit;
                var alist = (from pl in db.TransactionTabs where pl.accountno == newaccountid && pl.pdate >= stdate && pl.pdate <= enddate select pl).ToList();
                foreach (var a in alist)
                {
                    abrlist.Add(new AcStatementReport { actype = a.actype, accountno = a.accountno, acholdername = a.acholdername, transactionid = a.transactionid, remarks = a.remark, credit = a.credit, debit = a.debit, balance = a.balance, prevbalance = prevbalance, branchname = br.BranchName, companyname = cr.CompanyName, sdate = stdate, edate = enddate, pdate = a.pdate, address = cr.Address, emailid = cr.Emailid, contact = cr.Contact, domainname = cr.HeadOffice });

                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AccStatementReport.rpt"));
                rd.SetDataSource(abrlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        [HttpGet]
        public ActionResult DeactiveList()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                int int1 = db.Database.SqlQuery<int>("exec getdeactiverevival").Single();
                var ccr = db.CompanyInfos.Single(c => c.Id == 1);
                List<CustomerDeactiveList> custlist = new List<CustomerDeactiveList>();
                DateTime cdate = DateTime.Now.Date;

                var dlist = db.RevivalTabs.Where(d => d.status == 0);
                foreach (var d in dlist)
                {
                    var cr = db.appltabs.Single(c => c.newbondid == d.newbondid);
                    var countins = (from f in db.Installmenttabs where f.payamount == 0 && f.newbondid == d.newbondid select f.installmentno).Count();

                    if (countins != 0)
                    {
                        if (cr.plantype == "RD")
                        {

                            #region Calculate Latefine Start Here
                            Double totallatefine = 0;
                            Double amountsum = 0;

                            var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
                            var count = (from ii in db.Installmenttabs where ii.newbondid == d.newbondid && ii.payamount == 0 && ii.prevexpirydate < cdate select ii).Count();
                            var froms = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.payamount == 0 select u.installmentno).DefaultIfEmpty(1).Min();
                            var to = froms + count - 1;
                            amountsum = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.installmentno >= froms && u.installmentno <= to select u.amount).DefaultIfEmpty(0).Sum();
                            var rsl = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == to);
                            while (froms <= to)
                            {
                                Double latefine = 0;
                                var sredr = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == froms);

                                if (sredr.mode == "Monthly")
                                {
                                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddDays(15);
                                    if (DateTime.Now.Date > pdate.Date)
                                    {
                                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                        int r = diff / 30;
                                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                        //latefine = (sredr.amount * llr.latefine) / 100;
                                        totallatefine = totallatefine + latefine;

                                    }
                                }
                                else if (sredr.mode == "Quarterly")
                                {
                                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                    if (DateTime.Now.Date > pdate.Date)
                                    {
                                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                        int r = diff / 91;
                                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                        //latefine = (sredr.amount * llr.latefine) / 100;
                                        totallatefine = totallatefine + latefine;
                                    }
                                }
                                else if (sredr.mode == "Halfyearly")
                                {
                                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                    if (DateTime.Now.Date > pdate.Date)
                                    {
                                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                        int r = diff / 182;
                                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                        //latefine = (sredr.amount * llr.latefine) / 100;
                                        totallatefine = totallatefine + latefine;
                                    }
                                }
                                else if (sredr.mode == "Yearly")
                                {
                                    DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                                    if (DateTime.Now.Date > pdate.Date)
                                    {
                                        int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                        int r = diff / 365;
                                        latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                        //latefine = (sredr.amount * llr.latefine) / 100;
                                        totallatefine = totallatefine + latefine;
                                    }
                                }
                                froms = froms + 1;

                            }

                            Double amount = amountsum + totallatefine;
                            #endregion Calculate Latefine End Here

                            custlist.Add(new CustomerDeactiveList { newbondid = cr.newbondid, mobileno = cr.mobileno, name = cr.name, newintroducerid = cr.newintroducerid, planname = cr.planname, mode = cr.mode, payment = amountsum, formdate = cr.formdate, status = d.status, totalsum = amount, latefine = totallatefine, companyname = ccr.CompanyName, address = ccr.Address, emailid = ccr.Emailid, contact = ccr.Contact, domainname = ccr.HeadOffice });
                        }
                    }
                }
                return View(custlist);


            }
        }
        public ActionResult PrintDeactiveList()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var ccr = db.CompanyInfos.Single(c => c.Id == 1);
                List<CustomerDeactiveList> custlist = new List<CustomerDeactiveList>();
                DateTime cdate = DateTime.Now.Date;

                var dlist = db.RevivalTabs.Where(d => d.status == 0);
                foreach (var d in dlist)
                {
                    var cr = db.appltabs.Single(c => c.newbondid == d.newbondid);

                    #region Calculate Latefine Start Here
                    Double totallatefine = 0;
                    Double amountsum = 0;

                    var llr = db.TDSLF_tabs.Single(l => l.Id == 1);
                    var count = (from ii in db.Installmenttabs where ii.newbondid == d.newbondid && ii.payamount == 0 && ii.prevexpirydate < cdate select ii).Count();
                    var froms = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.payamount == 0 select u.installmentno).Min();
                    var to = froms + count - 1;
                    amountsum = (from u in db.Installmenttabs where u.newbondid == d.newbondid && u.installmentno >= froms && u.installmentno <= to select u.amount).DefaultIfEmpty(0).Sum();
                    var rsl = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == to);
                    while (froms <= to)
                    {
                        Double latefine = 0;
                        var sredr = db.Installmenttabs.Single(i => i.newbondid == d.newbondid && i.installmentno == froms);

                        if (sredr.mode == "Monthly")
                        {
                            DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddDays(15);
                            if (DateTime.Now.Date > pdate.Date)
                            {
                                int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                int r = diff / 30;
                                latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                //latefine = (sredr.amount * llr.latefine) / 100;
                                totallatefine = totallatefine + latefine;

                            }
                        }
                        else if (sredr.mode == "Quarterly")
                        {
                            DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                            if (DateTime.Now.Date > pdate.Date)
                            {
                                int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                int r = diff / 91;
                                latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                //latefine = (sredr.amount * llr.latefine) / 100;
                                totallatefine = totallatefine + latefine;
                            }
                        }
                        else if (sredr.mode == "Halfyearly")
                        {
                            DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                            if (DateTime.Now.Date > pdate.Date)
                            {
                                int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                int r = diff / 182;
                                latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                //latefine = (sredr.amount * llr.latefine) / 100;
                                totallatefine = totallatefine + latefine;
                            }
                        }
                        else if (sredr.mode == "Yearly")
                        {
                            DateTime pdate = Convert.ToDateTime(sredr.prevexpirydate).AddMonths(1);
                            if (DateTime.Now.Date > pdate.Date)
                            {
                                int diff = Convert.ToInt32(DateTime.Now.Date.Subtract(pdate).TotalDays);
                                int r = diff / 365;
                                latefine = Math.Round(((sredr.amount * llr.latefine) / 100) * (r + 1), 2);
                                //latefine = (sredr.amount * llr.latefine) / 100;
                                totallatefine = totallatefine + latefine;
                            }
                        }
                        froms = froms + 1;

                    }

                    Double amount = amountsum + totallatefine;
                    #endregion Calculate Latefine End Here
                    custlist.Add(new CustomerDeactiveList { newbondid = cr.newbondid, name = cr.name, newintroducerid = cr.newintroducerid, planname = cr.planname, mode = cr.mode, payment = amountsum, formdate = cr.formdate, status = d.status, totalsum = amount, latefine = totallatefine, companyname = ccr.CompanyName, address = ccr.Address, emailid = ccr.Emailid, contact = ccr.Contact, domainname = ccr.HeadOffice });
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "DeactiveList.rpt"));
                rd.SetDataSource(custlist);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();

            }
        }

        [HttpGet]
        public ActionResult Advancepaymentreport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<AdvPaymentTemp> ap = new List<AdvPaymentTemp>();
                return View(ap);
            }
        }
        [HttpPost]
        public ActionResult Advancepaymentreport(int month, int year)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                List<AdvPaymentTemp> ap = new List<AdvPaymentTemp>();
                string ayear = year.ToString();
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(month) + "," + year;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                var an = (from c in db.AdvBrokerPaymentTabs where c.date.Month == month && c.date.Year == year && c.branchcode == br.BranchCode select c).ToList();
                foreach (var item in an.ToList())
                {
                    Double recoveryamount = 0;
                    string rdate = "-";
                    var ar = db.AgentDetails.Single(a => a.NewAgentId == item.newagentid);
                    var count = (from vc in db.Voucher_Reports where vc.agentid == ar.AgencyCode && vc.month == month && vc.year == ayear select vc).Count();
                    if (count > 0)
                    {
                        var vr = db.Voucher_Reports.Single(v => v.agentid == ar.AgencyCode && v.month == month && v.year == ayear);
                        var comm = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == month && v.year == ayear select v.commission).DefaultIfEmpty(0).Sum();
                        var tds = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == month && v.year == ayear select v.tds).DefaultIfEmpty(0).Sum();
                        var netvoucher = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == month && v.year == ayear select v.netamount).DefaultIfEmpty(0).Sum();
                        recoveryamount = comm - tds - netvoucher;
                        rdate = vr.date.ToString("dd/MM/yyy");
                        ap.Add(new AdvPaymentTemp { newagentid = item.newagentid, name = ar.name, amount = item.amount, recoveryamount = recoveryamount, date = item.date, recoverydate = rdate, Remark = item.Remark, opid = item.opid, branchcode = item.branchcode, companyname = cr.CompanyName, monthname = monthname });
                    }
                    else
                    {
                        ap.Add(new AdvPaymentTemp { newagentid = item.newagentid, name = ar.name, amount = item.amount, recoveryamount = recoveryamount, date = item.date, recoverydate = rdate, Remark = item.Remark, opid = item.opid, branchcode = item.branchcode, companyname = cr.CompanyName, monthname = monthname });
                    }
                }
                vvyear = year;
                vmonth = month;
                return View(ap);
            }
        }
        public ActionResult PrintAdvancepayment()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                List<AdvPaymentTemp> ap = new List<AdvPaymentTemp>();
                string ayear = vvyear.ToString();
                MonthName mn = new MonthName();
                var monthname = mn.numbertomonthname(vmonth) + "," + vvyear;
                var cr = db.CompanyInfos.Single(c => c.Id == 1);
                var br = db.Branchtabs.Single(b => b.BranchCode == User.Identity.Name);
                string rdate = "-";
                var an = (from c in db.AdvBrokerPaymentTabs where c.date.Month == vmonth && c.date.Year == vvyear && c.branchcode == br.BranchCode select c).ToList();
                foreach (var item in an.ToList())
                {
                    Double recoveryamount = 0;
                    var ar = db.AgentDetails.Single(a => a.NewAgentId == item.newagentid);
                    var count = (from vc in db.Voucher_Reports where vc.agentid == ar.AgencyCode && vc.month == vmonth && vc.year == ayear select vc).Count();
                    if (count > 0)
                    {
                        var vr = db.Voucher_Reports.Single(v => v.agentid == ar.AgencyCode && v.month == vmonth && v.year == ayear);
                        var comm = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == vmonth && v.year == ayear select v.commission).DefaultIfEmpty(0).Sum();
                        var tds = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == vmonth && v.year == ayear select v.tds).DefaultIfEmpty(0).Sum();
                        var netvoucher = (from v in db.Voucher_Reports where v.agentid == ar.AgencyCode && v.month == vmonth && v.year == ayear select v.netamount).DefaultIfEmpty(0).Sum();
                        recoveryamount = comm - tds - netvoucher;
                        rdate = vr.date.ToString("dd/MM/yyy");
                        ap.Add(new AdvPaymentTemp { newagentid = item.newagentid, name = ar.name, amount = item.amount, recoveryamount = recoveryamount, date = item.date, recoverydate = rdate, Remark = item.Remark, opid = item.opid, branchcode = item.branchcode, companyname = cr.CompanyName, monthname = monthname });
                    }
                    else
                    {
                        ap.Add(new AdvPaymentTemp { newagentid = item.newagentid, name = ar.name, amount = item.amount, recoveryamount = recoveryamount, date = item.date, recoverydate = rdate, Remark = item.Remark, opid = item.opid, branchcode = item.branchcode, companyname = cr.CompanyName, monthname = monthname });
                    }
                }

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Advancepayment.rpt"));
                rd.SetDataSource(ap);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    string dt = pdate.ToShortDateString();

                    return new FileStreamResult(stream, "application/pdf");
                }

                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }


                return View();
            }
        }

        #endregion

        #region Search Menu Start Here

        [HttpGet]
        public ActionResult SearchBroker()
        {
            List<AgentDetail> a = new List<AgentDetail>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(a);
            }
        }
        [HttpPost]
        public ActionResult SearchBroker(string NewAgentId, string command, string brokerid)
        {
            if (command == "Search")
            {
                List<AgentDetail> ad = new List<AgentDetail>();
                if (!IsLoggedIn())
                {
                    return RedirectToAction("Logout", "Branch");
                }
                else
                {

                    ad = (from dcl in db.AgentDetails where dcl.NewAgentId == NewAgentId select dcl).ToList();
                    return View(ad);
                }
            }
            else if (command == "PDF")
            {

                var dn = (from a in db.AgentDetails where a.NewAgentId == brokerid select a).ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Broker.rpt"));
                rd.SetDataSource(dn);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }

                return View(dn);
            }
            return View();
        }

        [HttpGet]
        public ActionResult SearchBond()
        {
            List<appltab> ad = new List<appltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(ad);
            }
        }
        [HttpPost]
        public ActionResult SearchBond(string NewBondId, string command, string newbondid)
        {
            if (command == "Search")
            {
                List<appltab> ad = new List<appltab>();
                if (!IsLoggedIn())
                {
                    return RedirectToAction("Logout", "Branch");
                }
                else
                {

                    ad = (from dcl in db.appltabs where dcl.newbondid == NewBondId select dcl).ToList();
                    return View(ad);
                }
            }
            else if (command == "PDF")
            {
                var dn = (from a in db.appltabs where a.newbondid == newbondid select a).ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Customer.rpt"));
                rd.SetDataSource(dn);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }

                return View(dn);

            }
            return View();
        }

        #endregion

        #region Change Password Start Here

        [HttpGet]
        public ActionResult ChangePassword()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult ChangePassword(string Password, string NewPassword, string ConfirmPassword)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                if (NewPassword == ConfirmPassword)
                {

                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;

                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "changepassword";
                    cmd.CommandType = CommandType.StoredProcedure;

                    cmd.Connection = con;
                    cmd.Parameters.AddWithValue("@user", User.Identity.Name);
                    cmd.Parameters.AddWithValue("@oldpass", Password);
                    cmd.Parameters.AddWithValue("@newpass", NewPassword);

                    SqlParameter p = new SqlParameter("@ans", SqlDbType.Int);
                    p.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(p);
                    try
                    {

                        con.Open();
                        cmd.ExecuteNonQuery();


                        string response1 = cmd.Parameters["@ans"].Value.ToString();
                        int a = Convert.ToInt32(response1);

                        if (a == 0)
                        {
                            ViewBag.msg = "Sorry,Old Password Not matching";

                        }
                        else if (a == 1)
                        {
                            ViewBag.msg = "Password Changed successfully";

                        }
                    }

                    catch (SqlException e)
                    {
                        ViewBag.msg = e.Message;

                    }
                    finally
                    {
                        con.Close();
                    }
                }
                else
                {
                    ViewBag.msg = "Password not matching";
                }
            }
            return View();
        }
       
        [HttpGet]
        public ActionResult BondApproval(string nnewbondid, string branchcode, string newintroducerid, string newmemberid, string formdate, string dob, int printstatus = 0, int projectid = 0, double term = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<tempappltab> vlist = (from vl in db.tempappltabs where vl.discountper <= 2 select vl).ToList();
                if (nnewbondid != null && printstatus == 1)
                {
                    var pt = db.Plans.Single(c => c.Plancode == projectid);
                    var mr = db.Members.Single(m => m.Id == 1);
                    var br = db.Branchtabs.Single(bc => bc.BranchCode == branchcode);
                    var adr = db.AgentDetails.Single(ad => ad.NewAgentId == newintroducerid);
                    var pr = db.ProTerms.Single(p => p.projectid == projectid && p.term == term);
                    int max = (from a in db.appltabs select a).Count();
                    var bondid = max + 1;
                    //var newbondid = br.prefix + branchcode + "/C0" + bondid;
                    string dd = DateTime.Now.Date.Month.ToString("00");
                    int yr = DateTime.Now.Date.Year;
                    var newbondid = br.prefix + branchcode + "/C0" + dd + bondid.ToString().Substring(0, 2) + DateTime.Now.Date.Day.ToString("00") + bondid.ToString().Substring(2) + yr.ToString().Substring(2);

                    #region APPLTAB

                    var List = db.tempappltabs.Single(ui => ui.newbondid == nnewbondid);

                    appltab bd = new appltab();
                    bd.branchcode = List.branchcode;
                    bd.bondid = bondid;
                    bd.newbondid = newbondid;
                    bd.name = List.name;
                    bd.RelationOf = List.RelationOf;
                    bd.fathername = List.fathername;
                    bd.addr = List.addr;
                    bd.mobileno = List.mobileno;
                    bd.introducerid = List.introducerid;
                    bd.intrankcode = List.intrankcode;
                    bd.intrankname = List.intrankname;
                    bd.newintroducerid = List.newintroducerid;
                    bd.formdate = List.formdate;
                    bd.dob = List.dob;
                    bd.age = List.age;
                    bd.nationality = List.nationality;
                    bd.newmemberid = List.newmemberid;
                    bd.memberid = List.memberid;
                    bd.guardianname = List.guardianname;
                    bd.gurage = List.gurage;
                    bd.gurrel = List.gurrel;
                    bd.guraddr = List.guraddr;
                    bd.photo = List.photo;



                    bd.panno = List.panno;
                    bd.bankname = List.bankname;
                    bd.accountno = List.accountno;
                    bd.IFSC = List.IFSC;

                    bd.plantype = List.plantype;
                    bd.planname = List.planname;
                    bd.plancode = List.plancode;
                    bd.bonusper = List.bonusper;
                    bd.amountword = List.amountword;
                    bd.term = List.term;
                    bd.mode = List.mode;
                    bd.payment = List.payment;
                    bd.applicationcharge = List.applicationcharge;
                    bd.nolandunit = List.nolandunit;
                    bd.totalcon = List.totalcon;
                    bd.expectedraisablevalue = List.expectedraisablevalue;
                    bd.expirydate = List.expirydate;

                    bd.nomineename = List.nomineename;
                    bd.nomage = List.nomage;
                    bd.nomrel = List.nomrel;
                    bd.nomaddr = List.nomaddr;

                    bd.paymethod = List.paymethod;
                    bd.pdate = List.pdate;
                    bd.checkorddno = List.checkorddno;
                    bd.drawno = List.drawno;
                    bd.branchpay = List.branchpay;
                    bd.opid = List.opid;
                    bd.status = List.status;

                    bd.type = List.type;
                    bd.Macaddress = List.Macaddress;
                    bd.discountper = List.discountper;
                    bd.bookingamount = List.bookingamount;
                    bd.downpayment = List.downpayment;
                    bd.Time = List.Time;
                    bd.plotno = List.plotno;
                    bd.PYN = List.PYN;
                    bd.projectid = List.projectid;
                    bd.block = List.block;
                    bd.printstatus = List.printstatus;


                    bd.bank = List.bank;
                    bd.Account = List.Account;
                    bd.chequeno = List.chequeno;
                    bd.ACholdername = List.ACholdername;
                    bd.Branch = List.Branch;
                    bd.IFSCCode = List.IFSCCode;
                    bd.ChequeAmount = List.ChequeAmount;
                    bd.Chequedate = List.pdate;
                    bd.Chequeimage = List.Chequeimage;
                    bd.chequeappdate = DateTime.Now.Date;
                    bd.transactiontype = List.transactiontype;

                    bd.Aadhaar_No = List.Aadhaar_No;
                    bd.Aadhaar_ReqDate = List.Aadhaar_ReqDate;
                    bd.Aadhaar_status = List.Aadhaar_status;
                    bd.Aadhaar_AppDate = List.Aadhaar_AppDate;
                    bd.PAN_AppDate = List.PAN_AppDate;
                    bd.PAN_ReqDate = List.PAN_ReqDate;
                    bd.PanStatus = List.PanStatus;
                    //
                    bd.paymenttype = List.paymenttype;
                    bd.propertyaddress = List.propertyaddress;
                    bd.propertypreference = List.propertypreference;
                    bd.plccost = List.plccost;
                    bd.refno = List.refno;
                    bd.propertyid = List.propertyid;
                    bd.loanid = List.loanid;
                    bd.propertytype = List.propertytype;
                    bd.incomegroup = List.incomegroup;
                    bd.phase = List.phase;
                    bd.plotdesp = List.plotdesp;
                    bd.northwest = List.northwest;
                    bd.northeast = List.northeast;
                    bd.southwest = List.southwest;
                    bd.southeast = List.southeast;
                    bd.sapplicantname = List.sapplicantname;
                    bd.sfathername = List.sfathername;
                    bd.smothername = List.smothername;
                    bd.scategory = List.scategory;
                    bd.scorraddress = List.scorraddress;
                    bd.spermanentaddress = List.spermanentaddress;
                    bd.scity = List.scity;
                    bd.sstate = List.sstate;
                    bd.spincode = List.spincode;
                    bd.snationality = List.snationality;
                    bd.squalification = List.squalification;
                    bd.smobileno = List.smobileno;
                    bd.salternatemobileno = List.salternatemobileno;
                    bd.semailid = List.semailid;
                    bd.sdob = List.sdob;
                    bd.spanno = List.spanno;
                    bd.saadharno = List.saadharno;
                    bd.smaritialstatus = List.smaritialstatus;
                    bd.sanniversarydate = List.sanniversarydate;
                    bd.soccupation = List.soccupation;
                    bd.spassport = List.spassport;
                    bd.sresidentialstatus = List.sresidentialstatus;
                    bd.sphoto = List.sphoto;
                    bd.saadharphoto = List.saadharphoto;
                    bd.spanphoto = List.spanphoto;
                    bd.category = List.category;
                    bd.pcity = List.pcity;
                    bd.pstate = List.pstate;
                    bd.ppincode = List.ppincode;
                    var csr = gidref();

                    int year = DateTime.Now.Year, syear = year + 1;
                    string refyear = year.ToString().Substring(2, 2) + "-" + syear.ToString().Substring(2, 2);
                    string refno = "ODH HOMES/" + refyear + "/" + csr;
                    //                                
                    bd.refno = refno;

                    int propertyid = 0, count = 0; string loanid = ""; Int64 om = 0;
                    if (bd.mobileno != null && Int64.TryParse(bd.mobileno, out om))
                    {
                        propertyid = Convert.ToInt32(bd.mobileno.Substring(bd.mobileno.Length - 4));
                        count = db.appltabs.Count(d => d.propertyid == propertyid);
                        while (count > 0)
                        {
                            propertyid = Convert.ToInt32(gid().Substring(0, 4));
                            count = db.appltabs.Count(d => d.propertyid == propertyid);
                        }
                        if (bd.paymenttype == "EMI")
                        {
                            loanid = bd.mobileno + "0";
                            count = db.appltabs.Count(d => d.loanid == loanid);
                            while (count > 0)
                            {
                                loanid = gid() + "A";
                                count = db.appltabs.Count(d => d.propertyid == propertyid);
                            }
                        }
                    }
                    else
                    {
                        propertyid = Convert.ToInt32(bd.mobileno.Substring(bd.mobileno.Length - 4));
                        count = db.appltabs.Count(d => d.propertyid == propertyid);
                        while (count > 0)
                        {
                            propertyid = Convert.ToInt32(gid().Substring(0, 4));
                            count = db.appltabs.Count(d => d.propertyid == propertyid);
                        }
                        if (bd.paymenttype == "EMI")
                        {
                            loanid = loanid = gid() + "A";
                            count = db.appltabs.Count(d => d.loanid == loanid);
                            while (count > 0)
                            {
                                loanid = gid() + "A";
                                count = db.appltabs.Count(d => d.propertyid == propertyid);
                            }
                        }
                    }
                    bd.propertyid = propertyid;
                    bd.loanid = loanid;
                    db.appltabs.Add(bd);
                    db.SaveChanges();


                    RevivalTab rt = new RevivalTab();
                    rt.newbondid = newbondid;
                    rt.status = 1;
                    db.RevivalTabs.Add(rt);
                    db.SaveChanges();

                    NewLogin nl = new NewLogin();
                    nl.UserName = newbondid;
                    nl.Password = List.mobileno;
                    nl.Mobile = List.mobileno;
                    nl.type = "Customer";
                    nl.status = 1;
                    nl.loginstatus = 0;
                    db.NewLogins.Add(nl);
                    db.SaveChanges();

                    ViewData["newbondid"] = newbondid;
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "InsertAppTab";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.Parameters.AddWithValue("@introducerid", adr.AgencyCode);
                    cmd.Parameters.AddWithValue("@plancode", pr.Id);
                    cmd.Parameters.AddWithValue("@planname", pt.shortcutname);
                    cmd.Parameters.AddWithValue("@payment", List.payment);
                    cmd.Parameters.AddWithValue("@bondid", bondid);
                    cmd.Parameters.AddWithValue("@mode", List.mode);
                    cmd.Parameters.AddWithValue("@formdate", List.formdate);
                    cmd.Parameters.AddWithValue("@pdate", List.pdate);
                    cmd.Parameters.AddWithValue("@term", List.term);
                    cmd.Parameters.AddWithValue("@opid", List.opid);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                        MyClass.Sendmsg(List.mobileno, "Dear " + List.name + ", your Loginid:" + newbondid + " Password:" + List.mobileno + " For your A/c details please visit "+cg.HeadOffice);
                        MyClass.Sendmsg(List.mobileno, "Dear " + List.name + " your Application no- " + newbondid + " has been activated with Rs. " + List.bookingamount + " in the plan " + pt.Planname + "Thank you for your kind believe us for help contact. "+cg.CompanyName);
                        Response.Write("<script>alert('" + mr.custname + " " + List.name + " created Successfully....')</script>");
                        ViewBag.msg = mr.custname + " created Successfully....";
                        NewBondid = nnewbondid;

                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }
                    tempappltab ob = db.tempappltabs.Single(i => i.newbondid == nnewbondid);
                    db.tempappltabs.Remove(ob);
                    db.SaveChanges();
                    return RedirectToAction("BondApproval");
                }
                if (nnewbondid != null && printstatus == 2)
                {
                    tempappltab ob = db.tempappltabs.Single(i => i.newbondid == nnewbondid);
                    db.tempappltabs.Remove(ob);
                    db.SaveChanges();
                    return RedirectToAction("BondApproval");
                }

                    #endregion
                return View(vlist);
            }
        }

        [HttpGet]
        public ActionResult ApproveRenewal(string nnewbondid, int status = 0, int payno = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<InstallmentList> dplist = new List<InstallmentList>();
                if (status == 0)
                {
                    int b = 0;
                    double penality = 0;
                    var Inslist = (from a in db.TempInstallmenttabs where a.status == 1 select new { a.newbondid }).Distinct();
                    Double payamount = 1;
                    foreach (var i in Inslist.ToList())
                    {
                        var rlist = (from p in db.TempInstallmenttabs where p.newbondid == i.newbondid && p.status == 1 select new { p.paymentno }).Distinct();
                        foreach (var r in rlist.ToList())
                        {
                            var ll = (from p in db.TempInstallmenttabs where p.newbondid == i.newbondid && p.paymentno == r.paymentno && p.status == 1 select p.installmentno).Max();
                            var dd = db.TempInstallmenttabs.Single(s => s.newbondid == i.newbondid && s.paymentno == r.paymentno && s.installmentno == ll && s.status == 1);
                            var insta = db.Installmenttabs.FirstOrDefault(s => s.newbondid == i.newbondid && s.installmentno == ll);
                            penality = insta == null ? 0 : insta.Penality;                            
                            payamount = (from u in db.TempInstallmenttabs where u.newbondid == i.newbondid && u.paymentno == r.paymentno && u.installmentno == ll && u.status == 1 select u.payamount).DefaultIfEmpty(0).Sum();
                            dplist.Add(new InstallmentList { id2 = "m" + b, penality = penality, paymentdate = Convert.ToDateTime(dd.paymentdate), IIDD = "R" + b, Id = b, newbondid = i.newbondid, paymentno = r.paymentno, payamount = payamount, chequeno = dd.chequeno, bank = dd.bank, Chequedate = Convert.ToDateTime(dd.Chequedate), Chequeamount = dd.ChequeAmount, IFSC = dd.IFSCCode, Bbranch = dd.Bbranch, ACholdername = dd.transactiontype, paymethod = dd.paymethod });
                        }
                        b = b + 1;
                    }
                }
                if (status == 1)
                {
                    string localIP = "";
                    foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                    {
                        if (nic.OperationalStatus == OperationalStatus.Up)
                        {
                            localIP += nic.GetPhysicalAddress().ToString();
                            break;
                        }
                    }
                    var cr = db.appltabs.Single(c => c.newbondid == nnewbondid);
                    var min = (from l in db.TempInstallmenttabs where l.newbondid == nnewbondid && l.paymentno == payno select l.installmentno).Min();
                    var max = (from l in db.TempInstallmenttabs where l.newbondid == nnewbondid && l.paymentno == payno select l.installmentno).Max();
                    //var latefn = (from l in db.TempInstallmenttabs where l.newbondid == nnewbondid && l.paymentno == payno select l.latefine).Sum();
                    var list = db.TempInstallmenttabs.Single(n => n.newbondid == nnewbondid && n.installmentno == max && n.paymentno == payno);

                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "insertrcptinfo";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;
                    
                    cmd.Parameters.AddWithValue("@newbondid", cr.newbondid);
                    cmd.Parameters.AddWithValue("@planname", cr.planname);
                    cmd.Parameters.AddWithValue("@term", cr.term);
                    cmd.Parameters.AddWithValue("@mode", cr.mode);
                    cmd.Parameters.AddWithValue("@latefine", list.latefine);
                    cmd.Parameters.AddWithValue("@from", min);
                    cmd.Parameters.AddWithValue("@to", max);
                    cmd.Parameters.AddWithValue("@paymethod", list.paymethod);
                    cmd.Parameters.AddWithValue("@pdate", list.paymentdate);
                    cmd.Parameters.AddWithValue("@checkorddno", list.chekddno);
                    cmd.Parameters.AddWithValue("@drawno", list.drawno);
                    cmd.Parameters.AddWithValue("@relief", list.reliefrs);
                    cmd.Parameters.AddWithValue("@payamount", list.payamount - list.latefine);
                    cmd.Parameters.AddWithValue("@amountinword", list.amountinword);
                    cmd.Parameters.AddWithValue("@opid", list.opid);
                    cmd.Parameters.AddWithValue("@macaddress", localIP);
                    cmd.Parameters.AddWithValue("@time", DateTime.Now.ToShortTimeString());
                    cmd.Parameters.AddWithValue("@transactiontype", list.transactiontype);

                    SqlParameter p = new SqlParameter("@paymentno", SqlDbType.Int);
                    p.Direction = ParameterDirection.Output;
                    cmd.Parameters.Add(p);

                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                        paymentno = Convert.ToInt32(cmd.Parameters["@paymentno"].Value.ToString());
                        var tlist = (from n in db.TempInstallmenttabs where n.newbondid == nnewbondid && n.paymentno == payno select n).ToList();
                        foreach (var comm in tlist)
                        {
                            db.TempInstallmenttabs.Remove(comm);
                        }
                        db.SaveChanges();
                        //MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ",Your renewal of Rs " + list.payamount + " is received for plan " + cr.planname + " for Bond: " + nnewbondid + " on date: " + list.paymentdate);
                        string Paymethod = "", chequeno = "";
                        if (list.paymethod == "banktransaction")
                        {
                            Paymethod = "Bank Transaction" + "/" + list.transactiontype;
                            chequeno = "Transaction Id " + list.chequeno;
                        }
                        else if (list.paymethod != "Cash")
                        {
                            chequeno = list.paymethod + " No " + list.chequeno;
                            Paymethod = list.paymethod;
                        }
                        else
                        {
                            Paymethod = list.paymethod;
                        }
                        MyClass.Sendmsg(cr.mobileno, "Dear " + cr.name + ", Your EMI of Rs." + list.payamount + " for the month " + Convert.ToDateTime(list.paymentdate).ToString("MMMM") + " for loan a/c no. " + cr.loanid + " vide " + Paymethod + " " + chequeno + " has been deposited successfully. Regards- " + cg.CompanyName);
                                
                        ViewBag.msg = "Renewel Done Successfully....";
                        return RedirectToAction("ApproveRenewal");
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }
                    return RedirectToAction("ApproveRenewal");
                }
                return View(dplist);

            }
        }
        [HttpPost]
        public ActionResult ApproveRenewal(string reason, string bond, int paymentno = 0, int penality = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var ap = db.appltabs.Single(a => a.newbondid == bond);
                var Amount = (from n in db.TempInstallmenttabs where n.newbondid == bond && n.paymentno == paymentno && n.status == 1 select n.payamount).Sum();
                var insta = (from n in db.TempInstallmenttabs where n.newbondid == bond && n.paymentno == paymentno && n.status == 1 select n.installmentno).Max();
                var tlist = (from n in db.TempInstallmenttabs where n.newbondid == bond && n.paymentno == paymentno && n.status == 1 select n).ToList();
                foreach (var comm in tlist)
                {
                    comm.status = 2;
                    comm.Reason = reason;
                    comm.Penality = penality;
                    //db.Entry(comm).State = EntityState.Modified;
                    db.Entry<TempInstallmenttab>(comm).State = System.Data.Entity.EntityState.Modified;

                }
                db.SaveChanges();
                MyClass.Sendmsg(ap.mobileno, "Dear " + ap.name + ",Your Cheque of Rs " + Amount + " is Rejected for plan " + ap.planname + " of Bond: " + bond + " due to: " + reason);
                return RedirectToAction("ApproveRenewal");
            }
        }

        [HttpGet]
        public ActionResult ChequeDuplicateReceipt()
        {
            List<DupliReceipt> dplist = new List<DupliReceipt>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult ChequeDuplicateReceipt(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {


                var ta = db.tempappltabs.Single(t => t.newbondid == newbondid);
                if (ta.paymethod == "Cheque" || ta.paymethod == "banktransaction")
                {
                    var chequeamount = "";
                    var chequedate = "";
                    var chequeno = "";

                    if (ta.paymethod == "Cheque")
                    {
                        chequeamount = "Amount of Cheque (Rs.)";
                        chequedate = "Date of Cheque";
                        chequeno = "Cheque Number";
                    }
                    else if (ta.paymethod == "banktransaction")
                    {
                        chequeamount = "Amount of transaction (Rs.)";
                        chequedate = "Date of transaction";
                        chequeno = "Transaction Number";
                    }
                    List<tempcheque> bond = new List<tempcheque>();
                    bond.Add(new tempcheque { colChequedate = chequedate, colchequeno = chequeno, colChequeAmount = chequeamount, newbondid = ta.newbondid, name = ta.name, nolandunit = ta.nolandunit, opid = ta.opid, bookingamount = ta.bookingamount, bank = ta.bank, Account = ta.Account, chequeno = ta.chequeno, ACholdername = ta.ACholdername, Branch = ta.Branch, IFSCCode = ta.IFSCCode, ChequeAmount = ta.ChequeAmount, Chequedate = ta.Chequedate, Chequeimage = ta.Chequeimage });

                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "MasterAckReceipt.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");


                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                    return View();
                }
                else
                {
                    con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandText = "TempBond";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Connection = con;
                    cmd.Parameters.AddWithValue("@newbondid", newbondid);


                    try
                    {
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }

                    catch (Exception e)
                    {
                        ViewBag.msg = e.Message;
                    }
                    finally
                    {
                        con.Close();
                    }

                    List<Bond_report> bond = new List<Bond_report>();
                    bond = db.Bond_reports.ToList();
                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "report.rpt"));
                    rd.SetDataSource(bond);

                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();


                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");



                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                    return View();
                }
            }
        }
      
        [HttpGet]
        public ActionResult DateWiseChequeClearCollection()
        {
            List<Chequecollection> model = new List<Chequecollection>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["sdate"] = string.Empty;
                ViewData["edate"] = string.Empty;
                return View(model);
            }
        }
        [HttpPost]
        public ActionResult DateWiseChequeClearCollection(DateTime sdate, DateTime edate)
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["sdate"] = sdate;
                ViewData["edate"] = edate;
                List<Chequecollection> model = new List<Chequecollection>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {

                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("chequeclearcollpro", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sdate", sdate);
                    cmd.Parameters.AddWithValue("@edate", edate);
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);


                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {
                        var rs = new Chequecollection();
                        rs.newbondid = sdr["newbondid"].ToString();
                        rs.name = sdr["name"].ToString();
                        rs.bank = sdr["bank"].ToString();
                        rs.chequeno = sdr["chequeno"].ToString();
                        rs.pdate = Convert.ToDateTime(sdr["paydate"]);
                        rs.amount = Convert.ToDouble(sdr["amount"]);
                        rs.sdate = Convert.ToDateTime(sdr["sdate"]);
                        rs.edate = Convert.ToDateTime(sdr["edate"]);
                        rs.opid = sdr["opid"].ToString();
                        model.Add(rs);
                    }


                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "chequeclearcoll.rpt"));
                    rd.SetDataSource(model);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();
                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }

                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    con.Close();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult FundManagement()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                return View();
            }
        }
        
        [HttpGet]
        public ActionResult ChequeRegis()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                return View(custlist);
            }
        }
        [HttpPost]
        public ActionResult ChequeRegis(DateTime sdate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {
                    //DateTime sdate = DateTime.Now.Date.AddDays(-1);
                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("chequeregister", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sdate", sdate);
                    cmd.Parameters.AddWithValue("@type", "ChequerRegis");
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {
                        var rs = new DatewiseCustomerList();
                        rs.newbondid = sdr["acholdername"].ToString();
                        rs.name = sdr["chequeno"].ToString();
                        rs.newintroducerid = sdr["bank"].ToString();
                        rs.payment = Convert.ToDouble(sdr["chequeamount"]);
                        rs.formdate = Convert.ToDateTime(sdr["chequedate"]);
                        custlist.Add(rs);
                    }
                }
                catch (SqlException e)
                {
                    ViewBag.msg = e.Message;

                }
                finally
                {
                    con.Close();
                }
                stdate = sdate;
                return View(custlist);

            }
        }

        [HttpGet]
        public ActionResult PrintChequeRegis()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {
                    var com = db.CompanyInfos.Single(s => s.Id == 1);
                    DateTime sdate = DateTime.Now.Date.AddDays(-1);
                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("chequeregister", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sdate", stdate);
                    cmd.Parameters.AddWithValue("@type", "ChequerRegis");
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {

                        var rs = new DatewiseCustomerList();
                        rs.newbondid = sdr["acholdername"].ToString();
                        rs.name = sdr["chequeno"].ToString();
                        rs.newintroducerid = sdr["bank"].ToString();
                        rs.payment = Convert.ToDouble(sdr["chequeamount"]);
                        rs.formdate = Convert.ToDateTime(sdr["chequedate"]);
                        rs.address = com.Address;
                        rs.companyname = com.CompanyName;
                        rs.emailid = com.Emailid;
                        rs.domainname = com.HeadOffice;
                        custlist.Add(rs);
                    }


                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "ChequeRegisterList.rpt"));
                    rd.SetDataSource(custlist);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();
                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    con.Close();
                }
                return View();
            }
        }

        [HttpGet]
        public ActionResult BankRegis()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                return View(custlist);
            }
        }
        [HttpPost]
        public ActionResult BankRegis(DateTime sdate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {
                    //DateTime sdate = DateTime.Now.Date.AddDays(-1);
                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("chequeregister", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sdate", sdate);
                    cmd.Parameters.AddWithValue("@type", "BankRegis");
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {
                        var rs = new DatewiseCustomerList();
                        rs.newintroducerid = sdr["bank"].ToString();
                        rs.newbondid = sdr["accountno"].ToString();
                        rs.branch = sdr["transactiontype"].ToString();
                        rs.name = sdr["chequeno"].ToString();
                        rs.payment = Convert.ToDouble(sdr["chequeamount"]);
                        rs.formdate = Convert.ToDateTime(sdr["chequedate"]);
                        rs.sdate = sdate;
                        custlist.Add(rs);
                    }
                }
                catch (SqlException e)
                {
                    ViewBag.msg = e.Message;

                }
                finally
                {
                    con.Close();
                }
                stdate = sdate;
                return View(custlist);

            }
        }

        [HttpGet]
        public ActionResult PrintBankTransRegis()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DatewiseCustomerList> custlist = new List<DatewiseCustomerList>();
                SqlCommand cmd = new SqlCommand();
                con.ConnectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
                cmd.Connection = con;
                SqlDataReader sdr;
                try
                {
                    var com = db.CompanyInfos.Single(s => s.Id == 1);
                    SqlDataAdapter da = new SqlDataAdapter();
                    cmd = new SqlCommand("chequeregister", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@sdate", stdate);
                    cmd.Parameters.AddWithValue("@type", "BankRegis");
                    cmd.Parameters.AddWithValue("@opid", User.Identity.Name);
                    con.Open();
                    sdr = cmd.ExecuteReader();
                    while (sdr.Read())
                    {

                        var rs = new DatewiseCustomerList();
                        rs.newintroducerid = sdr["bank"].ToString();
                        rs.newbondid = sdr["accountno"].ToString();
                        rs.branch = sdr["transactiontype"].ToString();
                        rs.name = sdr["chequeno"].ToString();
                        rs.payment = Convert.ToDouble(sdr["chequeamount"]);
                        rs.formdate = Convert.ToDateTime(sdr["chequedate"]);
                        rs.sdate = stdate;
                        rs.address = com.Address;
                        rs.companyname = com.CompanyName;
                        rs.emailid = com.Emailid;
                        rs.domainname = com.HeadOffice;
                        custlist.Add(rs);
                    }


                    ReportDocument rd = new ReportDocument();
                    rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PrintbankRegisterList.rpt"));
                    rd.SetDataSource(custlist);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();
                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    con.Close();
                }
                return View();
            }
        }


        /*------------------------------Branch--------------------------------------------------*/

        public JsonResult AgentIdAC(string term)
        {

            var list = db.AgentDetails.Where(d => d.NewAgentId.ToUpper().Contains(term.ToUpper())).Select(e => new { e.NewAgentId, e.name }).ToList();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        public ActionResult AgentKYC()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult AgentKYC(AgentDetail model, string command)
        {
            if (User.Identity.IsAuthenticated)
            {
                if (command == "Update")
                {
                    var agd = db.AgentDetails.Single(d => d.NewAgentId == model.NewAgentId);
                    agd.OtherMobile = model.OtherMobile;
                    agd.Panno = model.Panno;
                    agd.Passportno = model.Passportno;
                    agd.Drivinglno = model.Drivinglno;
                    agd.BankName = model.BankName;
                    agd.BankBranchName = model.BankBranchName;
                    agd.BankAccountno = model.BankAccountno;
                    agd.IFCCode = model.IFCCode;
                    agd.BankAddress = model.BankAddress;
                    agd.Aadhaar_No = model.Aadhaar_No;
                    if (agd.Aadhaar_No == null || agd.Aadhaar_No == "" || agd.Aadhaar_No == "N/A" || agd.Aadhaar_No == "NA")
                    {
                        agd.Aadhaar_status = 0;
                    }
                    else
                    {
                        agd.Aadhaar_status = 1;
                        agd.Aadhaar_AppDate = DateTime.Now.Date;
                    }
                    if (agd.Panno == null || agd.Panno == "" || agd.Aadhaar_No == "N/A" || agd.Aadhaar_No == "NA")
                    {
                        agd.PanStatus = 0;
                    }
                    else
                    {
                        agd.PanStatus = 1;
                        agd.PAN_AppDate = DateTime.Now.Date;
                    }
                    //db.Entry(agd).State = EntityState.Modified;
                    db.Entry<AgentDetail>(agd).State = System.Data.Entity.EntityState.Modified;
                    db.SaveChanges();
                    ViewBag.message = "Agent Updated Successfully.";
                }
                else if (command == "Search")
                {
                    var list = db.AgentDetails.Single(s => s.NewAgentId == model.NewAgentId);
                    return View(list);
                }
                return View(model);
            }
            return RedirectToAction("Logout");
        }

        #endregion

        [HttpGet]
        public ActionResult DailyClosing()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult DailyClosing(DailyDepositTab ddt, string date, string remark1, string remark2, Double transferamount1 = 0, Double transferamount2 = 0, Double Grandtotalcash = 0, Double bal = 0)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                DateTime sdate = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                int count = (from a in db.DailyDepositTabs where a.date == sdate && a.opid == User.Identity.Name && a.closingtype == "New" select a).Count();
                int tempcount = (from a in db.TempDailyDepositTabs where a.date == sdate && a.opid == User.Identity.Name && a.closingtype == "New" select a).Count();
                if (tempcount == 0 && count == 0)
                {
                    var op = db.Branchtabs.Single(a => a.BranchCode == User.Identity.Name);
                    Double chequebookpen = (from a in db.tempappltabs where a.paymethod == "Cheque" && a.branchcode == op.BranchCode && a.status == 1 && a.formdate == sdate select a.bookingamount).DefaultIfEmpty(0).Sum();
                    Double chequerenpen = (from a in db.TempInstallmenttabs where a.paymethod == "Cheque" && a.branch == op.BranchCode && a.status == 1 && a.paymentdate == sdate select a.payamount).DefaultIfEmpty(0).Sum();
                    Double remailning = 0;
                    if (ddt.transfertype == "Bank")
                    {
                        remailning = bal - transferamount1;
                    }
                    else if (ddt.transfertype == "Cash")
                    {
                        remailning = bal - transferamount2;
                    }
                    #region select
                    if (ddt.transfertype != "select")
                    {
                        int trid = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name select a.trid).DefaultIfEmpty(0).Max() + 1;
                        DailyDepositTab dt = new DailyDepositTab();
                        dt.date = sdate;
                        dt.twothousand = ddt.twothousand;
                        dt.fivehundred = ddt.fivehundred;
                        dt.twohundred = ddt.twohundred;
                        dt.hundred = ddt.hundred;
                        dt.fifty = ddt.fifty;
                        dt.twenty = ddt.twenty;
                        dt.ten = ddt.ten;
                        dt.five = ddt.five;
                        dt.two = ddt.two;
                        dt.one = ddt.one;

                        //-----Cashrecieved----
                        dt.RecieveCashBookingApp = ddt.RecieveCashBookingApp;
                        dt.RecieveBankBookingApp = ddt.RecieveBankBookingApp;
                        dt.RecieveChequeBookingApp = ddt.RecieveChequeBookingApp;
                        dt.RecieveCashRenApp = ddt.RecieveCashRenApp;
                        dt.RecieveBankRenApp = ddt.RecieveBankRenApp;
                        dt.RecieveChequeRenApp = ddt.RecieveChequeRenApp;
                        //-----Pendingrecieved----
                        dt.RecieveBankBookingPending = ddt.RecieveBankBookingPending;
                        dt.RecieveChequeBookingPending = chequebookpen;
                        dt.RecieveBankRenPending = ddt.RecieveBankRenPending;
                        dt.RecieveChequeRenPending = chequerenpen;
                        //-------Return-------------
                        dt.ReturnCashVoucher = ddt.ReturnCashVoucher;
                        dt.ReturnBanVoucher = ddt.ReturnBanVoucher;
                        dt.ReturnChequeVoucher = ddt.ReturnChequeVoucher;
                        dt.ReturnCashSpot = ddt.ReturnCashSpot;
                        dt.ReturnBankSpot = ddt.ReturnBankSpot;
                        dt.ReturnCashExp = ddt.ReturnCashExp;
                        dt.ReturnChequeExp = ddt.ReturnChequeExp;
                        dt.ReturnBankExp = ddt.ReturnBankExp;
                        //----------Other-----------
                        dt.Latefine = ddt.Latefine;
                        dt.Relief = ddt.Relief;
                        dt.total = ddt.total;
                        dt.opid = User.Identity.Name;
                        dt.branchcode = op.BranchCode;
                        dt.status = 0;
                        dt.bankappdate = DateTime.Now.Date;
                        dt.RejectionReason = ddt.RejectionReason;
                        dt.TotalCashamount = Grandtotalcash;
                        dt.TotalChequeamount = ddt.TotalChequeamount;
                        dt.TotalBankamount = ddt.TotalBankamount;
                        dt.Depositedamount = bal;
                        dt.bankname = ddt.bankname;
                        dt.transfertype = ddt.transfertype;
                        dt.trid = trid;
                        if (ddt.transfertype == "Bank")
                        {
                            dt.transferamount = transferamount1;
                            dt.remainingamount = bal - transferamount1;
                            dt.Remark = remark1;
                            dt.bankapp = 0;
                        }
                        else if (ddt.transfertype == "Cash")
                        {
                            dt.transferamount = transferamount2;
                            dt.remainingamount = bal - transferamount2;
                            dt.Remark = remark2;
                            dt.bankapp = 1;
                        }
                        dt.closingtype = "New";
                        dt.ClosingBalance = ddt.ClosingBalance;
                        dt.OpeningBalance = ddt.OpeningBalance;
                        dt.matchingdate = sdate;
                        db.DailyDepositTabs.Add(dt);
                        db.SaveChanges();
                        var clcount = (from c in db.ClosingAmount_Tabs where c.opid == User.Identity.Name && c.status == 0 select c).Count();
                        double beforedue = (from c in db.ClosingAmount_Tabs where c.opid == User.Identity.Name && c.status == 0 select c.remaininamount).DefaultIfEmpty().Sum();
                        if (clcount > 0)
                        {
                            var cl = db.ClosingAmount_Tabs.Single(c => c.opid == User.Identity.Name && c.status == 0);
                            cl.status = 1;
                            db.SaveChanges();
                        }
                        if (remailning > 0)
                        {
                            var max = (from a in db.ClosingAmount_Tabs where a.opid == User.Identity.Name select a.Trid).DefaultIfEmpty(0).Max() + 1;
                            ClosingAmount_Tab ct = new ClosingAmount_Tab();
                            ct.remaininamount = remailning;
                            ct.Amount = bal;
                            ct.depositamount = ddt.total;
                            ct.Trid = max;
                            ct.status = 0;
                            ct.date = sdate;
                            ct.opid = User.Identity.Name;
                            db.ClosingAmount_Tabs.Add(ct);
                            db.SaveChanges();
                        }

                    }
                    #endregion
                    #region other
                    else if (ddt.transfertype == "select")
                    {

                        int trid = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name select a.trid).DefaultIfEmpty(0).Max() + 1;
                        TempDailyDepositTab dt = new TempDailyDepositTab();
                        dt.date = sdate;
                        dt.twothousand = ddt.twothousand;
                        dt.fivehundred = ddt.fivehundred;
                        dt.twohundred = ddt.twohundred;
                        dt.hundred = ddt.hundred;
                        dt.fifty = ddt.fifty;
                        dt.twenty = ddt.twenty;
                        dt.ten = ddt.ten;
                        dt.five = ddt.five;
                        dt.two = ddt.two;
                        dt.one = ddt.one;

                        //-----Cashrecieved----
                        dt.RecieveCashBookingApp = ddt.RecieveCashBookingApp;
                        dt.RecieveBankBookingApp = ddt.RecieveBankBookingApp;
                        dt.RecieveChequeBookingApp = ddt.RecieveChequeBookingApp;
                        dt.RecieveCashRenApp = ddt.RecieveCashRenApp;
                        dt.RecieveBankRenApp = ddt.RecieveBankRenApp;
                        dt.RecieveChequeRenApp = ddt.RecieveChequeRenApp;
                        //-----Pendingrecieved----
                        dt.RecieveBankBookingPending = ddt.RecieveBankBookingPending;
                        dt.RecieveChequeBookingPending = chequebookpen;
                        dt.RecieveBankRenPending = ddt.RecieveBankRenPending;
                        dt.RecieveChequeRenPending = chequerenpen;
                        //-------Return-------------
                        dt.ReturnCashVoucher = ddt.ReturnCashVoucher;
                        dt.ReturnBanVoucher = ddt.ReturnBanVoucher;
                        dt.ReturnChequeVoucher = ddt.ReturnChequeVoucher;
                        dt.ReturnCashSpot = ddt.ReturnCashSpot;
                        dt.ReturnBankSpot = ddt.ReturnBankSpot;
                        dt.ReturnCashExp = ddt.ReturnCashExp;
                        dt.ReturnChequeExp = ddt.ReturnChequeExp;
                        dt.ReturnBankExp = ddt.ReturnBankExp;
                        //----------Other-----------
                        dt.Latefine = ddt.Latefine;
                        dt.Relief = ddt.Relief;
                        dt.total = ddt.total;
                        dt.opid = User.Identity.Name;
                        dt.branchcode = op.BranchCode;
                        dt.status = 0;
                        dt.bankappdate = DateTime.Now.Date;
                        dt.RejectionReason = ddt.RejectionReason;
                        dt.TotalCashamount = Grandtotalcash;
                        dt.TotalChequeamount = ddt.TotalChequeamount;
                        dt.TotalBankamount = ddt.TotalBankamount;
                        dt.Depositedamount = bal;
                        dt.bankname = ddt.bankname;
                        dt.transfertype = ddt.transfertype;
                        dt.trid = trid;
                        if (ddt.transfertype == "Bank")
                        {
                            dt.transferamount = transferamount1;
                            dt.remainingamount = bal - transferamount1;
                            dt.Remark = remark1;
                            dt.bankapp = 0;
                        }
                        else if (ddt.transfertype == "Cash")
                        {
                            dt.transferamount = transferamount2;
                            dt.remainingamount = bal - transferamount2;
                            dt.Remark = remark2;
                            dt.bankapp = 1;
                        }
                        dt.OpeningBalance = ddt.OpeningBalance;
                        dt.ClosingBalance = ddt.ClosingBalance;
                        dt.closingtype = "New";
                        dt.matchingdate = sdate;
                        db.TempDailyDepositTabs.Add(dt);
                        db.SaveChanges();
                        var clcount = (from c in db.ClosingAmount_Tabs where c.opid == User.Identity.Name && c.status == 0 select c).Count();
                        double beforedue = (from c in db.ClosingAmount_Tabs where c.opid == User.Identity.Name && c.status == 0 select c.remaininamount).DefaultIfEmpty().Sum();
                        if (clcount > 0)
                        {
                            var cl = db.ClosingAmount_Tabs.Single(c => c.opid == User.Identity.Name && c.status == 0);
                            cl.status = 1;
                            db.SaveChanges();
                        }
                        var max = (from a in db.ClosingAmount_Tabs where a.opid == User.Identity.Name select a.Trid).DefaultIfEmpty(0).Max() + 1;
                        ClosingAmount_Tab ct = new ClosingAmount_Tab();
                        ct.remaininamount = bal;
                        ct.Amount = bal;
                        ct.depositamount = ddt.total;
                        ct.Trid = max;
                        ct.status = 0;
                        ct.date = sdate;
                        ct.opid = User.Identity.Name;
                        db.ClosingAmount_Tabs.Add(ct);
                        db.SaveChanges();

                    }
                    #endregion

                }
                else
                {
                    Response.Write("<script>alert('This date is already closed')</script>");
                }
                return View();
            }
        }
        
        [HttpGet]
        public ActionResult DailyClosingReport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DailyDepositTab> daily = new List<DailyDepositTab>();
                return View(daily);
            }
        }
        [HttpPost]
        public ActionResult DailyClosingReport(DateTime sdate, DateTime edate)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DailyDepositTab> daily = (from a in db.DailyDepositTabs where a.closingtype == "New" && a.date >= sdate && a.date <= edate && a.opid == User.Identity.Name select a).ToList();
                return View(daily);
            }
        }
        
        [HttpGet]
        public ActionResult MatchingDailyClosing()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                ViewData["pagename"]=TempData["pagename"];
                return View();
            }
        }
        [HttpPost]
        public ActionResult MatchingDailyClosing(DailyDepositTab ddt,string opid,string pagename)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                
                
                DateTime maxdate = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name where a.status==1 select a.date).DefaultIfEmpty().Max();
                int maxtrid = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name where a.status == 1 && a.date==maxdate select a.trid).DefaultIfEmpty().Max();
                DailyDepositTab dt = db.DailyDepositTabs.Single(a => a.opid == User.Identity.Name && a.date == maxdate && a.trid==maxtrid);
                var dcount = (from a in db.DailyDepositTabs where a.opid == User.Identity.Name  && a.date == maxdate select a).Count();
                var clcount = (from c in db.ClosingMatchingTabs where c.date == maxdate && c.opid == User.Identity.Name && c.pagename==pagename select c).Count();
                if ((clcount == 0) && (dt.twothousand != ddt.twothousand || dt.fivehundred != ddt.fivehundred || dt.twohundred != ddt.twohundred || dt.hundred != ddt.hundred || dt.fifty != ddt.fifty || dt.twenty != ddt.twenty || dt.ten != ddt.ten || dt.five != ddt.five || dt.two != ddt.two || dt.one != ddt.one))
                {
                    Response.Write("<script>alert('field does not match')</script>");
                    return RedirectToAction(pagename);
                }
                else
                {
                    ClosingMatchingTab ct = new ClosingMatchingTab();
                    ct.date = maxdate;
                    ct.opid = User.Identity.Name;
                    ct.pagename = pagename;
                    ct.remark="Verified";
                    ct.status=1;
                    db.ClosingMatchingTabs.Add(ct);
                    db.SaveChanges();
                    return RedirectToAction(pagename);
                }
                return View();
            }
        }
        
        public ActionResult Logout()
        {
            FormsAuthentication.SignOut();
            return RedirectToAction("Login", "Home");
        }
                
        public JsonResult AutoCompletememberid(string term)
        {
            var list = (from r in db.Member_tabs where r.NewMemberId.ToLower().Contains(term.ToLower()) || r.MemberName.ToLower().Contains(term.ToLower()) select new { r.NewMemberId, r.MemberName }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteAgentid(string term)
        {

            var list = (from r in db.AgentDetails where r.NewAgentId.ToLower().Contains(term.ToLower()) || r.name.ToLower().Contains(term.ToLower()) select new { r.NewAgentId, r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AutoCompleteRelations(string term)
        {

            var list = (from r in db.relations where r.relations.ToLower().Contains(term.ToLower()) select new { r.relations }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }

        public bool IsLoggedIn()
        {

            try
            {
                if (User.Identity.IsAuthenticated)
                {
                    int count = (from n in db.NewLogins where n.UserName == User.Identity.Name select n.UserName).Count();
                    if (count == 1)
                    {
                        var log = db.NewLogins.Single(a => a.UserName == User.Identity.Name);
                        if (log.status == 1 && log.type == "Branch")
                        {
                            return true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return false;
            }
            return false;
        }

        /*public JsonResult GetPlotCost(int projectid) {
            var rt = db.RateTabs.Single(t => t.projectid == projectid && t.term == term && t.plotsize == 50);
            var rp = plotsize / 50;
            totalcon = rt.plotcost * rp;
        }*/

        public ActionResult TempPage() {
            
            return View();
        
        }

        #region V I S H A L
        public ActionResult Print()
        {

            return View();
        }


        [HttpGet]
        public ActionResult AgentWelcomeLetter(string AgentId, string Recogniser)
        {
            if (Recogniser == "Print")
            {

                var l = db.AgentDetails.Where(o => o.NewAgentId.ToUpper().Contains(AgentId.ToUpper())).Select(o => new { o.NewAgentId, o.name }).ToList();
                return Json(l, 0);
            }

            return View();
        }
        [HttpPost]
        public ActionResult AgentWelcomeLetter(string AgentId)
        {
            List<AgentDetail> list = db.AgentDetails.Where(o => o.NewAgentId == AgentId).ToList();
            foreach (var i in list)
            {
                i.BloodGroup = i.refno;
                if (i.Mobile != i.Mobileno) {
                    i.Mobileno = i.Mobile;
                }
            }
            return PrintReport<AgentDetail>(list, "AgentWelcomeLetter.rpt");

        }

        [HttpGet]
        public ActionResult WelcomeLetter()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult WelcomeLetter(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                List<fullwellcome> dl = new List<fullwellcome>();
                var st = db.appltabs.Single(a => a.newbondid == newbondid);
                if (st.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block!')</script>");
                }
                else
                {
                    ReportDocument rd = new ReportDocument();
                    if (st.mode == "FULL" || st.mode == "PART")
                    {
                        dl = db.Database.SqlQuery<fullwellcome>("select a.paymenttype,a.newmemberid,a.refno,a.loanid,a.phase,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.newintroducerid,a.addr,a.bookingamount,a.mobileno,a.block,a.newbondid from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        dl[0].refno = dl[0].refno.Replace(" HOMES", "/WEL");
                        rd.Load(Path.Combine(Server.MapPath("~/Reports"), "FullWelcomeLetter.rpt"));
                    }
                    else if (st.mode != "FULL" && st.mode != "PART")
                    {
                        dl = db.Database.SqlQuery<fullwellcome>("select a.paymenttype,a.newmemberid,a.refno,a.loanid,a.phase,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.newintroducerid,a.addr,a.mobileno,a.bookingamount,a.payment,a.block,a.newbondid from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        var now = dl[0].formdate;
                        var day = (now.Day % 10 == 1 && now.Day != 11) ? "st"
                          : (now.Day % 10 == 2 && now.Day != 12) ? "nd"
                          : (now.Day % 10 == 3 && now.Day != 13) ? "rd"
                          : "th";
                        day = now.Day.ToString() + day;
                        dl[0].refno = dl[0].refno.Replace(" HOMES", "/WEL");
                        dl[0].day = day;
                        if (st.mode == "CLP") {
                            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "CLPWelcomeLetter.rpt"));
                        }
                        else
                        {
                            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "EMIWelcomeLetter.rpt"));
                        }
                    }
                    else
                    {
                        Response.Write("<script>alert('This Customer is Part Mode. It is Not Allowed To print Welcome Letter')</script>");
                        return View();
                    }
                    rd.SetDataSource(dl);
                    Response.Buffer = false;
                    Response.ClearContent();
                    Response.ClearHeaders();

                    try
                    {
                        Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                        stream.Seek(0, SeekOrigin.Begin);
                        return new FileStreamResult(stream, "application/pdf");
                    }
                    catch (Exception ex)
                    {
                        Response.Write("<script>alert('" + ex.Message + "')</script>");
                    }
                    finally
                    {
                        rd.Close();
                        rd.Dispose();
                    }
                }

                return View();
            }

        }

        [HttpGet]
        public ActionResult AllotMentLetter()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }

            return View();
        }

        [HttpPost]
        public ActionResult AllotMentLetter(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<AllotmentLetter> dl = new List<AllotmentLetter>();
                var st = db.appltabs.Single(a => a.newbondid == newbondid);
                if (st.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block!')</script>");
                }
                else
                {
                    ReportDocument rd = new ReportDocument();
                    
                    //if (st.paymenttype == "EMI")
                    //{
                        dl = db.Database.SqlQuery<AllotmentLetter>("select format (a.formdate,'dd/MM/yyyy') as bookingdate, a.newmemberid customerid,a.name customername,a.addr customeraddress,a.propertyid,a.refno,a.plotno propertyno,m.category,a.incomegroup,a.bookingamount,a.totalcon propertycost,a.planname projectname,a.phase,a.propertytype,a.nolandunit propertyarea,a.block prppertyblock,a.propertyaddress,a.propertypreference,a.plotdesp,a.northeast,a.northwest,a.southeast,a.southwest,i.installmentno,(case when i.installmentno <> 1 then format(i.prevexpirydate,'dd/MM/yyyy') else NULL end) as paymentdate,i.amount installmentamount,i.paymentno,a.northwest,a.northeast,a.southwest,a.southeast,0 from appltab a right join Installmenttab i on a.newbondid=i.newbondid join Member_tab m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "' and i.installmentno>1").ToList();
                        if (dl.Count > 0)
                        {
                           
                            int v = dl.Max(d => d.installmentno);
                            dl[0].installmentno = v;

                            var gender = db.Member_tabs.Single(aa => aa.NewMemberId == st.newmemberid).Gender;
                            dl[0].Gender = "Mr.";
                            dl[0].totalinstallment = dl.Count();
                            if (gender == "Female")
                            {
                                dl[0].Gender = "Mrs.";
                            }
                            
                        }
                        //rd.Load(Server.MapPath("/Reports/EMIAllotmentnew.rpt"));
                        rd.Load(Server.MapPath("/Reports/EMIAllotmentLetter.rpt"));
                        rd.SetDataSource(dl);
                        Response.Buffer = false;
                        Response.ClearContent();
                        Response.ClearHeaders();

                        try
                        {
                            Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            stream.Seek(0, SeekOrigin.Begin);
                            return new FileStreamResult(stream, "application/pdf");
                        }
                        catch (Exception ex)
                        {
                            Response.Write("<script>alert('" + ex.Message + "')</script>");
                        }
                        finally
                        {
                            rd.Close();
                            rd.Dispose();
                        }
                    //}
                    //else {
                        // Response.Write("<script>alert('This id payment is PART type !!');</script>");
                         
                    //}
                return View();
                    /*else if (st.paymenttype == "FULL")
                    {
                        dl = db.Database.SqlQuery<fullwellcome>("select a.newmemberid,a.newbondid,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.projectid,a.newintroducerid,a.addr,a.mobileno,a.bookingamount,a.payment from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        rd.Load(Path.Combine(Server.MapPath("~/Reports"), "EMIWelcomeLetter.rpt"));
                    }
                    */
                    
                }
            }

            return View();
        }
        

        #endregion

        #region Daily Visitor Detail -> Vishal
        [HttpGet]
        public ActionResult DailyVisitorDetail()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }

            return View();
        }

        [HttpPost]
        public ActionResult DailyVisitorDetail(DailyVisitor Model)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                //var username, password;
                //login Credentials 
                NewLogin nl = new NewLogin();
                nl.UserName = Model.ReceptionistName.Substring(0, 3).ToUpper() + Guid.NewGuid().ToString().Substring(0, 3).ToUpper() + DateTime.Now.Date.ToString("ddMM");
                nl.Password = Guid.NewGuid().ToString().Substring(0, 5).ToUpper();
                nl.Mobile = Model.MobileNo;
                nl.type = "Receptionist";
                nl.status = 1;
                nl.loginstatus = 0;
                db.NewLogins.Add(nl);
                int a = db.SaveChanges();

                //data storing 
                DailyVisitor dv = new DailyVisitor();
                dv.ReceptionistId = Model.ReceptionistId;
                dv.ReceptionistName = Model.ReceptionistName;
                dv.MobileNo = Model.MobileNo;
                dv.EmailId = Model.EmailId;
                dv.Address = Model.Address;
                dv.CreatedDate = DateTime.Now.Date;
                dv.CreaderBy = Model.CreaderBy;
                dv.OfficeCode = Model.OfficeCode;
                dv.Status = 1;
                dv.UserName = nl.UserName;
                dv.Password = nl.Password;
                db.DailyVisitors.Add(dv);
                int b = db.SaveChanges();
                if (a == b)
                {
                    ViewBag.msg = "New Receptionist Has Been Created.His/Her Login Id and Password Has Sent On His/Her Mobile Number..Thank You !!";
                    MyClass.Sendmsg(Model.MobileNo, "Dear " + Model.ReceptionistName + ",Thank you for Being a part of " + cg.CompanyName + " Login on " + cg.HeadOffice + " with your user ID as " + nl.UserName + " and password is " + nl.Password + ".");
                }
                else
                {
                    ViewBag.msg = "Something Went Wrong..Try Agian !!";
                }

            }

            return View();
        }



        #endregion

        #region Durgesh
        [HttpGet]
        public ActionResult sendbirthday()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult sendbirthday(DateTime sdate, DateTime edate, string command)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                List<bithdaylist> dwblist = new List<bithdaylist>();
                var type = "";
                if (command == "Customer")
                {
                    type = "Customer";
                }
                if (command == "Associate")
                {
                    type = "Associate";
                }
                dwblist = db.Database.SqlQuery<bithdaylist>("exec sendwishes @type,@sdate,@edate",
                    new SqlParameter("@type", type),
                    new SqlParameter("@sdate", sdate),
                    new SqlParameter("@edate", edate)).ToList();


                stdate = sdate;
                enddate = edate;
                return View(dwblist);

            }
        }

        public JsonResult senwishes(string memberid)
        {
            List<birthdaywishes> list= new List<birthdaywishes>();
            var memebername = "";
            var mobile = "";
            var successsms = "";
            var comp=db.CompanyInfos.Single(x=>x.Id==1);
            var countcustomer = db.appltabs.Where(x => x.newbondid == memberid && x.type == "Customer" && x.mobileno != null).Count();
            var countagent = db.AgentDetails.Where(x => x.NewAgentId == memberid && x.Type == "Agent" && x.Mobile != null).Count();
            if (countcustomer != 0)
            {
                memebername = db.appltabs.Single(x => x.newbondid == memberid && x.type == "Customer" && x.mobileno != null).name;
                mobile = db.appltabs.Single(x => x.newbondid == memberid && x.type == "Customer" && x.mobileno != null).mobileno;

                var sms ="Dear " + memebername + ",On behalf of the entire company I wish you a very happy birthday and send you my best wishes for much happiness in your life. Thanks and regards "+comp.CompanyName+"";
                MyClass.Sendmsg(mobile, sms);
                successsms = "Message send to " + " " + memebername + " successfully";
                list.Add(new birthdaywishes { 
                sms=successsms
                });
            }
            if (countagent != 0)
            {
                memebername = db.AgentDetails.Single(x => x.NewAgentId == memberid && x.Type == "Agent" && x.Mobile != null).name;
                mobile = db.AgentDetails.Single(x => x.NewAgentId == memberid && x.Type == "Agent" && x.Mobile != null).Mobile;

                var sms = "Dear " + memebername + ", On behalf of the entire company I wish you a very happy birthday and send you my best wishes for much happiness in your life. Thanks and regards " + comp.CompanyName + "";
                MyClass.Sendmsg(mobile, sms);

                successsms = "Message send to " + " " + memebername + " successfully";
                list.Add(new birthdaywishes
                {
                    sms = successsms
                });
            }
            else
            {
                successsms = "Error occurred !!";
                list.Add(new birthdaywishes
                {
                    sms = successsms
                });
            }

            return Json(list,JsonRequestBehavior.AllowGet);
        }
        #endregion
        
        #region Amit Receptionist

        public ActionResult ReceptionList()
        {
            var model = db.DailyVisitors.ToList();
            return View(model);
        }
        public ActionResult Visitor_List()
        {
            var model = db.DailyVisitorDetails.ToList();
            return View(model);
        }
        #endregion

        #region 24-Jun-2019


        public JsonResult selectpayment2(int plan, string mode)
        {
            var newplan = db.RateTabs.Single(a => a.Id == plan);

            var plan3 = db.Plans.Single(p3 => p3.Plancode == 3);
            var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
            var plan5 = db.Plans.Single(p5 => p5.Plancode == 5);
            //var plan6 = db.Plans.Single(p6 => p6.Plancode == 6);
            //var plan7 = db.Plans.Single(p7 => p7.Plancode == 7);
            //var plan8 = db.Plans.Single(p8 => p8.Plancode == 8);

            List<PaymentList> installlist = new List<PaymentList>();
            if (mode == "Single" && newplan.shortcutname == "FD" /*|| newplan.shortcutname == plan8.shortcutname*/ || mode == "Single")
            {
                var paymentlist = (from s in db.Fixed_Tabs where s.Plancode == plan select s).ToList();
                foreach (var p in paymentlist)
                {
                    installlist.Add(new PaymentList { payment = p.Amount });
                }

            }
            //else if (newplan.shortcutname == "RD" || newplan.shortcutname == plan6.shortcutname || newplan.shortcutname == plan7.shortcutname)
            //{
            //    var paymentlist = (from s in db.Plan_Tabs where s.Plancode == plan select s).Distinct();

            //    if (mode == "Monthly")
            //    {
            //        foreach (var p in paymentlist)
            //        {
            //            installlist.Add(new PaymentList { payment = p.Monthly });
            //        }
            //    }
            //    else if (mode == "Quarterly")
            //    {
            //        foreach (var p in paymentlist)
            //        {
            //            installlist.Add(new PaymentList { payment = p.Quarterly });
            //        }
            //    }
            //    else if (mode == "Halfyearly")
            //    {
            //        foreach (var p in paymentlist)
            //        {
            //            installlist.Add(new PaymentList { payment = p.Halfyearly });
            //        }
            //    }
            //    else if (mode == "Yearly")
            //    {
            //        foreach (var p in paymentlist)
            //        {
            //            installlist.Add(new PaymentList { payment = p.Yearly });
            //        }
            //    }

            //}
            else if (newplan.shortcutname == plan3.shortcutname)
            {
                var paymentlist = (from s in db.Plan_Tabs where s.Plancode == plan select s).ToList();
                //foreach (var p in paymentlist)
                //{
                //    installlist.Add(new PaymentList { payment = p.daily });
                //}

            }
            else if (newplan.shortcutname == plan4.shortcutname)
            {
                var paymentlist = (from s in db.Pension_Tabs where s.Plancode == plan select s).Distinct();

                if (mode == "Monthly")
                {
                    foreach (var p in paymentlist)
                    {
                        //installlist.Add(new PaymentList { payment = p.Monthly });
                        installlist.Add(new PaymentList { payment = p.Amount });
                    }
                }
                else if (mode == "Quarterly")
                {
                    foreach (var p in paymentlist)
                    {
                        //installlist.Add(new PaymentList { payment = p.Quarterly });
                        installlist.Add(new PaymentList { payment = p.Amount });
                    }
                }
                else if (mode == "Halfyearly")
                {
                    foreach (var p in paymentlist)
                    {
                        //installlist.Add(new PaymentList { payment = p.Halfyearly });
                        installlist.Add(new PaymentList { payment = p.Amount });
                    }
                }
                else if (mode == "Yearly")
                {
                    foreach (var p in paymentlist)
                    {
                        //installlist.Add(new PaymentList { payment = p.Yearly });
                        installlist.Add(new PaymentList { payment = p.Amount });
                    }
                }

            }

            return Json(installlist.OrderBy(a => a.payment), JsonRequestBehavior.AllowGet);
        }

        public JsonResult SelectPlan2(int fno)
        {
            var Planlist = (from pl in db.RateTabs where pl.projectid == fno && pl.status == 1 select new { pl.projectname, pl.Id }).Distinct();
            return Json(Planlist, JsonRequestBehavior.AllowGet);
        }

        public JsonResult selectmode2(int plan, DateTime formdate)
        {
            List<ModeTerm> mtlist = new List<ModeTerm>();
            var pr = db.RateTabs.Single(t => t.Id == plan);            
            int yy = 0;
            int mm = 0;
            DateTime expirydate;

            if ((pr.term.ToString()).Contains("."))
            {
                yy = new System.Version(pr.term.ToString()).Major;
                mm = new System.Version(pr.term.ToString()).Minor;
                DateTime expirydateyy = formdate.AddYears(yy);
                expirydate = expirydateyy.AddMonths(mm);

            }
            else
            {
                int y = Convert.ToInt32(pr.term.ToString());
                expirydate = formdate.AddYears(y);

            }

            if (pr.shortcutname == "RD")
            {

                mtlist.Add(new ModeTerm { mode = "Monthly", term = Math.Round(pr.term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Quarterly", term = Math.Round(pr.term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Halfyearly", term = Math.Round(pr.term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Yearly", term = Math.Round(pr.term, 1), expirydate = expirydate });
            }

            if (pr.shortcutname == "ODH-IP")
            {

                mtlist.Add(new ModeTerm { mode = "Single", term = Math.Round(pr.term, 1), expirydate = expirydate });

            }
            if (pr.shortcutname == "NFP")
            {

                mtlist.Add(new ModeTerm { mode = "Yearly", term = Math.Round(pr.term, 1), expirydate = expirydate });

            }
            if (pr.shortcutname == "PPS")
            {

                mtlist.Add(new ModeTerm { mode = "Monthly", term = Math.Round(pr.term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Quarterly", term = Math.Round(pr.term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Halfyearly", term = Math.Round(pr.term, 1), expirydate = expirydate });
                mtlist.Add(new ModeTerm { mode = "Yearly", term = Math.Round(pr.term, 1), expirydate = expirydate });

            }
            return Json(mtlist, JsonRequestBehavior.AllowGet);
        }



        public JsonResult selectplotsize2(int plan, string planmode, double amount, Double term, DateTime formdate)
        {
            List<CalculateAmount> data = new List<CalculateAmount>();
            NumberToEnglish n = new NumberToEnglish();
            var amountinwords = n.changeToWords(amount.ToString(), true);
            var pt = db.RateTabs.Single(np => np.Id == plan);
            var plan3 = db.Plans.Single(p3 => p3.Plancode == 3);
            var plan4 = db.Plans.Single(p4 => p4.Plancode == 4);
            var plan5 = db.Plans.Single(p5 => p5.Plancode == 5);
            //var plan6 = db.Plans.Single(p6 => p6.Plancode == 6);
            //var plan7 = db.Plans.Single(p7 => p7.Plancode == 7);
            //var plan8 = db.Plans.Single(p8 => p8.Plancode == 8);
            DateTime expirydate;
            int yy = 0;
            int mm = 0;
            if ((term.ToString()).Contains("."))
            {
                yy = new System.Version(term.ToString()).Major;
                mm = new System.Version(term.ToString()).Minor;
                DateTime expirydateyy = formdate.AddYears(yy);
                expirydate = expirydateyy.AddMonths(mm);

            }
            else
            {
                int y = Convert.ToInt32(term.ToString());
                expirydate = formdate.AddYears(y);

            }
            if (pt.shortcutname == "FD" || /*pt.Type == plan8.shortcutname ||*/ planmode == "Single")
            {
                var pr = db.Fixed_Tabs.Single(s => s.Plancode == plan && s.Amount == amount);
                data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate });
                return Json(data, JsonRequestBehavior.AllowGet);
            }
            //else if (pt.Type == "RD" || pt.Type == plan6.shortcutname || pt.Type == plan7.shortcutname)
            //{
            //    if (planmode == "Monthly")
            //    {
            //        var pr = db.Plan_Tabs.Single(s => s.Planname == plan && s.Monthly == amount);
            //        data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate });
            //    }
            //    else if (planmode == "Quarterly")
            //    {
            //        var pr = db.Plan_Tabs.Single(s => s.Planname == plan && s.Quarterly == amount);
            //        data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate });
            //    }
            //    else if (planmode == "Halfyearly")
            //    {
            //        var pr = db.Plan_Tabs.Single(s => s.Planname == plan && s.Halfyearly == amount);
            //        data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate });
            //    }
            //    else if (planmode == "Yearly")
            //    {
            //        var pr = db.Plan_Tabs.Single(s => s.Planname == plan && s.Yearly == amount);
            //        data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate });
            //    }

            //    return Json(data, JsonRequestBehavior.AllowGet);
            //}
            else if (pt.shortcutname == plan3.shortcutname)
            {
                if (planmode == "Daily")
                {
                    var pr = db.Plan_Tabs.Single(s => s.Plancode == plan /*&& s.daily == amount*/);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate });
                }

                return Json(data, JsonRequestBehavior.AllowGet);
            }
            else if (pt.shortcutname == plan4.shortcutname)
            {
                if (planmode == "Monthly")
                {
                    var pr = db.Pension_Tabs.Single(s => s.Plancode == plan && s.Amount == amount);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate, payment = pr.Monthly });
                }
                else if (planmode == "Quarterly")
                {
                    var pr = db.Pension_Tabs.Single(s => s.Plancode == plan && s.Amount == amount);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate, payment = pr.Quarterly });
                }
                else if (planmode == "Halfyearly")
                {
                    var pr = db.Pension_Tabs.Single(s => s.Plancode == plan && s.Amount == amount);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate, payment = pr.Halfyearly });
                }
                else if (planmode == "Yearly")
                {
                    var pr = db.Pension_Tabs.Single(s => s.Plancode == plan && s.Amount == amount);
                    data.Add(new CalculateAmount { amountinwords = amountinwords, totalconsideration = pr.Amount, maturityamount = pr.EstimatedValue, plotsize = pr.Plotsize, expirydate = expirydate, payment = pr.Yearly });
                }

                return Json(data, JsonRequestBehavior.AllowGet);
            }

            return Json(data, JsonRequestBehavior.AllowGet);
        }


        [HttpGet]
        public ActionResult SearchPendingBond()
        {
            List<tempappltab> ad = new List<tempappltab>();
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                return View(ad);
            }
        }
        [HttpPost]
        public ActionResult SearchPendingBond(string NewBondId, string command, string newbondid)
        {
            if (command == "Search")
            {
                List<tempappltab> ad = new List<tempappltab>();
                if (!IsLoggedIn())
                {
                    return RedirectToAction("Logout", "Branch");
                }
                else
                {

                    ad = (from dcl in db.tempappltabs where dcl.newbondid == NewBondId select dcl).ToList();
                    return View(ad);
                }
            }
            else if (command == "PDF")
            {
                var dn = (from a in db.tempappltabs where a.newbondid == newbondid select a).ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Customer.rpt"));
                rd.SetDataSource(dn);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");
                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }

                return View(dn);

            }
            return View();
        }

        #endregion 24-Jun-2019

        [HttpGet]
        public ActionResult agreementmodeEMI()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult agreementmodeEMI(string customerid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var list = db.appltabs.Where(x => x.newbondid == customerid).ToList();
                return View(list);
            }
        }

        [HttpGet]
        public ActionResult agreementmodePART()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                return View();
            }
        }
        [HttpPost]
        public ActionResult agreementmodePART(string customerid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {
                var list = db.appltabs.Where(x => x.newbondid == customerid).ToList();
                return View(list);
            }
        }
        [HttpGet]
        public ActionResult PartAllotMentLetter()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }

            return View();
        }
        [HttpPost]
        public ActionResult PartAllotMentLetter(string newbondid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Admin");
            }
            else
            {

                List<AllotmentLetter> dl = new List<AllotmentLetter>();
                var st = db.appltabs.Single(a => a.newbondid == newbondid);
                if (st.status == 0)
                {
                    Response.Write("<script>alert('This Customer is Block!')</script>");
                }
                else
                {
                    ReportDocument rd = new ReportDocument();
                    if (st.paymenttype.ToUpper() == "Full".ToUpper())
                    {
                        //dl = db.Database.SqlQuery<fullwellcome>("select a.newmemberid,a.newbondid,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.projectid,a.newintroducerid,a.addr,a.mobileno,a.bookingamount,a.payment from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        dl = db.Database.SqlQuery<AllotmentLetter>("select a.newmemberid,a.newbondid,a.name,a.plotno,a.formdate,m.state,m.district,m.pin,a.totalcon,a.projectid,a.newintroducerid,a.addr,a.mobileno,a.bookingamount,a.payment,a.paymenttype,a.chequeno,a.bankname,a.propertyid,a.phaseid,a.block,a.propertytype,a.propertypreference,a.phase,a.propertyaddress,a.northeast,a.northwest,a.southeast,a.southwest,a.planname from appltab as a inner join Member_tab as m on a.newmemberid=m.NewMemberId where a.newbondid='" + newbondid + "'").ToList();
                        rd.Load(Path.Combine(Server.MapPath("~/Reports"), "EMIAllotmentFullpayLetter.rpt"));


                        rd.SetDataSource(dl);
                        Response.Buffer = false;
                        Response.ClearContent();
                        Response.ClearHeaders();

                        try
                        {
                            Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                            stream.Seek(0, SeekOrigin.Begin);
                            return new FileStreamResult(stream, "application/pdf");
                        }
                        catch (Exception ex)
                        {
                            Response.Write("<script>alert('" + ex.Message + "')</script>");
                        }
                        finally
                        {
                            rd.Close();
                            rd.Dispose();
                        }
                    }
                    else
                    {
                        Response.Write("<script>alert('Please Enter Full Payment Customerid!!! ')</script>");
                    }
                }
               
            }

            return View();
        }

        [HttpGet]
        public ActionResult Advance_payment()
        {

            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {

                return View();
            }
        }
        [HttpPost]
        public ActionResult Advance_payment(Member_tab model, Advance_Payment_Tab nt)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var ds = db.Blockdates.Where(c => c.date == model.Cdate && c.branchcode == User.Identity.Name && c.status == 0).Count();
                if (ds > 0)
                {
                    Response.Write("<script>alert('This Date is closed please select another date')</script>");
                }
                else
                {
                    var row1 = db.Branchtabs.Single(c => c.BranchCode == User.Identity.Name);
                    var csrt = db.CompanyInfos.Single(a => a.AdminId == row1.companyid);
                    int max = 0;
                    int count = (from a in db.Member_tabs select a.MemberId).Count();
                    if (count == 0)
                    {
                        max = 1;
                    }
                    else
                    {
                        max = count + 1;
                    }

                    int bwcount = (from a in db.Member_tabs where a.BranchCode == row1.BranchCode select a).Count();
                    var newmemberid = row1.prefix + row1.BranchCode + "/M0" + (bwcount + 1);
                    var MemberName = model.MemberName;

                    var Duplicate = (from o in db.Member_tabs where o.MemberName == model.MemberName && o.Father == model.Father select o).ToList();

                    if (Duplicate.Count > 0)
                    {
                        Response.Write("<script>alert('This Member Already exist ')</script>");
                    }


                    else
                    {
                        //var r = new Member_tab();
                        model.MemberId = max;//
                        model.Reciept_id = gid();
                      
                        model.NewMemberId = newmemberid;//
                        
                        model.BranchCode = User.Identity.Name;//
                        model.Opid = User.Identity.Name;//
                        db.Member_tabs.Add(model);
                        nt.BranchCode = model.BranchCode;
                        nt.Fee = model.Fee;
                        nt.MemberName = model.Father;
                        nt.Mobile = model.Mobile;
                        nt.category = model.category;
                        nt.Nationality = model.Nationality;
                        nt.Cdate = model.Cdate;
                        nt.DOB = model.DOB;
                        nt.Gender = model.Gender;
                        nt.Address = model.Address;
                        nt.state = model.state;
                        nt.District = model.District;
                        nt.Pin = model.Pin;
                        nt.booking_amt = model.booking_amt;
                        nt.paymethod = model.paymethod;
                        nt.remark = model.remark;
                        nt.Recieptid = model.Reciept_id;
                        db.Advance_Payment_Tabs.Add(nt);
                        db.SaveChanges();
                        TempData["aa"] = model.Id;
                        ViewBag.msg = "Dear " + MemberName + "  Your Advance Booking Amount Submitted Successfully....";
                        
                    }
                    MyClass.Sendmsg(model.Mobile,  "Dear " + MemberName + "  Your Advance Booking of Amount Rs." + model.booking_amt + " Submitted Successfully.Thanks and Regards ODH Developers");
                }
                return View();
            }
        }
        public ActionResult PrintAdvance_BookingReport(int id)
        {
            List<Member_tab> bond = new List<Member_tab>();
            bond = db.Member_tabs.Where(x => x.Id == id).ToList();

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "AdvanceBooking.rpt"));
            rd.SetDataSource(bond);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }
            return View();

            
        }
        [HttpGet]
        public ActionResult Advance_payment_listt(Advance_Payment_Tab mt)
        {
            var list = db.Advance_Payment_Tabs.OrderByDescending(x => x.Cdate).ToList(); 
            return View(list);
        }[HttpPost]
        public ActionResult Advance_payment_listt(Advance_Payment_Tab mt,  string Sdate, string Edate,int id=0)
        {
            List<Advance_Payment_Tab> list = new List<Advance_Payment_Tab>();
            if (Sdate != null && Edate != null)
            {
                list = db.Database.SqlQuery<Advance_Payment_Tab>("select * from Advance_Payment_Tab where Cdate>='" + Sdate + "' and Cdate<= '" + Edate + "'").OrderByDescending(x => x.Cdate).ToList();
            }
            if (id == 1)
            {
                list = db.Advance_Payment_Tabs.OrderByDescending(x => x.Cdate).ToList();
            }
            return View(list);
        }
        [HttpGet]
        public ActionResult DealSheet()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }

            return View();
        }
        public JsonResult AutoCompleteAgentid1(string term)
        {

            var list = (from r in db.AgentDetails where r.name.ToLower().Contains(term.ToLower()) select new {  r.name }).Distinct();
            return Json(list, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult DealSheet(DealSheet ds, HttpPostedFileBase intropic)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }

            else
            {
                var countid = db.DealSheets.Where(s => s.userid == ds.userid).Count();
                if (countid > 0)
                {
                    Response.Write("<script>alert('This userid already exist')</script>");
                }
                else
                {
                    string imgname = gid();
                    DealSheet deal = new DealSheet();
                    deal.customername = ds.customername;
                    deal.userid = ds.userid;
                    deal.mobile = ds.mobile;
                    deal.almobile = ds.almobile;
                    deal.email = ds.email;
                    deal.plotcost = ds.plotcost;
                    deal.introducerid = ds.introducerid;
                    deal.extra1 = 0;
                    deal.occupation = ds.occupation;
                    deal.introname = ds.introname;
                    deal.intromobile = ds.intromobile;
                    if (intropic != null)
                    {
                        deal.intropic = "~/Photo/" + imgname + ".jpg";
                        intropic.SaveAs(Server.MapPath("~/Photo/") + imgname + ".jpg");
                    }
                    else
                    {
                        deal.intropic = "~/Photo/No_Display_Image.png";
                    }
                    deal.gender = ds.gender;
                    deal.address = ds.address;
                    deal.state = ds.state;
                    deal.district = ds.district;
                    deal.pincode = ds.pincode;
                    deal.unitno = ds.unitno;
                    deal.unittype = ds.unittype;
                    deal.unitarea = ds.unitarea;
                    deal.phaseno = ds.phaseno;
                    deal.blockno = ds.blockno;
                    deal.unitdimension = ds.unitdimension;
                    deal.preferenceofunit = ds.preferenceofunit;
                    deal.basesaleprice = ds.basesaleprice;
                    deal.preloccharge = ds.preloccharge;
                    deal.cmembershipcharge = ds.cmembershipcharge;
                    deal.pbackupcharge = ds.pbackupcharge;
                    deal.discount = ds.discount;
                    deal.totalunitcost = ds.totalunitcost;
                    deal.validdate = ds.validdate;
                    deal.dealdays = ds.dealdays;
                    deal.introname = ds.introname;
                    deal.occupation = ds.occupation;
                    deal.doj = DateTime.Now.Date;
                    deal.city = ds.city;
                    deal.extra2 = ds.extra2;
                    db.DealSheets.Add(deal);
                    db.SaveChanges();
                    //   MyClass.Sendmsg(deal.mobile, "Dear " + deal.customername + ", Your Voucher for " + monthname + "  has been paid of amount:" + netamount + " on dated:" + DateTime.Now.ToString("dd/MM/yyyy") + " by Admin");
                }
            }
            return View();
        }
        [HttpGet]
        public ActionResult DealSheetDetail()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var list = db.DealSheets.ToList();
                return View(list);
            }

        }

        public ActionResult DealSheetShow(string userid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                var list = db.DealSheets.Single(de => de.userid == userid);
                return View(list);
            }

        }

        public ActionResult PrintDealSheetreport()
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DealSheet> ta = new List<DealSheet>();
                ta = db.DealSheets.ToList();
                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Dealsheetreport.rpt"));
                rd.SetDataSource(ta);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();
                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");


                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();

            }

        }
        public JsonResult getdays(int getday)
        {
            var date = DateTime.Now.Date;
            var caldays = date.AddDays(getday).ToString("dd-MM-yyyy");
            return Json(caldays, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult DealSheetReportbyuserid(string Userid, string Recogniser)
        {
            if (Recogniser == "Print")
            {

                var l = db.DealSheets.Where(o => o.userid.ToUpper().Contains(Userid.ToUpper())).Select(o => new { o.userid, o.customername }).ToList();
                return Json(l, 0);
            }

            return View();
        }
        [HttpPost]
        public ActionResult DealSheetReportbyuserid(string Userid)
        {
            if (!IsLoggedIn())
            {
                return RedirectToAction("Logout", "Branch");
            }
            else
            {
                List<DealSheet> ta = new List<DealSheet>();
                ta = db.DealSheets.Where(d => d.userid == Userid).ToList();

                ReportDocument rd = new ReportDocument();
                rd.Load(Path.Combine(Server.MapPath("~/Reports"), "Dealsheetreportwo.rpt"));
                rd.SetDataSource(ta);

                Response.Buffer = false;
                Response.ClearContent();
                Response.ClearHeaders();


                try
                {
                    Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                    stream.Seek(0, SeekOrigin.Begin);
                    return new FileStreamResult(stream, "application/pdf");


                }
                catch (Exception ex)
                {
                    Response.Write("<script>alert('" + ex.Message + "')</script>");
                }
                finally
                {
                    rd.Close();
                    rd.Dispose();
                }
                return View();
            }
        }
        [HttpGet]
        public ActionResult PossessionReport()
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Logout", "Branch");
            }
            return View();
        }

        [HttpPost]

        public ActionResult PossessionReport(string newbondid)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Logout", "Branch");
            }
            List<PossessionReport> li = new List<PossessionReport>();
            li = db.Database.SqlQuery<PossessionReport>("select * from appltab where newbondid='" + newbondid + "' and status=1").ToList();
            var m1 = new Member_tab();

            if (li.Count() > 0)
            {
                var memberid = li[0].newmemberid;
                m1 = db.Member_tabs.Single(af => af.NewMemberId == memberid);
                li[0].city = m1.District;
                li[0].state = m1.state;
                li[0].pincode = m1.Pin;
            }

            ReportDocument rd = new ReportDocument();
            rd.Load(Path.Combine(Server.MapPath("~/Reports"), "PosessionReport.rpt"));
            rd.SetDataSource(li);

            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();


            try
            {
                Stream stream = rd.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
                stream.Seek(0, SeekOrigin.Begin);

                return new FileStreamResult(stream, "application/pdf");
            }

            catch (Exception ex)
            {
                Response.Write("<script>alert('" + ex.Message + "')</script>");
            }
            finally
            {
                rd.Close();
                rd.Dispose();
            }

            return View(li);
        }
    }
}
